<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AES知道某一轮次密钥反推主密钥</title>
    <url>/2023/01/31/AES%E7%9F%A5%E9%81%93%E6%9F%90%E4%B8%80%E8%BD%AE%E6%AC%A1%E5%AF%86%E9%92%A5%E5%8F%8D%E6%8E%A8%E4%B8%BB%E5%AF%86%E9%92%A5/</url>
    <content><![CDATA[<h4 id="从轮密钥逆推主密钥"><a href="#从轮密钥逆推主密钥" class="headerlink" title="从轮密钥逆推主密钥"></a>从轮密钥逆推主密钥</h4><p>首先讨论AES-128<br>这里用上上篇<a href="https://www.zskkk.cn/2022/12/27/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95AES%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/"><font color="blue">对称加密算法AES原理及分析</font></a>里面用到的密钥<strong>0123456789abcdef0123456789abcdef</strong>生成的10轮子密钥做分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">K00:0123456789abcdef0123456789abcdef</span><br><span class="line">K01:629e9ac0eb35572fea16124863bddfa7</span><br><span class="line">K02:1a00c63bf13591141b23835c789e5cfb</span><br><span class="line">K03:154ac987e47f5893ff5cdbcf87c28734</span><br><span class="line">K04:385dd190dc228903237e52cca4bcd5f8</span><br><span class="line">K05:4d5e90d9917c19dab2024b1616be9eee</span><br><span class="line">K06:c355b89e5229a144e02bea52f69574bc</span><br><span class="line">K07:a9c7dddcfbee7c981bc596caed50e276</span><br><span class="line">K08:7a5fe58981b199119a740fdb7724edad</span><br><span class="line">K09:570a707cd6bbe96d4ccfe6b63beb0b1b</span><br><span class="line">K10:8821df9e5e9a36f31255d04529bedb5e</span><br></pre></td></tr></table></figure>

<p>假如获取到的是K0，那不用说。如果获取到的是K10呢？<br>8821df9e5e9a36f31255d04529bedb5e，首先我们会到W数组的视图，看W10密钥怎么编排出来的<br><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20230131/01.webp"></p>
<p>K10是W40,W41,W42,W43拼起来的，我们已知K10，即已知W40,W41,W42,W43有没有办法求K9？如果可以，那么同理可以逆推到K0，即求得了主密钥<br><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.3ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10740.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(3858.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4247.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(5295.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6295.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(6684.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(6934.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(7506.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7991.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(8442.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(8692.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(9740.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></p>
<p><br>我们不妨先复习一下异或的基本性质，<strong>异或作用与比特位上，对应的比特位相同则为0，相异则为1</strong>。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.954ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4841.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1322,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2258,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2508,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4341.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.954ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4841.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1322,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2258,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2508,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4341.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.954ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4841.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1322,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2258,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2508,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4341.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.954ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4841.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1322,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2258,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2508,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4341.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p>
<p>因为相同为0，相异为1，那么一个数和自身异或时，因为每个比特位都相同，所以结果为0。<br><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.547ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 5545.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mtext" transform="translate(852,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(1102,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1674,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2159,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2610,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2860,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3989.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5045.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container><br>而当某个数和0异或时，自身为0的比特0^0得0，自身为1的比特位1^0得1，这就导致结果和没异或前一样。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.547ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 5545.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mtext" transform="translate(852,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(1102,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1674,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2159,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2610,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2860,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3637.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4693.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> </p>
<p>除此之外，异或并不看谁先谁后，A ^ B 与 B ^ A 显然无区别，即具有交换律。<br></p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="19.411ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 8579.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mtext" transform="translate(852,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(1102,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1674,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2159,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2610,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2860,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3900.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4956.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mtext" transform="translate(5719.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5969.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6541.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7026.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7477.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7727.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></p>
<p><br>看看异或的多角度理解：<a href="https://www.zhihu.com/question/31116687"><font color="blue">如何理解「异或」的含义</font></a>。<br>下面做变换，左右W42异或<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="39.813ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 17597.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(2048,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2298,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(2870,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3355,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(3806,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(4056,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(5104,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6381.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(9485.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(9735.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(10307.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(10792.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(11243.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(11493.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(12541.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(13541.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(13791.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(14363.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(14848.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(15299.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(15549.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(16597.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="27.135ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 11993.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(2048,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2298,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(2870,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3355,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(3806,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(4056,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(5104,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6381.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7437.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(7937.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(8187.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(8759.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9244.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(9695.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(9945.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(10993.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></p>
<p>K10中涉及到的四个式子均可以做变化<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.3ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10740.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(3858.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4247.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(5295.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6295.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(6684.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(6934.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(7506.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7991.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(8442.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(8692.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(9740.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> </p>
<p>K10 = 8821df9e5e9a36f31255d04529bedb5e，切成四块<br></p>
<center>W40 = 8821df9e</center>
<center>W41 = 5e9a36f3</center>
<center>W42 = 1255d045</center>
<center>W43 = 29bedb5e</center>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0x8821df9e</span>^<span class="number">0x5e9a36f3</span>)</span><br><span class="line"><span class="string">'0xd6bbe96d'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0x5e9a36f3</span>^<span class="number">0x1255d045</span>)</span><br><span class="line"><span class="string">'0x4ccfe6b6'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0x1255d045</span>^<span class="number">0x29bedb5e</span>)</span><br><span class="line"><span class="string">'0x3beb0b1b'</span></span><br></pre></td></tr></table></figure>

<p>所以<br>W37 = 0xd6bbe96d<br>W38 = 0x4ccfe6b6<br>W39 = 0x3beb0b1b<br>求出了W37,W38,W39，即K9的后大半部分，和真实情况比对后发现一致。<br>K09:570a707c<strong>d6bbe96d4ccfe6b63beb0b1b</strong><br>那么W36呢？再复习一下g函数吧<br>首先循环左移一字节，3beb0b1b 变成 eb0b1b3b<br>然后逐字节S盒替换，得e92bafe2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SBox = [</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(SBox[<span class="number">0xeb</span>])</span><br><span class="line"><span class="string">'0xe9'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(SBox[<span class="number">0x0b</span>])</span><br><span class="line"><span class="string">'0x2b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(SBox[<span class="number">0x1b</span>])</span><br><span class="line"><span class="string">'0xaf'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(SBox[<span class="number">0x3b</span>])</span><br><span class="line"><span class="string">'0xe2'</span></span><br></pre></td></tr></table></figure>
<p>最后是首字节和Rcon中的一个字节异或，这是最后一次变换，即用0x36</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rcon = [<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>]</span><br></pre></td></tr></table></figure>
<p>即</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0xe9</span>^<span class="number">0x36</span>)</span><br><span class="line"><span class="string">'0xdf'</span></span><br></pre></td></tr></table></figure>
<p>g函数的结果即是0xdf2bafe2<br>那上面W36=g(W39) xor W40 = 0xdf2bafe2 xor 0x8821df9e</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0xdf2bafe2</span>^<span class="number">0x8821df9e</span>)</span><br><span class="line"><span class="string">'0x570a707c'</span></span><br></pre></td></tr></table></figure>
<p>所以完整的K9：570a707cd6bbe96d4ccfe6b63beb0b1b，就被我们分析出来了，跟一开始的K表里的K9是一致的。可以继续往上推出K0，获得主密钥。即AES可以依靠轮密钥逆推出主密钥。严肃的说，AES-128可以通过一轮轮密钥逆推出主密钥，AES-192需要一轮半，AES-256需要两轮轮密钥。</p>
<p>接下来顺便下讨论DES的<br><br>DES密钥长八字节，在密钥编排时，会舍弃每个字节的最后1比特。因此实际参与密钥编排的是56比特，我们可以验证这一点。<br>假设密钥是</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> <span class="number">66</span> <span class="number">77</span> <span class="number">88</span> (<span class="built_in">hex</span>)</span><br></pre></td></tr></table></figure>
<p>二进制即 <br>0001000<strong>1</strong> 0010001<strong>0</strong> 0011001<strong>1</strong> 0100010<strong>0</strong> 0101010<strong>1</strong> 0110011<strong>0</strong> 0111011<strong>1</strong> 1000100<strong>0</strong><br>我们将末尾1比特翻转，即0变1，1变0。如果AES密钥中每个字节的最后一位被“丢弃”，那么翻转后也并不会对程序有任何影响，反之加密结果应该不同。<br>0001000<strong>0</strong> 0010001<strong>1</strong> 0011001<strong>0</strong> 0100010<strong>1</strong> 0101010<strong>0</strong> 0110011<strong>1</strong> 0111011<strong>0</strong> 1000100<strong>1</strong><br>转成十六进制即</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">23</span> <span class="number">32</span> <span class="number">45</span> <span class="number">54</span> <span class="number">67</span> <span class="number">76</span> <span class="number">89</span> (<span class="built_in">hex</span>)</span><br></pre></td></tr></table></figure>
<p>在Cyberchef中，使用这两个密钥进行DES加密，结果完全一致。<br></p>
<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20230131/02.webp"><br><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20230131/03.webp"></p>
<p>对于DES而言，已知<strong>两轮或两轮</strong>以上的<strong>子密钥</strong>，就可逆推出初始密钥，具体代码见 <a href="https://www.freebuf.com/column/219723.html"><font color="blue">DES 子密钥逆推初始密钥</font></a> 一文。对于主密钥中无法复原的八比特，随便补什么都行，反正不影响结果。<br>在实际场景中，当我们需要基于AES/DES的轮密钥恢复主密钥时，我们用 <a href="https://github.com/SideChannelMarvels/Stark"><font color="blue">SideChannelMarvels/Stark</font></a> 这个开源项目，用户体验很好。<br>在另外一些情况中，目标加密算法可以基于某个轮密钥逆推出全体轮密钥，但没法恢复出主密钥，那怎么办呢——这不就是一开始说的吗</p>
<h4 id="轮密钥所处的内存块可区分吗"><a href="#轮密钥所处的内存块可区分吗" class="headerlink" title="轮密钥所处的内存块可区分吗"></a>轮密钥所处的内存块可区分吗</h4><p>首先得考虑一个代码编写的问题，<strong>在大多数加密实现中，出于模块化以及效率的考量，密钥编排作为一个整体性的、前置的步骤，在明文的运算前就被完全算出来。</strong>以AES -128为例，Key 为 16字节，密钥编排后生成11个16字节的轮密钥，这是我们刚学的。很少有程序会在明文运算中，用到了Ki再去编排生成那16字节，而是像我们的Python代码那样，提前生成所有轮密钥，供后续明文运算时使用。在Android Native开发中而言，即K0-K10紧凑的在一块内存中，装在比如 uint8_t RoundKey[176]这样的数组里。我们将全体轮密钥称为轮密钥群，这么叫比较好听。<br>那么如果提供给我们一串字节数据，能否判断其为AES的轮密钥群？这里用上一篇<a href="https://www.zskkk.cn/2023/01/09/%E6%9F%90%E9%B1%BC%E7%9B%B4%E6%92%AD%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8unidbg%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"><font color="blue">某鱼直播软件使用unidbg算法分析</font></a> 里面出面的轮密钥群做样例，比如如下的176字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0000</span>: <span class="number">30</span> <span class="number">29</span> <span class="number">28</span> <span class="number">27</span> <span class="number">26</span> <span class="number">25</span> <span class="number">24</span> <span class="number">23</span> <span class="number">22</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="number">0</span>)(<span class="string">'&amp;%$#"!......</span></span><br><span class="line"><span class="string">0010: 52 4A 4B 44 74 6F 6F 67 56 4E 6F 67 56 4E 6F 67    RJKDtoogVNogVNog</span></span><br><span class="line"><span class="string">0020: 7F E2 CE F5 0B 8D A1 92 5D C3 CE F5 0B 8D A1 92    ........].......</span></span><br><span class="line"><span class="string">0030: 26 D0 81 DE 2D 5D 20 4C 70 9E EE B9 7B 13 4F 2B    &amp;...-] Lp...{.O+</span></span><br><span class="line"><span class="string">0040: 53 54 70 FF 7E 09 50 B3 0E 97 BE 0A 75 84 F1 21    STp.~.P.....u..!</span></span><br><span class="line"><span class="string">0050: 1C F5 8D 62 62 FC DD D1 6C 6B 63 DB 19 EF 92 FA    ...bb...lkc.....</span></span><br><span class="line"><span class="string">0060: E3 BA A0 B6 81 46 7D 67 ED 2D 1E BC F4 C2 8C 46    .....F}g.-.....F</span></span><br><span class="line"><span class="string">0070: 86 DE FA 09 07 98 87 6E EA B5 99 D2 1E 77 15 94    .......n.....w..</span></span><br><span class="line"><span class="string">0080: F3 87 D8 7B F4 1F 5F 15 1E AA C6 C7 00 DD D3 53    ...{.._........S</span></span><br><span class="line"><span class="string">0090: 29 E1 35 18 DD FE 6A 0D C3 54 AC CA C3 89 7F 99    ).5...j..T......</span></span><br><span class="line"><span class="string">00A0: B8 33 DB 36 65 CD B1 3B A6 99 1D F1 65 10 62 68    .3.6e..;....e.bh</span></span><br></pre></td></tr></table></figure>
<p>这个问题有什么意义？<br>一个比较小的作用在于，在重度混淆的样本里，我们没法自上而下的分析逻辑。那么如果发现某个参数指向这么一片内存，我们可能需要办法确认——这是不是编排后的轮密钥？<br><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20230131/01.webp"><br>比较取巧的办法是验证图中橙色部分，验证w5是否等于w4^w1，w6是否等于w5^w2等等。<br>那么比较体系化的办法呢？我们假定上面字节流的最后十六个字节是轮密钥最后一轮，然后逆推出整个轮密钥群，两相对比，如果一致就可确认是否是轮密钥群。<br>在stark中进行验证，传入的参数中，<strong>B833DB3665CDB13BA6991DF165106268</strong>是假设的轮密钥（字节流最后十六字节），10为第几轮。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\Project\c_project\Stark&gt;aes_keyschedule B833DB3665CDB13BA6991DF165106268 10</span><br><span class="line">K00: 30292827262524232221000000000000</span><br><span class="line">K01: 524A4B44746F6F67564E6F67564E6F67</span><br><span class="line">K02: 7FE2CEF50B8DA1925DC3CEF50B8DA192</span><br><span class="line">K03: 26D081DE2D5D204C709EEEB97B134F2B</span><br><span class="line">K04: 535470FF7E0950B30E97BE0A7584F121</span><br><span class="line">K05: 1CF58D6262FCDDD16C6B63DB19EF92FA</span><br><span class="line">K06: E3BAA0B681467D67ED2D1EBCF4C28C46</span><br><span class="line">K07: 86DEFA090798876EEAB599D21E771594</span><br><span class="line">K08: F387D87BF41F5F151EAAC6C700DDD353</span><br><span class="line">K09: 29E13518DDFE6A0DC354ACCAC3897F99</span><br><span class="line">K10: B833DB3665CDB13BA6991DF165106268</span><br></pre></td></tr></table></figure>
<p>比对后可确认一致。AES中还有一个特殊之处，第一轮子密钥就是主密钥，所以密钥就是30292827262524232221000000000000。又因为AES”<strong>第一轮子密钥就是主密钥</strong>“，所以有个更简单和易懂的办法——假设可疑内存块的前十六个字节是主密钥，做密钥编排，对比两者结果是否一致。<br>现在也有开源的工具可以更快找到密钥，这里推荐龙哥的<a href="https://github.com/Pr0214/Unidbg_FindKey"><font color="blue">Unidbg_FindKey</font></a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>App带壳重打包去强制升级</title>
    <url>/2021/04/28/App%E5%B8%A6%E5%A3%B3%E9%87%8D%E6%89%93%E5%8C%85%E5%8E%BB%E5%BC%BA%E5%88%B6%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h3 id="1-查壳"><a href="#1-查壳" class="headerlink" title="1.查壳"></a>1.查壳</h3><p>打开app，弹出强制升级无法取消<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/01.webp"
                     
                ><br /><br>用jadx打开apk<br /></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/02.webp"
                     
                ><br><br /><br>搜索包名，可以看到是加壳了<br /></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/03.webp"
                     
                ></p>
<h3 id="2-使用dexdump进行脱壳"><a href="#2-使用dexdump进行脱壳" class="headerlink" title="2.使用dexdump进行脱壳"></a>2.使用dexdump进行脱壳</h3><p>先打开frida-server，打开objextion并加载dexdump插件，输入plugin  dexdump dump命令进行脱壳，就把dex文件脱出来了<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/04.webp"
                     
                ></p>
<p>进入到dex文件的位置，使用grep -ril “MainActivity” *  命令搜索MainActivity再哪个dex，用jadx打开<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/05.webp"
                     
                ></p>
<h3 id="3-定位到弹窗代码位置"><a href="#3-定位到弹窗代码位置" class="headerlink" title="3.定位到弹窗代码位置"></a>3.定位到弹窗代码位置</h3><p><a class="link"   href="https://www.jianshu.com/p/18e1f518c625" >https://www.jianshu.com/p/18e1f518c625<i class="fas fa-external-link-alt"></i></a><br /><br>根据弹出框的实现方法进行搜索对应的类<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/06.webp"
                     
                ><br /><br>打印出所有的类，然后输入<code>cat .objection/objection.log |grep -i window </code>进行搜索<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/07.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/08.webp"
                     
                ></p>
<p>由于app启动的时候就把弹窗加载出来了，所以要在没加载前hook类<br /><br>使用–startup-command可以重启app并进行hook</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objection -g com.hello.qqc explore --startup-command &quot;android hooking watch class android.view.Window&quot;</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/09.webp"
                     
                ><br /><br>出现很多的window，无法保证加载的类就是弹窗的<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/10.webp"
                     
                ></p>
<p>换一种方式 Dialog<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/11.webp"
                     
                ><br /><br>搜索dialog有哪些类，出来两个比较可疑的<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/12.webp"
                     
                ></p>
<p>先对android.app.Dialog<br>进行hook，看有没有反应<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/13.webp"
                     
                ><br /><br>查看文档发现setCancelable是不让返回，所以点后退一直没反应<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/14.webp"
                     
                >)<br /><br>hook这个类android.app.Dialog.setCancelable 查看调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method android.app.Dialog.setCancelable --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/15.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/16.webp"
                     
                ></p>
<p>用jadx搜索观察cn.net.tokyo.ccg.ui.fragment.dialog.UpdateDialogFragment.onCreateDialog</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/17.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/18.webp"
                     
                ></p>
<p>加载wallbreaker<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/19.webp"
                     
                ><br /><br>搜索该类实例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker objectsearch cn.net.tokyo.ccg.ui.fragment.dialog.UpdateDialogFragment</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/20.webp"
                     
                ><br>查看该对象的属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker objectdump --fullname 0x74e</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/21.webp"
                     
                ></p>
<h3 id="4-查找哪句代码控制弹窗"><a href="#4-查找哪句代码控制弹窗" class="headerlink" title="4.查找哪句代码控制弹窗"></a>4.查找哪句代码控制弹窗</h3><p>查看<code>cn.net.tokyo.ccg.ui.fr agment.dialog.UpdateDialogFragment.b</code> 的调用栈</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking watch class_method cn.net.tokyo.ccg.ui.fragment.dialog.UpdateDialogFragment.b --dump-args --dump-backtrace --dump-return</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/22.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/23.webp"
                     
                ><br /><br>查看对应smail代码，把eqz改为nez<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/24.webp"
                     
                ></p>
<h3 id="5-把壳脱掉重打包看能不能用"><a href="#5-把壳脱掉重打包看能不能用" class="headerlink" title="5.把壳脱掉重打包看能不能用"></a>5.把壳脱掉重打包看能不能用</h3><p>解包，保留dex文件<br /><br><code>apktool -s d qqc.apk</code><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/25.webp"
                     
                ><br /><br>删除class.dex，把脱下来的dex替换进去<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/26.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/27.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/28.webp"
                     
                ></p>
<p>修改dex执行的入口<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/29.webp"
                     
                ><br /><br><code>vim AndroidManifest.xml </code><br /><br>修改为cn.net.tokyo.ccg.base.App<br><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/30.webp"
                     
                ><br /><br>打包，签名<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/31.webp"
                     
                ><br /><br>生成签名，keytool -genkey -keystore my-release-key.keystore -alias my_alias -keyalg RSA -keysize 4096 -validity 10000<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/32.webp"
                     
                ><br /><br>进行签名，jarsigner -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore -signedjar qqc.apk qqc.apk my_alias<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210428/33.webp"
                     
                ><br /><br>安装，看有没有报错，能不能正常使用</p>
<h3 id="6-修改smail文件重打包"><a href="#6-修改smail文件重打包" class="headerlink" title="6.修改smail文件重打包"></a>6.修改smail文件重打包</h3><p>找到对应的smail文件<br /><br>tree -NCfhl |grep -i MainActivity<br /><br>把 if -eqz改为if-nez<br /><br>重打包</p>
]]></content>
      <tags>
        <tag>脱壳</tag>
      </tags>
  </entry>
  <entry>
    <title>App解固脱壳方式</title>
    <url>/2020/10/29/App%E8%A7%A3%E5%9B%BA%E8%84%B1%E5%A3%B3%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p><a class="link"   href="https://www.yuque.com/attachments/yuque/0/2020/zip/2721723/1603962732264-00bfe3f5-1985-44fa-8c02-31050a671665.zip?from=https://www.yuque.com/gongguoshuiwen/whieq5/gceigp%23OJEdd" >样例app下载链接<i class="fas fa-external-link-alt"></i></a></p>
<h2 id="一、常见的壳"><a href="#一、常见的壳" class="headerlink" title="一、常见的壳"></a>一、常见的壳</h2><p>通常是看lib文件夹下so库特征，以下是市面上常见的不同厂商对APP的加固特征：<br />爱加密：libexec.so,libexecmain.so，ijiami.dat <br />梆梆： libsecexe.so,libsecmain.so , libDexHelper.so libSecShell.so<br />360：libprotectClass.so,libjiagu.so，libjiagu_art.so，libjiagu_x86.so <br />百度：libbaiduprotect.so <br />腾讯：libshellx-2.10.6.0.so，libBugly.so，libtup.so, libexec.so，libshell.so，stub_tengxun <br />网易易盾：libnesec.so<br />为什么要加固：<br />     一定程度保护源代码<br />加固方式：<br />    .dex加固 .so加固 </p>
<h2 id="二、加固原理"><a href="#二、加固原理" class="headerlink" title="二、加固原理"></a>二、加固原理</h2><p>壳dex 读取源dex文件，加密后，写进一个新的dex文件<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/01.webp"
                     
                ></p>
<p><br />新APK运行 <br />先加载壳APP—&gt;壳APP读Dex文件末尾的源APKD大小—-&gt;在内存中壳APP解密出源APP—&gt;运行源APP 壳APK有自己的Application对象 <br />源APK有自己的Application对象 <br />壳APK启动时 在AndroidMenifest.xml里找源APK的Application 执行它的oncreate方法 启动源APK <br />Dex文件格式：  任何类型的文件都有文件格式，对应的软件按照文件格式来就能解析出类型，.xml .json .jpeg<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/02.webp"
                     
                ></p>
<h2 id="三、如何查看有没有壳"><a href="#三、如何查看有没有壳" class="headerlink" title="三、如何查看有没有壳"></a>三、如何查看有没有壳</h2><p>用<code>apktool</code>对apk进行反编译，或者修改apk的后缀为zip，进行解压。查看解压后的文件下的lib目录，<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/03.webp"
                     
                ><br><br />可以看到这两个是用了腾讯的乐加固，或者我们不确定的话可以用jadx打开apk，也是可以发现的<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/04.webp"
                     
                ><br><br />都是壳的代码。不过即使怎么加壳，它都会去调源apk的Application，打开<code>AndroidManifest.xml</code>文件，<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/05.webp"
                     
                ><br><br />可以看到，上面一个是壳的，下面是源apk的Application。<br />逆向&#x2F;脱壳方法 <br />反编译&#x2F;Hook技术和动态调试 <br />Hook：先取得要Hook函数&#x2F;方法的控制权，不用破坏程序 <br />动态调试：反调试，汇编，计算内存地址</p>
<h2 id="四、Hook技术"><a href="#四、Hook技术" class="headerlink" title="四、Hook技术"></a>四、Hook技术</h2><p>改变程序执行流程的一种技术 在函数被调用前，通过HOOK技术，先得到该函数的控制权，实现该函数的逻辑改写<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/06.webp"
                     
                ><br />Hook可以在在Java层、Native层（.so库） <br />在代码层 寻找要Hook的地方 进行Hook 改下代码逻辑</p>
<h2 id="五、脱壳工具"><a href="#五、脱壳工具" class="headerlink" title="五、脱壳工具"></a>五、脱壳工具</h2><p><strong>脱壳原理：</strong><br>在壳APK解密源APK后，源APK被加载前，拦截这个过程中的系统函数 把内存种Dex dump出来。<br /></p>
<p><strong>手动脱壳：</strong><br>通过动态调试，跟踪计算Dex源文件的内存偏移地址，从内存中Dump出Dex文件 ，难度大，寄存器，汇编，反调试，反读写  IDA。<br /></p>
<p><strong>工具脱壳：</strong><br />    HOOK技术&#x2F;内存特征寻找  简单易操作  <br /></p>
<p><strong>基于xposed 脱壳工具</strong>：  <br />        Fdex2：Hook ClassLoader loadClass方法 <br />        通用脱壳  dumpDex：<a class="link"   href="https://github.com/WrBug/dumpDex" >https://github.com/WrBug/dumpDex<i class="fas fa-external-link-alt"></i></a><br /><strong>逆向框架：</strong> 筑好底层 提供开发接口<br /><strong>xposed</strong>（Java 编译，只能在java层）  <br /><strong>frida</strong>（Python Javascript 代码注入，可以hook住java层、Native层） </p>
<h2 id="六、开始脱壳（用FDex2脱壳）"><a href="#六、开始脱壳（用FDex2脱壳）" class="headerlink" title="六、开始脱壳（用FDex2脱壳）"></a>六、开始脱壳（用FDex2脱壳）</h2><p>首先我们打开<strong>xposed，</strong>把FDex2打开，并选择我们要的app<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/07.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/08.webp"
                     
                ><br />接下来就可以运行app，然后我们去<code>/data/user/0/com.iCitySuzhou.suzhou001</code>该目录下查看，多出来两个dex文件<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/09.webp"
                     
                ><br><br />把这两个文件拉到电脑用kadx打开，第一个是壳<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/10.webp"
                     
                ><br><br />打开第二个很明显看到这才是源apk的源码，而且可以发现它对源码进行混淆了<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/11.webp"
                     
                ><br><br />所以到这里我们的脱壳就成功了。</p>
<h2 id="七、开始脱壳（用Frida脱壳）"><a href="#七、开始脱壳（用Frida脱壳）" class="headerlink" title="七、开始脱壳（用Frida脱壳）"></a>七、开始脱壳（用Frida脱壳）</h2><h3 id="Frida脱壳"><a href="#Frida脱壳" class="headerlink" title="Frida脱壳"></a>Frida脱壳</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">function_address = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(libname, <span class="keyword">function</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, func);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address,</span><br><span class="line"> <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line"> &#125;</span><br><span class="line">)</span><br><span class="line"><span class="title class_">File</span> 模块 写文件流程</span><br><span class="line"> <span class="keyword">new</span> <span class="title class_">File</span>(filepath, mode)</span><br><span class="line"> <span class="title function_">write</span>(data)</span><br><span class="line"> <span class="title function_">flush</span>()</span><br><span class="line"> <span class="title function_">close</span>()</span><br><span class="line">file = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;yuanrenxue.dex&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line"><span class="comment">//data 是字符串或者 arrayBuffer // readByteArray() 返回的arrayBuffer</span></span><br><span class="line">file.<span class="title function_">write</span>(data)</span><br><span class="line">file.<span class="title function_">flush</span>()</span><br><span class="line">file.<span class="title function_">close</span>()</span><br><span class="line"><span class="comment">//把内存里的值转成字符串</span></span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">readUtf8String</span>()</span><br><span class="line"><span class="comment">//把内存里的值转换成整型</span></span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">readInt</span>()</span><br><span class="line"><span class="comment">//以begin为起始位置，从内存中读length长度的数据出来 返回ArrayBuffer类型</span></span><br><span class="line"><span class="title class_">Memory</span>.<span class="title function_">readByteArray</span>(begin, length)</span><br><span class="line"><span class="comment">//把地址转换成NativePointer类型 frida里操作内存地址需要NativePointer类型</span></span><br><span class="line"><span class="title function_">ptr</span>()</span><br><span class="line"><span class="variable constant_">JS</span> api</span><br><span class="line">#把其它进制转换成<span class="number">10</span>进制</span><br><span class="line"><span class="built_in">parseInt</span>(num, radix)</span><br></pre></td></tr></table></figure>
<p>加壳apk运行流程：app启动后–&gt;壳dex先加载起来–&gt;把源classes.dex读出来–&gt;解密源classes.dex–&gt;把源classes.dex给加载进内存–&gt;源dex运行起来<br />下两篇文章都对dex进行了详解<br />Dex文件格式详解 <a class="link"   href="https://www.jianshu.com/p/f7f0a712ddfe" >https://www.jianshu.com/p/f7f0a712ddfe<i class="fas fa-external-link-alt"></i></a><br />ART 加载dex文件 <a class="link"   href="https://www.jianshu.com/p/f81242ad8cb7" >https://www.jianshu.com/p/f81242ad8cb7<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="dex文件结构"><a href="#dex文件结构" class="headerlink" title="dex文件结构"></a>dex文件结构</h3><table>
<thead>
<tr>
<th><strong>数据名称</strong></th>
<th><strong>解释</strong></th>
</tr>
</thead>
<tbody><tr>
<td>header</td>
<td>dex文件头部，记录整个dex文件的相关属性</td>
</tr>
<tr>
<td>string_ids</td>
<td>字符串数据索引，记录了每个字符串在数据区的偏移量</td>
</tr>
<tr>
<td>type_ids</td>
<td>类似数据索引，记录了每个类型的字符串索引</td>
</tr>
<tr>
<td>proto_ids</td>
<td>原型数据索引，记录了方法声明的字符串，返回类型字符串，参数列表</td>
</tr>
<tr>
<td>field_ids</td>
<td>字段数据索引，记录了所属类，类型以及方法名</td>
</tr>
<tr>
<td>method_ids</td>
<td>类方法索引，记录方法所属类名，方法声明以及方法名等信息</td>
</tr>
<tr>
<td>class_defs</td>
<td>类定义数据索引，记录指定类各类信息，包括接口，超类，类数据偏移量</td>
</tr>
<tr>
<td>data</td>
<td>数据区，保存了各个类的真是数据</td>
</tr>
<tr>
<td>link_data</td>
<td>连接数据区</td>
</tr>
</tbody></table>
<h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p>简单记录了dex文件的一些基本信息，以及大致的数据分布。长度固定为0x70,其中每一项信息所占用的内存空间也是固定的，好处是虚拟机在处理dex时不用考虑dex文件的多样性</p>
<table>
<thead>
<tr>
<th align="center"><strong>字段名称</strong></th>
<th align="center"><strong>偏移值</strong></th>
<th align="center"><strong>长度</strong></th>
<th align="center"><strong>说明</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">magic</td>
<td align="center">0x0</td>
<td align="center">8</td>
<td align="center">魔数字段，值为”dex\</td>
</tr>
<tr>
<td align="center">035\0”（固定的）</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">checksum</td>
<td align="center">0x8</td>
<td align="center">4</td>
<td align="center">校验码</td>
</tr>
<tr>
<td align="center">signature</td>
<td align="center">0xc</td>
<td align="center">20</td>
<td align="center">sha-1签名</td>
</tr>
<tr>
<td align="center">file_size</td>
<td align="center">0x20</td>
<td align="center">4</td>
<td align="center">dex文件总长度</td>
</tr>
<tr>
<td align="center">……</td>
<td align="center">……</td>
<td align="center">…..</td>
<td align="center">……</td>
</tr>
</tbody></table>
<p>字段太多就不都展示出来，可以看到<code>file_size</code>这个就是我们要找的dex文件,因为源dex解密后会加载进内存，所以我们去Hook加载Dex的函数，把Dex从内存中dump出来。<br />下面这个函数就是把解密后的源dex加载进内存：<br />DexFile::OpenMemory(const uint8_t* base,<br />   size_t size,<br />   const std::string&amp; location, <br />   uint32_t location_checksum, <br />   MemMap* mem_map,&#x2F;&#x2F;nullptr const OatDexFile* oat_dex_file, <br />   std::string* error_msg)<br />OpenMemory()是在安卓系统<code>/system/lib/libart.so</code>里面，然后我们先把这个so文件拉到电脑用IDA打开<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/12.webp"
                     
                ><br><br />打开IDA选择静态调试，打开libart.so这个文件<br><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/13.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/14.webp"
                     
                ><br><br />这些就是so文件里面的函数，点击这个框，按ctrl+f进行搜索，输入OpenMemory这个函数，右键进行编辑，<br /><code>_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_</code><br />这个字符串就是OpenMemory函数在内存中对外的方法名，我们打开IDA就是为了找这个方法名。<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/15.webp"
                     
                ></p>
<p>现在来写脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">package = <span class="string">&quot;com.iCitySuzhou.suzhou001&quot;</span></span><br><span class="line"></span><br><span class="line">open_memory_6 = <span class="string">&quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_&quot;</span></span><br><span class="line"><span class="comment">#OpenMemory 在libart.so中  art虚拟机(安卓5)  davlink虚拟机（安卓4）</span></span><br><span class="line"><span class="comment">#Hook OpenMemory的导出方法名</span></span><br><span class="line"><span class="comment">#用IDA 打开libart.so 查看OpenMemory的导出方法名</span></span><br><span class="line"><span class="comment">#OpenMemory的第一个参数是dex文件在内存中的起始位置</span></span><br><span class="line"><span class="comment">#根据dex文件格式 从起始位置开始 第32个字节 是该dex文件的大小</span></span><br><span class="line"><span class="comment">#知道dex起始位置和整个文件大小，只需要把这段内存dum出来即可</span></span><br><span class="line"><span class="comment">#适用于 安卓 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件的起始位置 文件的大小 知道了文件的结束位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_message</span>(<span class="params">message, data</span>):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">src = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">//找so文件某个方法地址，找openMemory的内存地址</span></span><br><span class="line"><span class="string">var openMemory_address = Module.findExportByName(&quot;libart.so&quot;, &quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_&quot;);</span></span><br><span class="line"><span class="string">send(&#x27;openMemory address:&#x27;+openMemory_address)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">//hook openMemory地址</span></span><br><span class="line"><span class="string">Interceptor.attach(openMemory_address, &#123;</span></span><br><span class="line"><span class="string">    //一进入openMemory，就会调用onEnter方法</span></span><br><span class="line"><span class="string">    onEnter: function (args) &#123;</span></span><br><span class="line"><span class="string">        //dex文件的起始位置</span></span><br><span class="line"><span class="string">        var dex_begin_address = args[1]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //dex文件的前8个字节是magic字段 看dex的文件格式说明</span></span><br><span class="line"><span class="string">        //打印magic（会显示 &quot;dex 035&quot;） 三个字符 可以验证是否为dex文件 </span></span><br><span class="line"><span class="string">        console.log(&quot;magic : &quot; + Memory.readUtf8String(dex_begin_address))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //把地址转换成整型（十进制） 再加32 </span></span><br><span class="line"><span class="string">        //因为dex文件的第32个字节处存放的是 dex文件的大小</span></span><br><span class="line"><span class="string">        var address = parseInt(dex_begin_address, 16) + 0x20</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //把address地址指向的内存值读出来 该值就是dex的文件大小</span></span><br><span class="line"><span class="string">        //ptr(address)转换的原因是 frida只接受 NativePointer类型指针</span></span><br><span class="line"><span class="string">        var dex_size = Memory.readInt(ptr(address))</span></span><br><span class="line"><span class="string">        console.log(&quot;dex_size :&quot; + dex_size)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        //frida写文件 把内存中的数据 写到本地</span></span><br><span class="line"><span class="string">        var timestamp = new Date().getTime();</span></span><br><span class="line"><span class="string">        var file = new File(&quot;/data/data/%s/&quot; + timestamp + &quot;.dex&quot;, &quot;wb&quot;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //Memory.readByteArray(begin, length)</span></span><br><span class="line"><span class="string">        //把内存里的数据读出来，从begin开始读，取length长度</span></span><br><span class="line"><span class="string">        file.write(Memory.readByteArray(dex_begin_address, dex_size))</span></span><br><span class="line"><span class="string">        file.flush()</span></span><br><span class="line"><span class="string">        file.close()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        send(&quot;dex begin address:&quot;+parseInt(dex_begin_address,16))</span></span><br><span class="line"><span class="string">        send(&quot;dex file size:&quot;+dex_size)</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    onLeave: function (retval) &#123;</span></span><br><span class="line"><span class="string">        if (retval.toInt32() &gt; 0) &#123;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>%(package)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;dex 导出目录为: /data/data/%s&quot;</span>%(package))</span><br><span class="line">device = frida.get_usb_device()</span><br><span class="line">pid = device.spawn(package)</span><br><span class="line">session = device.attach(pid)</span><br><span class="line">script = session.create_script(src)</span><br><span class="line">script.on(<span class="string">&quot;message&quot;</span> , on_message)</span><br><span class="line">script.load()</span><br><span class="line">device.resume(pid)</span><br><span class="line">sys.stdin.read()</span><br></pre></td></tr></table></figure>
<p>把frida-server运行起来<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/16.webp"
                     
                ><br><br /> <br><br />hook需要app运行，先把app打开，再运行脚本，<br><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/17.webp"
                     
                ><br><br />我们去手机<code>/data/data/com.iCitySuzhou.suzhou001</code>目录下查看，会多了几个dex文件<br><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/18.webp"
                     
                ><br><br />把这些dex文件拉到电脑用jadx打开看下，一个个查看后，找到了源dex<br><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201029/19.webp"
                     
                ><br><br />到这里用frida脱壳也成功了。。。</p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>壳的种类⾮常多，根据其种类不同，使⽤的技术也不同，这⾥稍微简单分个类：</p>
<ul>
<li>⼀代整体型壳：采⽤ Dex 整体加密，动态加载运⾏的机制；</li>
<li>⼆代函数抽取型壳：粒度更细，将⽅法单独抽取出来，加密保存，解密执⾏；</li>
<li>三代 VMP、Dex2C 壳：独⽴虚拟机解释执⾏、语义等价语法迁移，强度最⾼。</li>
</ul>
<p>先说最难的 Dex2C ⽬前是没有办法还原的，只能跟踪进⾏分析； VMP 虚拟机解释执⾏保护的是映射表，只要⼼思细、功夫深，是可以将映射表还原的；</p>
<p>⼆代壳函数抽取⽬前是可以从根本上进⾏还原的， dump 出所有的运⾏时的⽅法体，填充到 dump 下来的 dex 中去的，这也是fart的核⼼原理。</p>
<h3 id="frida-Dexdump"><a href="#frida-Dexdump" class="headerlink" title="frida-Dexdump"></a>frida-Dexdump</h3><p><a class="link"   href="https://github.com/hluwa/FRIDA-DEXDump" >https://github.com/hluwa/FRIDA-DEXDump<i class="fas fa-external-link-alt"></i></a></p>
<p>利⽤ frida 的搜索内存，通过匹配 DEX ⽂件的特征，例如 DEX ⽂件的 文件头 中的 magic — dex.035 这个特征。 frida-Dexdump 便是这种脱壳⽅法的代表作。</p>
<ul>
<li>对于于完整的 dex，采⽤暴⼒搜索 dex035 即可找到。</li>
<li>⽽对于抹头的 dex，通过匹配⼀些特征来找到，然后⾃动修复⽂件头。</li>
</ul>
<p>抽取 -&gt; invoke -&gt; 还原 -&gt; 再抽取</p>
]]></content>
      <tags>
        <tag>脱壳</tag>
      </tags>
  </entry>
  <entry>
    <title>ClassLoader和动态加载</title>
    <url>/2023/10/04/ClassLoader%E5%92%8C%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h3 id="三层类加载器"><a href="#三层类加载器" class="headerlink" title="三层类加载器"></a>三层类加载器</h3><h4 id="1-启动类加载器-Bootstrap-ClassLoader"><a href="#1-启动类加载器-Bootstrap-ClassLoader" class="headerlink" title="1. 启动类加载器  Bootstrap ClassLoader"></a>1. 启动类加载器  Bootstrap ClassLoader</h4><p>负责加载存在放<JAVA_HOME>\lib目录或者-Xbootclasspath指定的路径中存放的类库。比如java.lang、java.uti等这些系统类。<br>启动类加载器无法被java程序直接引用，但可以通过在自定义类加载器时将getClassLoader的返回值设为null  将加载请求委派给启动类加载器处理。</p>
<h4 id="2-扩展类加载器-Extensions-ClassLoader"><a href="#2-扩展类加载器-Extensions-ClassLoader" class="headerlink" title="2. 扩展类加载器  Extensions ClassLoader"></a>2. 扩展类加载器  Extensions ClassLoader</h4><p>它负责加载<JAVA_HOME>\lib\ext目录中或者java.ext.dirs指定的路径下的类库。Java中实现类为ExtClassLoader，提供了除了系统类之外的额外功能，可以在java里获取。</p>
<h4 id="3-应用程序类加载器-Application-ClassLoader"><a href="#3-应用程序类加载器-Application-ClassLoader" class="headerlink" title="3.应用程序类加载器  Application ClassLoader"></a>3.应用程序类加载器  Application ClassLoader</h4><p>负责加载用户类路径上的所有类库。该加载器可以通过ClassLoader的静态方法getSystemLoader获得。<br />java中的实现类为AppClassLoader，与我们接触最多的类加载器，也可以通过ClassLoader.getSystemClassLoader返回。<br /></p>
<h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><p>需要通过继承java.lang.ClassLoader类的方式来实现自己的类加载器即可。<br>加载顺序Bootstrap ClassLoader、Extention ClassLoader、AppClassLoader。</p>
<h3 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h3><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20231004/01.webp"
                     
                ></p>
<p>双亲委派模式的工作原理是如果一个类加载器收到了累加器的请求，他并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。<br /><br>好处：<br>1.避免重复加载，如果已经加载过一次class，可以直接读取已经加载的class。<br>2.更加安全，无法自定义类来替代系统的类，可以防止核心api库被随意篡改。</p>
<p>这种机制天生就给java类划分了带优先级的层次关系，bootstrap classloader优先级最高。假设用户自己写了一个java.lang.object类，在加载时会加载请求会委派给bootstrap classloader，它会去<JAVA_HOME>\lib目录下加载jdk自带的java.lang.object类，这样不管用哪个类加载器去加载java.lang.object都会是同一个类。如果没有双亲委派的话，出现不同的java.lang.object类型，那么java类型体系中最基础的行为都无法保证。</p>
<h3 id="Android系统中的ClassLoader的继承关系"><a href="#Android系统中的ClassLoader的继承关系" class="headerlink" title="Android系统中的ClassLoader的继承关系"></a>Android系统中的ClassLoader的继承关系</h3><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20231004/02.webp"
                     
                ></p>
<p>Android系统中与ClassLoader相关的一共有8个：<br><strong>ClassLoader</strong>为抽象类。<br><strong>BootClassLoader</strong>预加载常用类继承自<strong>ClassLoader</strong>，单例模式。与Java中的<strong>BootClassLoader</strong>不同，并不是由C&#x2F;C++代码实现，而是由Java实现的。<br><strong>BaseDexClassLoader</strong>是<strong>PathCLassLoader</strong>、<strong>DexCLassLoader</strong>、<strong>InMemoryCLassLoader</strong>的父类，类加载器的主要逻辑都是在<strong>BaseDexClassLoader</strong>完成的。<br><strong>SecureClassLoader</strong>继承了抽象类<strong>CLassLoader</strong>，扩展了<strong>ClassLoader</strong>类加入了权限方面的功能，加强了安全性，其子类<strong>URLClassLOader</strong>是用URl路径和jar文件中加载类和资源。<br>其中重点关注<strong>PathCLassLoader</strong>、<strong>DexCLassLoader</strong><br><strong>PathClassLoader</strong>是Android默认使用的类加载器，一个apk中的Activity等类便是在其中加载。<br><strong>DexCLassLoader</strong>可以加载任意目录下的dex&#x2F;jar&#x2F;apl&#x2F;zip文件，比<strong>PathClassLoader</strong>更灵活，是实现插件化，热修复，以及dex加壳的重点。<br>Android8.0新引入<strong>InMemoryDexClassloader</strong>，从名字看出是直接从内存中加载dex<br /></p>
<p>通过查看Android8.0的源码，ClassLoader是一个抽象类，里面还有个parent变量，这是实现双亲委派机制的关键。对于每个继承的ClassLoader的类，都有parent来表示父节点。还定义了final，只能进行一次赋值。对于实现插件化，热修复parent是一个关键的变量。<br>不带参的默认ClassLoader构造函数会将parent指定为systemClassLoader,也就是说在不指定 &lt;父&gt;classloader的情况下，而是每个加载器内部都有一个parent，代表它的父classloader。只有bootstrap classloader的parent为null。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20231004/03.webp"
                     
                ></p>
<p>看下面PathCLassLoader、DexCLassLoader、InMemoryCLassLoader的源码都很少，主要逻辑都是在父类BaseDexClassLoader里。<br><strong>DexClassLoader</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DexClassLoader</span> <span class="keyword">extends</span> <span class="title class_">BaseDexClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> DexClassLoader&#125; that finds interpreted and native</span></span><br><span class="line"><span class="comment">     * code.  Interpreted classes are found in a set of DEX files contained</span></span><br><span class="line"><span class="comment">     * in Jar or APK files.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The path lists are separated using the character specified by the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> path.separator&#125; system property, which defaults to &#123;<span class="doctag">@code</span> :&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath the list of jar/apk files containing classes and</span></span><br><span class="line"><span class="comment">     *     resources, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;, which</span></span><br><span class="line"><span class="comment">     *     defaults to &#123;<span class="doctag">@code</span> &quot;:&quot;&#125; on Android</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> optimizedDirectory directory where optimized dex files</span></span><br><span class="line"><span class="comment">     *     should be written; must not be &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> librarySearchPath the list of directories containing native</span></span><br><span class="line"><span class="comment">     *     libraries, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;; may be</span></span><br><span class="line"><span class="comment">     *     &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory,</span></span><br><span class="line"><span class="params">                          String librarySearchPath, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(dexPath, <span class="keyword">new</span> <span class="title class_">File</span>(optimizedDirectory), librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>PathClassLoader</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathClassLoader</span> <span class="keyword">extends</span> <span class="title class_">BaseDexClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> PathClassLoader&#125; that operates on a given list of files</span></span><br><span class="line"><span class="comment">     * and directories. This method is equivalent to calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #PathClassLoader(String, String, ClassLoader)&#125; with a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125; value for the second argument (see description there).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath the list of jar/apk files containing classes and</span></span><br><span class="line"><span class="comment">     * resources, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;, which</span></span><br><span class="line"><span class="comment">     * defaults to &#123;<span class="doctag">@code</span> &quot;:&quot;&#125; on Android</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(dexPath, <span class="literal">null</span>, <span class="literal">null</span>, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> PathClassLoader&#125; that operates on two given</span></span><br><span class="line"><span class="comment">     * lists of files and directories. The entries of the first list</span></span><br><span class="line"><span class="comment">     * should be one of the following:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;JAR/ZIP/APK files, possibly containing a &quot;classes.dex&quot; file as</span></span><br><span class="line"><span class="comment">     * well as arbitrary resources.</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;Raw &quot;.dex&quot; files (not inside a zip file).</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The entries of the second list should be directories containing</span></span><br><span class="line"><span class="comment">     * native library files.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath the list of jar/apk files containing classes and</span></span><br><span class="line"><span class="comment">     * resources, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;, which</span></span><br><span class="line"><span class="comment">     * defaults to &#123;<span class="doctag">@code</span> &quot;:&quot;&#125; on Android</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> librarySearchPath the list of directories containing native</span></span><br><span class="line"><span class="comment">     * libraries, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;; may be</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PathClassLoader</span><span class="params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(dexPath, <span class="literal">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>InMemoryDexClassLoader</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InMemoryDexClassLoader</span> <span class="keyword">extends</span> <span class="title class_">BaseDexClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create an in-memory DEX class loader with the given dex buffers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexBuffers array of buffers containing DEX files between</span></span><br><span class="line"><span class="comment">     *                       &lt;tt&gt;buffer.position()&lt;/tt&gt; and &lt;tt&gt;buffer.limit()&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader for delegation.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InMemoryDexClassLoader</span><span class="params">(ByteBuffer[] dexBuffers, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(dexBuffers, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new in-memory DEX class loader.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexBuffer buffer containing DEX file contents between</span></span><br><span class="line"><span class="comment">     *                       &lt;tt&gt;buffer.position()&lt;/tt&gt; and &lt;tt&gt;buffer.limit()&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader for delegation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InMemoryDexClassLoader</span><span class="params">(ByteBuffer dexBuffer, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[] &#123; dexBuffer &#125;, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClassLoader</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">thisClassloader</span> <span class="operator">=</span> MainActivity.class.getClassLoader();</span><br><span class="line">    Log.i(<span class="string">&quot;ClassLoaderTag&quot;</span>, <span class="string">&quot;thisClassLoader: &quot;</span> + thisClassloader);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">tmpClassloader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parentClassloader</span> <span class="operator">=</span> thisClassloader.getParent();</span><br><span class="line">    <span class="keyword">while</span> (parentClassloader != <span class="literal">null</span>) &#123;</span><br><span class="line">        Log.i(<span class="string">&quot;ClassLoaderTag&quot;</span>, <span class="string">&quot;this:&quot;</span> + thisClassloader + <span class="string">&quot;---&quot;</span> + parentClassloader);</span><br><span class="line">        tmpClassloader = parentClassloader.getParent();</span><br><span class="line">        thisClassloader = parentClassloader;</span><br><span class="line">        parentClassloader = tmpClassloader;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(<span class="string">&quot;ClassLoaderTag&quot;</span>, <span class="string">&quot;root:&quot;</span> + thisClassloader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// thisClassLoader: dalvik.system.PathClassLoader</span></span><br><span class="line"><span class="comment">// this:dalvik.system.PathClassLoader---java.lang.BootClassLoader@e2f9b5c</span></span><br><span class="line"><span class="comment">// root:java.lang.BootClassLoader@e2f9b5c</span></span><br></pre></td></tr></table></figure>

<h4 id="动态加载dex，调用dex的函数"><a href="#动态加载dex，调用dex的函数" class="headerlink" title="动态加载dex，调用dex的函数"></a>动态加载dex，调用dex的函数</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFunc</span><span class="params">()</span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;DexTestTag&quot;</span>, <span class="string">&quot;i am from com.example.test01.TestClass.testFunc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建个项目编写个测试类，打包apk进行解压把里面的class.dex文件push到&#x2F;sdcard&#x2F;1.dex 命名为1.dex<br>再新建个项目用于加载上面dex文件里面的testFunc函数，用DexClassLoader类去加载dex文件、</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// DexClassLoader方法参数：</span><br><span class="line">// dexPath：目标所在的apk或者jar文件的路径，装载器将从路径中寻找指定的目标类。</span><br><span class="line">// dexOutputDir：由于dex文件在apk或者jar文件中，所以在装载前面前先要从里面解压出dex文件，这个路径就是dex存放的路径，在android系统中，一个应用程序对应一个linux用户id，应用程序只对自己的数据目录有写的权限，所以存放在这个路径。</span><br><span class="line">// libPath：目标类中使用的C/C++库。</span><br><span class="line">// 最后一个参数是该装载器的父装载器，一般为当前类执行的装载器。</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">appContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationContext();</span><br><span class="line">        testDesClassLoader(appContext,  <span class="string">&quot;/sdcard/1.dex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDesClassLoader</span><span class="params">(Context context, String dexFilePath)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">optFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;opt_path&quot;</span>, <span class="number">0</span>);  <span class="comment">// 用于存放优化的dex文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">libFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;lib_path&quot;</span>, <span class="number">0</span>);  <span class="comment">// 用于存放优化的dex文件</span></span><br><span class="line">        <span class="comment">// ClassLoader parentClassLoader = MainActivity.class.getClassLoader();  // 获取当前的类加载器</span></span><br><span class="line">        <span class="comment">// ClassLoader tmpClassLoader = context.getClassLoader();  // 获取当前的类加载器</span></span><br><span class="line">        <span class="comment">// 指定了它的双亲为mainactivety的classloader,这样就可以访问到mainactivety的类</span></span><br><span class="line">        <span class="type">DexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), MainActivity.class.getClassLoader());  <span class="comment">// 创建类加载器</span></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = dexClassLoader.loadClass(<span class="string">&quot;com.example.test01.TestClass&quot;</span>);  <span class="comment">// 加载类</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">testFuncMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;testFunc&quot;</span>);  <span class="comment">// 通过反射获取方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();  <span class="comment">// 创建对象</span></span><br><span class="line">                testFuncMethod.invoke(obj);  <span class="comment">// 调用方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// I/DexTestTag: i am from com.example.test01.TestClass.testFunc</span></span><br></pre></td></tr></table></figure>
<p>还要在AndroidMainfest.xml文件里添加读写sd卡的权限,并在手机设置给应用增加读取文件权限</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这样就实现了dex通过ClassLoader加载进行调用，并指定了MainActivity.class.getClassLoader()，也就是PathClassLoader作为父节点。</p>
]]></content>
      <tags>
        <tag>脱壳</tag>
      </tags>
  </entry>
  <entry>
    <title>HMAC-MD5,HMAC-SHA1算法流程</title>
    <url>/2022/07/06/HMAC-MD5-HMAC-SHA1%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="每种哈希函数的特征"><a href="#每种哈希函数的特征" class="headerlink" title="每种哈希函数的特征"></a>每种哈希函数的特征</h2><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220706/01.webp"
                     
                ></p>
<h3 id="1-MD5"><a href="#1-MD5" class="headerlink" title="1.MD5"></a>1.MD5</h3><p>初始化魔数：<br />A &#x3D; 0x67452301;<br />B &#x3D; 0xEFCDAB89;<br />C &#x3D; 0x98BADCFE;<br />D &#x3D; 0x10325476;<br />K表<br />K1 &#x3D; 0xd76aa478<br />K2 &#x3D; 0xe8c7b756<br />K3 &#x3D; 0x242070db<br />K表来自sin函数<br />输出长度16个字节，或者说32个十六进制数，有时候输出16个十六进制数。</p>
<h3 id="2-SHA1"><a href="#2-SHA1" class="headerlink" title="2.SHA1"></a>2.SHA1</h3><p>A &#x3D; 0x67452301<br />B &#x3D; 0xEFCDAB89<br />C &#x3D; 0x98BADCFE<br />D &#x3D; 0x10325476<br />E &#x3D; 0xC3D2E1F0<br />和MD5相比，有五个初始化链接变量，而且前四个链接变量完全相同。<br />输出长度20个字节，或者说40个十六进制数。<br />只有四个K值，每20轮用同一个K作变换<br />K1 &#x3D; 0x5a827999<br />K2 &#x3D; 0x6ed9eba1<br />K3 &#x3D; 0x8f1bbcdc<br />K4 &#x3D; 0xca62c1d6</p>
<h3 id="3-SHA256"><a href="#3-SHA256" class="headerlink" title="3.SHA256"></a>3.SHA256</h3><p>A &#x3D; 0x6A09E667;<br />B &#x3D; 0xBB67AE85;<br />C &#x3D; 0x3C6EF372;<br />D &#x3D; 0xA54FF53A;<br />E &#x3D; 0x510E527F;<br />F &#x3D; 0x9B05688C;<br />G &#x3D; 0x1F83D9AB;<br />H &#x3D; 0x5BE0CD19;<br />八个初始化链接变量<br />输出长度为32个字节，或者说64个十六进制数<br />有64个K值，每轮1个K值<br />K1 &#x3D; 0x428a2f98<br />K2 &#x3D; 0x71374491<br />K3 &#x3D; 0xb5c0fbcf<br />K4 &#x3D; 0xe9b5dba5<br />K值来自素数</p>
<h3 id="4-SHA-512"><a href="#4-SHA-512" class="headerlink" title="4.SHA 512"></a>4.SHA 512</h3><p>A &#x3D; 0x6a09e667f3bcc908;<br />B &#x3D; 0xbb67ae8584caa73b;<br />C &#x3D; 0x3c6ef372fe94f82b;<br />D &#x3D; 0xa54ff53a5f1d36f1;<br />E &#x3D; 0x510e527fade682d1;<br />F &#x3D; 0x9b05688c2b3e6c1f;<br />G &#x3D; 0x1f83d9abfb41bd6b;<br />H &#x3D; 0x5be0cd19137e2179;<br />八个初始化链接变量，IDA反编译也时常显示为16个。<br />输出长度为64字节，或者说128个十六进制数<br />有80个K，每一轮一个K，K值来自素数。<br />K1 &#x3D; 0x428a2f98d728ae22<br />K2 &#x3D; 0x7137449123ef65cd<br />K3 &#x3D; 0xb5c0fbcfec4d3b2f<br />K4 &#x3D; 0xe9b5dba58189dbbc<br />和SHA256的K有关联。</p>
<h2 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h2><p>HMAC-MD5<br />HMAC-SHA1<br />HMAX-XXX 加盐+双重哈希方案</p>
<h3 id="HMAC-MD5"><a href="#HMAC-MD5" class="headerlink" title="HMAC MD5"></a>HMAC MD5</h3><p>Cyberchef<br />HMAC-MD5<br />明文：123456(utf-8)<br />密文：111111(utf-8)<br />结果：5542af910b1ff3f554dcdfb7ceccebc8</p>
<h4 id="公式："><a href="#公式：" class="headerlink" title="公式："></a>公式：</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220706/02.webp"
                     
                ></p>
<h4 id="第一步（让密钥的长度达到分组长度）："><a href="#第一步（让密钥的长度达到分组长度）：" class="headerlink" title="第一步（让密钥的长度达到分组长度）："></a>第一步（让密钥的长度达到分组长度）：</h4><p>如果密钥长度超过512bit，先进行一次MD5后：16个字节+00000…<br />k &#x3D; 0x313131313131<br />密钥进行扩展<br />MD5: 512比特–64字节–128hex 分组长度<br />（十六进制，128长度）<br />k’&#x3D;0x31313131313100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</p>
<h4 id="第二步（k’⊕opad）："><a href="#第二步（k’⊕opad）：" class="headerlink" title="第二步（k’⊕opad）："></a>第二步（k’⊕opad）：</h4><p>先对opad填充到分组长度<br />0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c<br />进行异或<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220706/03.webp"
                     
                ><br><br />k’⊕opad&#x3D;0x6d6d6d6d6d6d5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c</p>
<h4 id="第三步（k’⊕ipad）："><a href="#第三步（k’⊕ipad）：" class="headerlink" title="第三步（k’⊕ipad）："></a>第三步（k’⊕ipad）：</h4><p>先对ipad填充到分组长度<br />0x36363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636<br />进行异或<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220706/04.webp"
                     
                ><br><br />k’⊕ipad&#x3D;0x07070707070736363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636</p>
<h4 id="第四步级联明文（-k’⊕ipad-m）"><a href="#第四步级联明文（-k’⊕ipad-m）" class="headerlink" title="第四步级联明文（(k’⊕ipad)||m）:"></a>第四步级联明文（(k’⊕ipad)||m）:</h4><p>(k’⊕ipad)||m&#x3D;0x07070707070736363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636313233343536</p>
<h4 id="第五步级联后进行md5（H-k’⊕ipad-m-）"><a href="#第五步级联后进行md5（H-k’⊕ipad-m-）" class="headerlink" title="第五步级联后进行md5（H((k’⊕ipad)||m)）:"></a>第五步级联后进行md5（H((k’⊕ipad)||m)）:</h4><p>级联后进行一次md5（不需要转hex）<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220706/05.webp"
                     
                ><br />H((k’⊕ipad)||m)&#x3D;873883125b81d8d9b483f29cffeeea37</p>
<h4 id="第六步（第二步级联第五步后进行md5，H-k’⊕opad-H-k’⊕ipad-m-）"><a href="#第六步（第二步级联第五步后进行md5，H-k’⊕opad-H-k’⊕ipad-m-）" class="headerlink" title="第六步（第二步级联第五步后进行md5，H((k’⊕opad)||H((k’⊕ipad)||m)）"></a>第六步（第二步级联第五步后进行md5，H((k’⊕opad)||H((k’⊕ipad)||m)）</h4><p>0x6d6d6d6d6d6d5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c873883125b81d8d9b483f29cffeeea37<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220706/06.webp"
                     
                ><br />结果：5542af910b1ff3f554dcdfb7ceccebc8<br />结果跟Cyberchef的HMAC-MD5一致</p>
<h3 id="HMAC-SHA1"><a href="#HMAC-SHA1" class="headerlink" title="HMAC SHA1"></a>HMAC SHA1</h3><p>Cyberchef<br />HMAC-SHA1<br />明文：helloword(utf-8)<br />密文：1111(hex)<br />结果：4ea30551db501b285a03a197c65fea249131b808</p>
<h4 id="第一步（让密钥的长度达到分组长度）：-1"><a href="#第一步（让密钥的长度达到分组长度）：-1" class="headerlink" title="第一步（让密钥的长度达到分组长度）："></a>第一步（让密钥的长度达到分组长度）：</h4><p>如果密钥长度超过512bit，先进行一次SHA1后：16个字节+00000…<br />k &#x3D; 0x1111<br />密钥进行扩展<br />SHA1: 512比特–64字节–128hex 分组长度<br />（十六进制，128长度）<br />k’&#x3D;0x11110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</p>
<h4 id="第二步（k’⊕opad）：-1"><a href="#第二步（k’⊕opad）：-1" class="headerlink" title="第二步（k’⊕opad）："></a>第二步（k’⊕opad）：</h4><p>异或0x5c<br />先对opad填充到分组长度<br />0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c<br />然后进行异或<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220706/07.webp"
                     
                ><br />k’⊕opad&#x3D;0x4d4d5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c</p>
<h4 id="第三步（k’⊕ipad）：-1"><a href="#第三步（k’⊕ipad）：-1" class="headerlink" title="第三步（k’⊕ipad）："></a>第三步（k’⊕ipad）：</h4><p>异或0x36<br />先对ipad填充到分组长度<br />0x3636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636<br />进行异或<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220706/08.webp"
                     
                ><br />k’⊕ipad&#x3D;0x27273636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636</p>
<h4 id="第四步级联明文（-k’⊕ipad-m）-1"><a href="#第四步级联明文（-k’⊕ipad-m）-1" class="headerlink" title="第四步级联明文（(k’⊕ipad)||m）:"></a>第四步级联明文（(k’⊕ipad)||m）:</h4><p>(k’⊕ipad)||m&#x3D;0x2727363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363668656c6c6f776f7264</p>
<h4 id="第五步级联后进行sha1（H-k’⊕ipad-m-）"><a href="#第五步级联后进行sha1（H-k’⊕ipad-m-）" class="headerlink" title="第五步级联后进行sha1（H((k’⊕ipad)||m)）:"></a>第五步级联后进行sha1（H((k’⊕ipad)||m)）:</h4><p>级联后进行一次sha1（不需要转hex）<br />H((k’⊕ipad)||m)&#x3D;aea39b30d6922fdbb1848fe3a49bd130ed337f77</p>
<h4 id="第六步（第二步级联第五步后进行sha1，H-k’⊕opad-H-k’⊕ipad-m-）"><a href="#第六步（第二步级联第五步后进行sha1，H-k’⊕opad-H-k’⊕ipad-m-）" class="headerlink" title="第六步（第二步级联第五步后进行sha1，H((k’⊕opad)||H((k’⊕ipad)||m)）"></a>第六步（第二步级联第五步后进行sha1，H((k’⊕opad)||H((k’⊕ipad)||m)）</h4><p>级联(k’⊕opad)||H((k’⊕ipad)||m)&#x3D;0x4d4d5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5caea39b30d6922fdbb1848fe3a49bd130ed337f77<br />4ea30551db501b285a03a197c65fea249131b808</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一步k值填充到块长度(md5和sha1是512bit，128hex)称为k’<br />第二步k’与0x36异或后拼接明文的hex，进行原函数哈希（如hmac md5就进行一次md5，hmac sha1就进行一次sha1）<br />第三步k’与0x5c异或后拼接第二步再进行一次原函数哈希</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida&amp;反调试&amp;反反调试</title>
    <url>/2021/08/01/Frida-%E5%8F%8D%E8%B0%83%E8%AF%95-%E5%8F%8D%E5%8F%8D%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h3 id="操作Frida的两种模式：命令，rpc"><a href="#操作Frida的两种模式：命令，rpc" class="headerlink" title="操作Frida的两种模式：命令，rpc"></a>操作Frida的两种模式：命令，rpc</h3><h3 id="Frida两种操作APP模式：spawn，attach"><a href="#Frida两种操作APP模式：spawn，attach" class="headerlink" title="Frida两种操作APP模式：spawn，attach"></a>Frida两种操作APP模式：spawn，attach</h3><p>attach：应用运行中hook，有壳也是没问题的<br />spawn：创建进程时就hook，有壳的话就不行</p>
<h3 id="反调试Frida"><a href="#反调试Frida" class="headerlink" title="反调试Frida"></a>反调试Frida</h3><p>1.查看&#x2F;data&#x2F;local&#x2F;usr是否firda文件<br />2.端口20742是否开启<br />3.进程中是否有frida<br />4.检测内存trate是否开启，因为frida调试会显示true，解决方法：使用spawn模式hook检测trate的方法，返回false</p>
<h3 id="三板斧："><a href="#三板斧：" class="headerlink" title="三板斧："></a>三板斧：</h3><ol>
<li>先hook、看参数和返回值：定位：命令行</li>
<li>再构造参数、主动调用：利用：命令行</li>
<li>最后配RPC导出结果：规模化利用：PYTHON</li>
</ol>
<h2 id="作弊检测"><a href="#作弊检测" class="headerlink" title="作弊检测"></a>作弊检测</h2><h4 id="1-检测是否存在危险APP包名"><a href="#1-检测是否存在危险APP包名" class="headerlink" title="1.检测是否存在危险APP包名"></a>1.检测是否存在危险APP包名</h4><p>主要检测hook框架，模拟点击工具，xposed，magisk，supersu等root工具</p>
<h4 id="2-一些设备常规信息，比如电量状态，usb状态，屏幕亮度，地理位置，wifi或者sim卡信息，ip，mac等。"><a href="#2-一些设备常规信息，比如电量状态，usb状态，屏幕亮度，地理位置，wifi或者sim卡信息，ip，mac等。" class="headerlink" title="2.一些设备常规信息，比如电量状态，usb状态，屏幕亮度，地理位置，wifi或者sim卡信息，ip，mac等。"></a>2.一些设备常规信息，比如电量状态，usb状态，屏幕亮度，地理位置，wifi或者sim卡信息，ip，mac等。</h4><p>一般批量操作或者抹机操作的时候这些值更改难度和成本比较大，所以这些指标能伪造会大大降低被风控</p>
<h4 id="3-APP加壳"><a href="#3-APP加壳" class="headerlink" title="3.APP加壳"></a>3.APP加壳</h4><h4 id="4-手机系统usr-x2F-local-x2F-tmp下是否有frida，端口27042是否开着，TracerPid值是否在调试状态（京东9-22）"><a href="#4-手机系统usr-x2F-local-x2F-tmp下是否有frida，端口27042是否开着，TracerPid值是否在调试状态（京东9-22）" class="headerlink" title="4.手机系统usr&#x2F;local&#x2F;tmp下是否有frida，端口27042是否开着，TracerPid值是否在调试状态（京东9.22）"></a>4.手机系统usr&#x2F;local&#x2F;tmp下是否有frida，端口27042是否开着，TracerPid值是否在调试状态（京东9.22）</h4><h4 id="5-参数签名、参数加密，把加密参数放在native层，native层ollvm编译"><a href="#5-参数签名、参数加密，把加密参数放在native层，native层ollvm编译" class="headerlink" title="5.参数签名、参数加密，把加密参数放在native层，native层ollvm编译"></a>5.参数签名、参数加密，把加密参数放在native层，native层ollvm编译</h4><h4 id="6-异常上报sdk"><a href="#6-异常上报sdk" class="headerlink" title="6.异常上报sdk"></a>6.异常上报sdk</h4><p>异常上报sdk一般记录运行时所有的异常情况，并且会记录设备指纹，通过这些也能检测到作弊的一些设备。</p>
<h4 id="7-私有网络协议、protobuf等协议、私有网络证书、反代理抓包"><a href="#7-私有网络协议、protobuf等协议、私有网络证书、反代理抓包" class="headerlink" title="7.私有网络协议、protobuf等协议、私有网络证书、反代理抓包"></a>7.私有网络协议、protobuf等协议、私有网络证书、反代理抓包</h4><p>目前比较流行protobuf协议替代json，还有一些私有TCP&#x2F;Socket协议，这些协议不可直接读，需要一个解析工具或者分析还原。私有网络证书需要证书密钥配合代理抓包工具才能抓包分析，这种其实难度在于找到证书密钥和判断是否用了私有证书，一般聊天APP的IM协议常用。还有反代理抓包，比如集成OkHttp框架等的时候用Proxy.NO_Proxy来防止抓包。</p>
<h2 id="反反作弊方法及思路"><a href="#反反作弊方法及思路" class="headerlink" title="反反作弊方法及思路"></a>反反作弊方法及思路</h2><h4 id="1-搜集设备指纹"><a href="#1-搜集设备指纹" class="headerlink" title="1.搜集设备指纹"></a>1.搜集设备指纹</h4><p>如数美易盾或者一些大的app都会内嵌搜集设备指纹的模块，通过设备指纹来确定设备的唯一性，如imei、android_id、mac、其他设备信息结合起来就能变成一个唯一的标志。</p>
<h4 id="2-搜集IP、MAC地址、蓝牙MAC、WIFI等网络指纹"><a href="#2-搜集IP、MAC地址、蓝牙MAC、WIFI等网络指纹" class="headerlink" title="2.搜集IP、MAC地址、蓝牙MAC、WIFI等网络指纹"></a>2.搜集IP、MAC地址、蓝牙MAC、WIFI等网络指纹</h4><p>大量的搜集后跟其他搜集的信息结合并且不断地完善代理ip和黑ip、mac库，就能不断地能识别作弊源头。</p>
<h4 id="3-地理位置、下载渠道、授权登录"><a href="#3-地理位置、下载渠道、授权登录" class="headerlink" title="3.地理位置、下载渠道、授权登录"></a>3.地理位置、下载渠道、授权登录</h4><p>地理位置和ip是否对应、基站信息是否对应、或者设备型号跟下载渠道对应、一般小米手机的软件大部分应该小米商城下载的，比如微信授权登录，QQ授权登录等、如果模拟授权登录需要破解其他给权的APP的一些协议。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a><a href="https://bbs.pediy.com/thread-263203.htm#5.%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E3%80%81protobuf%E7%AD%89%E5%8D%8F%E8%AE%AE%E3%80%81%E7%A7%81%E6%9C%89%E7%BD%91%E7%BB%9C%E8%AF%81%E4%B9%A6%E3%80%81%E5%8F%8D%E4%BB%A3%E7%90%86%E6%8A%93%E5%8C%85"><br /></a></h4><h4 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="https://bbs.pediy.com/thread-263203.htm#6.dex%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86%EF%BC%8Cnative%E5%B1%82ollvm%E7%BC%96%E8%AF%91%E3%80%81webview%E7%9A%84js%E6%B7%B7%E6%B7%86"><br /></a></h4><h2 id="反反作弊工具和策略"><a href="#反反作弊工具和策略" class="headerlink" title="反反作弊工具和策略"></a>反反作弊工具和策略</h2><h4 id="1-逆向工具"><a href="#1-逆向工具" class="headerlink" title="1.逆向工具"></a>1.逆向工具</h4><ul>
<li>java：dex2jar,jadx,jeb,android-killer等等很多</li>
<li>so文件：IDA,jeb,Gidra</li>
<li>js：其实nodejs加谷歌或者火狐就能搞定</li>
<li>其他：unicorn,unidibug等基于qemu虚拟机的工具</li>
</ul>
<h4 id="2-抓包工具"><a href="#2-抓包工具" class="headerlink" title="2.抓包工具"></a>2.抓包工具</h4><ul>
<li>Charles、Fillder：这两个其实差不多，用于http、websocket等应用层抓包</li>
<li>WireShark：各种协议都能支持，需要更深入的网络协议技术基础</li>
<li>BurpSuite：可以开发一些插件，会开发就各种神操作把。</li>
</ul>
<h4 id="3-hook框架"><a href="#3-hook框架" class="headerlink" title="3.hook框架"></a>3.hook框架</h4><ul>
<li>xposed：用户比较多，尤其云控、群控、那些化妆品，教育类、保险等销售类的都在用，市场规模大。</li>
<li>frida：一般开发者使用的多，快，无需重启，会js就会玩吧。</li>
<li>cydia：hook Native层的时候多一点，老开发者用的多。</li>
<li>inlinehook，xhook：这两个类似，inlinehook多用于hook b跳转的，xhook多用于系统函数。</li>
<li>magisk:安卓8以上xposed或者其他一些证书安装等工具都基于这个，这个其实未来深入研究的东西。4.模拟点击</li>
<li>uiautomator ：很多模拟点击软件基于这个，跟xposed结合开发比较合适，理解安卓开发的入门比较简单。</li>
</ul>
<h3 id="5-行业难度"><a href="#5-行业难度" class="headerlink" title="5.行业难度"></a>5.行业难度</h3><ul>
<li>ollvm混淆：逆向行业目前应该最头疼的就这个吧，主要原理时if-else改成while(true){switch() case:}了，但是逆向成本变高了，并且各种延申的东西越来越多，需要经验和技术积累才能100%还原或破解。</li>
</ul>
<h4 id="机器学习风控策略：这个没有多年经验或者没有相当长的时间去摸索或者没跟班一个APP的成长的话很难对应，并且大部分都是通过养号，养设备等方式去对应，还有的是破解协议，并且伪造大量的设备信息，通过IP代理池，卡商和打码平台等第三方服务来维持。不过随着法律的完善和APP自身的风控体系健全对应成本越来越高，现在很难实现大批量账号登录注册。"><a href="#机器学习风控策略：这个没有多年经验或者没有相当长的时间去摸索或者没跟班一个APP的成长的话很难对应，并且大部分都是通过养号，养设备等方式去对应，还有的是破解协议，并且伪造大量的设备信息，通过IP代理池，卡商和打码平台等第三方服务来维持。不过随着法律的完善和APP自身的风控体系健全对应成本越来越高，现在很难实现大批量账号登录注册。" class="headerlink" title="机器学习风控策略：这个没有多年经验或者没有相当长的时间去摸索或者没跟班一个APP的成长的话很难对应，并且大部分都是通过养号，养设备等方式去对应，还有的是破解协议，并且伪造大量的设备信息，通过IP代理池，卡商和打码平台等第三方服务来维持。不过随着法律的完善和APP自身的风控体系健全对应成本越来越高，现在很难实现大批量账号登录注册。"></a>机器学习风控策略：这个没有多年经验或者没有相当长的时间去摸索或者没跟班一个APP的成长的话很难对应，并且大部分都是通过养号，养设备等方式去对应，还有的是破解协议，并且伪造大量的设备信息，通过IP代理池，卡商和打码平台等第三方服务来维持。不过随着法律的完善和APP自身的风控体系健全对应成本越来越高，现在很难实现大批量账号登录注册。</h4><h3 id="检测是否root"><a href="#检测是否root" class="headerlink" title="检测是否root"></a>检测是否root</h3><p><a class="link"   href="https://github.com/sensepost/objection/blob/e7eb1d9b769edf6a98870c75a6d2a6123b7346fd/agent/src/android/root.ts" >https://github.com/sensepost/objection/blob/e7eb1d9b769edf6a98870c75a6d2a6123b7346fd/agent/src/android/root.ts<i class="fas fa-external-link-alt"></i></a><br />通过命令行输入su看是否有返回<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210801/01.webp"
                     
                ></p>
]]></content>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>Hook抓包</title>
    <url>/2021/09/01/Hook%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p>Hook抓包核心思想：数据包在明文状态下的一切时机进行dump</p>
<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>使用socket实现原生的请求<br>新建一个安卓项目，在mainactivity里添加</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                httpsock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">httpsock</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;www.httpbin.org&quot;</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/get&quot;</span>;</span><br><span class="line">            <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(host, port);</span><br><span class="line"></span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            sb.append(<span class="string">&quot;GET &quot;</span> + path + <span class="string">&quot; HTTP/1.1\r\n&quot;</span>);</span><br><span class="line">            sb.append(<span class="string">&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\r\n&quot;</span>);</span><br><span class="line">            sb.append(<span class="string">&quot;Host: &quot;</span>+ host+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">            sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">            outputStream.write(sb.toString().getBytes());</span><br><span class="line"></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(buffer, <span class="number">0</span>, buffer.length)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                Log.d(<span class="string">&quot;response==&gt;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(Arrays.copyOf(buffer, len)));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行一下<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/01.webp"
                     
                ></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这是socket发送http请求的数据包，把数据包写进outputStream后进行发送，outputStream是socket对象的方法，先看一下socket的实现。跟进一下socket的实现</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/02.webp"
                     
                ></p>
<p>这些都是实现的接口，要找到实现的地方，跟进setImpl方法</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/03.webp"
                     
                ></p>
<p>可以看到impl是实例对象，这里有分支，先看一下factory，在该文件搜索factory &#x3D; ，看被什么赋值了，</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/04.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/05.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/06.webp"
                     
                ><br>看到两次赋值的值都是null，所以走else，跟进 SocksSocketImpl();，这里就到socket实现的地方。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/07.webp"
                     
                ></p>
<p>进行搜索getOutputStream()方法实现的地方，发现没有找到，那就是存在父类了，跟进父类PlainSocketImpl。<br>再次搜索没有，再跟进它的父类AbstractPlainSocketImpl</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/08.webp"
                     
                ></p>
<p>再搜索，发现找到了getOutputStream()实现的地方，两个if都是抛出异常，看第三个if，跟进SocketOutputStream()，</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/09.webp"
                     
                ><br>找到了SocketOutputStream()对象的地方，搜索write()方法，参数是字节</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/10.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/11.webp"
                     
                ><br>跟进socketWrite()，调用了socketWrite0()方法，跟进</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/12.webp"
                     
                ><br>可以看到该方法在native层。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/13.webp"
                     
                ></p>
<h3 id="frida抓包"><a href="#frida抓包" class="headerlink" title="frida抓包"></a>frida抓包</h3><p>跟到socketWrite0()这里，应该是java层最底层了，hook socketWrite0尝试下</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//Http request</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketOutputStream&quot;</span>).<span class="property">socketWrite0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">fd,bytes,off,len</span>)&#123;</span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">socketWrite0</span>(fd,bytes,off,len)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 打印字节数组</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">hexdump</span>(<span class="params">bytearry,offset,length</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">HexDump</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HexDump</span>.<span class="title function_">dumpHexString</span>(bytearry,offset,length))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p>运行frida，运行脚本，成功抓到包<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/14.webp"
                     
                ><br>再完善一下，添加请求地址，堆栈</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//Http request</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketOutputStream&quot;</span>).<span class="property">socketWrite0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">fd,bytes,off,len</span>)&#123;</span><br><span class="line">            <span class="comment">// 地址</span></span><br><span class="line">            <span class="title function_">printAddress</span>(<span class="variable language_">this</span>.<span class="property">socket</span>, <span class="literal">true</span>)</span><br><span class="line">            <span class="comment">// 请求</span></span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len)</span><br><span class="line">            <span class="comment">// 堆栈</span></span><br><span class="line">            <span class="title function_">showStacks</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">socketWrite0</span>(fd,bytes,off,len)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">printAddress</span>(<span class="params">socket, isSend</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> localAddress = socket.<span class="property">value</span>.<span class="title function_">getLocalAddress</span>().<span class="title function_">toString</span>()</span><br><span class="line">            <span class="keyword">var</span> remoteAddress = socket.<span class="property">value</span>.<span class="title function_">getRemoteSocketAddress</span>().<span class="title function_">toString</span>()</span><br><span class="line">            <span class="keyword">if</span>(isSend)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(localAddress +<span class="string">&quot;====&gt;&quot;</span>+ remoteAddress)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(remoteAddress +<span class="string">&quot;====&gt;&quot;</span>+ localAddress)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">hexdump</span>(<span class="params">bytearry,offset,length</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">HexDump</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HexDump</span>.<span class="title function_">dumpHexString</span>(bytearry,offset,length))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p>请求地址，堆栈都打印了<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/15.webp"
                     
                ><br>现在知识完成request部分，还有response</p>
<h2 id="response"><a href="#response" class="headerlink" title="response"></a>response</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>接受数据是InputStream，调用的是socket的getInputStream，getInputStream和getOuputStream是成对出现的，按着刚才的思路可以找到。或者，socketWrite0()是在SocketOutputStream，那么socketRead0()就是在SocketInputStream里。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/16.webp"
                     
                ></p>
<h3 id="frida抓包-1"><a href="#frida抓包-1" class="headerlink" title="frida抓包"></a>frida抓包</h3><p>用Frida hook试试，再之前的代码上添加</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Http response</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.SocketInputStream&quot;</span>).<span class="property">socketRead0</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">fd,bytes,off,len,timeout</span>)&#123;</span><br><span class="line">    <span class="title function_">printAddress</span>(<span class="variable language_">this</span>.<span class="property">socket</span>, <span class="literal">true</span>)</span><br><span class="line">    <span class="title function_">hexdump</span>(bytes,off,len)</span><br><span class="line">    <span class="title function_">showStacks</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">socketRead0</span>(fd,bytes,off,len,timeout)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也是成功抓到返回的数据<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/17.webp"
                     
                ><br>HTTP通用的收发包都抓到了，那HTTPS的呢</p>
<h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h2 id="request-1"><a href="#request-1" class="headerlink" title="request"></a>request</h2><p>也是一样，创建一个HTTPS的请求</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> <span class="string">&quot;www.httpbin.org&quot;</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">443</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/get&quot;</span>;</span><br><span class="line">    <span class="type">SSLSocketFactory</span> <span class="variable">sslSocketFactory</span> <span class="operator">=</span> (SSLSocketFactory) SSLSocketFactory.getDefault();</span><br><span class="line">    <span class="type">SSLSocket</span> <span class="variable">socket</span> <span class="operator">=</span> (SSLSocket) sslSocketFactory.createSocket(host, port);</span><br><span class="line"></span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    sb.append(<span class="string">&quot;GET &quot;</span> + path + <span class="string">&quot; HTTP/1.1\r\n&quot;</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\r\n&quot;</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;Host: &quot;</span>+ host+<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    sb.append(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">    Log.d(<span class="string">&quot;request body ===&gt;&quot;</span>, sb.toString());</span><br><span class="line"></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">    outputStream.write(sb.toString().getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len = inputStream.read(buffer, <span class="number">0</span>, buffer.length)) != -<span class="number">1</span>)&#123;</span><br><span class="line">        Log.d(<span class="string">&quot;response ==&gt;&quot;</span>, <span class="keyword">new</span> <span class="title class_">String</span>(Arrays.copyOf(buffer, len)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行之后<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/18.webp"
                     
                ></p>
<h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>这里使用调试，可以快速定位到对象类的位置，<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/19.webp"
                     
                ><br>在源码中搜一下ConscryptFileDescriptorSocket<br>网址：<a class="link"   href="http://aospxref.com/android-8.1.0_r81/" >http://aospxref.com/android-8.1.0_r81/<i class="fas fa-external-link-alt"></i></a><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/20.webp"
                     
                ><br>然后在源码文件搜索内部类SSLOutputStream，是继承OutputStream，然后对原来的write方法进行重写<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/21.webp"
                     
                ><br>跟踪一下write方法里的ssl.write()<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/22.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/23.webp"
                     
                ><br>再跟踪NativeCrypto.SSL_write()，又到了native层，可以说已经在java层跟到底了<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/24.webp"
                     
                ></p>
<h3 id="frida抓包-2"><a href="#frida抓包-2" class="headerlink" title="frida抓包"></a>frida抓包</h3><p>用frida hook下org.conscrypt.NativeCrypto类下的SSL_write()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//Https request</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;org.conscrypt.NativeCrypto&quot;</span>).<span class="property">SSL_write</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">ssl,fd,shc,bytes,off,len,timeout</span>)&#123;</span><br><span class="line">            <span class="title function_">hexdump</span>(bytes,off,len)</span><br><span class="line">            <span class="title function_">showStacks</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">SSL_write</span>(ssl,fd,shc,bytes,off,len,timeout)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">		<span class="comment">// 打印字节数组</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">hexdump</span>(<span class="params">bytearry,offset,length</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">HexDump</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HexDump</span>.<span class="title function_">dumpHexString</span>(bytearry,offset,length))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">showStacks</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p>运行会看到报错了，说找不到NativeCrypto这个类<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/25.webp"
                     
                ><br>使用objection看一下，内存中是否存在NativeCrypto，多加了com.android前缀，再用frida试一下com.android.org.conscrypt.NativeCrypto<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/26.webp"
                     
                ><br>这次成功抓到包<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/27.webp"
                     
                ></p>
<h2 id="response-1"><a href="#response-1" class="headerlink" title="response"></a>response</h2><p>response同理<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/28.webp"
                     
                ></p>
<h3 id="frida抓包-3"><a href="#frida抓包-3" class="headerlink" title="frida抓包"></a>frida抓包</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Https response</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.org.conscrypt.NativeCrypto&quot;</span>).<span class="property">SSL_read</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">ssl,fd,shc,bytes,off,len,timeout</span>)&#123;</span><br><span class="line">    <span class="title function_">hexdump</span>(bytes,off,len)</span><br><span class="line">    <span class="title function_">showStacks</span>()</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">SSL_read</span>(ssl,fd,shc,bytes,off,len,timeout)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210901/29.webp"
                     
                ></p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">function main()&#123;</span><br><span class="line">    Java.perform(function()&#123;</span><br><span class="line">        //Http request</span><br><span class="line">        Java.use(<span class="string">&quot;java.net.SocketOutputStream&quot;</span>).socketWrite0.implementation = function(fd,<span class="built_in">bytes</span>,off,<span class="built_in">len</span>)&#123;</span><br><span class="line">            printAddress(this.socket, true)</span><br><span class="line">            hexdump(<span class="built_in">bytes</span>,off,<span class="built_in">len</span>)</span><br><span class="line">            showStacks()</span><br><span class="line">            this.socketWrite0(fd,<span class="built_in">bytes</span>,off,<span class="built_in">len</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        //Http response</span><br><span class="line">        Java.use(<span class="string">&quot;java.net.SocketInputStream&quot;</span>).socketRead0.implementation = function(fd,<span class="built_in">bytes</span>,off,<span class="built_in">len</span>,timeout)&#123;</span><br><span class="line">            printAddress(this.socket, false)</span><br><span class="line">            hexdump(<span class="built_in">bytes</span>,off,<span class="built_in">len</span>)</span><br><span class="line">            showStacks()</span><br><span class="line">            <span class="keyword">return</span> this.socketRead0(fd,<span class="built_in">bytes</span>,off,<span class="built_in">len</span>,timeout)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //Https request</span><br><span class="line">        Java.use(<span class="string">&quot;com.android.org.conscrypt.NativeCrypto&quot;</span>).SSL_write.implementation = function(sslNativePointer,fd,shc,<span class="built_in">bytes</span>,off,<span class="built_in">len</span>,timeout)&#123;</span><br><span class="line">            printHttpsAddress(fd)</span><br><span class="line">            hexdump(<span class="built_in">bytes</span>,off,<span class="built_in">len</span>)</span><br><span class="line">            showStacks()</span><br><span class="line">            <span class="keyword">return</span> this.SSL_write(sslNativePointer,fd,shc,<span class="built_in">bytes</span>,off,<span class="built_in">len</span>,timeout)</span><br><span class="line">        &#125;</span><br><span class="line">        //Https response</span><br><span class="line">        Java.use(<span class="string">&quot;com.android.org.conscrypt.NativeCrypto&quot;</span>).SSL_read.implementation = function(sslNativePointer,fd,shc,<span class="built_in">bytes</span>,off,<span class="built_in">len</span>,timeout)&#123;</span><br><span class="line">            printHttpsAddress(fd)</span><br><span class="line">            hexdump(<span class="built_in">bytes</span>,off,<span class="built_in">len</span>)</span><br><span class="line">            showStacks()</span><br><span class="line">            <span class="keyword">return</span> this.SSL_read(sslNativePointer,fd,shc,<span class="built_in">bytes</span>,off,<span class="built_in">len</span>,timeout)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function printHttpsAddress(fd, isSend)&#123;</span><br><span class="line">            var local = Socket.localAddress(fd.getInt$())</span><br><span class="line">            var peer = Socket.peerAddress(fd.getInt$())</span><br><span class="line">            <span class="keyword">if</span>(isSend)&#123;</span><br><span class="line">                console.log(local.ip+<span class="string">&quot;:&quot;</span>+local.port +<span class="string">&quot;====&gt;&quot;</span>+ peer.ip+<span class="string">&quot;:&quot;</span>+peer.port)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                console.log(peer.ip+<span class="string">&quot;:&quot;</span>+peer.port +<span class="string">&quot;====&gt;&quot;</span>+ local.ip+<span class="string">&quot;:&quot;</span>+local.port)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function printAddress(socket, isSend)&#123;</span><br><span class="line">            var localAddress = socket.value.getLocalAddress().toString()</span><br><span class="line">            var remoteAddress = socket.value.getRemoteSocketAddress().toString()</span><br><span class="line">            <span class="keyword">if</span>(isSend)&#123;</span><br><span class="line">                console.log(localAddress +<span class="string">&quot;====&gt;&quot;</span>+ remoteAddress)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                console.log(remoteAddress +<span class="string">&quot;====&gt;&quot;</span>+ localAddress)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function hexdump(bytearry,offset,length)&#123;</span><br><span class="line">            var HexDump = Java.use(<span class="string">&quot;com.android.internal.util.HexDump&quot;</span>)</span><br><span class="line">            console.log(HexDump.dumpHexString(bytearry,offset,length))</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        function showStacks() &#123;</span><br><span class="line">            console.log(Java.use(<span class="string">&quot;android.util.Log&quot;</span>).getStackTraceString(Java.use(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">setImmediate(main)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>Base64编码与解码源码分析</title>
    <url>/2022/06/14/Base64%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Base64是一种基于64个可打印字符来表示二进制数据的表示方法，是一种编码方式，提及编码方式，必然有其对应的字符集合。在Base64编码中，相互映射的两个集合是：</p>
<ul>
<li><p>二进制数据{0, 1}</p>
</li>
<li><p>{A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, &#x2F;}</p>
</li>
</ul>
<p>Base64编码方式可使得信息在这两种字符集表示法之间相互等价转换。</p>
<br>

<h2 id="Base64编码过程"><a href="#Base64编码过程" class="headerlink" title="Base64编码过程"></a>Base64编码过程</h2><p>由于base64的字符集大小为64，那么，需要6个比特的二进制数作为一个基本单元表示一个base64字符集中的字符。因为6个比特有2^6&#x3D;64种排列组合。</p>
<p>具体来说，编码过程如下：</p>
<ol>
<li>将每三个字节作为一组，共24bit，若不足24bit在其后补充0；</li>
<li>将这24个bit分为4组，每一组6个bit；</li>
<li>在每组前加00扩展为8个bit，形成4个字节，每个字节表示base64字符集索引；</li>
<li>扩展后的8bit表示的整数作为索引，对应base64字符集的一个字符，这就是base64编码值；在处理最后的不足3字节时，缺一个字节索引字节取3个，最后填充一个&#x3D;，；缺两个字节取2个索引字节，最后填充&#x3D;&#x3D;。</li>
</ol>
<p>解码时将过程逆向即可。</p>
<p>Base64索引表：</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/01.webp"
                     
                ></p>
<br>

<h2 id="ASCII码表"><a href="#ASCII码表" class="headerlink" title="ASCII码表"></a>ASCII码表</h2><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/02.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/03.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/04.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/09.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/05.webp"
                     
                ></p>
<br>

<h2 id="编码示例"><a href="#编码示例" class="headerlink" title="编码示例"></a>编码示例</h2><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><p>Man的base64编码</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/06.webp"
                     
                ></p>
<ol>
<li>第一步，’M’, ‘a’, ‘n’的ASCII值分别为77, 97, 110，对应的二进制值分别为：01001101, 01100001, 01101110；取三个字节共24bit：010011010110000101101110</li>
<li>第二步，将这24bit分为4组，每组6个bit：010011, 010110, 000101, 101110</li>
<li>每组前面加00，形成4个字节的，00010011, 00010110, 00000101, 00101110, 即19, 22, 5, 46</li>
<li>根据索引表，对应的base64字符分别是T, W, F, u<br>最后的base64字符串是: TWFu。</li>
</ol>
<p>解码时将过程逆向即可。</p>
<br>

<h3 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h3><p>剩余两个字节，BC的base64编码 </p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/07.webp"
                     
                ></p>
<ol>
<li>第一步，’B’, ‘C’的ASCII值分别为66, 64, 对应二进制值分别为：01000010, 01000011；取三个字节，不足不0，共24bit：01000010, 01000011, 00000000</li>
<li>第二步，将这24bit分为4组，每组6个bit：010000, 100100, 001100, 000000</li>
<li>每组前面加00，形成4个字节的，00010000, 00100100, 00001100, 00000000，即16, 36, 12, 0</li>
<li>由于’B’, ‘C’只有两个字节，缺一个字节，因此取3个索引；根据索引表，对应的base64字符分别是Q, k, M，最后填充一个&#x3D;</li>
</ol>
<p>最后的base64字符串是：QkM&#x3D;</p>
<br>

<h3 id="示例三"><a href="#示例三" class="headerlink" title="示例三"></a>示例三</h3><p>剩余一个字节，A的base64编码 </p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220614/08.webp"
                     
                ></p>
<ol>
<li>第一步，’A’的ASCII值65, 对应二进制值为：01000001; 取三个字节，不足不0，共24bit：01000001, 00000000, 00000000</li>
<li>第二步，将这24bit分为4组，每组6个bit：010000, 010000, 000000, 000000</li>
<li>每组前面加00，形成4个字节的，00010000, 00010000, 00000000, 00000000，即16, 16, 0, 0</li>
<li>由于’A’只有一个字节，缺两个字节，因此取2个索引；根据索引表，对应的base64字符分别是Q, Q，最后填充&#x3D;&#x3D;</li>
</ol>
<p> 最后的base64字符串是：QQ&#x3D;&#x3D;</p>
<br>

<h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><h3 id="base64编码方式一："><a href="#base64编码方式一：" class="headerlink" title="base64编码方式一："></a>base64编码方式一：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">base64实现</span></span><br><span class="line"><span class="string">encode: 先编码，十进制化(汉字在utf-8编码下占三个字节，在gbk编码下占两个字节)，再转二进制进行+0填充后合并，不足6的倍数继续填充，切片，十进制化查表，拼接,不足4的倍数填充=</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fillIt</span>(<span class="params">string, factor, item</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    指定倍数填充指定字符</span></span><br><span class="line"><span class="string">    string：原字符串</span></span><br><span class="line"><span class="string">    factor：倍数</span></span><br><span class="line"><span class="string">    item：填充字符</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(string)</span><br><span class="line">    remainder = length % factor</span><br><span class="line">    <span class="keyword">if</span> remainder:</span><br><span class="line">        times = factor - remainder</span><br><span class="line">        string = string + times * item</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">splitIt</span>(<span class="params">string, bits</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    指定位数切片</span></span><br><span class="line"><span class="string">    string：原字符串</span></span><br><span class="line"><span class="string">    bits：每次切片数量</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    length = <span class="built_in">len</span>(string)</span><br><span class="line">    new_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(bits, length + <span class="number">1</span>, bits):</span><br><span class="line">        new_list.append(string[i - bits:i])</span><br><span class="line">        remain = length % bits</span><br><span class="line">        <span class="keyword">if</span> remain != <span class="number">0</span>:</span><br><span class="line">            new_list.append(string[-remain:])</span><br><span class="line">    <span class="keyword">return</span> new_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">string</span>):</span><br><span class="line">    string_temp = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">    <span class="comment"># 索引编码表</span></span><br><span class="line">    base64_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span> ** <span class="number">6</span>):</span><br><span class="line">        base64_dict[i] = string_temp[i]</span><br><span class="line">        <span class="comment"># 编码</span></span><br><span class="line">    string_encode_byte = string.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="comment"># 十进制化</span></span><br><span class="line">    string_digit_list = <span class="built_in">list</span>(string_encode_byte)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 二进制化 + 0填充到8位</span></span><br><span class="line">    string_bin_list = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> string_digit_list:</span><br><span class="line">        string_bin_list.append(<span class="built_in">str</span>(<span class="built_in">bin</span>(item))[<span class="number">2</span>:].zfill(<span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 字符串合并</span></span><br><span class="line">    string_sum = <span class="string">&#x27;&#x27;</span>.join(string_bin_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6 的倍数，不足 0 填充</span></span><br><span class="line">    string_fill = fillIt(string_sum, factor=<span class="number">6</span>, item=<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 切片，6位一个单位</span></span><br><span class="line">    string_bin_list2 = splitIt(string_fill, bits=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 十进制化</span></span><br><span class="line">    string_digit_list2 = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> string_bin_list2:</span><br><span class="line">        string_digit_list2.append(<span class="built_in">int</span>(item, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查表</span></span><br><span class="line">    string_base64_list = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> string_digit_list2:</span><br><span class="line">        string_base64_list.append(base64_dict[item])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接</span></span><br><span class="line">    string_sum2 = <span class="string">&#x27;&#x27;</span>.join(string_base64_list)</span><br><span class="line">    <span class="comment"># 4 的倍数，不足填充 =</span></span><br><span class="line">    string_convert = fillIt(string_sum2, factor=<span class="number">4</span>, item=<span class="string">&#x27;=&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> string_convert</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(encode(<span class="string">&quot;123啊a&quot;</span>))</span><br></pre></td></tr></table></figure>

<br>

<h3 id="base64编码方式二："><a href="#base64编码方式二：" class="headerlink" title="base64编码方式二："></a>base64编码方式二：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base64_charset = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将bytes类型编码为base64</span></span><br><span class="line"><span class="string">    :param string:需要编码的字符串</span></span><br><span class="line"><span class="string">    :return:base64字符串</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 对字符串转字节</span></span><br><span class="line">    origin_bytes = string.encode()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将每一位bytes转换为二进制字符串, &#x27;&#123;:0&gt;8&#125;&#x27;.format(str) 填充到8位</span></span><br><span class="line">    base64_bytes = [<span class="string">&#x27;&#123;:0&gt;8&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">bin</span>(b)).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>)) <span class="keyword">for</span> b <span class="keyword">in</span> origin_bytes]</span><br><span class="line"></span><br><span class="line">    resp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    nums = <span class="built_in">len</span>(base64_bytes) // <span class="number">3</span></span><br><span class="line">    remain = <span class="built_in">len</span>(base64_bytes) % <span class="number">3</span>  <span class="comment"># 余数</span></span><br><span class="line"></span><br><span class="line">    integral_part = base64_bytes[<span class="number">0</span>:<span class="number">3</span> * nums]  <span class="comment"># 取3的倍数分组</span></span><br><span class="line">    <span class="keyword">while</span> integral_part:</span><br><span class="line">        <span class="comment"># 取三个字节，以每6比特，转换为4个整数（直接转换位十进制，不填充到8位在转十进制）, 对码表进行查找</span></span><br><span class="line">        tmp_unit = <span class="string">&#x27;&#x27;</span>.join(integral_part[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">        tmp_unit = [<span class="built_in">int</span>(tmp_unit[x: x + <span class="number">6</span>], <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>]]</span><br><span class="line">        <span class="comment"># 取对应base64字符</span></span><br><span class="line">        resp += <span class="string">&#x27;&#x27;</span>.join([base64_charset[i] <span class="keyword">for</span> i <span class="keyword">in</span> tmp_unit])</span><br><span class="line">        integral_part = integral_part[<span class="number">3</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> remain:</span><br><span class="line">        <span class="comment"># 补齐三个字节，每个字节补充 0000 0000</span></span><br><span class="line">        remain_part = <span class="string">&#x27;&#x27;</span>.join(base64_bytes[<span class="number">3</span> * nums:]) + (<span class="number">3</span> - remain) * <span class="string">&#x27;0&#x27;</span> * <span class="number">8</span></span><br><span class="line">        <span class="comment"># 取三个字节，以每6比特，转换为4个整数</span></span><br><span class="line">        <span class="comment"># 剩余1字节可构造2个base64字符，补充==；剩余2字节可构造3个base64字符，补充=</span></span><br><span class="line">        tmp_unit = [<span class="built_in">int</span>(remain_part[x: x + <span class="number">6</span>], <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">18</span>]][:remain + <span class="number">1</span>]</span><br><span class="line">        resp += <span class="string">&#x27;&#x27;</span>.join([base64_charset[i] <span class="keyword">for</span> i <span class="keyword">in</span> tmp_unit]) + (<span class="number">3</span> - remain) * <span class="string">&#x27;=&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = <span class="string">&quot;123啊a&quot;</span></span><br><span class="line"><span class="built_in">print</span>(encode(s))</span><br></pre></td></tr></table></figure>

<br>

<h3 id="base64解码方式三："><a href="#base64解码方式三：" class="headerlink" title="base64解码方式三："></a>base64解码方式三：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">base64_str</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    解码base64字符串</span></span><br><span class="line"><span class="string">    :param base64_str:base64字符串</span></span><br><span class="line"><span class="string">    :return:解码后的bytearray；若入参不是合法base64字符串，返回空bytearray</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 判断是否符合base64的格式</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(base64_str) % <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 去除末尾=</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> base64_str[<span class="built_in">len</span>(base64_str)-<span class="number">1</span>:] == <span class="string">&quot;=&quot;</span>:</span><br><span class="line">            base64_str = base64_str[:<span class="built_in">len</span>(base64_str)-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 遍历判断字符串元素是否在编码表里</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> base64_str:</span><br><span class="line">        <span class="keyword">if</span> m <span class="keyword">not</span> <span class="keyword">in</span> base64_str:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 对每一个base64字符取下标索引，并转换为6为二进制字符串</span></span><br><span class="line">    base64_bytes = [<span class="string">&#x27;&#123;:0&gt;6&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(<span class="built_in">bin</span>(base64_charset.index(s))).replace(<span class="string">&#x27;0b&#x27;</span>, <span class="string">&#x27;&#x27;</span>)) <span class="keyword">for</span> s <span class="keyword">in</span> base64_str <span class="keyword">if</span> s != <span class="string">&#x27;=&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    resp = <span class="built_in">bytearray</span>()</span><br><span class="line">    nums = <span class="built_in">len</span>(base64_bytes) // <span class="number">4</span></span><br><span class="line">    remain = <span class="built_in">len</span>(base64_bytes) % <span class="number">4</span></span><br><span class="line">    <span class="comment"># 截取4的整数倍</span></span><br><span class="line">    integral_part = base64_bytes[<span class="number">0</span>:<span class="number">4</span> * nums]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> integral_part:</span><br><span class="line">        <span class="comment"># 取4个6位base64字符，作为3个字节</span></span><br><span class="line">        tmp_unit = <span class="string">&#x27;&#x27;</span>.join(integral_part[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        tmp_unit = [<span class="built_in">int</span>(tmp_unit[x: x+<span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">8</span>, <span class="number">16</span>]]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp_unit:</span><br><span class="line">            resp.append(i)</span><br><span class="line">        integral_part = integral_part[<span class="number">4</span>:]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 取剩余的</span></span><br><span class="line">    <span class="keyword">if</span> remain:</span><br><span class="line">        remain_part = <span class="string">&#x27;&#x27;</span>.join(base64_bytes[nums*<span class="number">4</span>:])</span><br><span class="line">        tmp_unit = [<span class="built_in">int</span>(remain_part[i*<span class="number">8</span>:(i+<span class="number">1</span>)*<span class="number">8</span>], <span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(remain-<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp_unit:</span><br><span class="line">            resp.append(i)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resp.decode()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<br>

<h2 id="c-实现"><a href="#c-实现" class="headerlink" title="c++实现"></a>c++实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by zsk on 2022/9/13.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base64</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//base64 加密</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">encode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *data, <span class="type">char</span> *out)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> Base64Code[] = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;G&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;J&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;P&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;V&#x27;</span>, <span class="string">&#x27;W&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;Z&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="comment">// 计算长度</span></span><br><span class="line">    <span class="type">int</span> data_len = <span class="built_in">strlen</span>(data);</span><br><span class="line">    <span class="keyword">if</span> (data_len == <span class="number">0</span>) &#123;</span><br><span class="line">        out[<span class="number">0</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="comment">//主编码循环, &amp; 同为 1 的位，结果为 1，否则结果为 0。 | 只要有1个是1的位，结果为1，否则为0</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; data_len / <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        out[i * <span class="number">4</span>] = Base64Code[data[i * <span class="number">3</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">1</span>] = Base64Code[((data[i * <span class="number">3</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>) | (data[i * <span class="number">3</span> + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">2</span>] = Base64Code[((data[i * <span class="number">3</span> + <span class="number">1</span>] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">2</span>) | (data[i * <span class="number">3</span> + <span class="number">2</span>]) &gt;&gt; <span class="number">6</span>];</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">3</span>] = Base64Code[data[i * <span class="number">3</span> + <span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//长度不为3的倍数</span></span><br><span class="line">    <span class="keyword">if</span> (data_len % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        out[i * <span class="number">4</span>] = Base64Code[data[i * <span class="number">3</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">1</span>] = Base64Code[((data[i * <span class="number">3</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>)];</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">2</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">3</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data_len % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        out[i * <span class="number">4</span>] = Base64Code[data[i * <span class="number">3</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">1</span>] = Base64Code[((data[i * <span class="number">3</span>] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">4</span>) | (data[i * <span class="number">3</span> + <span class="number">1</span>] &gt;&gt; <span class="number">4</span>)];</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">2</span>] = Base64Code[((data[i * <span class="number">3</span> + <span class="number">1</span>] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">2</span>)];</span><br><span class="line">        out[i * <span class="number">4</span> + <span class="number">3</span>] = <span class="string">&#x27;=&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//base64 解密</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">decode</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *data, <span class="type">char</span> *out)</span> </span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> _ucode[] = &#123;</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">62</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">63</span>,</span><br><span class="line">    <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">64</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>,</span><br><span class="line">    <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>,</span><br><span class="line">    <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(data);</span><br><span class="line">    <span class="type">ptrdiff_t</span> len2 = len / <span class="number">4</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//判断末位是否有等号、有几个等号</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;=&#x27;</span> == data[len - <span class="number">2</span>])</span><br><span class="line">        len2 -= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&#x27;=&#x27;</span> == data[len - <span class="number">1</span>])</span><br><span class="line">        len2--;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (len % <span class="number">4</span>)</span><br><span class="line">        len2 += (len % <span class="number">4</span> - <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//主解密循环</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len2 / <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        out[i * <span class="number">3</span>] = (_ucode[data[i * <span class="number">4</span>]] &lt;&lt; <span class="number">2</span>) | (_ucode[data[i * <span class="number">4</span> + <span class="number">1</span>]] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">        out[i * <span class="number">3</span> + <span class="number">1</span>] = ((_ucode[data[i * <span class="number">4</span> + <span class="number">1</span>]] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (_ucode[data[i * <span class="number">4</span> + <span class="number">2</span>]] &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        out[i * <span class="number">3</span> + <span class="number">2</span>] = ((_ucode[data[i * <span class="number">4</span> + <span class="number">2</span>]] &amp; <span class="number">0x03</span>) &lt;&lt; <span class="number">6</span>) | (_ucode[data[i * <span class="number">4</span> + <span class="number">3</span>]]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//末位为一个或两个等号的情况，这时候不能通过主解密循环进行解密</span></span><br><span class="line">            <span class="keyword">if</span> (len2 % <span class="number">3</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            out[i * <span class="number">3</span>] = (_ucode[data[i * <span class="number">4</span>]] &lt;&lt; <span class="number">2</span>) | (_ucode[data[i * <span class="number">4</span> + <span class="number">1</span>]] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (len2 % <span class="number">3</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            out[i * <span class="number">3</span>] = (_ucode[data[i * <span class="number">4</span>]] &lt;&lt; <span class="number">2</span>) | (_ucode[data[i * <span class="number">4</span> + <span class="number">1</span>]] &gt;&gt; <span class="number">4</span>);</span><br><span class="line">            out[i * <span class="number">3</span> + <span class="number">1</span>] = ((_ucode[data[i * <span class="number">4</span> + <span class="number">1</span>]] &amp; <span class="number">0x0F</span>) &lt;&lt; <span class="number">4</span>) | (_ucode[data[i * <span class="number">4</span> + <span class="number">2</span>]] &gt;&gt; <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="type">const</span> <span class="type">char</span> *text = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">            <span class="type">char</span> out[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="type">char</span> out2[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            Base64::<span class="built_in">encode</span>(text, out);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;encode==&gt;%s\n&quot;</span>, out);</span><br><span class="line">            Base64::<span class="built_in">decode</span>(out, out2);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;decode==&gt;%s&quot;</span>, out2);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="中文的base64编码"><a href="#中文的base64编码" class="headerlink" title="中文的base64编码"></a>中文的base64编码</h2><br>

<p>其实base64编码只是在二进制与base64字符集之间映射的编码，与其他字符集毫无关系。其他字符集想要转换为base64编码，只需先将其转换为二进制，再做base64编码即可。</p>
<br>

<p>那么对于Unicode字符集而言，有多种编码方式将其装换为二进制，所以在编码过程中就需要统一编码，以免造成乱码。上述Python示例就将中文转换为base64，首先使用默认编码utf-8将字符串转换为二进制（使用Python的str.encode()），再做base64编码；解码时候同样如此，先将base64字符串解码为二进制，再将二进制转换为字符串（使用Python的str.decode()）</p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP TCP/IP协议与抓包原理</title>
    <url>/2021/06/01/HTTP-TCP-IP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E6%8A%93%E5%8C%85%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h1 id="网络基础-TCP-x2F-IP"><a href="#网络基础-TCP-x2F-IP" class="headerlink" title="网络基础 TCP&#x2F;IP"></a>网络基础 TCP&#x2F;IP</h1><p>在说Http之前，先来说一下TCP&#x2F;IP协议。</p>
<p>TCP&#x2F;IP协议是众多协议的统称，像HTTP，TCP,UDP,DNS等都包括在里面</p>
<p>TCP&#x2F;IP 协议会把这些进行分层，按层次分为4层：应用层、传输层、网络层、数据链路层。</p>
<p>也有细分为7层的，<font color="red">应用层、表示层、会话层、传输层、网络层、数据链路层、物理层<br>像HTTP、FTP、DNS就属于应用层，TCP、UDP在传输层，IP在网络层</font> </p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/01.webp"
                     
                ></p>
<br>

<h1 id="TCP-x2F-IP通信传输流"><a href="#TCP-x2F-IP通信传输流" class="headerlink" title="TCP&#x2F;IP通信传输流"></a>TCP&#x2F;IP通信传输流</h1><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/02.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/03.webp"
                     
                ></p>
<font color="red">
以HTTP来举例，首先作为发送端的客户端在应用层以HTTP协议发出一个想看某个Web页面的HTTP请求。在应用层会经过DNS解析，通过域名查找IP地址

<p>接着，为了传输方便，在传输层用了TCP协议把从应用层处收到的数据HTTP请求的报文进行分割，并在各个报文上打上标记序号及端口号转发给网络层</p>
<p>在网络层IP协议，增加作为通信目的地的MAC地址后转发给链路层。</p>
<p>接收端的服务器在链路层接受数据，按序往上层发送，一直到应用层。在传输到传输层的时候，会把接收到的数据包按原来的顺序重组请求报文。当传输到应用层，才算真正接受到由客户端发送过来的HTTP请求。</p>
<p>作为接收端的服务器收到发送端的请求后，会把对应的页面以同样的TCP&#x2F;IP通信协议进行回传。</p>
<p>发送端在层与层之间传输数据时，每经过一层时会被打上该层所属的首部信息，反之，接受端在层与层传输数据时，每经过一层时会把对应的首部消去。<br></font></p>
<br>

<h1 id="TCP协议的可靠性（三次握手）"><a href="#TCP协议的可靠性（三次握手）" class="headerlink" title="TCP协议的可靠性（三次握手）"></a>TCP协议的可靠性（三次握手）</h1><p>TCP位于传输层，提供可靠的字节流服务。<br>所谓字节流服务指，为了方便传输，将大块数据分割成报文段为单位的数据包进行管理，可靠性指能够准确可靠的传输给对方。一言以蔽之，<font color="red">TCP协议为了更容易传输大数据才把数据分割，而且TCP协议能够确认数据最终是否送达对方。</font></p>
<p>确保数据能到达目标<br>为了准确无误的将数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达，握手过程中使用了TCP的标志SYN和ACK。</p>
<font color="red">
发送端首先发送一个带SYN标志的数据包给对方。
接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。
最后，发送端再回传一个带ACK标志的数据包，代表握手结束。
若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。
</font>

<br>

<h1 id="为什么不是二次，四次握手，而是三次？"><a href="#为什么不是二次，四次握手，而是三次？" class="headerlink" title="为什么不是二次，四次握手，而是三次？"></a>为什么不是二次，四次握手，而是三次？</h1><h2 id="四次？"><a href="#四次？" class="headerlink" title="四次？"></a>四次？</h2><p>很显然1.2和1.3 这两个步骤可以合并，<strong>只需要三次握手</strong>，可以提高连接的速度与效率。</p>
<br>

<h2 id="二次？"><a href="#二次？" class="headerlink" title="二次？"></a>二次？</h2><p>现假定出现一种异常情况，即A发出的第一个请求连接报文段并没有丢失，而是<strong>在某些网络结点长时间滞留了</strong>，以至到连接释放以后的某个时间才到达B。本来这是一个已失效的报文段。但B收到此失效的连接请求报文段后，就<strong>误认为</strong>是A又发出一次新的连接请求。于是就向A发出确认报文段，同意建立连接。<strong>假定不采用三次握手，那么只要B发出确认，新的连接就建立了。</strong></p>
<p>由于现在A并没有发出建立请求的连接，因此<strong>不会理睬B的确认，也不会向B发送数据</strong>，但B却以为新的运输连接已经建立了，并<strong>一直等待A发来的数据。B的许多资源就这样白白浪费了。</strong></p>
<p>采用三次握手的办法可以防止上述现象发生。例如在刚才的情况下，A不会向B的确认发出确认。<strong>B由于收不到确认，就知道A并没有要求建立连接，所以就不会分配资源给这个连接</strong></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/04.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/05.webp"
                     
                ></p>
<br>

<h1 id="HTTP-是不保存状态的协议"><a href="#HTTP-是不保存状态的协议" class="headerlink" title="HTTP 是不保存状态的协议"></a>HTTP 是不保存状态的协议</h1><p>HTTP 是一种不保存状态，即无状态（stateless）协议。HTTP 协议自 身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个 级别，协议对于发送过的请求或响应都不做持久化处理。</p>
<p>虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管 理状态了。</p>
<br>

<h2 id="持久连接"><a href="#持久连接" class="headerlink" title="持久连接"></a>持久连接</h2><p>HTTP&#x2F;1.1 和一部分的HTTP&#x2F;1.0 想出了 持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse）的方法。持久连接的特点是，只要任意一端 没有明确提出断开连接，则保持 TCP 连接状态。</p>
<p>持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额 外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相 应提高了。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/06.webp"
                     
                ></p>
<p>持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额 外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相 应提高了。</p>
<br>

<h1 id="四次挥手："><a href="#四次挥手：" class="headerlink" title="四次挥手："></a>四次挥手：</h1><p><font color="red">TCP连接是双向传输的对等的模式，就是说双方都可以同时向对方发送或接收数据。当有一方要关闭连接时，会发送指令告知对方，我要关闭连接了。这时对方会回一个ACK，此时一个方向的连接关闭。但是另一个方向仍然可以继续传输数据，等到发送完了所有的数据后，会发送一个FIN段来关闭此方向上的连接。接收方发送ACK确认关闭连接。</font></p>
<br>

<h1 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h1><font color="red">
通信使用明文（不加密），内容可能会被窃听

<p>不验证通信方的身份，因此有可能遭遇伪装</p>
<p>无法证明报文的完整性，所以有可能已遭篡改<br></font></p>
<p>对于 HTTP 来说，服务器也好，客户端也好，都是没有办法确认通信方的。因为很有可能并不是和原本预想的通信方在实际通信。 并且还需要考虑到接收到的报文在通信途中已经遭到篡改这一可能性。</p>
<p>为了统一解决上述这些问题，<font color="red">需要在 HTTP 上再加入加密处理和认证 等机制。我们把添加了加密及认证机制的 HTTP 称为 HTTPS</font></p>
<h2 id="通信的加密"><a href="#通信的加密" class="headerlink" title="通信的加密"></a>通信的加密</h2><p>一种方式就是将通信加密。<font color="red">HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或 TLS（Transport Layer Security，安全层传输协议）的组合使用， 加密 HTTP 的通信内容。</font></p>
<p>用 SSL建立安全通信线路之后，就可以在这条线路上进行 HTTP 通信了。与 <font color="red">SSL组合使用的HTTP 被称为 HTTPS</font>（HTTP Secure，超文本传输安全协议）。</p>
<br>

<h1 id="HTTP-加密-认证-完整性保护-x3D-HTTPS"><a href="#HTTP-加密-认证-完整性保护-x3D-HTTPS" class="headerlink" title="HTTP+ 加密 + 认证 + 完整性保护 &#x3D;HTTPS"></a>HTTP+ 加密 + 认证 + 完整性保护 &#x3D;HTTPS</h1><p><font color="red">可以说HTTPS 是身披 SSL 外壳的 HTTP</font></p>
<p>HTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL和TLS协议代 替而已。</p>
<p>通常，<font color="red">HTTP 直接和 TCP 通信。当使用 SSL时，则演变成先和 SSL通信</font>，再由 SSL和 TCP 通信了。简言之，所谓HTTPS，其实就是身披 SSL协议这层外壳的 HTTP。</p>
<p><font color="red">在采用 SSL后，HTTP 就拥有了 HTTPS 的加密、证书和完整性保护 这些功能。</font><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/07.webp"
                     
                ></p>
<br>

<h2 id="SSL-x2F-TLS加密"><a href="#SSL-x2F-TLS加密" class="headerlink" title="SSL&#x2F;TLS加密"></a>SSL&#x2F;TLS加密</h2><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/08.webp"
                     
                ><br><font color="red"><br>第一次访问采用非对称加解密（非对称指客户端和服务器都有自己的公钥和私钥）<br>客户端访问服务器，</p>
<p>服务器收到客户端访问返回服务器的公钥，</p>
<p>客户端收到服务器的公钥，用服务器的公钥对客户端的公钥进行加密发送给服务器，</p>
<p>服务器收到加密后的公钥，用服务器的私钥进行解密取得客户端的公钥，</p>
<p>将session key用客户端的公钥进行加密发送给客户端，</p>
<p>客户端用自己的私钥进行解密获取session key<br></font></p>
<br>

<p>后续通信使用对称加解密（对称加密指客户端和服务器使用同一套公钥私钥）<br>对session key加密后发送session key进行通信</p>
<p>非对称加解密只是用于session key安全的在两者之间进行传递，因为非对称加解密的开销很大。session key是有时效性的</p>
<br>

<h2 id="加入了抓包软件后SSL-x2F-TLS加密"><a href="#加入了抓包软件后SSL-x2F-TLS加密" class="headerlink" title="加入了抓包软件后SSL&#x2F;TLS加密"></a>加入了抓包软件后SSL&#x2F;TLS加密</h2><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/09.webp"
                     
                ><br><font color="red"><br>Charles对客户端来说是服务器，对服务器来说是客户端</p>
<p>1.客户端去访问Charles，Charles去访问服务器</p>
<p>2.服务器会给Charles发送服务器的公钥，Charles会给客户端发送Charles的公钥</p>
<p>3.客户端用Charles的公钥对自己的公钥进行加密发送给Charles，Charles用服务器的公钥对自己的公钥进行加密发送给服务器</p>
<p>4.服务器用自己的私钥解开得到Charles的公钥，Charles用自己的私钥解开得到客户端的公钥</p>
<p>5.服务器得到Charles的公钥对session key加密发送给Charles，Charles用自己的私钥解开得到session key</p>
<p>6.Charles把session key用客户端的公钥对session key加密后发送给客户端，客户端用自己的私钥解开得到session key<br>到这里客户端，Charles，服务器的session key就统一了。<br></font></p>
<h2 id="Charles抓不到包"><a href="#Charles抓不到包" class="headerlink" title="Charles抓不到包"></a>Charles抓不到包</h2><p>打开Charles抓不到包，为什么导入Charles的证书之后，app抓包就正常了呢？<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/10.webp"
                     
                ></p>
<font color="red">
有了Charles置于中间之后，本来c/s架构的通信过程会“分裂”为两个独立的通信过程，app本来验证的是服务器的证书，服务器的证书手机的根证书是认可的，直接内置的；但是分裂成两个独立的通信过程之后，app验证的是Charles的证书，它的证书手机根证书并不认可，它并不是由手机内置的权威根证书签发机构签发的，所以手机不认，然后app也不认；所以我们要把Charles的证书导入到手机根证书目录中去，这样手机就会认可，如果app没有进行额外的校验（比如在代码中对该证书进行校验，也就是SSL pinning系列API)的话，app也会直接认可接受。

<br>

<p>在高版本的安卓上，用户安装的证书不会直接安装到系统根证书目录<br>中，需要root手机后将证书移动到系统根证书目录中去。<br></font></p>
<p> 当Charles的证书安装到系统根目录中去之后，系统就会信任来自Charles的流量包了，我们的抓包过程就会回归正常</p>
<p> 1.安装个人证书<br> 通过VPN连接到Charles，然后用浏览器访问chls.pro&#x2F;ssl，会自动弹出安装个人证书。</p>
<p> 个人证书安装在手机的 &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added 目录下</p>
<p> 2.复制个人证书到系统目录（安卓8以上需要）<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /data/misc/user/0/cacerts-added/ </span><br><span class="line">mount -o remount,rw /system</span><br><span class="line">mv * /etc/security/cacerts/ </span><br><span class="line">cd  /etc/security/cacerts/</span><br><span class="line">ls -alit </span><br><span class="line">mount -o remount,ro /system</span><br></pre></td></tr></table></figure></p>
<br>

<h2 id="SSL-Pinning（情况更少）"><a href="#SSL-Pinning（情况更少）" class="headerlink" title="SSL Pinning（情况更少）"></a>SSL Pinning（情况更少）</h2> <font color="red">
 就是客户端并不会默认信任系统根证书目录中的证书，而是在代码里再加一层校验，这就是证书绑定机制——SSL pinning，如果这段代码的校验过不了，那么客户端还是会报证书错误。
 </font>

 <br>

<h2 id="Https客户端代码校验服务器证书"><a href="#Https客户端代码校验服务器证书" class="headerlink" title="Https客户端代码校验服务器证书"></a>Https客户端代码校验服务器证书</h2><p> 案例：滴答清单</p>
<p>遇到这种情况的时候，有这两种方式，当然目标是一样的，都是hook住这段校验的代码，使这段判断的机制失效即可。</p>
<ol>
<li>hook住checkServerTrusted，将其所有重载都置空；</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_ssl</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ClassName</span> = <span class="string">&quot;com.android.org.conscrypt.Platform&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Platform</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">ClassName</span>);</span><br><span class="line">        <span class="keyword">var</span> targetMethod = <span class="string">&quot;checkServerTrusted&quot;</span>;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="title class_">Platform</span>[targetMethod].<span class="property">overloads</span>.<span class="property">length</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(len);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">            <span class="title class_">Platform</span>[targetMethod].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;class:&quot;</span>, <span class="title class_">ClassName</span>, <span class="string">&quot;target:&quot;</span>, targetMethod, <span class="string">&quot; i:&quot;</span>, i, <span class="variable language_">arguments</span>);</span><br><span class="line">                <span class="comment">//printStack(ClassName + &quot;.&quot; + targetMethod);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<br>

<ol start="2">
<li>使用objection，直接将SSL pinning给disable掉  android sslpinning disable</li>
</ol>
<br>

<ol start="3">
<li>如果还有一些情况没有覆盖的话，可以来看看<br><a class="link"   href="https://github.com/WooyunDota/DroidSSLUnpinning" >https://github.com/WooyunDota/DroidSSLUnpinning<i class="fas fa-external-link-alt"></i></a></li>
</ol>
<ul>
<li><p>目录ObjectionUnpinningPlus增加了ObjectionUnpinning没覆盖到的锁定场景.(objection)</p>
<ul>
<li><p>使用方法1 attach : frida -U com.example.mennomorsink.webviewtest2 —no-pause -l hooks.js</p>
</li>
<li><p>使用方法2 spawn : python application.py com.example.mennomorsink.webviewtest2</p>
</li>
</ul>
</li>
<li><p>ObjectionUnpinningPlus hook list:</p>
<ul>
<li><p>SSLcontext(ART only)</p>
</li>
<li><p>okhttp</p>
</li>
<li><p>webview</p>
</li>
<li><p>XUtils(ART only)</p>
</li>
<li><p>httpclientandroidlib</p>
</li>
<li><p>JSSE</p>
</li>
<li><p>network_security_config (android 7.0+)</p>
</li>
<li><p>Apache Http client (support partly)</p>
</li>
<li><p>OpenSSLSocketImpl</p>
</li>
<li><p>TrustKit</p>
</li>
</ul>
</li>
</ul>
<p>应该可以覆盖到目前已知的所有种类的证书绑定了。</p>
<br>

<h2 id="服务器校验客户端证书（情况少）"><a href="#服务器校验客户端证书（情况少）" class="headerlink" title="服务器校验客户端证书（情况少）"></a>服务器校验客户端证书（情况少）</h2> <font color="red">
既然app客户端会校验服务器证书，那么服务器可不可能校验app客户端证书呢？答案是肯定的。

<p>单一通信已经分裂成两个互相独立的通信，这时候与服务器进行通信的已经不是app、而是Charles了，所以我们要将app中内置的证书导入到Charles中去。</p>
<p>这个操作通常需要完成两项内容：</p>
<ol>
<li>找到证书文件</li>
<li>找到证书密码</li>
</ol>
</font>

<br>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_KeyStore_load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">StringClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">KeyStore</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.KeyStore$LoadStoreParameter&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0</span>) &#123;</span><br><span class="line">            <span class="comment">//printStack(&quot;KeyStore.load1&quot;);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load1:&quot;</span>, arg0);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.InputStream&#x27;</span>, <span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0, arg1</span>) &#123;</span><br><span class="line">            <span class="comment">//printStack(&quot;KeyStore.load2&quot;);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? <span class="title class_">StringClass</span>.$new(arg1) : <span class="literal">null</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook_KeyStore_load...&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(hook_KeyStore_load)</span><br></pre></td></tr></table></figure>
 <font color="red">
找到证书文件很简单，一般apk进行解包，直接过滤搜索后缀名为p12的文件即可，一般常用的命令为 tree -NCfhl |grep -i p12，直接打印出p12文件的路径

<p>想要拿到密码也很简单，一般解密会调用现成的API，java.security.KeyStore ，直接使用frida打印出来，也可以hook系统文件库</p>
</font>

<br>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objection -g cn.soulapp.android explore</span><br><span class="line">//android hooking watch class_method java.io.File.$init - -dump-args --dump-backtrace --dump-return</span><br><span class="line">android hooking watch class_method java.io.File.$init - -dump-args</span><br></pre></td></tr></table></figure>

<p>有了证书和密码之后，就可以将其导入到抓包软件中</p>
<br>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210601/11.webp"
                     
                ></p>
<font color="red">
一般HTTPS：大部分只采用客户端检验服务器

<p>双向绑定：很少会有服务器校验客户端</p>
</font>

<p>SSL cert Pinning：更少（案例：趣充）</p>
<br>

<h2 id="推荐使用Postern-Charles组合进行抓包"><a href="#推荐使用Postern-Charles组合进行抓包" class="headerlink" title="推荐使用Postern+Charles组合进行抓包"></a>推荐使用Postern+Charles组合进行抓包</h2><p>我们平时用代理的时候，都是通过给wifi设置http代理的方式进行抓包，只是在应用层抓包，所以会被很轻易的检测到和绕过的。</p>
<p> 很多应用会通过</p>
<p>System.getProperty(“http.proxyHost”)</p>
<p>System.getProperty(“http.proxyPort”);</p>
<p>这两个API来查看当前系统是否挂了http代理，会很轻松的让你的抓包失效。</p>
<p>这时候只能用Frida或Xposed来hook这个接口、修改其返回值</p>
<br>
所以我们需要换一种方式来设置代理。就是设置vpn代理，vpn是属于网络层的，设置了vpn后，你的手机上ifconfig后会多一个tun0的接口，等于加了一个虚拟网卡，所有的流量都会从这走。应用层和传输层的请求都可以拿到，还不会被上面提及的两个api所检测。

<br>

<p>输入ip route show table 0 |grep defalut查看路由表</p>
<p>路由表的第一条就指向了tun0，可以说开vpn的效果就和直连的效果一摸一样。</p>
]]></content>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>MD5源码分析及流程</title>
    <url>/2022/06/20/MD5%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%8F%8A%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="MD5算法实现："><a href="#MD5算法实现：" class="headerlink" title="MD5算法实现："></a>MD5算法实现：</h1><p>输入：不定长度信息（要加密的信息）</p>
<p>输出：固定长度128-bits。由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。</p>
<p>基本方式为：求余、取余、调整长度、与链接变量进行循环运算。得出结果。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220620/01.webp"
                     
                ></p>
<br>

<h2 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h2><p>在MD5算法中，首先需要对输入信息进行填充，使其位长对512求余的结果等于448，并且填充必须进行，即使其位长对512求余的结果等于448。因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。</p>
<p>填充的方法如下：</p>
<ol>
<li>在信息的后面<font color="red">填充一个1和无数个0</font>，直到满足上面的条件时才停止用0对信息的填充。</li>
<li>在这个结果后面<font color="red">附加一个以64位二进制表示的填充前信息长度（明文的长度，单位为Bit）</font>，如果二进制表示的填充前信息长度超过64位，则取低64位</li>
</ol>
<p>经过这两步的处理，信息的位长&#x3D;N<em>512+448+64&#x3D;(N+1）</em>512，即长度恰好是512的整数倍。这样做的原因是为满足后面处理中对信息长度的要求。</p>
<br>

<h2 id="初始化变量（变量值一般不变）"><a href="#初始化变量（变量值一般不变）" class="headerlink" title="初始化变量（变量值一般不变）"></a>初始化变量（变量值一般不变）</h2><p>初始的128位值为初试<font color="red">链接变量</font>，这些参数用于第一轮的运算，以<font color="red">大端字节序</font>来表示，他们分别为： </p>
<p>A&#x3D;0x01234567，</p>
<p>B&#x3D;0x89ABCDEF，</p>
<p>C&#x3D;0xFEDCBA98，</p>
<p>D&#x3D;0x76543210。</p>
<p>（每一个变量给出的数值是高字节存于内存低地址，低字节存于内存高地址，即大端字节序。在程序中变量A、B、C、D的值分别为0x67452301，0xEFCDAB89，0x98BADCFE，0x10325476）</p>
<br>

<h2 id="处理分组数据"><a href="#处理分组数据" class="headerlink" title="处理分组数据"></a>处理分组数据</h2><font color="red">

<p>消息分以512位为一分组进行处理，每一个分组进行上述4轮共64次计算后，将A，B，C，D分别加上计算得到的a，b，c，d。当做新的A，B，C，D，并将这4个变量赋值给a,b,c,d再进行下一分组的运算。由于填充后的消息长度为(N+1)*512，则共需计算N+1个分组。计算所有数据分组后，这4个变量为最后的结果，即MD5值。<br></font></p>
<br>

<p>每一分组的算法流程如下：</p>
<p>（1）第一分组需要将上面四个链接变量复制到另外四个变量中：A到a，B到b，C到c，D到d。</p>
<p>（2）从第二分组开始的变量为上一分组的运算结果，即A &#x3D; a， B &#x3D; b， C &#x3D; c， D &#x3D; d。</p>
<p>主循环有四轮（MD4只有三轮），每轮循环都很相似。第一轮进行16次操作。每次操作对a、b、c和d中的其中三个作一次非线性函数运算，然后将所得结果加上第四个变量，文本的一个子分组和一个常数。再将所得结果向左环移一个不定的数，并加上a、b、c或d中之一。最后用该结果取代a、b、c或d中之一。</p>
<br>

<p>一个MD5运算由类似的64次循环构成，分成4组16次。</p>
<p>F ：一个非线性函数，一个函数运算一次</p>
<p>Mi ：表示一个 32-bits 的输入数据</p>
<p>Ki：表示一个 32-bits 常数，用来完成每次不同的计算。</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220620/02.webp"
                     
                ></p>
<p>说明：</p>
<font color="red">

<p>( (a + 线性函数(b,c,d) + Mj + Ki) &lt;&lt; s) + a &#x3D;&#x3D; B<br></font></p>
<br>

<p>以下是每次操作中用到的四个非线性函数（<font color="red">每轮一个</font>）。</p>
<p>F( X ,Y ,Z ) &#x3D; ( X &amp; Y ) | ( (~X) &amp; Z )  &#x3D;&#x3D;&gt; If X then Y else Z</p>
<p>G( X ,Y ,Z ) &#x3D; ( X &amp; Z ) | ( Y &amp; (~Z) )  &#x3D;&#x3D;&gt; If Z then X else Y</p>
<p>H( X ,Y ,Z ) &#x3D;X ^ Y ^ Z  &#x3D;&#x3D;&gt; If X&#x3D;Y then Z else ~Z</p>
<p>I( X ,Y ,Z ) &#x3D;Y ^ ( X | (~Z) )</p>
<p>（&amp;是与（And），|是或（Or），~是非（Not），^是异或（Xor））</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>与</td>
<td>两个位都为1时，结果才为1</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>两个位都为0时，结果才为0</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td>两个位相同为0，相异为1</td>
</tr>
<tr>
<td>~</td>
<td>取反</td>
<td>0变1，1变0</td>
</tr>
<tr>
<td>&lt;&lt;&lt;</td>
<td>循环左移</td>
<td>将移出的低位放到该数的高位</td>
</tr>
</tbody></table>
<p><br>循环左移:</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220620/03.webp"
                     
                ></p>
<p>这四个函数的说明：如果X、Y和Z的对应位是独立和均匀的，那么结果的每一位也应是独立和均匀的。</br><br>F是一个逐位运算的函数。即，如果X，那么Y，否则Z。函数H是逐位奇偶操作符。</br><br>假设Mj表示消息的第j个子分组（从0到15），常数ti是4294967296*abs( sin(i) ）的整数部分，i 取值从1到64，单位是弧度。（4294967296&#x3D;2^(32)）</p>
</br>
现定义：</br>
FF(a ,b ,c ,d ,Mj ,s ,ti ) 操作为 a = b + ( (a + F(b,c,d) + Mj + ti) << s)</br>
GG(a ,b ,c ,d ,Mj ,s ,ti ) 操作为 a = b + ( (a + G(b,c,d) + Mj + ti) << s)</br>
HH(a ,b ,c ,d ,Mj ,s ,ti) 操作为 a = b + ( (a + H(b,c,d) + Mj + ti) << s)</br>
II(a ,b ,c ,d ,Mj ,s ,ti) 操作为 a = b + ( (a + I(b,c,d) + Mj + ti) << s)</br>
<br>

<p><strong><font color="red">注意：“&lt;&lt;&lt;”表示循环左移位，不是左移位</font></strong></p>
</br>

<p><strong>K表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>,</span><br><span class="line"> <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>, <span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>,</span><br><span class="line"> <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>,</span><br><span class="line"> <span class="number">0x49b40821</span>, <span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>,</span><br><span class="line"> <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>, <span class="number">0x21e1cde6</span>,</span><br><span class="line"> <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>,</span><br><span class="line"> <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>, <span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>,</span><br><span class="line"> <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line"> <span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>,</span><br><span class="line"> <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>, <span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>,</span><br><span class="line"> <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>,</span><br><span class="line"> <span class="number">0x85845dd1</span>, <span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>,</span><br><span class="line"> <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>]</span><br></pre></td></tr></table></figure>
</br>
这四轮（共64步）是：</br>
第一轮</br>
FF(a ,b ,c ,d ,M0 ,7 ,0xd76aa478 )</br>
FF(d ,a ,b ,c ,M1 ,12 ,0xe8c7b756 )</br>
FF(c ,d ,a ,b ,M2 ,17 ,0x242070db )</br>
FF(b ,c ,d ,a ,M3 ,22 ,0xc1bdceee )</br>
FF(a ,b ,c ,d ,M4 ,7 ,0xf57c0faf )</br>
FF(d ,a ,b ,c ,M5 ,12 ,0x4787c62a )</br>
FF(c ,d ,a ,b ,M6 ,17 ,0xa8304613 )</br>
FF(b ,c ,d ,a ,M7 ,22 ,0xfd469501)</br>
FF(a ,b ,c ,d ,M8 ,7 ,0x698098d8 )</br>
FF(d ,a ,b ,c ,M9 ,12 ,0x8b44f7af )</br>
FF(c ,d ,a ,b ,M10 ,17 ,0xffff5bb1 )</br>
FF(b ,c ,d ,a ,M11 ,22 ,0x895cd7be )</br>
FF(a ,b ,c ,d ,M12 ,7 ,0x6b901122 )</br>
FF(d ,a ,b ,c ,M13 ,12 ,0xfd987193 )</br>
FF(c ,d ,a ,b ,M14 ,17 ,0xa679438e )</br>
FF(b ,c ,d ,a ,M15 ,22 ,0x49b40821 )</br>

</br>
第二轮</br>
GG(a ,b ,c ,d ,M1 ,5 ,0xf61e2562 )</br>
GG(d ,a ,b ,c ,M6 ,9 ,0xc040b340 )</br>
GG(c ,d ,a ,b ,M11 ,14 ,0x265e5a51 )</br>
GG(b ,c ,d ,a ,M0 ,20 ,0xe9b6c7aa )</br>
GG(a ,b ,c ,d ,M5 ,5 ,0xd62f105d )</br>
GG(d ,a ,b ,c ,M10 ,9 ,0x02441453 )</br>
GG(c ,d ,a ,b ,M15 ,14 ,0xd8a1e681 )</br>
GG(b ,c ,d ,a ,M4 ,20 ,0xe7d3fbc8 )</br>
GG(a ,b ,c ,d ,M9 ,5 ,0x21e1cde6 )</br>
GG(d ,a ,b ,c ,M14 ,9 ,0xc33707d6 )</br>
GG(c ,d ,a ,b ,M3 ,14 ,0xf4d50d87 )</br>
GG(b ,c ,d ,a ,M8 ,20 ,0x455a14ed )</br>
GG(a ,b ,c ,d ,M13 ,5 ,0xa9e3e905 )</br>
GG(d ,a ,b ,c ,M2 ,9 ,0xfcefa3f8 )</br>
GG(c ,d ,a ,b ,M7 ,14 ,0x676f02d9 )</br>
GG(b ,c ,d ,a ,M12 ,20 ,0x8d2a4c8a} </br>
</br>
第三轮</br>
HH(a ,b ,c ,d ,M5 ,4 ,0xfffa3942 )</br>
HH(d ,a ,b ,c ,M8 ,11 ,0x8771f681 )</br>
HH(c ,d ,a ,b ,M11 ,16 ,0x6d9d6122 )</br>
HH(b ,c ,d ,a ,M14 ,23 ,0xfde5380c )</br>
HH(a ,b ,c ,d ,M1 ,4 ,0xa4beea44 )</br>
HH(d ,a ,b ,c ,M4 ,11 ,0x4bdecfa9 )</br>
HH(c ,d ,a ,b ,M7 ,16 ,0xf6bb4b60 )</br>
HH(b ,c ,d ,a ,M10 ,23 ,0xbebfbc70 }</br>
HH(a ,b ,c ,d ,M13 ,4 ,0x289b7ec6 )</br>
HH(d ,a ,b ,c ,M0 ,11 ,0xeaa127fa )</br>
HH(c ,d ,a ,b ,M3 ,16 ,0xd4ef3085 )</br>
HH(b ,c ,d ,a ,M6 ,23 ,0x04881d05 )</br>
HH(a ,b ,c ,d ,M9 ,4 ,0xd9d4d039 )</br>
HH(d ,a ,b ,c ,M12 ,11 ,0xe6db99e5 )</br>
HH(c ,d ,a ,b ,M15 ,16 ,0x1fa27cf8 )</br>
HH(b ,c ,d ,a ,M2 ,23 ,0xc4ac5665 )</br></br>
第四轮</br>
II(a ,b ,c ,d ,M0 ,6 ,0xf4292244 )</br>
II(d ,a ,b ,c ,M7 ,10 ,0x432aff97 )</br>
II(c ,d ,a ,b ,M14 ,15 ,0xab9423a7 )</br>
II(b ,c ,d ,a ,M5 ,21 ,0xfc93a039 )</br>
II(a ,b ,c ,d ,M12 ,6 ,0x655b59c3 )</br>
II(d ,a ,b ,c ,M3 ,10 ,0x8f0ccc92 )</br>
II(c ,d ,a ,b ,M10 ,15 ,0xffeff47d )</br>
II(b ,c ,d ,a ,M1 ,21 ,0x85845dd1 )</br>
II(a ,b ,c ,d ,M8 ,6 ,0x6fa87e4f )</br>
II(d ,a ,b ,c ,M15 ,10 ,0xfe2ce6e0 )</br>
II(c ,d ,a ,b ,M6 ,15 ,0xa3014314 )</br>
II(b ,c ,d ,a ,M13 ,21 ,0x4e0811a1 )</br>
II(a ,b ,c ,d ,M4 ,6 ,0xf7537e82 )</br>
II(d ,a ,b ,c ,M11 ,10 ,0xbd3af235 )</br>
II(c ,d ,a ,b ,M2 ,15 ,0x2ad7d2bb )</br>
II(b ,c ,d ,a ,M9 ,21 ,0xeb86d391 )</br>

</br>

<p>所有这些完成之后，将a、b、c、d分别在原来基础上再加上A、B、C、D。</br><br>即a &#x3D; a + A，b &#x3D; b + B，c &#x3D; c + C，d &#x3D; d + D</br><br>然后用下一分组数据继续运行以上算法。</br></p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>最后的输出是a、b、c和d的<font color="red">大端法</font>级联。</p>
</br>

<h2 id="例子：123456-进行md5"><a href="#例子：123456-进行md5" class="headerlink" title="例子：123456 进行md5"></a>例子：123456 进行md5</h2><p>123456&#x3D;&#x3D;&gt;ASCII   31 32 33 34 35 36</br><br>转为二进制就是 4*12 &#x3D; 48bit</br><br>31 &#x3D;&#x3D;&gt; 0011 0001</br><br>32 &#x3D;&#x3D;&gt; 0011 0010</br><br>33 &#x3D;&#x3D;&gt; 0011 0011</br><br>34 &#x3D;&#x3D;&gt; 0011 0100</br><br>35 &#x3D;&#x3D;&gt; 0011 0101</br><br>36 &#x3D;&#x3D;&gt; 0011 0110</br></br><br>48bit填充1000….到448bit 填充1个1和399个0</br><br>0011 0001 0011 0010 0011 0011 0011 0100 0011 0101 0011 0110  1000000….</br><br>对应16进制</br><br>31 32 33 34 35 36 80 …..（98个0）</br><br>512bit - 448bit &#x3D; 64bit</br><br>留的那64比特长度，用于填充长度信息，长度单位为比特</br><br>64bit附加长度信息 （就是明文对应16进制的长度）</br><br>00  …. 48（60个0）以<font color="red">小端法</font>存放&#x3D;&#x3D;》 48 00 … 00</br><br>明文48bit+填充（10…）400bit+长度信息（48 00..）64bit &#x3D; 512bit</br><br>31 32 33 34 35 36 80 00 … 30 00 ..</br><br>512bit &#x2F; 4 &#x3D; 128位16进制</br><br>128分16组 &#x3D; 8位 （每组8位）</br><br>M1 &#x3D;&#x3D;&gt; 31 32 33 34 </br><br>M2 &#x3D;&#x3D;&gt; 35 36 80 00</br><br>M3 &#x3D;&#x3D;&gt; 00 00 00 00   </br><br>…</br></br><br>M15 &#x3D;&#x3D;&gt; 30 00 00 00</br><br>M16 &#x3D;&#x3D;&gt; 00 00 00 00</br></br><br>初始值变量</br><br>A&#x3D;0x 01 23 45 67，</br><br>B&#x3D;0x 89 AB CD EF，</br><br>C&#x3D;0x FE DC BA 98，</br><br>D&#x3D;0x 76 54 32 10。</br></br><br>以小端法存储</br><br>A &#x3D;&#x3D;&gt; 0x 67 45 23 01</br><br>B &#x3D;&#x3D;&gt; 0x EF CD AB 89</br><br>C &#x3D;&#x3D;&gt; 0x 98 BA DC FE</br><br>D &#x3D;&#x3D;&gt; 0x 10 32 54 76</br></br><br>二进制</br><br>A &#x3D;&gt; 0110 0111 0100 0101 0011 0010 0000 0001</br><br>B &#x3D;&gt; 1110 1111 1100 1101 1010 1011 1000 1001</br><br>C &#x3D;&gt; 1001 1000 1011 1010 1101 1100 1111 1110</br><br>D &#x3D;&gt; 0001 0000 0011 0010 0101 0100 0111 0110</br></br><br>第一轮第一步</br><br>FF(a ,b ,c ,d ,M0 ,7 ,0xd76aa478 )</br><br>b + ( (a + F(b,c,d) + Mj + Ki) &lt;&lt; s)</br><br>F(b,c,d)  &#x3D;&#x3D; &gt;  ( X &amp; Y ) | ( (~X) &amp; Z )  &#x3D;&#x3D;&gt; If X then Y else Z</br><br></br>F(b,c,d)  &#x3D;&#x3D;&gt; 1001 1000 1011 1010 1101 1100 1111 1110 &#x3D;&#x3D;&gt; 98 BA DC FE</br><br>+a &#x3D;&gt; 98 BA DC FE + 67 45 23 01 &#x3D;&gt; FF FF FF FF</br></p>
<p>M1 &#x3D; 31 32 33 34 小端法 &#x3D;&gt; 34 33 32 31</br><br>+M1 &#x3D;&gt; FF FF FF FF + 34 33 32 31  &#x3D;&gt; 34 33 32 30 (只保留低8位)</br><br></br><br>+Ki&#x3D;&#x3D;&gt; 34 33 32 30 + D7 6A A4 78 &#x3D;&gt; 0B 9D D6 A8 &#x3D;&#x3D;&gt; 0000 1011 1001 1101 1101 0110 1010 1000</br><br></br><br>&lt;&lt;&lt;s(7)</br><br>&#x3D;&#x3D;&gt; 0011 1011 1010 1101 0101 0000 0001 0111 &#x3D;&#x3D;&gt; CE EB 54 05</br></br></p>
<p>+b</br><br>&#x3D;&#x3D;&gt; CE EB 54 05 + EF CD AB 89 &#x3D;&#x3D;&gt; BE B8 FF 8E</br></br></p>
<p>第一轮后</br><br>a &#x3D;&#x3D;&gt; 0x 10 32 54 76</br><br>b &#x3D;&#x3D;&gt; 0x DE B8 FF 8E</br><br>c &#x3D;&#x3D;&gt; 0x EF CD AB 89</br><br>d &#x3D;&#x3D;&gt; 0x 98 BA DC FE</br><br>…</br></br><br>第64轮</br><br>a &#x3D;&#x3D;&gt; 0x  B7 E8 71 AF &#x3D;&#x3D;&gt; 1011 0111 1110 1000 0111 0001 1010 1111</br><br>b &#x3D;&#x3D;&gt; 0x  BF 25 79 C0 &#x3D;&#x3D;&gt; 1011 1111 0010 0101 0111 1001 1100 0000</br><br>c &#x3D;&#x3D;&gt; 0x  2E 55 BB 7C &#x3D;&#x3D;&gt; 0010 1110 0101 0101 1011 1011 0111 1100</br><br>d &#x3D;&#x3D;&gt; 0x  D2 96 E7 E0 &#x3D;&#x3D;&gt; 1101 0010 1001 0110 1110 0111 1110 0000</br><br>b + ( (a + I(b,c,d) + Mj + ti) &lt;&lt; s)</br><br> I(b,c,d)  &#x3D;&#x3D;&gt; I( b ,c ,d ) &#x3D;c ^ ( b | (<del>d) ) &#x3D;&#x3D;&gt; </br><br>(</del>d) &#x3D;&#x3D;&gt; 0010 1101 0110 1001 0001 1000 0001 1111</br></br></p>
<p>b | (~d) &#x3D;&#x3D;&gt; 1011 1111 0110 1101 0111 1001 1101 1111</br></br></p>
<p>c ^ ( b | (~d) ) &#x3D;&#x3D;&gt; 1001 0001 0011 1000 1100 0010 1010 0011 &#x3D;&#x3D;&gt; 91 38 C2 A3</br></br></p>
<p>+a &#x3D;&#x3D;&gt; 0x 49 21 34 52 </br><br>M64 &#x3D; 0</br><br>+M64 &#x3D;&#x3D;&gt; 0x 49 21 34 52 </br><br>K64 &#x3D; 0x EB 86 D3 91</br><br>+K64 &#x3D;&#x3D;&gt; 0x 34 A8 07 E3 &#x3D;&#x3D;&gt; 0011 0100 1010 1000 0000 0111 1110 0011</br><br>s64 &#x3D; 21</br><br>&lt;&lt; s &#x3D;&#x3D;&gt; 1111 1100 0110 0110 1001 0101 0000 0000 &#x3D;&#x3D;&gt; 0x FC 66 95 00</br><br>+b &#x3D;&#x3D;&gt; 0x BB 8C 0E C0</br></br></p>
<p>a &#x3D;&#x3D; d &#x3D;&#x3D;0x  D2 96 E7 E0</br><br>b &#x3D;&#x3D;0x BB 8C 0E C0</br><br>c &#x3D;&#x3D; b &#x3D;&#x3D;0x  BF 25 79 C0</br><br>d &#x3D;&#x3D; c &#x3D;&#x3D;0x  2E 55 BB 7C</br></br></p>
<p>将a、b、c、d分别在原来基础上再加上A、B、C、D。</br><br>即a &#x3D; a + A，b &#x3D; b + B，c &#x3D; c + C，d &#x3D; d + D</br><br>a &#x3D; a + A &#x3D;&#x3D;&gt; 0x 39 DC 0A E1 &#x3D;&#x3D;&gt; 0x E1 0A DC 39</br><br>b &#x3D; b + B &#x3D;&#x3D;&gt; 0x AB 59 BA 49 &#x3D;&#x3D;&gt; 0x 49 BA 59 AB</br><br>c &#x3D; c + C &#x3D;&#x3D;&gt; 0x 57 E0 56 BE &#x3D;&#x3D;&gt; 0x BE 56 E0 57</br><br>d &#x3D; d + D &#x3D;&#x3D;&gt;0x 3E 88 0F F2 &#x3D;&#x3D;&gt; 0x F2 0F 88 3E</br></p>
<p>abcd &#x3D;&#x3D; E1 0A DC 39 49 BA 59 AB BE 56 E0 57 F2 0F 88 3E &#x3D;&gt; e10adc3949ba59abbe56e057f20f883e</br></br></p>
<h2 id="MD5相对MD4所作的改进："><a href="#MD5相对MD4所作的改进：" class="headerlink" title="MD5相对MD4所作的改进："></a>MD5相对MD4所作的改进：</h2><p>1.增加了第四轮. </br><br>2.每一步均有唯一的加法常数. </br><br>3.为减弱第二轮中函数G的对称性从(X&amp;Y)|(X&amp;Z)|(Y&amp;Z)变为(X&amp;Z)|(Y&amp;(~Z)) </br><br>4.第一步加上了上一步的结果,这将引起更快的雪崩效应. </br><br>5.改变了第二轮和第三轮中访问消息子分组的次序,使其更不相似.</br><br>6.近似优化了每一轮中的循环左移位移量以实现更快的雪崩效应.各轮的位移量互不相同.</br><br></br></p>
<h2 id="对明文编码"><a href="#对明文编码" class="headerlink" title="对明文编码"></a>对明文编码</h2><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220620/04.webp"
                     
                ><br></br></p>
<h2 id="为什么是这些非线性函数？"><a href="#为什么是这些非线性函数？" class="headerlink" title="为什么是这些非线性函数？"></a><font color="red">为什么是这些非线性函数？</font></h2><p>Ø这没什么最优解，你也可以使用别的非线性函数，或者自己实现时把顺序颠倒</br><br>Ø但这可能会造成算法安全性下降，而且是你无法把控的部分，因为这部分内容的专业性非常强，属于密码学的内容</br></p>
</br>

<h2 id="为什么K表是这样，sin函数，或者说三角函数，在这儿扮演了怎样的角色？"><a href="#为什么K表是这样，sin函数，或者说三角函数，在这儿扮演了怎样的角色？" class="headerlink" title="为什么K表是这样，sin函数，或者说三角函数，在这儿扮演了怎样的角色？"></a><font color="red">为什么K表是这样，sin函数，或者说三角函数，在这儿扮演了怎样的角色？</font></h2><p>k表的生成是： Ki &#x3D; 2^32 x |sin i|</br><br>截取整数转16进制</br><br>例如：K1 &#x3D; 2^32 x |sin 1| &#x3D; 3614090360.2828…..</br><br>3614090360 &#x3D;&#x3D;&gt; D76AA478</br></br></p>
<h2 id="循环左移为什么是这样移？这个规定是为什么呢？-随机"><a href="#循环左移为什么是这样移？这个规定是为什么呢？-随机" class="headerlink" title="循环左移为什么是这样移？这个规定是为什么呢？(随机)"></a><font color="red">循环左移为什么是这样移？这个规定是为什么呢？(随机)</font></h2><p>我们只知道，本质上，它是为了更好的扩散和混淆，让明文和密文之间没有明显的对应和关联，但为什么这样做，可能是安全性上的考量</br><br>比如胎死腹中的sha0和被广泛使用的sha1，竟然只通过循环左移1位就解决了安全性的问题</br></br></p>
<h2 id="为什么是填充1个1和其余都是0，不是都是0"><a href="#为什么是填充1个1和其余都是0，不是都是0" class="headerlink" title="为什么是填充1个1和其余都是0，不是都是0"></a><font color="red">为什么是填充1个1和其余都是0，不是都是0</font></h2><p>加入输入 1000</br><br>填充都是0后 1000 0000</br><br>不知道明文是哪个了</br><br>填充1后 1000 1000</br><br>就可以区分出来</br></br></p>
<h2 id="大端、小端基础知识"><a href="#大端、小端基础知识" class="headerlink" title="大端、小端基础知识"></a>大端、小端基础知识</h2><p><a class="link"   href="https://zhuanlan.zhihu.com/p/316347205" >https://zhuanlan.zhihu.com/p/316347205<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220620/05.webp"
                     
                ></p>
</br>

<h2 id="python-md5"><a href="#python-md5" class="headerlink" title="python md5"></a>python md5</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os.path</span><br><span class="line"></span><br><span class="line">SV = [<span class="number">0xd76aa478</span>, <span class="number">0xe8c7b756</span>, <span class="number">0x242070db</span>, <span class="number">0xc1bdceee</span>, <span class="number">0xf57c0faf</span>,</span><br><span class="line">      <span class="number">0x4787c62a</span>, <span class="number">0xa8304613</span>, <span class="number">0xfd469501</span>, <span class="number">0x698098d8</span>, <span class="number">0x8b44f7af</span>,</span><br><span class="line">      <span class="number">0xffff5bb1</span>, <span class="number">0x895cd7be</span>, <span class="number">0x6b901122</span>, <span class="number">0xfd987193</span>, <span class="number">0xa679438e</span>,</span><br><span class="line">      <span class="number">0x49b40821</span>, <span class="number">0xf61e2562</span>, <span class="number">0xc040b340</span>, <span class="number">0x265e5a51</span>, <span class="number">0xe9b6c7aa</span>,</span><br><span class="line">      <span class="number">0xd62f105d</span>, <span class="number">0x2441453</span>, <span class="number">0xd8a1e681</span>, <span class="number">0xe7d3fbc8</span>, <span class="number">0x21e1cde6</span>,</span><br><span class="line">      <span class="number">0xc33707d6</span>, <span class="number">0xf4d50d87</span>, <span class="number">0x455a14ed</span>, <span class="number">0xa9e3e905</span>, <span class="number">0xfcefa3f8</span>,</span><br><span class="line">      <span class="number">0x676f02d9</span>, <span class="number">0x8d2a4c8a</span>, <span class="number">0xfffa3942</span>, <span class="number">0x8771f681</span>, <span class="number">0x6d9d6122</span>,</span><br><span class="line">      <span class="number">0xfde5380c</span>, <span class="number">0xa4beea44</span>, <span class="number">0x4bdecfa9</span>, <span class="number">0xf6bb4b60</span>, <span class="number">0xbebfbc70</span>,</span><br><span class="line">      <span class="number">0x289b7ec6</span>, <span class="number">0xeaa127fa</span>, <span class="number">0xd4ef3085</span>, <span class="number">0x4881d05</span>, <span class="number">0xd9d4d039</span>,</span><br><span class="line">      <span class="number">0xe6db99e5</span>, <span class="number">0x1fa27cf8</span>, <span class="number">0xc4ac5665</span>, <span class="number">0xf4292244</span>, <span class="number">0x432aff97</span>,</span><br><span class="line">      <span class="number">0xab9423a7</span>, <span class="number">0xfc93a039</span>, <span class="number">0x655b59c3</span>, <span class="number">0x8f0ccc92</span>, <span class="number">0xffeff47d</span>,</span><br><span class="line">      <span class="number">0x85845dd1</span>, <span class="number">0x6fa87e4f</span>, <span class="number">0xfe2ce6e0</span>, <span class="number">0xa3014314</span>, <span class="number">0x4e0811a1</span>,</span><br><span class="line">      <span class="number">0xf7537e82</span>, <span class="number">0xbd3af235</span>, <span class="number">0x2ad7d2bb</span>, <span class="number">0xeb86d391</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据ascil编码把字符转成对应的二进制</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">binvalue</span>(<span class="params">val, bitsize</span>):</span><br><span class="line">    binval = <span class="built_in">bin</span>(val)[<span class="number">2</span>:] <span class="keyword">if</span> <span class="built_in">isinstance</span>(val, <span class="built_in">int</span>) <span class="keyword">else</span> <span class="built_in">bin</span>(<span class="built_in">ord</span>(val))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(binval) &gt; bitsize:</span><br><span class="line">        <span class="keyword">raise</span> (<span class="string">&quot;binary value larger than the expected size&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(binval) &lt; bitsize:</span><br><span class="line">        binval = <span class="string">&quot;0&quot;</span> + binval</span><br><span class="line">    <span class="keyword">return</span> binval</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">string_to_bit_array</span>(<span class="params">text</span>):</span><br><span class="line">    array = <span class="built_in">list</span>()</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        binval = binvalue(char, <span class="number">8</span>)</span><br><span class="line">        array.extend([<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">list</span>(binval)])</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环左移</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leftCircularShift</span>(<span class="params">k, bits</span>):</span><br><span class="line">    bits = bits % <span class="number">32</span></span><br><span class="line">    k = k % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    upper = (k &lt;&lt; bits) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    result = upper | (k &gt;&gt; (<span class="number">32</span> - (bits)))</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分块</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">blockDivide</span>(<span class="params">block, chunks</span>):</span><br><span class="line">    result = []</span><br><span class="line">    size = <span class="built_in">len</span>(block) // chunks</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, chunks):</span><br><span class="line">        result.append(<span class="built_in">int</span>.from_bytes(block[i * size:(i + <span class="number">1</span>) * size], byteorder=<span class="string">&quot;little&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># F函数作用于“比特位”上</span></span><br><span class="line"><span class="comment"># if x then y else z</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">F</span>(<span class="params">X, Y, Z</span>):</span><br><span class="line">    <span class="keyword">return</span> ((X &amp; Y) | ((~X) &amp; Z))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if z then x else y</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">G</span>(<span class="params">X, Y, Z</span>):</span><br><span class="line">    <span class="keyword">return</span> ((X &amp; Z) | (Y &amp; (~Z)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># if X = Y then Z else ~Z</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">H</span>(<span class="params">X, Y, Z</span>):</span><br><span class="line">    <span class="keyword">return</span> (X ^ Y ^ Z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">I</span>(<span class="params">X, Y, Z</span>):</span><br><span class="line">    <span class="keyword">return</span> (Y ^ (X | (~Z)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四个F函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">FF</span>(<span class="params">a, b, c, d, M, s, t</span>):</span><br><span class="line">    result = b + leftCircularShift((a + F(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">GG</span>(<span class="params">a, b, c, d, M, s, t</span>):</span><br><span class="line">    result = b + leftCircularShift((a + G(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">HH</span>(<span class="params">a, b, c, d, M, s, t</span>):</span><br><span class="line">    result = b + leftCircularShift((a + H(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">II</span>(<span class="params">a, b, c, d, M, s, t</span>):</span><br><span class="line">    result = b + leftCircularShift((a + I(b, c, d) + M + t), s)</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据转换</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fmt8</span>(<span class="params">num</span>):</span><br><span class="line">    bighex = <span class="string">&quot;&#123;0:08x&#125;&quot;</span>.<span class="built_in">format</span>(num)</span><br><span class="line">    binver = binascii.unhexlify(bighex)</span><br><span class="line">    result = <span class="string">&quot;&#123;0:08x&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>.from_bytes(binver, byteorder=<span class="string">&#x27;little&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> (result)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算比特长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bitlen</span>(<span class="params">bitstring</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(bitstring) * <span class="number">8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5sum</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="comment"># 计算比特长度，如果内容过长，64个比特放不下。就取低64bit。</span></span><br><span class="line">    msgLen = bitlen(msg) % (<span class="number">2</span> ** <span class="number">64</span>)</span><br><span class="line">    <span class="comment"># 先填充一个0x80，其实是先填充一个1，后面跟对应个数的0，因为一个明文的编码至少需要8比特，所以直接填充 0b10000000即0x80</span></span><br><span class="line">    msg = msg + <span class="string">b&#x27;\x80&#x27;</span>  <span class="comment"># 0x80 = 1000 0000</span></span><br><span class="line">    <span class="comment"># 似乎各种编码，即使是一个字母，都至少得1个字节，即8bit才能表示，所以不会出现原文55bit，pad1就满足的情况？可是不对呀，要是二进制文件呢？</span></span><br><span class="line">    <span class="comment"># 填充0到满足要求为止。</span></span><br><span class="line">    zeroPad = (<span class="number">448</span> - (msgLen + <span class="number">8</span>) % <span class="number">512</span>) % <span class="number">512</span></span><br><span class="line">    zeroPad //= <span class="number">8</span></span><br><span class="line">    msg = msg + <span class="string">b&#x27;\x00&#x27;</span> * zeroPad + msgLen.to_bytes(<span class="number">8</span>, byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="comment"># 计算循环轮数，512个为一轮</span></span><br><span class="line">    msgLen = bitlen(msg)</span><br><span class="line">    iterations = msgLen // <span class="number">512</span></span><br><span class="line">    <span class="comment"># 初始化变量</span></span><br><span class="line">    <span class="comment"># 算法魔改的第一个点，也是最明显的点</span></span><br><span class="line">    A = <span class="number">0x67452301</span></span><br><span class="line">    B = <span class="number">0xefcdab89</span></span><br><span class="line">    C = <span class="number">0x98badcfe</span></span><br><span class="line">    D = <span class="number">0x10325476</span></span><br><span class="line">    <span class="comment"># MD5的主体就是对abcd进行n次的迭代，所以得有个初始值，可以随便选，也可以用默认的魔数，这个改起来毫无风险，所以大家爱魔改它，甚至改这个都不算魔改。</span></span><br><span class="line">    <span class="comment"># main loop</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, iterations):</span><br><span class="line">        a = A</span><br><span class="line">        b = B</span><br><span class="line">        c = C</span><br><span class="line">        d = D</span><br><span class="line">        block = msg[i * <span class="number">64</span>:(i + <span class="number">1</span>) * <span class="number">64</span>]</span><br><span class="line">        <span class="comment"># 明文的处理，顺便调整了一下端序</span></span><br><span class="line">        M = blockDivide(block, <span class="number">16</span>)</span><br><span class="line">        <span class="comment"># Rounds</span></span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">0</span>], <span class="number">7</span>, SV[<span class="number">0</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">1</span>], <span class="number">12</span>, SV[<span class="number">1</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">2</span>], <span class="number">17</span>, SV[<span class="number">2</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">3</span>], <span class="number">22</span>, SV[<span class="number">3</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">4</span>], <span class="number">7</span>, SV[<span class="number">4</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">5</span>], <span class="number">12</span>, SV[<span class="number">5</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">6</span>], <span class="number">17</span>, SV[<span class="number">6</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">7</span>], <span class="number">22</span>, SV[<span class="number">7</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">8</span>], <span class="number">7</span>, SV[<span class="number">8</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">9</span>], <span class="number">12</span>, SV[<span class="number">9</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">10</span>], <span class="number">17</span>, SV[<span class="number">10</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">11</span>], <span class="number">22</span>, SV[<span class="number">11</span>])</span><br><span class="line">        a = FF(a, b, c, d, M[<span class="number">12</span>], <span class="number">7</span>, SV[<span class="number">12</span>])</span><br><span class="line">        d = FF(d, a, b, c, M[<span class="number">13</span>], <span class="number">12</span>, SV[<span class="number">13</span>])</span><br><span class="line">        c = FF(c, d, a, b, M[<span class="number">14</span>], <span class="number">17</span>, SV[<span class="number">14</span>])</span><br><span class="line">        b = FF(b, c, d, a, M[<span class="number">15</span>], <span class="number">22</span>, SV[<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">1</span>], <span class="number">5</span>, SV[<span class="number">16</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">6</span>], <span class="number">9</span>, SV[<span class="number">17</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">11</span>], <span class="number">14</span>, SV[<span class="number">18</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">0</span>], <span class="number">20</span>, SV[<span class="number">19</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">5</span>], <span class="number">5</span>, SV[<span class="number">20</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">10</span>], <span class="number">9</span>, SV[<span class="number">21</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">15</span>], <span class="number">14</span>, SV[<span class="number">22</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">4</span>], <span class="number">20</span>, SV[<span class="number">23</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">9</span>], <span class="number">5</span>, SV[<span class="number">24</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">14</span>], <span class="number">9</span>, SV[<span class="number">25</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">3</span>], <span class="number">14</span>, SV[<span class="number">26</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">8</span>], <span class="number">20</span>, SV[<span class="number">27</span>])</span><br><span class="line">        a = GG(a, b, c, d, M[<span class="number">13</span>], <span class="number">5</span>, SV[<span class="number">28</span>])</span><br><span class="line">        d = GG(d, a, b, c, M[<span class="number">2</span>], <span class="number">9</span>, SV[<span class="number">29</span>])</span><br><span class="line">        c = GG(c, d, a, b, M[<span class="number">7</span>], <span class="number">14</span>, SV[<span class="number">30</span>])</span><br><span class="line">        b = GG(b, c, d, a, M[<span class="number">12</span>], <span class="number">20</span>, SV[<span class="number">31</span>])</span><br><span class="line"></span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">5</span>], <span class="number">4</span>, SV[<span class="number">32</span>])</span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">8</span>], <span class="number">11</span>, SV[<span class="number">33</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">11</span>], <span class="number">16</span>, SV[<span class="number">34</span>])</span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">14</span>], <span class="number">23</span>, SV[<span class="number">35</span>])</span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">1</span>], <span class="number">4</span>, SV[<span class="number">36</span>])</span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">4</span>], <span class="number">11</span>, SV[<span class="number">37</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">7</span>], <span class="number">16</span>, SV[<span class="number">38</span>])</span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">10</span>], <span class="number">23</span>, SV[<span class="number">39</span>])</span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">13</span>], <span class="number">4</span>, SV[<span class="number">40</span>])</span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">0</span>], <span class="number">11</span>, SV[<span class="number">41</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">3</span>], <span class="number">16</span>, SV[<span class="number">42</span>])</span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">6</span>], <span class="number">23</span>, SV[<span class="number">43</span>])</span><br><span class="line">        a = HH(a, b, c, d, M[<span class="number">9</span>], <span class="number">4</span>, SV[<span class="number">44</span>])</span><br><span class="line">        d = HH(d, a, b, c, M[<span class="number">12</span>], <span class="number">11</span>, SV[<span class="number">45</span>])</span><br><span class="line">        c = HH(c, d, a, b, M[<span class="number">15</span>], <span class="number">16</span>, SV[<span class="number">46</span>])</span><br><span class="line">        b = HH(b, c, d, a, M[<span class="number">2</span>], <span class="number">23</span>, SV[<span class="number">47</span>])</span><br><span class="line"></span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">0</span>], <span class="number">6</span>, SV[<span class="number">48</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">7</span>], <span class="number">10</span>, SV[<span class="number">49</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">14</span>], <span class="number">15</span>, SV[<span class="number">50</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">5</span>], <span class="number">21</span>, SV[<span class="number">51</span>])</span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">12</span>], <span class="number">6</span>, SV[<span class="number">52</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">3</span>], <span class="number">10</span>, SV[<span class="number">53</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">10</span>], <span class="number">15</span>, SV[<span class="number">54</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">1</span>], <span class="number">21</span>, SV[<span class="number">55</span>])</span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">8</span>], <span class="number">6</span>, SV[<span class="number">56</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">15</span>], <span class="number">10</span>, SV[<span class="number">57</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">6</span>], <span class="number">15</span>, SV[<span class="number">58</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">13</span>], <span class="number">21</span>, SV[<span class="number">59</span>])</span><br><span class="line">        a = II(a, b, c, d, M[<span class="number">4</span>], <span class="number">6</span>, SV[<span class="number">60</span>])</span><br><span class="line">        d = II(d, a, b, c, M[<span class="number">11</span>], <span class="number">10</span>, SV[<span class="number">61</span>])</span><br><span class="line">        c = II(c, d, a, b, M[<span class="number">2</span>], <span class="number">15</span>, SV[<span class="number">62</span>])</span><br><span class="line">        b = II(b, c, d, a, M[<span class="number">9</span>], <span class="number">21</span>, SV[<span class="number">63</span>])</span><br><span class="line">        A = (A + a) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        B = (B + b) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        C = (C + c) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">        D = (D + d) % (<span class="number">2</span> ** <span class="number">32</span>)</span><br><span class="line">    result = fmt8(A) + fmt8(B) + fmt8(C) + fmt8(D)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = <span class="built_in">str</span>(<span class="string">&quot;123456&quot;</span>).encode(<span class="string">&quot;UTF-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;plainText: &quot;</span>, data)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;result: &quot;</span>, md5sum(data))</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Objection命令</title>
    <url>/2021/03/15/Objection%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="安装frida-12-8-0全家桶"><a href="#安装frida-12-8-0全家桶" class="headerlink" title="安装frida 12.8.0全家桶"></a>安装frida 12.8.0全家桶</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install frida==12.8.0</span><br><span class="line">pip install frida-tools==5.3.0</span><br><span class="line">pip install objection==1.8.4</span><br></pre></td></tr></table></figure>

<p>frida切换端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./frida-server-12.8.10-android-arm64 -v -l 0.0.0.0:9999</span><br></pre></td></tr></table></figure>
<p>根据端口连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frida -H 192.168.137.148:9999 -F</span><br></pre></td></tr></table></figure>
<p>查看进程端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">netstat -tuulp |grep fs</span><br></pre></td></tr></table></figure>
<p>objection通过端口连接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objection -N -h 192.168.137.148 -p 9999 -g com.android.settings explore</span><br></pre></td></tr></table></figure>

<p>列出所有的类</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android hooking list classes</span><br></pre></td></tr></table></figure>
<p>在手机上启动<code>frida-server</code>，并且点击启动“设置”图标，手机进入设置的界面，首先查看一下“设置”应用的包名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># frida-ps -U|grep -i setting</span><br><span class="line"> 7107  com.android.settings</span><br><span class="line">13370  com.google.android.settings.intelligence</span><br></pre></td></tr></table></figure>
<p>再使用<code>objection</code>注入“设置”应用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># objection -g com.android.settings explore</span><br></pre></td></tr></table></figure>

<ul>
<li>查看内存中加载的库</li>
</ul>
<p>运行命令<code>memory list modules</code>，</p>
<ul>
<li>查看库的导出函数</li>
</ul>
<p>运行命令<code>memory list exports libssl.so</code></p>
<ul>
<li>将结果保存到<code>json</code>文件中</li>
</ul>
<p>当结果太多，终端无法全部显示的时候，可以将结果导出到文件中，然后使用其他软件查看内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># memory list exports libart.so --json /root/libart.json  </span><br><span class="line">Writing exports as json to /root/libart.json...</span><br><span class="line">Wrote exports to: /root/libart.json</span><br></pre></td></tr></table></figure>


<h3 id="批量Hook"><a href="#批量Hook" class="headerlink" title="批量Hook"></a>批量Hook</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">objection -g 包名 explore -c <span class="string">&quot;path&quot;</span></span><br></pre></td></tr></table></figure>
<p>搜索文件下含有关键字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">grep -ril <span class="string">&quot;okhttp3&quot;</span> *</span><br></pre></td></tr></table></figure>

<p><strong>第二种  使用无线WiFi连接</strong><br />首先先了解一点底层的知识：<br />    Android系统底层运行着一个服务（adbd），用于响应和管理大家在电脑端的adb命令连接，这个服务在启动时会根据手机的配置监听USB连接或网络其中之一。配置的属性为：service.adb.tcp.port，也就是监听的网络端口<br />•以上属性的值 &gt; 0：adbd将监听网络对应的端口（一般为5555）<br />•以上属性的值 &lt;&#x3D;-1：adbd将监听USB<br />接下来是连接步骤：<br />命令行输入：adb connect (ip):5555<br />提示：unable to connect to (ip):5555<br /><strong>解决办法：</strong><br />   1）手机与PC相连，执行以下命令：adb tcpip 5555<br />     成功提示：restarting in TCP mode port 5555  <br />　  然后断开USB<br />     错误提示：error:device not found<br />     查看手机USB调试是否打开；PC端是否安装手机驱动。<br />   2）接着执行adb connect (ip):5555，这时候应该就能连接成功了<br />     成功提示：connected to (ip):5555<br />调试完成之后，输入如下的命令断开连接：<br />adb disconnect (ip):5555</p>
<p>列出所有activity</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">android hooking list activities</span><br></pre></td></tr></table></figure>
<p>跳到某一个activuty界面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">android intent launch_activity ***<span class="title class_">Activity</span></span><br></pre></td></tr></table></figure>
<p>列出所有services</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">android hooking list services</span><br></pre></td></tr></table></figure>
<p>从内存中搜索实例类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">android heap search instances ***</span><br></pre></td></tr></table></figure>
<p>搜索到类的方法是否存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">android heap execute 类的地址值 方法名</span><br></pre></td></tr></table></figure>
<p>查看实例类的地址</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker objectsearch ****</span><br></pre></td></tr></table></figure>
<p>根据地址查看该类属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker objectdump ****</span><br></pre></td></tr></table></figure>

<h4 id="启动app并执行"><a href="#启动app并执行" class="headerlink" title="启动app并执行"></a>启动app并执行</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">objection -g 包名 explore --startup-command <span class="string">&quot;android hooking watch ... --dump-args --dump-backtrace --dump-return&quot;</span> </span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">objection -g 包名 explore -s <span class="string">&quot;android hooking watch ... --dump-args --dump-backtrace --dump-return&quot;</span> </span><br></pre></td></tr></table></figure>

<h3 id="如何使用objection去批量hook和trace？比如一次性hook几千个类？"><a href="#如何使用objection去批量hook和trace？比如一次性hook几千个类？" class="headerlink" title="如何使用objection去批量hook和trace？比如一次性hook几千个类？"></a>如何使用objection去批量hook和trace？比如一次性hook几千个类？</h3><ol>
<li>把~&#x2F;.objection&#x2F;objection.log删掉；</li>
<li>到objection界面中运行android hooking list classes，列出所有的类；</li>
<li>对新生成的~&#x2F;.objection&#x2F;objection.log文件进行过滤，比如只关心http相关的。cat objection.log|grep -i http</li>
<li>将输出结果保存到一个excel列中，前面补全android hooking watch class xxxxx，另存为文本文件。如附件所示</li>
<li>加载这个文件：objection -g com.android.settings explore -c “2.txt” ，这样一下子就hook上了几千个相关类的所有方法及其所有重载。</li>
<li>如果trace感兴趣的方法也是同理，android hooking search methods * ，会打印出所有的方法。</li>
</ol>
<h3 id="安装objection插件"><a href="#安装objection插件" class="headerlink" title="安装objection插件"></a>安装objection插件</h3><p><strong>安装FRIDA_DEXDump</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hluwa/FRIDA-DEXDump ~/Downloads/FRIDA-DEXDump;</span><br></pre></td></tr></table></figure>
<p>把frida_dexdumpp移到&#x2F;root&#x2F;.objection&#x2F;plugins&#x2F;下</br></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /root/Downloads/FRIDA-DEXDump/frida_dexdump /root/.objection/plugins/</span><br></pre></td></tr></table></figure>

<p>使用方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objection -g com.app.name explore -P ~/.objection/plugins</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://github.com/hluwa/FRIDA-DEXDump" >https://github.com/hluwa/FRIDA-DEXDump<i class="fas fa-external-link-alt"></i></a></p>
</br>

<p><strong>安装Wallbreaker</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/hluwa/Wallbreaker ~/.objection/plugins/Wallbreaker</span><br></pre></td></tr></table></figure>
<p><a class="link"   href="https://github.com/hluwa/Wallbreaker" >https://github.com/hluwa/Wallbreaker<i class="fas fa-external-link-alt"></i></a></p>
</br>

<h3 id="wallbreaker"><a href="#wallbreaker" class="headerlink" title="wallbreaker"></a>wallbreaker</h3><p>导入(win下)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">plugin load .objection/plugins/Wallbreaker</span><br></pre></td></tr></table></figure>
<p>查看类的结构</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker classdump ***</span><br></pre></td></tr></table></figure>
<p>根据名字找类</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker classsearch ***</span><br></pre></td></tr></table></figure>
<p>查看类的实例的内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker objectdump --fullname ***</span><br></pre></td></tr></table></figure>
<p>找出类的实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">plugin wallbreaker objectsearch ***</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>ProtoBuf逆向之某公交app</title>
    <url>/2023/02/07/ProtoBuf%E9%80%86%E5%90%91%E4%B9%8B%E6%9F%90%E5%85%AC%E4%BA%A4app/</url>
    <content><![CDATA[<p>上一篇是web端的ProtoBuf逆向，这篇就找了个app的ProtoBuf看看练练手<br />目标app：aHR0cHM6Ly93d3cud2FuZG91amlhLmNvbS9hcHBzLzc0NTAxNjM&#x3D;</p>
<h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>随便搜索一个线路点进去，看到请求头和响应都是加密的<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/01.webp"
                     
                ><br />用jadx分析下请求头的加密参数request<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/02.webp"
                     
                ><br />记住这里其他两个函数，有”&#x2F;protoc.Request.Sequence”，还引用了proto的包<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/03.webp"
                     
                ><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/04.webp"
                     
                ><br />到这可以知道request的值是经过native函数加密后再由base64得到的。<br />用ida打开native so文件，定位encode2函数<br />!<img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/05.webp"
                     
                ><br />可以看到是用了aes_cbc_128加密，那就是需要拿到密钥和iv<br />直接frida hook这两个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">UtilsClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.shjt.map.tool.Native&quot;</span>);</span><br><span class="line">        <span class="title class_">UtilsClass</span>.<span class="property">encode2</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;入参: &quot;</span>, <span class="title class_">ByteString</span>.<span class="title function_">of</span>(a).<span class="title function_">hex</span>());</span><br><span class="line">          <span class="keyword">var</span> value = <span class="variable language_">this</span>.<span class="title function_">encode2</span>(a);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结果: &#x27;</span>, <span class="title class_">ByteString</span>.<span class="title function_">of</span>(value).<span class="title function_">hex</span>());</span><br><span class="line">          <span class="keyword">return</span> value;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">inline_hook</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inline_hook</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libnative_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative.so&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (libnative_lib_addr) &#123;</span><br><span class="line">        <span class="keyword">var</span> aes_decrypt_cbc  = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative.so&quot;</span>, <span class="string">&quot;_Z15aes_encrypt_cbcPKhjPhPKjiS0_&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> aes_key_setup = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libnative.so&#x27;</span>, <span class="string">&#x27;_Z13aes_key_setupPKhPji&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Native</span>_encode2 = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libnative.so&#x27;</span>, <span class="string">&#x27;Java_com_shjt_map_tool_Native_encode2&#x27;</span>);</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(aes_key_setup, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;================aes_key_setup=================&quot;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg1:&#x27;</span>,args[<span class="number">0</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg2:&#x27;</span>,args[<span class="number">1</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg3:&#x27;</span>,args[<span class="number">2</span>].<span class="title function_">toInt32</span>())</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(aes_decrypt_cbc, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;================aes_decrypt_cbc=================&quot;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg1:&#x27;</span>,args[<span class="number">0</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg2:&#x27;</span>,args[<span class="number">1</span>].<span class="title function_">toInt32</span>())</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg3:&#x27;</span>,args[<span class="number">2</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg4:&#x27;</span>,args[<span class="number">3</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg5:&#x27;</span>,args[<span class="number">4</span>].<span class="title function_">toInt32</span>())</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg6:&#x27;</span>,args[<span class="number">5</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval is :&quot;</span>, retval) </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure>
<p>结果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">入参:  0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801</span><br><span class="line">================aes_key_setup=================</span><br><span class="line">arg1:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  2f d3 02 8e 14 a4 5d 1f 8b 6e b0 b2 ad b7 ca af  /.....]..n......</span><br><span class="line">arg2:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  39 39 37 34 20 49 ed f1 ff ff ff ff 00 00 00 00  9974 I..........</span><br><span class="line">arg3: 128</span><br><span class="line">================aes_decrypt_cbc=================</span><br><span class="line">arg1:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  0a 27 0a 18 2f 70 72 6f 74 6f 63 2e 52 65 71 75  .&#x27;../protoc.Requ</span><br><span class="line">arg2: 48</span><br><span class="line">arg3:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 6f 6d 2f 61 6e 64 72 6f 69 64 2f 6f 6b 68 74  .om/android/okht</span><br><span class="line">arg4:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  8e 02 d3 2f 1f 5d a4 14 b2 b0 6e 8b af ca b7 ad  .../.]....n.....</span><br><span class="line">arg5: 128</span><br><span class="line">arg6:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  75 4c 8f d5 84 fa cf 62 10 37 6b 2b 72 b0 63 e4  uL.....b.7k+r.c.</span><br><span class="line">retval is : 0x1</span><br><span class="line">结果:  8d456e87c6801a2e18920732f80a1127e7a9548fd9f2f8b45edab8fd629e60bd804287b6fa4bb05fbc8b284ab0eb9783</span><br></pre></td></tr></table></figure>
<p>明文，密文有了<br />iv和密钥就在这几个之间，两两组合试一试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2f d3 02 8e 14 a4 5d 1f 8b 6e b0 b2 ad b7 ca af</span><br><span class="line">39 39 37 34 20 49 ed f1 ff ff ff ff 00 00 00 00</span><br><span class="line">0a 27 0a 18 2f 70 72 6f 74 6f 63 2e 52 65 71 75</span><br><span class="line">00 6f 6d 2f 61 6e 64 72 6f 69 64 2f 6f 6b 68 74</span><br><span class="line">8e 02 d3 2f 1f 5d a4 14 b2 b0 6e 8b af ca b7 ad</span><br><span class="line">75 4c 8f d5 84 fa cf 62 10 37 6b 2b 72 b0 63 e4</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/06.webp"
                     
                ><br />所以这个aes是标准的算法，没经过魔改的，再把加密后的结果base64一下就是请求的参数了，过程算法知道了，那参数来源呢，是怎么得到的</p>
<h3 id="使用proto"><a href="#使用proto" class="headerlink" title="使用proto"></a>使用proto</h3><p>上面说了用了proto的包，看里面的函数过程，明文是经过了proto协议的才到aes加密<br />那就0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801转成二进制写进文件，再用proto解码器解码看看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment"># hex字符串转二进制</span></span><br><span class="line">d = binascii.a2b_hex(<span class="string">&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;req.bin&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(d)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">protoc --decode_raw &lt; req.<span class="built_in">bin</span></span><br></pre></td></tr></table></figure>
<p>解码后得到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 &#123;</span><br><span class="line">  1: &quot;/protoc.Request.Sequence&quot;</span><br><span class="line">  2 &#123;</span><br><span class="line">    1: 1</span><br><span class="line">    2: &quot;90\350\267\257&quot;</span><br><span class="line">    3: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>果不其然，那接下来如何模拟发请求呢<br />经过上一篇后，现在很快就能编写proto文件了</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg22</span> &#123;</span><br><span class="line">  <span class="type">int32</span> field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> field2 = <span class="number">2</span>;</span><br><span class="line">  <span class="type">int32</span> field3 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg11</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  Msg22 msg22 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchService</span>&#123;</span><br><span class="line">  Msg11 msg11 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译成python版本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protoc --python_out=. ./req.proto</span><br></pre></td></tr></table></figure>
<p>目录下生成了req_pb2.py 拖入项目中，需要使用时就调用即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> req_pb2 <span class="keyword">as</span> pb</span><br><span class="line"></span><br><span class="line"><span class="comment"># hex字符串转二进制</span></span><br><span class="line"><span class="comment"># d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)</span></span><br><span class="line"><span class="comment"># with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(d)</span></span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService.SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line">search_request.msg11.field1 = <span class="string">&#x27;/protoc.Request.Sequence&#x27;</span></span><br><span class="line">search_request.msg11.msg22.field1 = <span class="number">1</span></span><br><span class="line">search_request.msg11.msg22.field2 = <span class="string">&#x27;90路&#x27;</span></span><br><span class="line">search_request.msg11.msg22.field3 = <span class="number">1</span></span><br><span class="line"><span class="comment"># 序列化请求数据</span></span><br><span class="line">serialize_data = search_request.SerializeToString()</span><br><span class="line"><span class="comment"># print(serialize_data)</span></span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;my_req.bin&#x27;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(serialize_data)</span><br></pre></td></tr></table></figure>
<p>运行后生成my_req.bin文件，跟原来的对比一下<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/07.webp"
                     
                ><br />发送请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> req_pb2 <span class="keyword">as</span> pb</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(pad(ori, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> unpad(aes.decrypt(ori), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hex字符串转二进制</span></span><br><span class="line"><span class="comment"># d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)</span></span><br><span class="line"><span class="comment"># with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(d)</span></span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService.SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line">search_request.msg1.field1 = <span class="string">&#x27;/protoc.Request.Sequence&#x27;</span></span><br><span class="line">search_request.msg1.msg2.field1 = <span class="number">1</span></span><br><span class="line">search_request.msg1.msg2.field2 = <span class="string">&#x27;90路&#x27;</span></span><br><span class="line">search_request.msg1.msg2.field3 = <span class="number">1</span></span><br><span class="line"><span class="comment"># 序列化请求数据</span></span><br><span class="line">serialize_data = search_request.SerializeToString()</span><br><span class="line"><span class="comment"># print(serialize_data)</span></span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="comment"># with open(&#x27;my_req.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(serialize_data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对序列化后的数据aes加密</span></span><br><span class="line">aes_data = aes_encry(serialize_data)</span><br><span class="line"><span class="comment"># b64 aes加密数据</span></span><br><span class="line">b64_aes_data = base64.b64encode(aes_data)</span><br><span class="line"><span class="comment"># 请求体</span></span><br><span class="line">post_data = <span class="string">&#x27;request=&#x27;</span> + quote(b64_aes_data.decode(), safe=<span class="string">&#x27;&#x27;</span>)+<span class="string">&#x27;%0A&#x27;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;lbs.jt.sh.cn:8082&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://lbs.jt.sh.cn:8082/app/rls/monitor&quot;</span></span><br><span class="line">response = requests.post(url, headers=header, data=post_data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>
<p>运行后响应内容跟抓包的一样是加密的，用aes尝试解密<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/08.webp"
                     
                ><br />解完后很像protobuf格式，写进bin文件，再用proto解码看看</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">decry_data = aes_decry(response.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;resp.bin&#x27;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(decry_data)</span><br></pre></td></tr></table></figure>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">D:\pythonProject\xxxx&gt;protoc --decode_raw &lt; resp.bin</span><br><span class="line"><span class="number">1</span> &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;/protoc.Response.Dispatch&quot;</span></span><br><span class="line">  <span class="number">2</span> &#123;</span><br><span class="line">    <span class="number">1</span> &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="string">&quot;90\350\267\257&quot;</span></span><br><span class="line">      <span class="number">2</span> &#123;</span><br><span class="line">        <span class="number">1</span> &#123;</span><br><span class="line">          <span class="number">1</span>: <span class="string">&quot;05:00&quot;</span></span><br><span class="line">          <span class="number">2</span>: <span class="string">&quot;23:41&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\235\226\345\256\207\345\215\227\350\267\257\346\216\247\346\261\237\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\216\247\346\261\237\346\226\260\346\235\221&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\273\204\345\205\264\350\267\257\345\233\275\346\235\203\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\273\204\345\205\264\350\267\257\345\233\275\351\241\272\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\272\224\350\247\222\345\234\272(\347\277\224\346\256\267\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\233\275\345\222\214\350\267\257\346\224\277\347\253\213\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\201\222\344\273\201\350\267\257\346\270\205\346\272\220\347\216\257\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\270\226\347\225\214\350\267\257\345\233\275\345\222\214\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\270\226\347\225\214\350\267\257\346\260\221\344\272\254\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\227\270\346\256\267\350\267\257\346\256\267\350\241\214\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\227\270\346\256\267\350\267\257\345\206\233\345\267\245\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\206\233\345\267\245\350\267\257\351\227\270\345\214\227\347\224\265\345\216\202&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\225\277\350\210\252\351\224\232\345\234\260&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\206\233\345\267\245\350\267\257\351\231\210\345\256\266\345\256\205&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\215\227\345\274\240\345\215\216\346\265\234(\351\200\270\344\273\231\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\214\227\345\274\240\345\215\216\346\265\234(\351\200\270\344\273\231\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\346\273\250\350\267\257\345\220\214\346\265\216\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\346\267\236\345\256\235\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\346\260\264\344\272\247\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\217\214\345\237\216\350\267\257\346\260\270\346\270\205\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\345\256\235\350\267\257\345\217\214\345\237\216\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\345\256\235\350\267\257\346\267\236\351\235\222\350\267\257&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">2</span> &#123;</span><br><span class="line">        <span class="number">1</span> &#123;</span><br><span class="line">          <span class="number">1</span>: <span class="string">&quot;05:00&quot;</span></span><br><span class="line">          <span class="number">2</span>: <span class="string">&quot;23:10&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\345\256\235\350\267\257\346\267\236\351\235\222\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\217\214\345\237\216\350\267\257\346\267\236\345\256\235\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\345\217\214\345\237\216\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\346\260\264\344\272\247\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\346\267\236\345\256\235\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\346\273\250\350\267\257\345\220\214\346\263\260\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\225\277\345\276\201\346\226\260\346\235\221&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\346\273\250\350\267\257\346\267\236\346\273\250\346\224\257\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\214\227\345\274\240\345\215\216\346\265\234(\351\200\270\344\273\231\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\215\227\345\274\240\345\215\216\346\265\234(\351\200\270\344\273\231\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\206\233\345\267\245\350\267\257\351\231\210\345\256\266\345\256\205&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\225\277\350\210\252\351\224\232\345\234\260&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\206\233\345\267\245\350\267\257\351\227\270\345\214\227\347\224\265\345\216\202&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\227\270\346\256\267\350\267\257\345\206\233\345\267\245\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\227\270\346\256\267\350\267\257\346\256\267\350\241\214\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\270\226\347\225\214\350\267\257\346\260\221\344\272\254\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\270\226\347\225\214\350\267\257\345\233\275\345\222\214\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\201\222\344\273\201\350\267\257\346\270\205\346\272\220\347\216\257\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\225\277\346\265\267\350\267\257\351\273\221\345\261\261\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\233\275\345\222\214\350\267\257\346\224\277\351\200\232\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\272\224\350\247\222\345\234\272(\347\277\224\346\256\267\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\272\224\350\247\222\345\234\272(\351\273\204\345\205\264\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\273\204\345\205\264\350\267\257\345\233\275\351\241\272\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\273\204\345\205\264\350\267\257\345\233\275\346\235\203\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\216\247\346\261\237\346\226\260\346\235\221&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\235\226\345\256\207\345\215\227\350\267\257\346\216\247\346\261\237\350\267\257&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">2</span> &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="string">&quot;\346\262\252A-30515D&quot;</span></span><br><span class="line">      <span class="number">2</span>: <span class="string">&quot;15:26&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">2</span> &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="string">&quot;\346\262\252A-07660D&quot;</span></span><br><span class="line">      <span class="number">2</span>: <span class="string">&quot;15:33&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">2</span> &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="string">&quot;\346\262\252A-33990D&quot;</span></span><br><span class="line">      <span class="number">2</span>: <span class="string">&quot;15:41&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编写proto文件并编译</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义proto的版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg1</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  Msg2 msg2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg2</span> &#123;</span><br><span class="line">  <span class="keyword">repeated</span> Msg3 msg3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Msg4 msg4 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg3</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Msg5 msg5 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg4</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> field2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg5</span> &#123;</span><br><span class="line">  Msg6 msg6 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">string</span> field1 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg6</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> field2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchResponse</span> &#123;</span><br><span class="line">  Msg1 msg1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/09.webp"
                     
                ><br />完整代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> google.protobuf.json_format <span class="keyword">import</span> MessageToJson</span><br><span class="line"><span class="keyword">import</span> req_pb2 <span class="keyword">as</span> pb</span><br><span class="line"><span class="keyword">import</span> resp_pb2 <span class="keyword">as</span> pb2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(pad(ori, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> unpad(aes.decrypt(ori), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hex字符串转二进制</span></span><br><span class="line"><span class="comment"># d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)</span></span><br><span class="line"><span class="comment"># with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(d)</span></span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService()  <span class="comment"># 实例化对象</span></span><br><span class="line">search_request.msg11.field1 = <span class="string">&#x27;/protoc.Request.Sequence&#x27;</span></span><br><span class="line">search_request.msg11.msg22.field1 = <span class="number">1</span></span><br><span class="line">search_request.msg11.msg22.field2 = <span class="string">&#x27;90路&#x27;</span></span><br><span class="line">search_request.msg11.msg22.field3 = <span class="number">1</span></span><br><span class="line"><span class="comment"># 序列化请求数据</span></span><br><span class="line">serialize_data = search_request.SerializeToString()</span><br><span class="line"><span class="comment"># print(serialize_data)</span></span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="comment"># with open(&#x27;my_req.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(serialize_data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对序列化后的数据aes加密</span></span><br><span class="line">aes_data = aes_encry(serialize_data)</span><br><span class="line"><span class="comment"># b64 aes加密数据</span></span><br><span class="line">b64_aes_data = base64.b64encode(aes_data)</span><br><span class="line"><span class="comment"># 请求体</span></span><br><span class="line">post_data = <span class="string">&#x27;request=&#x27;</span> + quote(b64_aes_data.decode(), safe=<span class="string">&#x27;&#x27;</span>)+<span class="string">&#x27;%0A&#x27;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;lbs.jt.sh.cn:8082&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://lbs.jt.sh.cn:8082/app/rls/monitor&quot;</span></span><br><span class="line">response = requests.post(url, headers=header, data=post_data)</span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line">decry_data = aes_decry(response.content)</span><br><span class="line"><span class="comment"># with open(&#x27;resp.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(decry_data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用proto编写文件</span></span><br><span class="line">root = pb2.SearchResponse()</span><br><span class="line">root.ParseFromString(decry_data)</span><br><span class="line">data = json.loads(MessageToJson(root))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure>

<h3 id="使用blackboxprotobuf"><a href="#使用blackboxprotobuf" class="headerlink" title="使用blackboxprotobuf"></a>使用blackboxprotobuf</h3><p>还有一种更快的方式，使用blackboxprotobuf<br />读取请求的二进制文件，通过blackboxprotobuf转为json，直接把关键词修改掉再转回去<br />像响应内容的key只是一个符号，可以通过value大概知道它的含义就行了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> blackboxprotobuf</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(pad(ori, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> unpad(aes.decrypt(ori), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;req.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    data = fp.read()</span><br><span class="line">    message, typedef = blackboxprotobuf.protobuf_to_json(data, message_type=<span class="literal">None</span>)</span><br><span class="line">    bus_data = blackboxprotobuf.decode_message(data, message_type=<span class="literal">None</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="built_in">print</span>(bus_data)</span><br><span class="line">    <span class="built_in">print</span>(typedef)</span><br><span class="line">    bus_data[<span class="string">&#x27;1&#x27;</span>][<span class="string">&#x27;2&#x27;</span>][<span class="string">&#x27;2&#x27;</span>] = <span class="built_in">bytes</span>(<span class="string">&#x27;90路&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">serializedata = blackboxprotobuf.encode_message(bus_data, message_type=typedef)</span><br><span class="line"><span class="built_in">print</span>(serializedata)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对序列化后的数据aes加密</span></span><br><span class="line">aesdata = aes_encry(serializedata)</span><br><span class="line"><span class="comment"># b64 aes加密数据</span></span><br><span class="line">b64_aes_data = base64.b64encode(aesdata)</span><br><span class="line"><span class="comment"># 抓取</span></span><br><span class="line">postdata = <span class="string">&#x27;request=&#x27;</span> + quote(b64_aes_data.decode(), safe=<span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;%0A&#x27;</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;lbs.jt.sh.cn:8082&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url=<span class="string">&#x27;http://lbs.jt.sh.cn:8082/app/rls/monitor&#x27;</span>, data=postdata, headers=header)</span><br><span class="line">decry_data = aes_decry(response.content)</span><br><span class="line"></span><br><span class="line">json_data, type_data = blackboxprotobuf.protobuf_to_json(decry_data, message_type=<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(json_data)</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230207/10.webp"
                     
                ></p>
]]></content>
      <tags>
        <tag>安卓逆向</tag>
        <tag>protobuf</tag>
      </tags>
  </entry>
  <entry>
    <title>ProtoBuf分析以及某方数据逆向</title>
    <url>/2023/02/01/ProtoBuf%E5%88%86%E6%9E%90%E4%BB%A5%E5%8F%8A%E6%9F%90%E6%96%B9%E6%95%B0%E6%8D%AE%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h3 id="什么是protobuf"><a href="#什么是protobuf" class="headerlink" title="什么是protobuf"></a>什么是protobuf</h3><p>一拿到网站，F12查看是否有相关数据的请求接口<br />请求体是这样的<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/01.webp"
                     
                ><br />请求头的类型也非常见的<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/02.webp"
                     
                ></p>
<ul>
<li>application&#x2F;json： JSON数据格式</li>
<li>application&#x2F;octet-stream ： 二进制流数据</li>
<li>application&#x2F;x-www-form-urlencoded ： 中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）</li>
<li>multipart&#x2F;form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li>
</ul>
<p>通过查询知道这是protobuf<br />参考文章：<a class="link"   href="https://blog.csdn.net/dideng7039/article/details/101869819" >https://blog.csdn.net/dideng7039/article/details/101869819<i class="fas fa-external-link-alt"></i></a><br />总结在图下了<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/03.webp"
                     
                ></p>
<h3 id="那如何使用protobuf？"><a href="#那如何使用protobuf？" class="headerlink" title="那如何使用protobuf？"></a>那如何使用protobuf？</h3><p>开发者需要先编写proto文件，在proto文件中编写预期的数据类型、数据字段、默认值等<br />然后，通过编译器生成，编程语言对应的开发包！开发时调开发包中的对应方法进行序列化和反序列化。<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/04.webp"
                     
                ><br /><br>所以请求的时候需要参数是序列化的字节序列，对接收到的返回值进行反序列化<br />而要实现序列化，就必须要有开发包，可是开发包是js版本的。而开发包是由proto编译而来，只要能拿到proto文件，就可以编译成任意编程的语言版本。<br />那就是需要通过编译好的包反编译出proto，再编译为python版本的</p>
<p>这里先写一个简单proto，在编译成js版本，看看里面大概的结构长什么样<br />下载编译器：<a class="link"   href="https://github.com/protocolbuffers/protobuf/releases/" >https://github.com/protocolbuffers/protobuf/releases/<i class="fas fa-external-link-alt"></i></a><br />解压后把bin目录路径添加到环境变量，就可以全局使用<br />注意，下载低于3.21.0 的proto版本，因为原项目已将它独立出来，下载最新版本的protoc，运行js_out会缺少插件<br />proto除了一些基础字段，还有一些特殊字段</p>
<table>
<thead>
<tr>
<th><strong>英文</strong></th>
<th><strong>中文</strong></th>
<th><strong>备注</strong></th>
</tr>
</thead>
<tbody><tr>
<td>enum</td>
<td>枚举(数字从零开始) 作用是为字段指定某”预定义值序列”</td>
<td>enum Type {DEFAULT &#x3D; 0;success &#x3D; 1; fail&#x3D; -1;}</td>
</tr>
<tr>
<td>message</td>
<td>消息体</td>
<td>message Student{}</td>
</tr>
<tr>
<td>repeated</td>
<td>数组&#x2F;集合</td>
<td>repeated Student student &#x3D; 1</td>
</tr>
<tr>
<td>import</td>
<td>导入定义</td>
<td>import “protos&#x2F;other_protos.proto”</td>
</tr>
<tr>
<td>&#x2F;&#x2F;</td>
<td>注释</td>
<td>&#x2F;&#x2F;用于注释</td>
</tr>
<tr>
<td>extend</td>
<td>扩展</td>
<td>extend Student {}</td>
</tr>
<tr>
<td>package</td>
<td>包名</td>
<td>相当于命名空间，用来防止不同消息类型的明明冲突</td>
</tr>
</tbody></table>
<p>现在写一个简单的proto文件</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义proto的版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Gender</span>&#123;</span><br><span class="line">  boy=<span class="number">0</span>;</span><br><span class="line">  girl=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Score</span>&#123;</span><br><span class="line">  DEFAULT = <span class="number">0</span>;</span><br><span class="line">  success = <span class="number">1</span>; <span class="comment">// 及格</span></span><br><span class="line">  fail = -<span class="number">1</span>; <span class="comment">// 不及格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>; <span class="comment">// 姓名</span></span><br><span class="line">  <span class="type">int32</span> age = <span class="number">2</span>; <span class="comment">// 年龄</span></span><br><span class="line">  Gender gender = <span class="number">3</span>; <span class="comment">//性别</span></span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="type">string</span> name = <span class="number">1</span>; <span class="comment">// 学科名称</span></span><br><span class="line">    Score score = <span class="number">2</span>; <span class="comment">// 分数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Subject subject = <span class="number">4</span>; <span class="comment">// 学科</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译为JS包</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">protoc --js_out=. .\test.proto3</span><br><span class="line">protoc --js_out=import_style=commonjs,binary:. test.proto</span><br></pre></td></tr></table></figure>
<p>两条语句都可以，第一条会拆分成多个文件，第二条是合并成一个，推荐使用第二条<br />头部就能看到定义好的几个大的对象<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/05.webp"
                     
                ><br />可以大概看下代码，截一段比较重要的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Serializes the given message to binary data (in protobuf wire</span></span><br><span class="line"><span class="comment"> * format), writing to the given BinaryWriter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">!proto.Student</span>&#125; <span class="variable">message</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">!jspb.BinaryWriter</span>&#125; <span class="variable">writer</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@suppress</span> &#123;<span class="type">unusedLocalVariables</span>&#125; f is only used for nested messages</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">proto.<span class="property">Student</span>.<span class="property">serializeBinaryToWriter</span> = <span class="keyword">function</span>(<span class="params">message, writer</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> f = <span class="literal">undefined</span>;</span><br><span class="line">  f = message.<span class="title function_">getName</span>();</span><br><span class="line">  <span class="keyword">if</span> (f.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    writer.<span class="title function_">writeString</span>(</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      f</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  f = message.<span class="title function_">getAge</span>();</span><br><span class="line">  <span class="keyword">if</span> (f !== <span class="number">0</span>) &#123;</span><br><span class="line">    writer.<span class="title function_">writeInt32</span>(</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      f</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  f = message.<span class="title function_">getGender</span>();</span><br><span class="line">  <span class="keyword">if</span> (f !== <span class="number">0.0</span>) &#123;</span><br><span class="line">    writer.<span class="title function_">writeEnum</span>(</span><br><span class="line">      <span class="number">3</span>,</span><br><span class="line">      f</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  f = message.<span class="title function_">getSubjectList</span>();</span><br><span class="line">  <span class="keyword">if</span> (f.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    writer.<span class="title function_">writeRepeatedMessage</span>(</span><br><span class="line">      <span class="number">4</span>,</span><br><span class="line">      f,</span><br><span class="line">      proto.<span class="property">Student</span>.<span class="property">Subject</span>.<span class="property">serializeBinaryToWriter</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这一段序列化的代码中出现了如下的方法名：</p>
<blockquote>
<p>getName, writeString<br>getAge, writeInt32<br>getGender, writeEnum<br>getSubjectList, writeRepeatedMessage</p>
</blockquote>
<p>这一整个判断，这意味 Student中定义了四个数据变量， 序号为1， 2，3，4，而数据类型和变量名可以根据其调用的方法推出</p>
<blockquote>
<p>序号为1的数据类型为String，变量名为name<br>序号为2的数据类型为Int32，变量名为age<br>序号为3的数据类型为Enum， 变量名为gender<br>序号为4的数据类型为Message，变量名为subject，Repeated下面讲</p>
</blockquote>
<p>字符串和整数型一看就明了，不做过多解释，下面了解<font color="red">Message</font>和<font color="red">Enum</font><br /><strong>Message是什么数据类型？</strong><br />简单的理解，可以把message看作是一个类，在其中定义的变量就是类属性<br />在序号为4的subject判断中有这样一行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proto.Student.Subject.serializeBinaryToWriter</span><br></pre></td></tr></table></figure>
<p>再来看看Student的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proto.Student.serializeBinaryToWriter</span><br></pre></td></tr></table></figure>
<p>到这里可知，Subject定义在Student里面且类型是Message<br />在定义序号为4的数据时，数据类型就是Subject，并且是可重复的！<br />所以才会出现这样一个方法writeRepeatedMessage，并且严格来说，序号为4的数据是自定义的Message数据类型，且是可重复的<br /><font color="red">Message</font>类型的Subject被<font color="red">repeated</font>修饰，即Subject是一个包含多个Subject实例的数组<br /><strong>Enum是什么数据类型？</strong><br />枚举类型，在值为限定的情况下，比如性别除了男就是女。可以理解为单选框，这里还有个注意的，枚举类型。<font color="red">必须要有为0的默认选项</font><br />总而言之呢，看见<font color="red">writeEnum</font>就知道这个数据为<font color="red">Enum类型</font><br /><font color="red">repeated</font>也可以修饰<font color="red">Enum</font>，其对应的JS写操作的方法为<font color="red">writePackedEnum</font><br />被repeated修饰的enum类型，<font color="red">则好似的多选框，至少选择一个，可选择多个</font><br /><strong>小结一下：</strong><br /><font color="red">被repeated修饰的message类型的数据，看作是一个包含任意个某message类型数据的数组</font><br /><font color="red">被repeated修饰的enum类型的数据，看作是一个包含任意个整数类型数据的整型数组</font></p>
<h3 id="调试JS反写proto"><a href="#调试JS反写proto" class="headerlink" title="调试JS反写proto"></a>调试JS反写proto</h3><p>目标网站：aHR0cHM6Ly9zLndhbmZhbmdkYXRhLmNvbS5jbi9wYXBlcj9xPXB5dGhvbg&#x3D;&#x3D;<br />将接口的请求地址复制 &#x2F;SearchService.SearchService&#x2F;search ，打 XHR&#x2F;fetch 断点<br />断住后查看堆栈，有SearchService跟进去打断点看看<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/06.webp"
                     
                ><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/07.webp"
                     
                ><br />看下这些方法的命名，序列化（serialize）、反序列化（deserialize），基本断定就在这个js文件里，但是这个js有几万行代码，不可能仔细去看也没必要。<br />看到明显的prototype字样，直接搜proto的特征</p>
<blockquote>
<p><strong><font color="red">toObject 将获取到的数据转成结构化数据</font></strong><br><strong><font color="red">deserializeBinary 二进制数据转换成数组结构（反序列化 | 获取到的数据需要Uint8Array转成二进制）</font></strong><br><strong><font color="red">deserializeBinaryFromReader 根据规则，将二进制数据转换成数组结构</font></strong><br><strong><font color="red">serializeBinary 将数据转成二进制（序列化）</font></strong><br><strong><font color="red">serializeBinaryToWriter 根据规则，将数据转换成二进制数据（序列化）</font></strong></p>
</blockquote>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/08.webp"
                     
                ><br />可以肯定就是proto了<br />一步步跟进后，到序列化发包的位置<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/09.webp"
                     
                ><br />在这里，直接就可以看出其基本结构</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">SearchService</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>继续调试。<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/10.webp"
                     
                ><br />这里可以看出SearchRequest定义了两个变量，分别是序号为1的message类型的CommonRequest和序号为2的enum类型的InterfaceType。<br />根据SearchService.CommonRequest可知，CommonRequest定义在SearchService中<br />所以，proto文件现在是这样的：</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义proto的版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchService</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">    CommonRequest commonRequest = <span class="number">1</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">    InterfaceType interfaceType = <span class="number">2</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">CommonRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">InterfaceType</span>&#123;</span><br><span class="line">    DEFAULT = <span class="number">0</span>;  <span class="comment">// 定义了什么不知道，但是enum必须有一个值就是0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="red">关于变量名是什么，这个其实不重要</font><br />继续往下调试，进入到了CommonRequest<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/11.webp"
                     
                ><br />根据方法名，直接就可以反写出CommonRequest</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">    CommonRequest commonRequest = <span class="number">1</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">    InterfaceType interfaceType = <span class="number">2</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">CommonRequest</span> &#123;</span><br><span class="line">    <span class="type">string</span> searchType = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> searchWord = <span class="number">2</span>;</span><br><span class="line">    SearchSort searchSort = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">repeated</span> Second second = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int32</span> currentPage = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int32</span> pageSize = <span class="number">6</span>;</span><br><span class="line">    SearchScope searchScope = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">repeated</span> SearchFilter searchFilter = <span class="number">8</span>;</span><br><span class="line">    <span class="type">bool</span> languageExpand = <span class="number">9</span>;</span><br><span class="line">    <span class="type">bool</span> topicExpand = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchSort</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Second</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">InterfaceType</span>&#123;</span><br><span class="line">    TypeDefault = <span class="number">0</span>;  <span class="comment">// 定义了什么不知道，但是enum必须有一个值就是0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">SearchScope</span>&#123;</span><br><span class="line">    ScopeDefault = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">SearchFilter</span> &#123;</span><br><span class="line">      FilterDefault = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>SearchSort和Second都是在SearchService定义的，Ctrl + F搜索<br />SearchService.SearchSort.serializeBinaryToWriter<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/12.webp"
                     
                ><br />SearchService.Second.serializeBinaryToWriter<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/13.webp"
                     
                ><br />补齐字段，请求接口的proto文件就算写完了</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义proto的版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchService</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">    CommonRequest commonRequest = <span class="number">1</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">    InterfaceType interfaceType = <span class="number">2</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">CommonRequest</span> &#123;</span><br><span class="line">    <span class="type">string</span> searchType = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> searchWord = <span class="number">2</span>;</span><br><span class="line">    SearchSort searchSort = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">repeated</span> Second second = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int32</span> currentPage = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int32</span> pageSize = <span class="number">6</span>;</span><br><span class="line">    SearchScope searchScope = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">repeated</span> SearchFilter searchFilter = <span class="number">8</span>;</span><br><span class="line">    <span class="type">bool</span> languageExpand = <span class="number">9</span>;</span><br><span class="line">    <span class="type">bool</span> topicExpand = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchSort</span> &#123;</span><br><span class="line">    <span class="type">string</span> field = <span class="number">1</span>;</span><br><span class="line">    Order order = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">enum </span><span class="title class_">Order</span> &#123;</span><br><span class="line">      OrderDefault = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Second</span> &#123;</span><br><span class="line">    <span class="type">string</span> field = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> value = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">InterfaceType</span>&#123;</span><br><span class="line">    TypeDefault = <span class="number">0</span>;  <span class="comment">// 定义了什么不知道，但是enum必须有一个值就是0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">SearchScope</span>&#123;</span><br><span class="line">    ScopeDefault = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">SearchFilter</span> &#123;</span><br><span class="line">    FilterDefault = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><font color="red">对于所有的enum枚举类，至少填充一个默认值0，且变量名唯一</font><br />有的情况，枚举类含有哪些字段，可以在代码中直接看到，就照抄写进去。<br />看不到的，给个唯一变量名，默认值为0即可<br />现在还差一个源数据，即我们需要知道待编译的源数据是什么样子的？<br />使用fiddler进行抓包查看请求参数<br />抓到包后查看HexView，黑色部分就是请求体，里面也可以看到我们搜素的关键词python<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/14.webp"
                     
                ><br />选中，右键保存为字节文件也就是bin后缀，这里要注意，前5个字节表示请求体的长度，从第6个字节开始到结束刚好就是0x1A<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/15.webp"
                     
                ><br /><font color="red">字节数据是可以通过protoc编译器解码出来的</font></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;protoc --decode_raw &lt; get_req.bin</span><br><span class="line">1 &#123;</span><br><span class="line">  1: &quot;paper&quot;</span><br><span class="line">  2: &quot;python&quot;</span><br><span class="line">  5: 2</span><br><span class="line">  6: 20</span><br><span class="line">  8: &quot;\000&quot;</span><br><span class="line">&#125;</span><br><span class="line">2: 1</span><br></pre></td></tr></table></figure>
<p>与上面编写好的proto文件进行对比<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/16.webp"
                     
                ><br />像有些没包含到的字段，是请求的时候页面没做一些条件筛选，就没触发到某些字段<br />实际传输时，简单的看，键就是proto中定义的序号，这就是之前提到的 变量名是什么根本不重要，变量名只是方便开发者开发时便于理解与调用。（传输一个数字远比传输一个字符串更有效率）<br />完全还原proto文件是不需要的，构造出这个请求参数，获取这个接口的响应内容就可以了</p>
<h3 id="实现请求"><a href="#实现请求" class="headerlink" title="实现请求"></a>实现请求</h3><p>编译proto为python包，构建参数，序列化参数，发送请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protoc --python_out=. ./search.proto</span><br></pre></td></tr></table></figure>
<p>目录下生成了search_pb2.py 拖入项目中，需要使用时就调用即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> search_pb2 <span class="keyword">as</span> pb  <span class="comment"># 导入包</span></span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService.SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line"><span class="comment"># 按上面解析数据，按照对应的属性设置值</span></span><br><span class="line"><span class="comment"># 字符串，数字型的都是直接赋值</span></span><br><span class="line">search_request.commonRequest.searchType = <span class="string">&#x27;paper&#x27;</span></span><br><span class="line">search_request.commonRequest.searchWord = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">search_request.commonRequest.currentPage = <span class="number">2</span></span><br><span class="line">search_request.commonRequest.pageSize = <span class="number">20</span></span><br><span class="line"><span class="comment"># repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤</span></span><br><span class="line">search_request.commonRequest.searchFilter.append(<span class="number">0</span>)</span><br><span class="line">search_request.interfaceType = <span class="number">1</span></span><br><span class="line">form_data = search_request.SerializeToString()</span><br><span class="line"><span class="built_in">print</span>(form_data)</span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;me.bin&#x27;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(form_data)</span><br><span class="line"><span class="built_in">print</span>(search_request.SerializeToString().decode())</span><br></pre></td></tr></table></figure>
<p>至此，请求参数的序列化已经是完成了<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/17.webp"
                     
                ><br />发送请求完整代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> search_pb2 <span class="keyword">as</span> pb  <span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService.SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line"><span class="comment"># 按上面解析数据，按照对应的属性设置值</span></span><br><span class="line"><span class="comment"># 字符串，数字型的都是直接赋值</span></span><br><span class="line">search_request.commonRequest.searchType = <span class="string">&#x27;paper&#x27;</span></span><br><span class="line">search_request.commonRequest.searchWord = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">search_request.commonRequest.currentPage = <span class="number">2</span></span><br><span class="line">search_request.commonRequest.pageSize = <span class="number">20</span></span><br><span class="line"><span class="comment"># repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤</span></span><br><span class="line">search_request.commonRequest.searchFilter.append(<span class="number">0</span>)</span><br><span class="line">search_request.interfaceType = <span class="number">1</span></span><br><span class="line">form_data = search_request.SerializeToString()</span><br><span class="line"><span class="built_in">print</span>(form_data)</span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="comment"># with open(&#x27;me.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(form_data)</span></span><br><span class="line"><span class="comment"># print(search_request.SerializeToString().decode())</span></span><br><span class="line"></span><br><span class="line">bytes_head = <span class="built_in">bytes</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(form_data)])</span><br><span class="line"><span class="built_in">print</span>(bytes_head+form_data)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,zh-TW;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/grpc-web+proto&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://*********/SearchService.SearchService/search&quot;</span></span><br><span class="line">response=requests.post(url,headers=headers,data=bytes_head+form_data)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure>

<h3 id="响应处理"><a href="#响应处理" class="headerlink" title="响应处理"></a>响应处理</h3><p>我们构造了请求的proto文件，并成功用python发包获得了数据，但是得到的数据和f12得到的数据是一样的乱码如下图<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/18.webp"
                     
                ><br />其实这个也是protobuf格式，发过去的是protobuf格式，收到的也是protobuf格式，只是它是以二进制序列化格式传输的，所以看上去像乱码.<br />接下来会带来两种方法：①直观但有点复杂，②便捷但不太直观</p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><strong>写对应的响应的proto文件，和发包一样。当然可以和发包写在一起。</strong><br />老规矩，还是打断点从堆栈进行分析，根据发包的堆栈主要看app开头的js，因为chunk开头的是基本库，很少在里面做手脚，一般都是在自写的js里面做加密或其他操作。<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/19.webp"
                     
                ><br />一步步调试后，<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/20.webp"
                     
                ><br />异步然后获得了值去.toObject,这个toObject就是proto文件转js的时候会产生的一个api函数接口，可以简单使用protoc去尝试转化成js看看。<br />这里不好跟进，直接全局搜索一下：proto.SearchService.SearchResponse<br />这里接受响应后需要把二进制数据进行反序列化，那么就会用到下面的api<br /><strong><font color="red">deserializeBinary——deserializeBinaryFromReader</font><strong>（</strong>重点核心</strong>）<br />完整的就是 proto.SearchService.SearchResponse.deserializeBinaryFromReader<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/21.webp"
                     
                ><br />一下子就定位到了，和请求的一样理解，只是他现在变成了case语句来表示序号位置，read后面的类型来表示类型。<br />序号4有个message，进去查看<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/22.webp"
                     
                ><br />这个返回的数据量太大了，标号也特别的多，有没有什么更好的方法得到proto文件呢？<br />那就是自写ast，然后用ast来处理这种switch语句。这里直接使用渔歌写好的ats插件，文末附上链接，网站js有些小更新，之前的可能有些小报错，小小的修改了一下<br />这里把整个js复制出来命名为test.js，先安装babel解析库在当前目录下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">npm install @babel/core --save-dev</span><br></pre></td></tr></table></figure>
<p>执行ast代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="comment">// 为parser提供模板引擎</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;@babel/template&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="comment">// 遍历AST</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="comment">// 操作节点，比如判断节点类型，生成新的节点等</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="comment">// 将语法树转换为源代码</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>);</span><br><span class="line"><span class="comment">// 操作文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义公共函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wtofile</span>(<span class="params">path, flags, code</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fd = fs.<span class="title function_">openSync</span>(path,flags);</span><br><span class="line">    fs.<span class="title function_">writeSync</span>(fd, code);</span><br><span class="line">    fs.<span class="title function_">closeSync</span>(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dtofile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">unlinkSync</span>(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file_path = <span class="string">&#x27;test.js&#x27;</span>; <span class="comment">//你要处理的文件</span></span><br><span class="line"><span class="keyword">var</span> jscode = fs.<span class="title function_">readFileSync</span>(file_path, &#123;</span><br><span class="line">    <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为AST语法树</span></span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"><span class="keyword">let</span> proto_text = <span class="string">`syntax = &quot;proto3&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// protoc --python_out=. app_proto2.proto</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">    <span class="title class_">MemberExpression</span>(path)&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="property">node</span>.<span class="property">property</span>.<span class="property">type</span> === <span class="string">&#x27;Identifier&#x27;</span> &amp;&amp; path.<span class="property">node</span>.<span class="property">property</span>.<span class="property">name</span> === <span class="string">&#x27;deserializeBinaryFromReader&#x27;</span> &amp;&amp; path.<span class="property">parentPath</span>.<span class="property">type</span> === <span class="string">&#x27;AssignmentExpression&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> id_name = path.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">            path.<span class="property">parentPath</span>.<span class="title function_">traverse</span>(&#123;</span><br><span class="line">                <span class="title class_">VariableDeclaration</span>(path_2)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(path_2.<span class="property">node</span>.<span class="property">declarations</span>.<span class="property">length</span> === <span class="number">1</span>)&#123;</span><br><span class="line">                        path_2.<span class="title function_">replaceWith</span>(t.<span class="title function_">expressionStatement</span>(</span><br><span class="line">                            t.<span class="title function_">assignmentExpression</span>(</span><br><span class="line">                                <span class="string">&quot;=&quot;</span>,</span><br><span class="line">                                path_2.<span class="property">node</span>.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">id</span>,</span><br><span class="line">                                path_2.<span class="property">node</span>.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">init</span></span><br><span class="line">                            )</span><br><span class="line">                        ))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title class_">SwitchStatement</span>(path_2)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; path_2.<span class="property">node</span>.<span class="property">cases</span>.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">let</span> item = path_2.<span class="property">node</span>.<span class="property">cases</span>[i];</span><br><span class="line">                        <span class="keyword">let</span> item2 = path_2.<span class="property">node</span>.<span class="property">cases</span>[i + <span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(item.<span class="property">consequent</span>.<span class="property">length</span> === <span class="number">0</span> &amp;&amp; item2.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">type</span> === <span class="string">&#x27;SequenceExpression&#x27;</span>)&#123;</span><br><span class="line">                            item.<span class="property">consequent</span> = [</span><br><span class="line">                                item2.<span class="property">consequent</span>[<span class="number">0</span>],</span><br><span class="line">                                t.<span class="title function_">expressionStatement</span>(</span><br><span class="line">                                    item2.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">expressions</span>[<span class="number">0</span>]</span><br><span class="line">                                ),</span><br><span class="line">                                item2.<span class="property">consequent</span>[<span class="number">2</span>]</span><br><span class="line">                            ];</span><br><span class="line">                            item2.<span class="property">consequent</span>[<span class="number">1</span>] = t.<span class="title function_">expressionStatement</span>(</span><br><span class="line">                                item2.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">expressions</span>[<span class="number">1</span>]</span><br><span class="line">                            )</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="property">consequent</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">                            item.<span class="property">consequent</span> = item2.<span class="property">consequent</span></span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">type</span> === <span class="string">&#x27;SequenceExpression&#x27;</span>)&#123;</span><br><span class="line">                            item.<span class="property">consequent</span>[<span class="number">1</span>] = t.<span class="title function_">expressionStatement</span>(</span><br><span class="line">                                item.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">expressions</span>[<span class="number">1</span>]</span><br><span class="line">                            )</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">let</span> id_text = <span class="string">&#x27;message &#x27;</span> + id_name + <span class="string">&#x27; &#123;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> let_id_list = [];</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// console.log(path.parentPath.node.right.body.body[0].body.body[0].cases.length);</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; path.<span class="property">parentPath</span>.<span class="property">node</span>.<span class="property">right</span>.<span class="property">body</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">body</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">cases</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> item = path.<span class="property">parentPath</span>.<span class="property">node</span>.<span class="property">right</span>.<span class="property">body</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">body</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">cases</span>[i];</span><br><span class="line">                    <span class="keyword">if</span>(item.<span class="property">test</span>)&#123;</span><br><span class="line">                        <span class="keyword">let</span> id_number = item.<span class="property">test</span>.<span class="property">value</span>;</span><br><span class="line">                        <span class="keyword">let</span> key = item.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">callee</span>.<span class="property">property</span>.<span class="property">name</span>;</span><br><span class="line">                        <span class="keyword">let</span> id_st, id_type;</span><br><span class="line">                        <span class="keyword">if</span>(key.<span class="title function_">startsWith</span>(<span class="string">&quot;set&quot;</span>))&#123;</span><br><span class="line">                            id_st = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.<span class="title function_">startsWith</span>(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">                            id_st = <span class="string">&quot;repeated&quot;</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="comment">// map类型，因为案例中用不到，所以这里省略</span></span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        key = key.<span class="title function_">substring</span>(<span class="number">3</span>, key.<span class="property">length</span>);</span><br><span class="line">                        id_type = item.<span class="property">consequent</span>[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">if</span>(id_type.<span class="property">expression</span>.<span class="property">right</span>.<span class="property">type</span> === <span class="string">&#x27;NewExpression&#x27;</span>)&#123;</span><br><span class="line">                            id_type = generator.<span class="title function_">default</span>(id_type.<span class="property">expression</span>.<span class="property">right</span>.<span class="property">callee</span>).<span class="property">code</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">switch</span> (id_type.<span class="property">expression</span>.<span class="property">right</span>.<span class="property">callee</span>.<span class="property">property</span>.<span class="property">name</span>) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readString&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readDouble&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;double&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readInt32&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;int32&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readInt64&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;int64&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readFloat&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;float&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readBool&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;bool&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readPackedInt32&quot;</span>:</span><br><span class="line">                                    id_st = <span class="string">&quot;repeated&quot;</span>;</span><br><span class="line">                                    id_type = <span class="string">&quot;int32&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readBytes&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;bytes&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readEnum&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;readEnum&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readPackedEnum&quot;</span>:</span><br><span class="line">                                    id_st = <span class="string">&quot;repeated&quot;</span>;</span><br><span class="line">                                    id_type = <span class="string">&quot;readEnum&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(id_type === <span class="string">&#x27;readEnum&#x27;</span>)&#123;</span><br><span class="line">                            id_type = id_name + <span class="string">&#x27;_&#x27;</span> + key + <span class="string">&#x27;Enum&#x27;</span>;</span><br><span class="line">                            <span class="keyword">if</span>(let_id_list.<span class="title function_">indexOf</span>(id_number) === -<span class="number">1</span>)&#123;</span><br><span class="line">                                id_text += <span class="string">&#x27;\tenum &#x27;</span> + id_type + <span class="string">&#x27; &#123;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                                    id_text += <span class="string">&#x27;\t\t&#x27;</span> + id_type + <span class="string">&#x27;TYPE_&#x27;</span> + j + <span class="string">&#x27; = &#x27;</span> + j + <span class="string">&#x27;;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                id_text += <span class="string">&#x27;\t&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                id_text += <span class="string">&#x27;\t&#x27;</span> + id_st + <span class="string">&#x27; &#x27;</span> + id_type + <span class="string">&#x27; &#x27;</span> + key + <span class="string">&#x27; = &#x27;</span> + id_number + <span class="string">&#x27;;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                let_id_list.<span class="title function_">push</span>(id_number)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(let_id_list.<span class="title function_">indexOf</span>(id_number) === -<span class="number">1</span>)&#123;</span><br><span class="line">                                id_text += <span class="string">&#x27;\t&#x27;</span> + id_st + <span class="string">&#x27; &#x27;</span> + id_type + <span class="string">&#x27; &#x27;</span> + key + <span class="string">&#x27; = &#x27;</span> + id_number + <span class="string">&#x27;;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                let_id_list.<span class="title function_">push</span>(id_number)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            id_text += <span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">            proto_text += id_text</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">wtofile</span>(<span class="string">&#x27;app_proto3.proto&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, proto_text);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个ast代码单纯只是针对这个站点，其他站点也是类似分析。<br />运行后生成了app_proto3.proto文件，打开看一面有一些报错，如下图，渔歌文章也讲清楚了原因，因为对象调用deserializeBinaryFromReader方法的时候，ast代码处理对象无法确定，所以就没加载到。<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/23.webp"
                     
                ><br />我们在调试里面，搜索关键词ExportResponse.deserializeBinaryFromReader<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/24.webp"
                     
                ><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/25.webp"
                     
                ><br />跟进去就能找到s对象是什么，补上就行，其他的报错也是这样的操作<br />得到了proto文件后进行编译成python </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">protoc --python_out=. ./app_proto3.<span class="property">proto</span></span><br></pre></td></tr></table></figure>
<p>然后发个请求试一试</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> app_proto3_pb2 <span class="keyword">as</span> pb</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService_SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line"><span class="comment"># 按上面解析数据，按照对应的属性设置值</span></span><br><span class="line"><span class="comment"># 字符串，数字型的都是直接赋值</span></span><br><span class="line">search_request.Commonrequest.SearchType = <span class="string">&#x27;paper&#x27;</span></span><br><span class="line">search_request.Commonrequest.SearchWord = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">search_request.Commonrequest.CurrentPage = <span class="number">2</span></span><br><span class="line">search_request.Commonrequest.PageSize = <span class="number">20</span></span><br><span class="line"><span class="comment"># repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤</span></span><br><span class="line">search_request.Commonrequest.SearchFilterList.append(<span class="number">0</span>)</span><br><span class="line">search_request.InterfaceType = <span class="number">1</span></span><br><span class="line">form_data = search_request.SerializeToString()</span><br><span class="line"><span class="built_in">print</span>(form_data)</span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="comment"># with open(&#x27;me.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(form_data)</span></span><br><span class="line"><span class="comment"># print(search_request.SerializeToString().decode())</span></span><br><span class="line"></span><br><span class="line">bytes_head = <span class="built_in">bytes</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(form_data)])</span><br><span class="line"><span class="built_in">print</span>(bytes_head + form_data)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/grpc-web+proto&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://*********.com.cn/SearchService.SearchService/search&quot;</span></span><br><span class="line">response = requests.post(url, headers=headers, data=bytes_head + form_data)</span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line">search_response = pb.SearchService_SearchResponse()</span><br><span class="line">search_response.ParseFromString(response.content[<span class="number">5</span>:])</span><br><span class="line"><span class="built_in">print</span>(search_response)</span><br></pre></td></tr></table></figure>
<p>可以看到很直观，取值也方便。<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/26.webp"
                     
                ><br />上面之所以从响应的第六位字节开启取，是跟上面发包一样的，前五个字节表示请求头的长度<br />下面是proto的核心，序列化和反序列化<br /><strong><font color="red">serializeBinary——serializeBinaryFromReader</font><strong>（</strong>重点核心</strong>）<br /><strong><font color="red">deserializeBinary——deserializeBinaryFromReader</font><strong>（</strong>重点核心</strong>）</p>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>使用python应对protobuf的第三方库：blackboxprotobuf<br />安装命令：pip install blackboxprotobuf<br />调用核心函数 ：blackboxprotobuf.decode_message(<strong>Byte类型数据</strong>)，进行解protobuf格式数据<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230201/27.webp"
                     
                ><br />上面是数据对应结构位置，下面是类型对应结构位置<br />虽然拿到了数据，只是位置序号加内容，我们其实要靠猜才能知道是什么，这种就不需要去写proto文件<br />两种方式都可以，喜欢哪种用哪种</p>
<h3 id="相关资料参考"><a href="#相关资料参考" class="headerlink" title="相关资料参考"></a>相关资料参考</h3><p><a class="link"   href="https://blog.csdn.net/dideng7039/article/details/101869819" >https://blog.csdn.net/dideng7039/article/details/101869819<i class="fas fa-external-link-alt"></i></a><br /><a class="link"   href="https://blog.csdn.net/qq_35491275/article/details/111721639" >https://blog.csdn.net/qq_35491275&#x2F;article&#x2F;details&#x2F;111721639<i class="fas fa-external-link-alt"></i></a><br /><a class="link"   href="https://mp.weixin.qq.com/s/DzCz66_Szc7vfG6bpl956w" >https://mp.weixin.qq.com/s/DzCz66_Szc7vfG6bpl956w<i class="fas fa-external-link-alt"></i></a><br /><a class="link"   href="https://blog.csdn.net/qq_56881388/article/details/128612717" >https://blog.csdn.net/qq_56881388&#x2F;article&#x2F;details&#x2F;128612717<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>protobuf</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>SHA1原理分析及流程</title>
    <url>/2022/07/05/SHA1%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90%E5%8F%8A%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="SHA1介绍"><a href="#SHA1介绍" class="headerlink" title="SHA1介绍"></a>SHA1介绍</h1><p>SHA实际上是一系列算法的统称，分别包括：SHA-1、SHA-224、SHA-256、SHA-384以及SHA-512。后面4中统称为SHA-2，事实上SHA-224是SHA-256的缩减版，SHA-384是SHA-512的缩减版。各中SHA算法的数据比较如下表，其中的长度单位均为位：</p>
<table>
<thead>
<tr>
<th><strong>类别</strong></th>
<th><strong>MD5</strong></th>
<th><strong>SHA-1</strong></th>
<th><strong>SHA-224</strong></th>
<th><strong>SHA-256</strong></th>
<th><strong>SHA-384</strong></th>
<th><strong>SHA-512</strong></th>
</tr>
</thead>
<tbody><tr>
<td>消息摘要长度</td>
<td>128位(bit) 或 32字节</td>
<td>160位(bit)或40字节</td>
<td>224位(bit)或56字节</td>
<td>256位(bit)或64字节</td>
<td>384位(bit)或96字节</td>
<td>512位(bit)或128字节</td>
</tr>
<tr>
<td>消息长度</td>
<td>&#x2F;</td>
<td>小于264位</td>
<td>小于264位</td>
<td>小于264位</td>
<td>小于2128位</td>
<td>小于2128位</td>
</tr>
<tr>
<td>分组长度</td>
<td>512bit</td>
<td>512bit</td>
<td>512bit</td>
<td>512bit</td>
<td>1024bit</td>
<td>1024bit</td>
</tr>
<tr>
<td>计算字长度</td>
<td>32bit</td>
<td>32bit</td>
<td>32bit</td>
<td>32bit</td>
<td>64bit</td>
<td>64bit</td>
</tr>
<tr>
<td>计算步骤数</td>
<td>64</td>
<td>80</td>
<td>64</td>
<td>64</td>
<td>80</td>
<td>80</td>
</tr>
</tbody></table>
</br>

<h1 id="SHA1哈希算法流程"><a href="#SHA1哈希算法流程" class="headerlink" title="SHA1哈希算法流程"></a>SHA1哈希算法流程</h1><h2 id="消息填充"><a href="#消息填充" class="headerlink" title="消息填充"></a>消息填充</h2><p>对于任意长度的明文，SHA1的明文分组过程与MD5相类似，首先需要对明文添加位数，使明文总长度为448（mod512）位。在明文后添加位的方法是第一个添加位是l，其余都是0。然后将真正明文的长度（没有添加位以前的明文长度）以64位表示，附加于前面已添加过位的明文后，此时的明文长度正好是512位的倍数。<br />M的长度 mod 512 &#x3D; R，考虑R（R为输入消息长度按512bit进行分组后，最后一组的长度）<br /> </p>
<ol>
<li>R &lt; 448，在最后一组的末尾填充1个“1”及若干个“0”，使最后一组的位数达到448位；再在这448位的基础上填充64位，这64位是M的原始长度的[二进制]</li>
</ol>
</br>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220705/01.webp"
                     
                ></p>
</br>

<ol start="2">
<li>R &gt;&#x3D; 448，在最后一组的末尾填充1个“1”及若干个“0”，使最后一组位数达到512；再新增一组，添加448个“0”和64位M的原始长度的二进制表示。</li>
</ol>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220705/02.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220705/03.webp"
                     
                ></p>
</br>

<h2 id="初始化模值"><a href="#初始化模值" class="headerlink" title="初始化模值"></a>初始化模值</h2><p>A&#x3D;0x67452301</br><br>B&#x3D;0xEFCDAB89</br><br>C&#x3D;0x98BADCFE</br><br>D&#x3D;0x10325476</br><br>E&#x3D;0xC3D2E1F0</br></br></p>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>第一个512位分组进来后，以32位为一组，分别存储在W0 ，……，W15 中</br><br>之后还要将这16份子明文分组扩充到80份子明文分组，我们记为W[k]（k&#x3D; 0, 1,……79），扩充的方法如下。</br></br></p>
<h2 id="分组扩展为80份"><a href="#分组扩展为80份" class="headerlink" title="分组扩展为80份"></a>分组扩展为80份</h2><p><em>Wt</em> &#x3D; Mt , 当0≤t≤15</br><br><em>Wt</em>&#x3D;(<em>Wt</em> −16 ⊕ <em>Wt</em> −14 ⊕ <em>Wt</em> −8 ⊕ <em>Wt</em> −3)&lt;&lt;&lt;1    (16≤t≤79)</br><br>“&lt;&lt;&lt;” 表示循环左移符号，上述中是循环左移1位。</p>
</br>

<h2 id="计算信息摘要"><a href="#计算信息摘要" class="headerlink" title="计算信息摘要"></a>计算信息摘要</h2><p>Kt (0≤t≤19) &#x3D; 0x5A827999</br><br>Kt (20≤t≤39) &#x3D; 0x6ED9EBA1</br><br>Kt (40≤t≤59) &#x3D; 0x0x8F188CDC</br><br>Kt (60≤t≤79) &#x3D; 0x0xCA62C1D6</br></br><br>4轮80步的计算中使用到的函数和固定常熟如下表所示：</br></p>
<table>
<thead>
<tr>
<th><strong>计算轮次</strong></th>
<th><strong>计算的步数</strong></th>
<th><strong>计算函数</strong></th>
<th><strong>计算常数</strong></th>
</tr>
</thead>
<tbody><tr>
<td>第一轮</td>
<td>0≤t≤19步</td>
<td>ft(B,C,D)&#x3D;(B&amp;C)&amp;#124;(~B&amp;D)</td>
<td>_K_t&#x3D;0x5A827999</td>
</tr>
<tr>
<td>第二轮</td>
<td>20≤t≤39步</td>
<td>ft(B,C,D)&#x3D;B⊕C⊕D</td>
<td>_K_t&#x3D;0x6ED9EBA1</td>
</tr>
<tr>
<td>第三轮</td>
<td>40≤t≤59步</td>
<td>ft(B,C,D)&#x3D;(B&amp;C)&amp;#124;(B&amp;D)&amp;#124;(C&amp;D)</td>
<td>_K_t&#x3D;0x8F188CDC</td>
</tr>
<tr>
<td>第四轮</td>
<td>60≤t≤79步</td>
<td>ft(B,C,D)&#x3D;B⊕C⊕D</td>
<td>_K_t&#x3D;0xCA62C1D6</td>
</tr>
</tbody></table>
<p>（&amp;是与（And），|是或（Or），~是非（Not），^是异或（Xor））</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>&amp;</td>
<td>与</td>
<td>两个位都为1时，结果才为1</td>
</tr>
<tr>
<td>|</td>
<td>或</td>
<td>两个位都为0时，结果才为0</td>
</tr>
<tr>
<td>^</td>
<td>异或</td>
<td>两个位相同为0，相异为1</td>
</tr>
<tr>
<td>~</td>
<td>取反</td>
<td>0变1，1变0</td>
</tr>
<tr>
<td>&lt;&lt;&lt;</td>
<td>循环左移</td>
<td>将移出的低位放到该数的高位</td>
</tr>
</tbody></table>
</br>

<h2 id="链接变量与初始链接变量进行求和运算"><a href="#链接变量与初始链接变量进行求和运算" class="headerlink" title="链接变量与初始链接变量进行求和运算"></a>链接变量与初始链接变量进行求和运算</h2><p>SHA1有4轮运算，每一轮包括20个步骤，一共80步，最终产生160位的信息摘要，这160位的摘要存放在5个32位的链接变量中。</br><br>在SHA1的4论运算中，虽然进行的就具体操作函数不同，但逻辑过程却是一致的。首先，定义5个变量，假设为H0、H1、H2、H3、H4，对其分别进行如下操作：</br><br>（A）、将A左移5为与 函数的结果求和，再与对应的子明文分组、E以及计算常数求和后的结果赋予H0。</br><br>（B）、将A的值赋予H1。</br><br>（C）、将B左移30位，并赋予H2。</br><br>（D）、将C的值赋予H3。</br><br>（E）、将D的值赋予H4。</br><br>（F）、最后将H0、H1、H2、H3、H4的值分别赋予A、B、C、D</br></br><br>A &#x3D; H0 &#x3D; A&lt;&lt;&lt;5+ft(B,C,D)+E+Wt+Kt</br><br>B &#x3D; H1 &#x3D; A</br><br>C &#x3D; H2 &#x3D; B&lt;&lt;&lt;30</br><br>D &#x3D; H3 &#x3D; C</br><br>E &#x3D; H4 &#x3D; D</br><br>这一过程表示如下：</br><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220705/04.webp"
                     
                ></p>
</br>

<h2 id="加上初始化模值"><a href="#加上初始化模值" class="headerlink" title="加上初始化模值"></a>加上初始化模值</h2><p>a &#x3D; H0+A</br><br>b &#x3D; H1+B</br><br>c &#x3D; H2+C</br><br>d &#x3D; H3+D</br><br>e &#x3D; H4+E</br><br>result &#x3D; abcde</br><br>经过4论80步计算后得到的结果，再与各链接变量的初始值求和，就得到了我们最终的信息摘要。而对于有多个明文分组的，则将前面所得到的结果作为初始值进行下一明文分组的计算，最后一组的512位分组经过80轮的操作后，最终产生的</br><br>H0、H1、H2、H3、H4要加上一开始的A、B、C、D、E，及加完后最终的abcde即为消息M的hash值。</br><br></br></p>
<h1 id="整个sha1加密简要过程如下："><a href="#整个sha1加密简要过程如下：" class="headerlink" title="整个sha1加密简要过程如下："></a>整个sha1加密简要过程如下：</h1><p>（1） 将512位的明文分组划分为16个子明文分组，每个子明文分组为32位。</br><br>（2） 申请5个32位的链接变量，记为A、B、C、D、E。</br><br>（3） 16份子明文分组扩展为80份。</br><br>（4） 80份子明文分组进行4轮运算。</br><br>（5） 链接变量与初始链接变量进行求和运算。</br><br>（6） 链接变量作为下一个明文分组的输入重复进行以上操作。</br><br>（7） 最后，5个链接变量要加上一开始的模值，最终级联起来的数据就是SHA1摘要。</br></p>
</br>

<h1 id="例子：对409732112进行sha1"><a href="#例子：对409732112进行sha1" class="headerlink" title="例子：对409732112进行sha1"></a>例子：对409732112进行sha1</h1><p>409732112&#x3D;&#x3D;&gt;ASCII   34 30 39 37 33 32 31 31 32<br />转为二进制就是 4*18 &#x3D; 72bit<br />34 &#x3D;&#x3D;&gt; 0011 0100<br />30 &#x3D;&#x3D;&gt; 0011 0000<br />39 &#x3D;&#x3D;&gt; 0011 1001<br />37 &#x3D;&#x3D;&gt; 0011 0111<br />33 &#x3D;&#x3D;&gt; 0011 0011<br />32 &#x3D;&#x3D;&gt; 0011 0010<br />31 &#x3D;&#x3D;&gt; 0011 0001<br />31 &#x3D;&#x3D;&gt; 0011 0001<br />32 &#x3D;&#x3D;&gt; 0011 0010<br />72bit填充1000….到448bit， 填充1个1和375个0<br /><br>0011 0100 0011 0000 0011 1001 0011 0111 0011 0011 0011 0010 0011 0001 0011 0001 0011 0010 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000<br /><br><br />对应16进制<br />34 30 39 37 33 32 31 31 32 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00<br />512bit - 448bit &#x3D; 64bit<br /><br />留的那64比特长度，用于填充长度信息，长度单位为比特<br />64bit附加长度信息 （就是明文对应16进制的长度）<br />00  …. 00 72（中间58个0, 明文72是十进制，需要转为十六进制）<br />明文72bit+填充（10…）376bit+长度信息（00 00 …48）64bit &#x3D; 512bit<br />34 30 39 37 33 32 31 31 32 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 48<br />512bit &#x2F; 4 &#x3D; 128位16进制<br />128分16组 &#x3D; 8位 （每组8位）<br />W0 &#x3D; 0x 34 30 39 37<br />W1 &#x3D; 0x 33 32 31 31 <br />W2 &#x3D; 0x 32 80 00 00 <br />W3 &#x3D; 0x 00 00 00 00<br />…<br />W14 &#x3D; 0x 00 00 00 00<br />W15 &#x3D; 0x 00 00 00 48 <br />扩展分组到80份<br /></p>
<p><em>Wt</em>&#x3D;( <em>Wt</em> − 16 ⊕ <em>Wt</em> −14 ⊕ <em>Wt</em> −8 ⊕ <em>Wt</em> −3)&lt;&lt;1    (16≤_t_≤79)<br />这里手算前3个，最终80份程序生成<br />W16 &#x3D; (W0⊕W2⊕W8⊕W13)&lt;&lt;1<br />W17 &#x3D; (W1⊕W3⊕W9⊕W14)&lt;&lt;1<br />W18 &#x3D; (W2⊕W4⊕W10⊕W15)&lt;&lt;1</p>
<p>W0 &#x3D; 0011 0100 0011 0000 0011 1001 0011 0111<br />W1 &#x3D; 0011 0011 0011 0010 0011 0001 0011 0001<br />W2 &#x3D; 0011 0010 1000 0000 0000 0000 0000 0000<br />W3&#x3D;0，W4&#x3D;0，W8&#x3D;0，W9&#x3D;0，W10&#x3D;0，W13&#x3D;0，W14 &#x3D; 0<br />W15&#x3D; 0000 0000 0000 0000 0000 0000 0100 1000<br />W16 &#x3D; (W0⊕W2)&lt;&lt;1&#x3D; 0000 1101 0110 0000 0111 0010 0110 1110 &#x3D; 0x 0D60726E<br />W17 &#x3D; W1&lt;&lt;1&#x3D; 0110 0110 0110 0100 0110 0010 0110 0010 &#x3D; 0x 66646262<br />W18 &#x3D; (W2⊕W15)&lt;&lt;1&#x3D; 0110 0101 0000 0000 0000 0000 1001 0000 &#x3D; 0x 65000090<br /></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220705/05.webp"
                     
                ></p>
<p>跟程序结果一致，下面直接输出结果<br />W0 &#x3D; 0x34303937<br />W1 &#x3D; 0x33323131<br />W2 &#x3D; 0x32800000<br />W3 &#x3D; 0x0<br />W4 &#x3D; 0x0<br />W5 &#x3D; 0x0<br />W6 &#x3D; 0x0<br />W7 &#x3D; 0x0<br />W8 &#x3D; 0x0<br />W9 &#x3D; 0x0<br />W10 &#x3D; 0x0<br />W11 &#x3D; 0x0<br />W12 &#x3D; 0x0<br />W13 &#x3D; 0x0<br />W14 &#x3D; 0x0<br />W15 &#x3D; 0x48<br />W16 &#x3D; 0xd60726e<br />W17 &#x3D; 0x66646262<br />W18 &#x3D; 0x65000090<br />W19 &#x3D; 0x1ac0e4dc<br />W20 &#x3D; 0xccc8c4c4<br />W21 &#x3D; 0xca000120<br />W22 &#x3D; 0x3581c9b8<br />W23 &#x3D; 0x99918919<br />W24 &#x3D; 0x8ec0e69d<br />W25 &#x3D; 0xa7cb57b4<br />W26 &#x3D; 0xf9231313<br />W27 &#x3D; 0x28000483<br />W28 &#x3D; 0xd60726e0<br />W29 &#x3D; 0x664624f6<br />W30 &#x3D; 0x21c37eaa<br />W31 &#x3D; 0x53e59ba6<br />W32 &#x3D; 0x1cd612b<br />W33 &#x3D; 0xf5595f41<br />W34 &#x3D; 0x61c99c2<br />W35 &#x3D; 0xf21b00a9<br />W36 &#x3D; 0xb42ee9bb<br />W37 &#x3D; 0x67966a1a<br />W38 &#x3D; 0xd132a24c<br />W39 &#x3D; 0xb3235961<br />W40 &#x3D; 0x2371fd7e<br />W41 &#x3D; 0x57415c75<br />W42 &#x3D; 0x3437eaa1<br />W43 &#x3D; 0x3e59bb45<br />W44 &#x3D; 0x2957db08<br />W45 &#x3D; 0xcc047fd6<br />W46 &#x3D; 0x9eca0d11<br />W47 &#x3D; 0x79908d1c<br />W48 &#x3D; 0xd148f483<br />W49 &#x3D; 0x9d921d19<br />W50 &#x3D; 0xff2a2f89<br />W51 &#x3D; 0xf5384aea<br />W52 &#x3D; 0xa3b31bcd<br />W53 &#x3D; 0xcf36c649<br />W54 &#x3D; 0x33623193<br />W55 &#x3D; 0x7c83278a<br />W56 &#x3D; 0x12704a2a<br />W57 &#x3D; 0x8fd19775<br />W58 &#x3D; 0x3d927355<br />W59 &#x3D; 0x2a2b88a6<br />W60 &#x3D; 0x37feb543<br />W61 &#x3D; 0x8e608fac<br />W62 &#x3D; 0xad96814e<br />W63 &#x3D; 0x5efe0599<br />W64 &#x3D; 0x64e43d19<br />W65 &#x3D; 0x95da8390<br />W66 &#x3D; 0x7fea8510<br />W67 &#x3D; 0xe9827238<br />W68 &#x3D; 0x65ea391a<br />W69 &#x3D; 0x847fd6fe<br />W70 &#x3D; 0xca0d119e<br />W71 &#x3D; 0x908d18f9<br />W72 &#x3D; 0x9ef3a531<br />W73 &#x3D; 0xf45b1bbb<br />W74 &#x3D; 0xca16b7ff<br />W75 &#x3D; 0xa675a007<br />W76 &#x3D; 0x17b22d58<br />W77 &#x3D; 0x3defd669<br />W78 &#x3D; 0x4a141b9d<br />W79 &#x3D; 0x98376750</p>
<p>80轮运算<br />A &#x3D; 0x67452301 &#x3D; 0110 0111 0100 0101 0010 0011 0000 0001<br />B &#x3D; 0xEFCDAB89 &#x3D; 1110 1111 1100 1101 1010 1011 1000 1001<br />C &#x3D; 0x98BADCFE &#x3D; 1001 1000 1011 1010 1101 1100 1111 1110<br />D &#x3D; 0x10325476 &#x3D; 0001 0000 0011 0010 0101 0100 0111 0110<br />E &#x3D; 0xC3D2E1F0 &#x3D; 1100 0011 1101 0010 1110 0001 1111 0000</p>
<table>
<thead>
<tr>
<th><strong>计算轮次</strong></th>
<th><strong>计算的步数</strong></th>
<th><strong>计算函数</strong></th>
<th><strong>计算常数</strong></th>
</tr>
</thead>
<tbody><tr>
<td>第一轮</td>
<td>0≤t≤19步</td>
<td>ft(B,C,D)&#x3D;(B&amp;C)&amp;#124;(~B&amp;D)</td>
<td>_K_t&#x3D;0x5A827999</td>
</tr>
<tr>
<td>第二轮</td>
<td>20≤t≤39步</td>
<td>ft(B,C,D)&#x3D;B⊕C⊕D</td>
<td>_K_t&#x3D;0x6ED9EBA1</td>
</tr>
<tr>
<td>第三轮</td>
<td>40≤t≤59步</td>
<td>ft(B,C,D)&#x3D;(B&amp;C)&amp;#124;(B&amp;D)&amp;#124;(C&amp;D)</td>
<td>_K_t&#x3D;0x8F188CDC</td>
</tr>
<tr>
<td>第四轮</td>
<td>60≤t≤79步</td>
<td>ft(B,C,D)&#x3D;B⊕C⊕D</td>
<td>_K_t&#x3D;0xCA62C1D6</td>
</tr>
</tbody></table>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220705/06.webp"
                     
                ><br><br />第一轮第一步<br />A&lt;&lt;&lt;5 &#x3D;&#x3D;&gt; 1110 1000 1010 0100 0110 0000 0010 1100<br />B&amp;C &#x3D; 1000 1000 1000 1000 1000 1000 1000 1000<br /><del>B&amp;D&#x3D; 0001 0000 0011 0010 0101 0100 0111 0110<br />ft(B,C,D) &#x3D; (B&amp;C)|(</del>B&amp;D) &#x3D; 1001 1000 1011 1010 1101 1100 1111 1110<br />H0 &#x3D; 0x2D3E4D1EA（保留末8位）&#x3D; 0x D3E4D1EA<br />H1 &#x3D; 0x67452301<br />H2 &#x3D; 0x7BF36AE2<br />H3 &#x3D; 0x98BADCFE<br />H4 &#x3D; 0x10325476<br />把H0-H4重新赋值给A,B,C,D,E<br />A &#x3D; H0<br />B &#x3D; H1<br />C &#x3D; H2<br />D &#x3D; H3<br />E &#x3D; H4<br />…<br />第80轮<br />A &#x3D; 0x135B4514 &#x3D; 0001 0011 0101 1011 0100 0101 0001 0100<br />B &#x3D; 0xCE03E912 &#x3D; 1100 1110 0000 0011 1110 1001 0001 0010<br />C &#x3D; 0xD50D5F9A &#x3D; 1101 0101 0000 1101 0101 1111 1001 1010<br />D &#x3D; 0xD940C253 &#x3D; 1101 1001 0100 0000 1100 0010 0101 0011<br />E &#x3D; 0x36F72811 &#x3D; 0011 0110 1111 0111 0010 1000 0001 0001</p>
<p>A&lt;&lt;&lt;5 &#x3D; 0110 1011 0110 1000 1010 0010 1000 0010<br />ft(B,C,D)&#x3D;B⊕C⊕D &#x3D; 1100 0010 0100 1110 0111 0100 1101 1011<br />W79 &#x3D; 0x98376750<br />K79 &#x3D; 0xCA62C1D6<br />H0 &#x3D; 0xC7486894<br />H1 &#x3D;  0x135B4514<br />H2 &#x3D; 1011 0011 1000 0000 1111 1010 0100 0100 &#x3D; 0xB380FA44<br />H3 &#x3D; 0xD50D5F9A<br />H4 &#x3D; 0xD940C253 </p>
<p>最后的H0-H4要加上一开始的模值<br />a &#x3D; H0+A &#x3D; 0x2E8D8B95<br />b &#x3D; H1+B &#x3D;0x0328F09D<br />c &#x3D; H2+C &#x3D; 0x4C3BD742<br />d &#x3D; H3+D &#x3D; 0xE53FB410<br />e &#x3D; H4+E &#x3D; 0x9D13A443<br />abcde &#x3D; 2E8D8B950328F09D4C3BD742E53FB4109D13A443<br />              2e8d8b950328f09d4c3bd742e53fb4109d13a443<br />结果一致</p>
<h3 id="python实现sha1"><a href="#python实现sha1" class="headerlink" title="python实现sha1"></a>python实现sha1</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 0xffffffff is used to make sure numbers dont go over 32</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chunks</span>(<span class="params">messageLength, chunkSize</span>):</span><br><span class="line">    chunkValues = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(messageLength), chunkSize):</span><br><span class="line">        chunkValues.append(messageLength[i:i + chunkSize])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> chunkValues</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">leftRotate</span>(<span class="params">chunk, rotateLength</span>):</span><br><span class="line">    <span class="keyword">return</span> ((chunk &lt;&lt; rotateLength) | (chunk &gt;&gt; (<span class="number">32</span> - rotateLength))) &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha1Function</span>(<span class="params">message</span>):</span><br><span class="line">    <span class="comment"># initial hash values</span></span><br><span class="line">    h0 = <span class="number">0x67452301</span></span><br><span class="line">    h1 = <span class="number">0xEFCDAB89</span></span><br><span class="line">    h2 = <span class="number">0x98BADCFE</span></span><br><span class="line">    h3 = <span class="number">0x10325476</span></span><br><span class="line">    h4 = <span class="number">0xC3D2E1F0</span></span><br><span class="line"></span><br><span class="line">    messageLength = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># preprocessing</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(message)):</span><br><span class="line">        messageLength += <span class="string">&#x27;&#123;0:08b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">ord</span>(message[char]))</span><br><span class="line"></span><br><span class="line">    temp = messageLength</span><br><span class="line">    messageLength += <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(messageLength) % <span class="number">512</span> != <span class="number">448</span>):</span><br><span class="line">        messageLength += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">    messageLength += <span class="string">&#x27;&#123;0:064b&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(temp))</span><br><span class="line">    chunk = chunks(messageLength, <span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> eachChunk <span class="keyword">in</span> chunk:</span><br><span class="line">        words = chunks(eachChunk, <span class="number">32</span>)</span><br><span class="line">        w = [<span class="number">0</span>] * <span class="number">80</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span>):</span><br><span class="line">            w[n] = <span class="built_in">int</span>(words[n], <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>, <span class="number">80</span>):</span><br><span class="line">            <span class="comment"># sha1</span></span><br><span class="line">            w[i] = leftRotate((w[i - <span class="number">3</span>] ^ w[i - <span class="number">8</span>] ^ w[i - <span class="number">14</span>] ^ w[i - <span class="number">16</span>]), <span class="number">1</span>)</span><br><span class="line">            <span class="comment"># sha0</span></span><br><span class="line">            <span class="comment"># w[i] = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16])</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># Initialize hash value for this chunk:</span></span><br><span class="line">        a = h0</span><br><span class="line">        b = h1</span><br><span class="line">        c = h2</span><br><span class="line">        d = h3</span><br><span class="line">        e = h4</span><br><span class="line"></span><br><span class="line">        <span class="comment"># main loop:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">80</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= i &lt;= <span class="number">19</span>:</span><br><span class="line">                f = (b &amp; c) | ((~b) &amp; d)</span><br><span class="line">                k = <span class="number">0x5A827999</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">20</span> &lt;= i &lt;= <span class="number">39</span>:</span><br><span class="line">                f = b ^ c ^ d</span><br><span class="line">                k = <span class="number">0x6ED9EBA1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">40</span> &lt;= i &lt;= <span class="number">59</span>:</span><br><span class="line">                f = (b &amp; c) | (b &amp; d) | (c &amp; d)</span><br><span class="line">                k = <span class="number">0x8F1BBCDC</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> <span class="number">60</span> &lt;= i &lt;= <span class="number">79</span>:</span><br><span class="line">                f = b ^ c ^ d</span><br><span class="line">                k = <span class="number">0xCA62C1D6</span></span><br><span class="line"></span><br><span class="line">            a, b, c, d, e = ((leftRotate(a, <span class="number">5</span>) + f + e + k + w[i]) &amp; <span class="number">0xffffffff</span>, a, leftRotate(b, <span class="number">30</span>), c, d)</span><br><span class="line"></span><br><span class="line">        h0 = h0 + a &amp; <span class="number">0xffffffff</span></span><br><span class="line">        h1 = h1 + b &amp; <span class="number">0xffffffff</span></span><br><span class="line">        h2 = h2 + c &amp; <span class="number">0xffffffff</span></span><br><span class="line">        h3 = h3 + d &amp; <span class="number">0xffffffff</span></span><br><span class="line">        h4 = h4 + e &amp; <span class="number">0xffffffff</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;%08x%08x%08x%08x%08x&#x27;</span> % (h0, h1, h2, h3, h4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    plainText = <span class="string">&quot;409732112&quot;</span></span><br><span class="line">    sha1Hash = sha1Function(plainText)</span><br><span class="line">    <span class="built_in">print</span>(sha1Hash)</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Unidbg操作说明</title>
    <url>/2022/10/19/Unidbg%E6%93%8D%E4%BD%9C%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="aeabceecdfca0aa62d5f8de1489a354ccdde99f1792e91283e35a1a09d2cc6bb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码查看内容</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Unidbg</tag>
      </tags>
  </entry>
  <entry>
    <title>jni接口比较(Jnitrace/Frida/ExAndroidNativeEmu/Unidbg)</title>
    <url>/2022/06/07/jni%E6%8E%A5%E5%8F%A3%E6%AF%94%E8%BE%83-Jnitrace-Frida-ExAndroidNativeEmu-Unidbg/</url>
    <content><![CDATA[<ul>
<li><p>它们是如何处理&#x2F;实现jni几百个接口函数的？</p>
</li>
<li><p>它们能hook&#x2F;主动调用JNI接口函数么？</p>
</li>
<li><p>它们是如何找到jni(动)静态注册的Native函数的？</p>
</li>
<li><p>它们能hook动(静)态注册的Native函数么？</p>
</li>
<li><p>它们能主动调用动(静)态注册的Native函数么？</p>
</li>
<li><p>首先定义：</p>
<ul>
<li>Java层的Native函数</li>
<li>env、vm → jni接口函数</li>
<li>jni静态函数、jni动态函数</li>
<li>纯native函数<table>
<thead>
<tr>
<th></th>
<th><strong>Frida</strong></th>
<th><strong>jnitrace</strong></th>
<th><strong>ExAndroidNativeEmu</strong></th>
<th><strong>Unidbg</strong></th>
</tr>
</thead>
<tbody><tr>
<td>可以跑完整的apk么？</td>
<td>⚪</td>
<td>⚪</td>
<td>×</td>
<td>×</td>
</tr>
<tr>
<td>可以hook Java么？查看参调返</td>
<td>⚪</td>
<td>x</td>
<td>x</td>
<td>×</td>
</tr>
<tr>
<td>可以hook JNI接口函数么？查看参调返</td>
<td>⚪</td>
<td>⚪</td>
<td>⚪</td>
<td>⚪</td>
</tr>
<tr>
<td>可以主动调用JNI接口函数么？获取返回值</td>
<td>⚪</td>
<td>x</td>
<td>⚪</td>
<td>⚪</td>
</tr>
<tr>
<td>如何找到静态绑定的Native函数？</td>
<td>dlopen&#x2F;dlsym</td>
<td>dlsym</td>
<td>Module</td>
<td>Module</td>
</tr>
<tr>
<td>如何找到动态绑定的Native函数？</td>
<td>hook RegisterNatives</td>
<td>hook RegisterNatives</td>
<td>hook RegisterNatives</td>
<td>hook RegisterNatives</td>
</tr>
<tr>
<td>如何hook(动)静态注册的Native函数？</td>
<td>⚪</td>
<td>⚪</td>
<td>x</td>
<td>⚪</td>
</tr>
<tr>
<td>如何主动调用(动)静态注册的Native函数？</td>
<td>⚪</td>
<td>x</td>
<td>⚪</td>
<td>⚪</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
<li><p>Frida中JNI接口的实现细节</p>
</li>
</ul>
<p><a class="link"   href="https://github.com/frida/frida-java-bridge/blob/master/lib/env.js#L362" >https://github.com/frida/frida-java-bridge/blob/master/lib/env.js#L362<i class="fas fa-external-link-alt"></i></a><br />linux动态库函数dlopen与dlsym使用<br /><a class="link"   href="https://blog.csdn.net/lanhuazui10/article/details/117849995" >https://blog.csdn.net/lanhuazui10/article/details/117849995<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="frida-hook-java"><a href="#frida-hook-java" class="headerlink" title="frida hook java"></a>frida hook java</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookJava</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.roysue.easyso1.MainActivity&quot;</span>).<span class="property">method01</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;str:&quot;</span>, str)</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">method01</span>(str);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>, result);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="frida-invoke-java"><a href="#frida-invoke-java" class="headerlink" title="frida invoke java"></a>frida invoke java</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">invokeJava</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> result = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.roysue.easyso1.MainActivity&quot;</span>).<span class="title function_">decrypt</span>(<span class="string">&quot;82e8edd5b05654bf0fedcdfc1c9b4b0f&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>, result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="frida-hook-jni"><a href="#frida-hook-jni" class="headerlink" title="frida hook jni"></a>frida hook jni</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">find_RegisterNatives</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addrRegisterNatives = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="comment">//_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            addrRegisterNatives = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">            <span class="title function_">hook_RegisterNatives</span>(addrRegisterNatives)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params">addrRegisterNatives</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (addrRegisterNatives != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrRegisterNatives, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] method_count:&quot;</span>, args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> java_class = args[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(java_class);</span><br><span class="line">                <span class="comment">//console.log(class_name);</span></span><br><span class="line">                <span class="keyword">var</span> methods_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line">                <span class="keyword">var</span> method_count = <span class="built_in">parseInt</span>(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> name_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>));</span><br><span class="line">                    <span class="keyword">var</span> sig_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>));</span><br><span class="line">                    <span class="keyword">var</span> fnPtr_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>));</span><br><span class="line">                    <span class="keyword">var</span> name = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(name_ptr);</span><br><span class="line">                    <span class="keyword">var</span> sig = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(sig_ptr);</span><br><span class="line">                    <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] java_class:&quot;</span>, class_name, <span class="string">&quot;name:&quot;</span>, name, <span class="string">&quot;sig:&quot;</span>, sig, <span class="string">&quot;fnPtr:&quot;</span>, fnPtr_ptr,  <span class="string">&quot; fnOffset:&quot;</span>, <span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>), <span class="string">&quot; callee:&quot;</span>, <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(<span class="variable language_">this</span>.<span class="property">returnAddress</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(find_RegisterNatives);</span><br></pre></td></tr></table></figure>

<h3 id="frida-hook-纯native静态，动态函数（dlopen）"><a href="#frida-hook-纯native静态，动态函数（dlopen）" class="headerlink" title="frida hook  纯native静态，动态函数（dlopen）"></a>frida hook  纯native静态，动态函数（dlopen）</h3><p>动态函数初始化只执行一次，需要hook dlopen（来判断so是否加载）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_Native_JNi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> method01 = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;Java_com_roysue_easyso1_MainActivity_method01&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> method02 = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;_Z8method02P7_JNIEnvP7_jclassP8_jstring&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01 address:&quot;</span>, method01)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 address:&quot;</span>, method02)</span><br><span class="line">        <span class="keyword">if</span>(method01)&#123;</span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(method01, &#123;</span><br><span class="line">                <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                    <span class="comment">// env-&gt;GetStringUTFChars(str_, JNI_FALSE)</span></span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01 args[2] ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(args[<span class="number">2</span>], <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01 retval ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(retval, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(method02)&#123;</span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(method02, &#123;</span><br><span class="line">                <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 args[2] ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(args[<span class="number">2</span>], <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 retval ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(retval, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params">module_name, fun</span>) &#123;</span><br><span class="line">    <span class="comment">//安卓高版本需要同时hook android_dlopen_ext</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (android_dlopen_ext) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (pathptr) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">path</span> = (pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">path</span>.<span class="title function_">indexOf</span>(module_name) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">canhook</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>, <span class="variable language_">this</span>.<span class="property">path</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">canhook</span>) &#123;</span><br><span class="line">                    <span class="title function_">fun</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dlopen = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (dlopen) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlopen, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (pathptr) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">path</span> = (pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dlopen:&quot;</span>, <span class="variable language_">this</span>.<span class="property">path</span>)</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">path</span>.<span class="title function_">indexOf</span>(module_name) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">canhook</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dlopen:&quot;</span>, <span class="variable language_">this</span>.<span class="property">path</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">canhook</span>) &#123;</span><br><span class="line">                    <span class="title function_">fun</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>, android_dlopen_ext, <span class="string">&quot;dlopen:&quot;</span>, dlopen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// hookJava()</span></span><br><span class="line">    <span class="title function_">hook_dlopen</span>(<span class="string">&quot;libroysue.so&quot;</span>, hook_Native_JNi)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="frida-hook-纯native静态，动态函数（libart，RegisterNatives）"><a href="#frida-hook-纯native静态，动态函数（libart，RegisterNatives）" class="headerlink" title="frida hook 纯native静态，动态函数（libart，RegisterNatives）"></a>frida hook 纯native静态，动态函数（libart，RegisterNatives）</h3><p>通过hook libart下的RegisterNatives来hook动态函数，动态函数加载后，静态函数已经加载了<br />.init .init_array, so feature - dlopen dlsym<br />jni JNI_Onload &#x3D; RegisterNatives</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">find_RegisterNatives</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addrRegisterNatives = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            addrRegisterNatives = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">            <span class="title function_">hook_RegisterNatives</span>(addrRegisterNatives)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params">addrRegisterNatives</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addrRegisterNatives != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrRegisterNatives, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] method_count:&quot;</span>, args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> java_class = args[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(java_class);</span><br><span class="line">                <span class="comment">//console.log(class_name);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> methods_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> method_count = <span class="built_in">parseInt</span>(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> name_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>));</span><br><span class="line">                    <span class="keyword">var</span> sig_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>));</span><br><span class="line">                    <span class="keyword">var</span> fnPtr_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> name = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(name_ptr);</span><br><span class="line">                    <span class="keyword">var</span> sig = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(sig_ptr);</span><br><span class="line">                    <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] java_class:&quot;</span>, class_name, <span class="string">&quot;name:&quot;</span>, name, <span class="string">&quot;sig:&quot;</span>, sig, <span class="string">&quot;fnPtr:&quot;</span>, fnPtr_ptr,  <span class="string">&quot; fnOffset:&quot;</span>, <span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>), <span class="string">&quot; callee:&quot;</span>, <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(<span class="variable language_">this</span>.<span class="property">returnAddress</span>));</span><br><span class="line">                    <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot;decrypt&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                        <span class="keyword">var</span> method02addr = fnPtr_ptr;</span><br><span class="line">                        <span class="keyword">var</span> method01addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;Java_com_roysue_easyso1_MainActivity_method01&quot;</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01 address:&quot;</span>, method02addr)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 address:&quot;</span>, method01addr)</span><br><span class="line">                        <span class="keyword">if</span>(method01addr)&#123;</span><br><span class="line">                            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(method01addr, &#123;</span><br><span class="line">                                <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                                    <span class="comment">// env-&gt;GetStringUTFChars(str_, JNI_FALSE)</span></span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01 args[2] ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(args[<span class="number">2</span>], <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01 retval ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(retval, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(method02addr)&#123;</span><br><span class="line">                            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(method02addr, &#123;</span><br><span class="line">                                <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 args[2] ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(args[<span class="number">2</span>], <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 retval ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(retval, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="frida-invoke-纯native-动态，静态-（基于dlopen）"><a href="#frida-invoke-纯native-动态，静态-（基于dlopen）" class="headerlink" title="frida invoke  纯native(动态，静态)（基于dlopen）"></a>frida invoke  纯native(动态，静态)（基于dlopen）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> method01_addr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> method02_addr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> addrNewStringUTF = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_dlopen</span>(<span class="params">module_name, fun</span>) &#123;</span><br><span class="line">    <span class="comment">//安卓高版本需要同时hook android_dlopen_ext</span></span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;android_dlopen_ext&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (android_dlopen_ext) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (pathptr) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">path</span> = (pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">path</span>.<span class="title function_">indexOf</span>(module_name) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">canhook</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>, <span class="variable language_">this</span>.<span class="property">path</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">canhook</span>) &#123;</span><br><span class="line">                    <span class="title function_">fun</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> dlopen = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;dlopen&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (dlopen) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlopen, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> pathptr = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span> (pathptr) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">path</span> = (pathptr).<span class="title function_">readCString</span>();</span><br><span class="line">                    <span class="comment">// console.log(&quot;dlopen:&quot;, this.path)</span></span><br><span class="line">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">path</span>.<span class="title function_">indexOf</span>(module_name) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">canhook</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="comment">// console.log(&quot;dlopen:&quot;, this.path);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">canhook</span>) &#123;</span><br><span class="line">                    <span class="title function_">fun</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext:&quot;</span>, android_dlopen_ext, <span class="string">&quot;dlopen:&quot;</span>, dlopen);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_Native_JNi</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        method01_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;Java_com_roysue_easyso1_MainActivity_method01&quot;</span>);</span><br><span class="line">        method02_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;_Z8method02P7_JNIEnvP7_jclassP8_jstring&quot;</span>);</span><br><span class="line">        addrNewStringUTF = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;_ZN7_JNIEnv12NewStringUTFEPKc&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01 address:&quot;</span>, method01_addr)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 address:&quot;</span>, method02_addr)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;addrNewStringUTF address:&quot;</span>, addrNewStringUTF)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invoke_method01</span>(<span class="params">contents</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> method01_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;Java_com_roysue_easyso1_MainActivity_method01&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(method01_addr &amp;&amp; addrNewStringUTF)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01_addr is =&gt;&quot;</span>,method01_addr)</span><br><span class="line">        <span class="keyword">var</span> method01 = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(method01_addr, <span class="string">&#x27;pointer&#x27;</span>,[<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NewStringUTF</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrNewStringUTF, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Jstring</span> = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">newStringUtf</span>(contents)</span><br><span class="line">            <span class="comment">// var Jstring = NewStringUTF(Java.vm.getEnv(), Memory.allocUtf8String(contents));</span></span><br><span class="line">            result = <span class="title function_">method01</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>(), <span class="title class_">Jstring</span>, <span class="title class_">Jstring</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is =&gt;&quot;</span>,result)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(result, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            result = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(result, <span class="literal">null</span>).<span class="title function_">readCString</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invoke_method02</span>(<span class="params">contents</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(method02_addr &amp;&amp; addrNewStringUTF)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02_addr is =&gt;&quot;</span>, method02_addr)</span><br><span class="line">        <span class="keyword">var</span> method02 = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(method02_addr, <span class="string">&#x27;pointer&#x27;</span>,[<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NewStringUTF</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrNewStringUTF,<span class="string">&#x27;pointer&#x27;</span>,[<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Jstring</span> = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">newStringUtf</span>(contents)</span><br><span class="line">            <span class="comment">// var Jstring = NewStringUTF(Java.vm.getEnv(), Memory.allocUtf8String(contents));</span></span><br><span class="line">            result = <span class="title function_">method02</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>(), <span class="title class_">Jstring</span>, <span class="title class_">Jstring</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is =&gt;&quot;</span>,result)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(result, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            result = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(result, <span class="literal">null</span>).<span class="title function_">readCString</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">invoke1</span>:invoke_method01,</span><br><span class="line">    <span class="attr">invoke2</span>:invoke_method02</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hook_dlopen</span>(<span class="string">&quot;libroysue.so&quot;</span>, hook_Native_JNi)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>

<h3 id="frida-invoke-纯native-动态，静态-（基于RegisterNatives）"><a href="#frida-invoke-纯native-动态，静态-（基于RegisterNatives）" class="headerlink" title="frida invoke  纯native(动态，静态)（基于RegisterNatives）"></a>frida invoke  纯native(动态，静态)（基于RegisterNatives）</h3><p>通过RegisterNatives获取到jni函数地址，进行调用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> addrNewStringUTF = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> method02addr = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">find_RegisterNatives</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addrRegisterNatives = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;NewStringUTF&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            addrNewStringUTF = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NewStringUTF is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;art&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;JNI&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;RegisterNatives&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">                symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;CheckJNI&quot;</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            addrRegisterNatives = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">            <span class="title function_">hook_RegisterNatives</span>(addrRegisterNatives)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_RegisterNatives</span>(<span class="params">addrRegisterNatives</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addrRegisterNatives != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrRegisterNatives, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] method_count:&quot;</span>, args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> java_class = args[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> class_name = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">getClassName</span>(java_class);</span><br><span class="line">                <span class="comment">//console.log(class_name);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> methods_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> method_count = <span class="built_in">parseInt</span>(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> name_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>));</span><br><span class="line">                    <span class="keyword">var</span> sig_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>));</span><br><span class="line">                    <span class="keyword">var</span> fnPtr_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> name = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(name_ptr);</span><br><span class="line">                    <span class="keyword">var</span> sig = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(sig_ptr);</span><br><span class="line">                    <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] java_class:&quot;</span>, class_name, <span class="string">&quot;name:&quot;</span>, name, <span class="string">&quot;sig:&quot;</span>, sig, <span class="string">&quot;fnPtr:&quot;</span>, fnPtr_ptr,  <span class="string">&quot; fnOffset:&quot;</span>, <span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>), <span class="string">&quot; callee:&quot;</span>, <span class="title class_">DebugSymbol</span>.<span class="title function_">fromAddress</span>(<span class="variable language_">this</span>.<span class="property">returnAddress</span>));</span><br><span class="line">                    <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot;decrypt&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">                        method02addr = fnPtr_ptr;</span><br><span class="line">                        <span class="keyword">var</span> method01addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;Java_com_roysue_easyso1_MainActivity_method01&quot;</span>);</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01 address:&quot;</span>, method02addr)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 address:&quot;</span>, method01addr)</span><br><span class="line">                        <span class="comment">// if(method01addr)&#123;</span></span><br><span class="line">                        <span class="comment">//     Interceptor.attach(method01addr, &#123;</span></span><br><span class="line">                        <span class="comment">//         onEnter: function(args)&#123;</span></span><br><span class="line">                        <span class="comment">//             // env-&gt;GetStringUTFChars(str_, JNI_FALSE)</span></span><br><span class="line">                        <span class="comment">//             console.log(&quot;method01 args[2] ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(args[2], null).readCString())</span></span><br><span class="line">                        <span class="comment">//         &#125;,</span></span><br><span class="line">                        <span class="comment">//         onLeave: function(retval)&#123;</span></span><br><span class="line">                        <span class="comment">//             console.log(&quot;method01 retval ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(retval, null).readCString())</span></span><br><span class="line">                        <span class="comment">//         &#125;</span></span><br><span class="line">                        <span class="comment">//     &#125;)</span></span><br><span class="line">                        <span class="comment">// &#125;</span></span><br><span class="line">                        <span class="keyword">if</span>(method02addr)&#123;</span><br><span class="line">                            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(method02addr, &#123;</span><br><span class="line">                                <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 args[2] ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(args[<span class="number">2</span>], <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02 retval ==&gt; &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(retval, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invoke_method01</span>(<span class="params">contents</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> method01_addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libroysue.so&quot;</span>, <span class="string">&quot;Java_com_roysue_easyso1_MainActivity_method01&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(method01_addr &amp;&amp; addrNewStringUTF)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method01_addr is =&gt;&quot;</span>,method01_addr)</span><br><span class="line">        <span class="keyword">var</span> method01 = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(method01_addr, <span class="string">&#x27;pointer&#x27;</span>,[<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NewStringUTF</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrNewStringUTF, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Jstring</span> = <span class="title class_">NewStringUTF</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>(), <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(contents));</span><br><span class="line">            result = <span class="title function_">method01</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>(), <span class="title class_">Jstring</span>, <span class="title class_">Jstring</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is =&gt;&quot;</span>,result)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(result, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            result = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(result, <span class="literal">null</span>).<span class="title function_">readCString</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invoke_method02</span>(<span class="params">contents</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(method02addr &amp;&amp; addrNewStringUTF)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;method02_addr is =&gt;&quot;</span>, method02addr)</span><br><span class="line">        <span class="keyword">var</span> method02 = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(method02addr, <span class="string">&#x27;pointer&#x27;</span>,[<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">NewStringUTF</span> = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrNewStringUTF,<span class="string">&#x27;pointer&#x27;</span>,[<span class="string">&#x27;pointer&#x27;</span>,<span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">        <span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">Jstring</span> = <span class="title class_">NewStringUTF</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>(), <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(contents));</span><br><span class="line">            result = <span class="title function_">method02</span>(<span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>(), <span class="title class_">Jstring</span>, <span class="title class_">Jstring</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is =&gt;&quot;</span>,result)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result is &quot;</span>, <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(result, <span class="literal">null</span>).<span class="title function_">readCString</span>())</span><br><span class="line">            result = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>().<span class="title function_">getStringUtfChars</span>(result, <span class="literal">null</span>).<span class="title function_">readCString</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rpc.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">invoke1</span>:invoke_method01,</span><br><span class="line">    <span class="attr">invoke2</span>:invoke_method02</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// hookJava()</span></span><br><span class="line">    <span class="comment">// hook_dlopen(&quot;libroysue.so&quot;, hook_Native_JNi)</span></span><br><span class="line">    <span class="title function_">find_RegisterNatives</span>(<span class="string">&quot;libroysue.so&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>

</br>


<h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>可以获取jni的NewStringUTF的地址，然后创建函数自动调用。或者直接使用Java.vm.getEnv().newStringUtf(contents)<br />作用：将java的string转jni的Jsting</p>
]]></content>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>python调用js的几种方式</title>
    <url>/2021/01/01/python%E8%B0%83%E7%94%A8js%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="1-PyExecJS"><a href="#1-PyExecJS" class="headerlink" title="1.PyExecJS"></a>1.PyExecJS</h3><p>安装依赖<br>pip3 install PyExecJS<br>新建add.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>py文件去调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;add.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js_code = f.read()</span><br><span class="line">context = execjs.<span class="built_in">compile</span>(js_code)</span><br><span class="line">result = context.call(<span class="string">&quot;add&quot;</span>, <span class="number">2</span>, <span class="number">3</span>) // 参数一为函数名，参数二和三为函数的参数</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>


<h3 id="2-js2py"><a href="#2-js2py" class="headerlink" title="2.js2py"></a>2.js2py</h3><p>#安装依赖库<br>pip3 install js2py<br>还是上面的add.js文件<br>python调用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> js2py</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;add.js&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    js_code = f.read()</span><br><span class="line">context = js2py.EvalJs()</span><br><span class="line">context.execute(js_code)</span><br><span class="line">result = context.add(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>


<h3 id="3-Node-js"><a href="#3-Node-js" class="headerlink" title="3.Node.js"></a>3.Node.js</h3><p>实际上是使用 Python 的os.popen执行 node 命令，执行 JS 脚本<br>首先，确保本地已经安装了 Node.js 环境<br>对js代码添加打印</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(a)+<span class="title class_">Number</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(process.<span class="property">argv</span>[<span class="number">2</span>], process.<span class="property">argv</span>[<span class="number">3</span>]));  <span class="comment">// 运行脚本传进来的参数</span></span><br></pre></td></tr></table></figure>

<p>用python调用控制台方式去使用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">nodejs = os.popen(<span class="string">&#x27;node add.js &#x27;</span>+<span class="string">&#x27;2&#x27;</span>+<span class="string">&#x27; &#x27;</span>+<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">m = nodejs.read()</span><br><span class="line">nodejs.close()</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>或者使用另一种方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(a)+<span class="title class_">Number</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(add(process.argv[2], process.argv[3]));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新增一个导出函数（node方式）</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">    <span class="comment">//调用函数，并返回</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(arg1, arg2));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">cmd = <span class="string">&#x27;node -e &quot;require(\\&quot;%s\\&quot;).init(%s,%s)&quot;&#x27;</span> % (<span class="string">&#x27;./add.js&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">pipeline = os.popen(cmd)</span><br><span class="line">result = pipeline.read()</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>


<h3 id="4-node服务"><a href="#4-node服务" class="headerlink" title="4.node服务"></a>4.node服务</h3><p>用node做一个服务，提供api<br>还是add.js文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(a)+<span class="title class_">Number</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> =  &#123;</span><br><span class="line">    <span class="attr">add</span>: <span class="keyword">function</span> (<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">add</span>(arg1, arg2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>新建add_api.js<br>下载 express 和 body-parser 两个包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> app = <span class="title function_">express</span>()</span><br><span class="line"><span class="keyword">var</span> func = <span class="built_in">require</span>(<span class="string">&#x27;./add.js&#x27;</span>)  <span class="comment">// 导入js模块，并命名为func</span></span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);  <span class="comment">// 导入请求体解析器</span></span><br><span class="line"><span class="comment">// 调整参数大小限制，否则会提示参数过大。</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;<span class="attr">limit</span>: <span class="string">&#x27;50mb&#x27;</span>, <span class="attr">extended</span>: <span class="literal">true</span>&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/add&#x27;</span>, <span class="keyword">function</span>(<span class="params">req, res</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取请求的真实IP</span></span><br><span class="line">	<span class="keyword">var</span> ip = req.<span class="property">headers</span>[<span class="string">&#x27;x-real-ip&#x27;</span>] ? req.<span class="property">headers</span>[<span class="string">&#x27;x-real-ip&#x27;</span>] : req.<span class="property">ip</span>.<span class="title function_">replace</span>(<span class="regexp">/::ffff:/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">	<span class="comment">// 获取请求时间</span></span><br><span class="line">	<span class="keyword">var</span> time = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/\+0800.*/</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">	<span class="comment">// 打印请求时间、IP、方法、路由</span></span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;INFO:&#x27;</span>, time, ip, req.<span class="property">method</span>, req.<span class="property">originalUrl</span>, <span class="string">&#x27;200 OK!&#x27;</span>);</span><br><span class="line">	<span class="comment">// 获取POST请求的formdata</span></span><br><span class="line">	<span class="keyword">let</span> result = req.<span class="property">body</span>;</span><br><span class="line">	<span class="comment">// let code = result.code;</span></span><br><span class="line">    <span class="comment">// let seed = result.seed;</span></span><br><span class="line">    <span class="comment">// let ts = result.ts;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result: &quot;</span>, result);</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num1: &quot;</span>, result.<span class="property">num1</span>);</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;num2: &quot;</span>, result.<span class="property">num2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 调用cook模块中的get_cookie方法，该方法需要提前module.exports导出</span></span><br><span class="line">	<span class="keyword">var</span> response = func.<span class="title function_">add</span>(result.<span class="property">num1</span>, result.<span class="property">num2</span>);</span><br><span class="line">	<span class="comment">// 设置响应头，如果不设置，通过asyncio_requests请求的res.json()会报错，因为它是根据响应头解析json数据</span></span><br><span class="line">	<span class="comment">// 而requests可以直接使用res.json()解析，因为它是根据响应信息解析</span></span><br><span class="line">	res.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">	<span class="comment">// 将JSON后的数据返回客户端</span></span><br><span class="line">	res.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="string">&quot;result&quot;</span>: response&#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">8919</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;开启服务，端口8919&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">toString</span>().<span class="title function_">replace</span>(<span class="regexp">/\+0800.*/</span>, <span class="string">&#x27;&#x27;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>运行，用python写个post请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.post(<span class="string">&quot;http://127.0.0.1:8919/add&quot;</span>, data=&#123;<span class="string">&quot;num1&quot;</span>: <span class="number">2</span>, <span class="string">&quot;num2&quot;</span>: <span class="number">3</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;result&quot;: 5&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>flutter案例抓包-猿人学app</title>
    <url>/2022/04/06/flutter%E6%A1%88%E4%BE%8B%E6%8A%93%E5%8C%85-%E7%8C%BF%E4%BA%BA%E5%AD%A6app/</url>
    <content><![CDATA[<p>这是猿人学App第七题flutter案例<br />直接抓包看一下，直接抓不到。关闭抓包就正常<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220406/01.webp"
                     
                ><br /><br>既然说了是flutter，可以参考这两篇文章</p>
<ul>
<li><a href="https://bbs.kanxue.com/thread-261941.htm"><font color="blue">一种基于frida和drony的针对flutter抓包的方法</font></a></li>
<li><a href="https://github.com/G123N1NJ4/c2hack/blob/master/Mobile/flutter-ssl-bypass.md"><font color="blue">Bypass SSL pinning on flutter app</font></a></li>
</ul>
<p>文章里面也说了Flutter是Google使用Dart语言开发的移动应用开发框架，由于Dart使用Mozilla的NSS库生成并编译自己的Keystore，导致我们就不能通过将代理CA添加到系统CA存储来绕过SSL验证。为了解决这个问题，就必需要研究libflutter.so。<br /><br>写脚本，在运行时将返回函数改为true即可绕过证书链检查实现抓包。<br />文章内容各位就自己看，我们直接上手<br />解压apk，用ida打开libflutter.so<br />在ida中的strings搜索字符串ssl_client<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220406/02.webp"
                     
                ><br />跟进去可以找到并定位函数为sub_393DA4，也可以按x看它的引用，也是函数sub_393DA4，跟进去<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220406/03.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220406/04.webp"
                     
                ><br /><br>找到ssl_client的引用位置，往上找到函数sub_393DA4头部字节定位，<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220406/05.webp"
                     
                ><br /><br>针对64位flutter.so的hook代码示例如下，地址不再需要+1。把上面的头部字节替换到pattern里</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_ssl_verify_result</span>(<span class="params">address</span>) &#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(address, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Disabling SSL validation&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Retval: &quot;</span> + retval);</span><br><span class="line">            retval.<span class="title function_">replace</span>(<span class="number">0x1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hookFlutter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> m = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;libflutter.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="string">&quot;FF C3 01 D1 FD 7B 01 A9 FC 6F 02 A9 FA 67 03 A9 F8 5F 04 A9 F6 57 05 A9 F4 4F 06 A9 08 0A 80 52&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="title class_">Memory</span>.<span class="title function_">scan</span>(m.<span class="property">base</span>, m.<span class="property">size</span>, pattern, &#123;</span><br><span class="line">        <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">address, size</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[+] ssl_verify_result found at: &#x27;</span> + address.<span class="title function_">toString</span>());</span><br><span class="line">            <span class="title function_">hook_ssl_verify_result</span>(address);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onError</span>: <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;[!] There was an error scanning memory&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;All done&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>开启脚本后，抓包就正常了<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220406/06.webp"
                     
                ></p>
]]></content>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>frida备忘录</title>
    <url>/2022/05/20/frida%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<h3 id="frida-hook某个类下所有方法"><a href="#frida-hook某个类下所有方法" class="headerlink" title="frida hook某个类下所有方法"></a>frida hook某个类下所有方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">travel</span>(<span class="string">&#x27;com.xxx.xxx&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printstack</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">travel</span>(<span class="params">className</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">NetContent</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(className)</span><br><span class="line">    <span class="comment">//1.得到这个类下面的所有方法</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Methods</span> = <span class="title class_">NetContent</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">    <span class="comment">//2.遍历所有的方法</span></span><br><span class="line">    <span class="title class_">Methods</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">Method</span>) &#123;</span><br><span class="line">        <span class="comment">//得到这个方法的所有重载 ovelroads</span></span><br><span class="line">        <span class="keyword">var</span> methodName = <span class="title class_">Method</span>.<span class="title function_">getName</span>()</span><br><span class="line">        <span class="keyword">var</span> overloads = <span class="title class_">NetContent</span>[methodName].<span class="property">overloads</span></span><br><span class="line">        <span class="comment">//遍历重载</span></span><br><span class="line">        overloads.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">overload</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> prot = <span class="string">&#x27;(&#x27;</span></span><br><span class="line">            overload.<span class="property">argumentTypes</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">argumentType</span>) &#123;</span><br><span class="line">                prot += argumentType.<span class="property">className</span> + <span class="string">&#x27;,&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            prot += <span class="string">&#x27;)&#x27;</span></span><br><span class="line"></span><br><span class="line">            overload.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;----------------------------------&#x27;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(className + <span class="string">&#x27;.&#x27;</span> + methodName + prot)</span><br><span class="line">                <span class="title function_">printstack</span>()</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;argument:&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">arguments</span>[i]))</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> ret = <span class="variable language_">this</span>[methodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName + <span class="string">&#x27;return:&#x27;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(ret))</span><br><span class="line">                <span class="keyword">return</span> ret</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hookEvent"><a href="#hookEvent" class="headerlink" title="hookEvent"></a>hookEvent</h3><p>trace所有的mOnClickListener，hook它们的onClick函数，实现点到哪里，定位到哪个类的功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jclazz = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> jobj = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getObjClassName</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!jclazz) &#123;</span><br><span class="line">        <span class="keyword">var</span> jclazz = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!jobj) &#123;</span><br><span class="line">        <span class="keyword">var</span> jobj = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Object&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jclazz.<span class="property">getName</span>.<span class="title function_">call</span>(jobj.<span class="property">getClass</span>.<span class="title function_">call</span>(obj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">watch</span>(<span class="params">obj, mtdName</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> listener_name = <span class="title function_">getObjClassName</span>(obj);</span><br><span class="line">    <span class="keyword">var</span> target = <span class="title class_">Java</span>.<span class="title function_">use</span>(listener_name);</span><br><span class="line">    <span class="keyword">if</span> (!target || !mtdName <span class="keyword">in</span> target) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// send(&quot;[WatchEvent] hooking &quot; + mtdName + &quot;: &quot; + listener_name);</span></span><br><span class="line">    target[mtdName].<span class="property">overloads</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">overload</span>) &#123;</span><br><span class="line">        overload.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">//send(&quot;[WatchEvent] &quot; + mtdName + &quot;: &quot; + getObjClassName(this));</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[WatchEvent] &quot;</span> + mtdName + <span class="string">&quot;: &quot;</span> + <span class="title function_">getObjClassName</span>(<span class="variable language_">this</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>[mtdName].<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">OnClickListener</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以spawn启动进程的模式来attach的话</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.view.View&quot;</span>).<span class="property">setOnClickListener</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">listener</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (listener != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="title function_">watch</span>(listener, <span class="string">&#x27;onClick&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">setOnClickListener</span>(listener);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果frida以attach的模式进行attch的话</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;android.view.View$ListenerInfo&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span> (<span class="params">instance</span>) &#123;</span><br><span class="line">                instance = instance.<span class="property">mOnClickListener</span>.<span class="property">value</span>;</span><br><span class="line">                <span class="keyword">if</span> (instance) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mOnClickListener name is :&quot;</span> + <span class="title function_">getObjClassName</span>(instance));</span><br><span class="line">                    <span class="title function_">watch</span>(instance, <span class="string">&#x27;onClick&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(<span class="title class_">OnClickListener</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="系统库常用算法hook"><a href="#系统库常用算法hook" class="headerlink" title="系统库常用算法hook"></a>系统库常用算法hook</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">printstack</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;enter&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Base64</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.util.Base64&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> secretKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.SecretKeySpec&#x27;</span>);</span><br><span class="line">    secretKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;算法名：&quot;</span> + b + <span class="string">&quot;|str密钥:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;算法名：&quot;</span> + b + <span class="string">&quot;|Hex密钥:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(a).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">DESKeySpec</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.DESKeySpec&#x27;</span>);</span><br><span class="line">    <span class="title class_">DESKeySpec</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a);</span><br><span class="line">        <span class="keyword">var</span> bytes_key_des = <span class="variable language_">this</span>.<span class="title function_">getKey</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;des密钥  |str &quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key_des));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;des密钥  |hex &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(bytes_key_des).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">DESKeySpec</span>.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key_des = <span class="variable language_">this</span>.<span class="title function_">getKey</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;des密钥  |str &quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key_des));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;des密钥  |hex &quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(bytes_key_des).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mac = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.Mac&#x27;</span>);</span><br><span class="line">    mac.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a))</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mac doFinal结果: |str  :&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mac doFinal结果: |hex  :&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(result).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;mac doFinal结果: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(result, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    mac.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal参数: |str  :&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |str  :&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |hex  :&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(result).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(result, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> md = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.MessageDigest&#x27;</span>);</span><br><span class="line">    md.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a, b);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;算法名：&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a))</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c);</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">digest</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest11结果:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(result).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest结果:&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(result, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    md.<span class="property">digest</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest参数:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">digest</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest结果:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(result).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;digest结果:&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(result, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> ivParameterSpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.spec.IvParameterSpec&#x27;</span>);</span><br><span class="line">    ivParameterSpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;iv向量: |str:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;iv向量: |hex:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(a).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cipher = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.crypto.Cipher&#x27;</span>);</span><br><span class="line">    cipher.<span class="property">getInstance</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getInstance</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;模式填充:&quot;</span> + a);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(bytes_key, <span class="number">0</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(bytes_key).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.cert.Certificate&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(bytes_key, <span class="number">0</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(bytes_key).<span class="title function_">hex</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.cert.Certificate&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(bytes_key, <span class="number">0</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(bytes_key).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.AlgorithmParameters&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(bytes_key, <span class="number">0</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(bytes_key).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.AlgorithmParameters&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">init</span>(a, b, c, d);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(bytes_key, <span class="number">0</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(bytes_key).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;java.security.Key&#x27;</span>, <span class="string">&#x27;java.security.spec.AlgorithmParameterSpec&#x27;</span>, <span class="string">&#x27;java.security.SecureRandom&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c, d</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c, d);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable constant_">N_ENCRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 加密模式&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable constant_">N_DECRYPT_MODE</span> == a) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init  | 解密模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes_key = b.<span class="title function_">getEncoded</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|str密钥:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(bytes_key));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(bytes_key, <span class="number">0</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;init key:&quot;</span> + <span class="string">&quot;|Hex密钥:&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(bytes_key).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cipher.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">update</span>(a);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">update</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">update</span>(a, b, c);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;update:&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a) + <span class="string">&quot;|&quot;</span> + b + <span class="string">&quot;|&quot;</span> + c);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">doFinal</span>.<span class="title function_">overload</span>().<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>();</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |str  :&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |hex  :&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(result).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(result, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    cipher.<span class="property">doFinal</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">doFinal</span>(a);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal参数: |str  :&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(a));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal参数: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(a, <span class="number">0</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |str  :&quot;</span> + <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(result));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |hex  :&quot;</span> + <span class="title class_">ByteString</span>.<span class="title function_">of</span>(result).<span class="title function_">hex</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;doFinal结果: |base64  :&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(result, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> x509EncodedKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.spec.X509EncodedKeySpec&#x27;</span>);</span><br><span class="line">    x509EncodedKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;[B&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RSA密钥:&quot;</span> + <span class="title class_">Base64</span>.<span class="title function_">encodeToString</span>(a, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> rSAPublicKeySpec = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.security.spec.RSAPublicKeySpec&#x27;</span>);</span><br><span class="line">    rSAPublicKeySpec.<span class="property">$init</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.math.BigInteger&#x27;</span>, <span class="string">&#x27;java.math.BigInteger&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======================================&quot;</span>);</span><br><span class="line">        <span class="title function_">printstack</span>();</span><br><span class="line">        <span class="keyword">var</span> result = <span class="variable language_">this</span>.$init(a, b);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RSA密钥N:&quot;</span> + a.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RSA密钥E:&quot;</span> + b.<span class="title function_">toString</span>(<span class="number">16</span>));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>frida</tag>
      </tags>
  </entry>
  <entry>
    <title>刷机</title>
    <url>/2021/06/07/%E5%88%B7%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><p><a class="link"   href="https://source.android.com/setup/start/build-numbers" >https://source.android.com/setup/start/build-numbers<i class="fas fa-external-link-alt"></i></a><br /><br><a class="link"   href="https://developers.google.cn/android/images#angler" >https://developers.google.cn/android/images#angler<i class="fas fa-external-link-alt"></i></a><br /><br><a class="link"   href="https://github.com/shadowsocks/shadowsocks-android/tags" >https://github.com/shadowsocks/shadowsocks-android/tags<i class="fas fa-external-link-alt"></i></a><br /><br><a class="link"   href="https://github.com/topjohnwu/Magisk/tags" >https://github.com/topjohnwu/Magisk/tags<i class="fas fa-external-link-alt"></i></a> magisk，下载zip包<br /><br><a class="link"   href="https://eu.dl.twrp.me/angler/twrp-3.3.0-0-angler.img.html" >https://eu.dl.twrp.me/angler/twrp-3.3.0-0-angler.img.html<i class="fas fa-external-link-alt"></i></a>   nexus 6p<br /><br><a class="link"   href="https://dl.twrp.me/sailfish/twrp-3.3.0-0-sailfish.img.html" >https://dl.twrp.me/sailfish/twrp-3.3.0-0-sailfish.img.html<i class="fas fa-external-link-alt"></i></a><br /><br><a class="link"   href="https://dl.twrp.me/bullhead/twrp-3.3.1-0-bullhead.img.html" >https://dl.twrp.me/bullhead/twrp-3.3.1-0-bullhead.img.html<i class="fas fa-external-link-alt"></i></a>   nexus 5x<br /><br><a class="link"   href="https://www.kali.org/get-kali/#kali-mobile" >https://www.kali.org/get-kali/#kali-mobile<i class="fas fa-external-link-alt"></i></a>  kali nethunt<br /><br><a class="link"   href="https://www.yuque.com/attachments/yuque/0/2021/zip/2721723/1623051375667-e30dbae1-ff19-4de7-ae0d-e548d0aafd72.zip?_lake_card=%7B%22src%22:%22https://www.yuque.com/attachments/yuque/0/2021/zip/2721723/1623051375667-e30dbae1-ff19-4de7-ae0d-e548d0aafd72.zip%22,%22name%22:%22SR5-SuperSU-v2.82-SR5-20171001224502.zip%22,%22size%22:6882992,%22type%22:%22application/x-zip-compressed%22,%22ext%22:%22zip%22,%22source%22:%22%22,%22status%22:%22done%22,%22mode%22:%22title%22,%22download%22:true,%22taskId%22:%22ubc411615-ad75-48a2-bfc5-69d86794e36%22,%22taskType%22:%22upload%22,%22id%22:%22ua8322ffd%22,%22card%22:%22file%22%7D" >SR5-SuperSU-v2.82-SR5-20171001224502.zip<i class="fas fa-external-link-alt"></i></a>  超级授权<br /></p>
<h3 id="nexus-6p刷安卓8"><a href="#nexus-6p刷安卓8" class="headerlink" title="nexus 6p刷安卓8"></a>nexus 6p刷安卓8</h3><p>下载刷机包</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wget <span class="attr">https</span>:<span class="comment">//dl.google.com/dl/android/aosp/angler-opm1.171019.011-factory-39448337.zip</span></span><br></pre></td></tr></table></figure>
<p>解压</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">7z x angler-opm1<span class="number">.171019</span><span class="number">.011</span>-factory-<span class="number">39448337.</span>zip</span><br></pre></td></tr></table></figure>
<p>手机关机，先按住音量键下+电源键，进入reboot<br /><br>进入解压后的刷机包，运行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">./flash-all.<span class="property">sh</span></span><br></pre></td></tr></table></figure>
<p>等待过程，显示下图则成功</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210607/01.webp"
                     
                ></p>
<h3 id="刷入SuperSU（Android-8）"><a href="#刷入SuperSU（Android-8）" class="headerlink" title="刷入SuperSU（Android 8）"></a>刷入SuperSU（Android 8）</h3><p>连上数据线，开启开发者模式<br /><br>运行命令</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">adb push <span class="title class_">SR5</span>-<span class="title class_">SuperSU</span>-v2<span class="number">.82</span>-<span class="title class_">SR5</span>-<span class="number">20171001224502.</span>zip /sdcard/<span class="title class_">Download</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader </span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">fastboot flash recovery twrp-<span class="number">3.3</span><span class="number">.0</span>-<span class="number">0</span>-angler.<span class="property">img</span></span><br></pre></td></tr></table></figure>
<p>音量键向下按两次，进入recovery mode<br /><br>向右划<br /><br>选择install<br /><br>进入Download 选择SuperSU<br /><br>向右划<br /><br>点击reboot system<br /><br>向右划<br /><br>手机就会重启</p>
<p>安装xpoder<br /><br>安装ssr</p>
<p>“已连接，但无法访问互联网”开机后wifi有感叹号, 时间无法同步解决办法 在手机的shell里以root用户执行：<br /><br># settings put global captive_portal_http_url <a class="link"   href="https://www.google.cn/generate_204" >https://www.google.cn/generate_204<i class="fas fa-external-link-alt"></i></a> <br /><br># settings put global captive_portal_https_url <a class="link"   href="https://www.google.cn/generate_204" >https://www.google.cn/generate_204<i class="fas fa-external-link-alt"></i></a> <br /><br># settings put global ntp_server 1.hk.pool.ntp.org <br /><br># reboot</p>
<p>打开xposed，向下拉刷新<br /><br>下载version 90</p>
<h3 id="刷magisk（Android-10有效）"><a href="#刷magisk（Android-10有效）" class="headerlink" title="刷magisk（Android 10有效）"></a>刷magisk（Android 10有效）</h3><p>同样的方式刷入magisk，把magisk.zip放到sdcard根目录下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push Magisk-v21.2.zip /sdcard/</span><br></pre></td></tr></table></figure>
<p>手机关机<br /><br>先按住音量键下+电源键进入reboot<br /><br>按两下音量键下，选择recovery mode<br /><br>点击install<br /><br>选择magisk.zip后，向右划<br /><br>重新启动</p>
<h3 id="刷nethunt"><a href="#刷nethunt" class="headerlink" title="刷nethunt"></a>刷nethunt</h3><p>下载，或者window直接下载</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxychains wget https://images.kali.org/nethunter/nethunter-<span class="number">2021.2</span>-angler-oreo-kalifs-full.<span class="built_in">zip</span> </span><br></pre></td></tr></table></figure>
<p>把下载好后的nethunter放到sdcard下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fastboot flash recovery twrp-<span class="number">3.3</span><span class="number">.1</span>-<span class="number">0</span>-bullhead.img</span><br></pre></td></tr></table></figure>
<p> 按两下音量键下 <br /><br>选择nethunter<br /><br>就开始自动刷机</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210607/02.webp"
                     
                ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install neofetch jnettop htop nethogs</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">neofetch</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210607/03.webp"
                     
                ><br><br /><br>点击NetHunter<br /><br>菜单选择KeX Manager<br /><br>点击SETUP LOCAL SERVER<br /><br>设置密码<br /><br> <br /><br>点击START SERVER开启服务器</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210607/04.webp"
                     
                ><br><br /><br>连接手机</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ssh root@xxx.xxx.xx.xx</span><br></pre></td></tr></table></figure>





<h3 id="另一种-android8-magisk-LSPosed"><a href="#另一种-android8-magisk-LSPosed" class="headerlink" title="另一种 android8+magisk+LSPosed"></a>另一种 android8+magisk+LSPosed</h3><p><a class="link"   href="https://developers.google.cn/android/images" >https://developers.google.cn/android/images<i class="fas fa-external-link-alt"></i></a><br /><br><a class="link"   href="https://topjohnwu.github.io/Magisk/install.html" >https://topjohnwu.github.io/Magisk/install.html<i class="fas fa-external-link-alt"></i></a><br /><br>android8+magisk+LSPosed<br /><br>下载刷机系统包后，解压，进入，输入 .&#x2F;flash-all.sh<br /><br>安装magisk<br /><br>修补镜像才能root<br /><br>刷完后从刷机包里的镜像压缩包找到boot.img ，推送到 &#x2F;sdcard&#x2F; 下<br /><br>打开magisk，点击安装，选择并修补一个文件，选择刚才推送的文件，点开始，然后就开始patch了<br /><br>显示All done后，adb shell进入到 &#x2F;sdcard&#x2F;Download&#x2F; 下，看到修补后的img，adb pull到电脑上<br /><br>进入到解压的系统包，输入adb root bootloader 到刷机界面<br /><br>输入 fastboot flash boot &#x2F;path&#x2F;to&#x2F;magisk_patched.img （这里用自己修补后的）<br /><br>刷完之后在输入 fastboot flash recovery &#x2F;path&#x2F;to&#x2F;magisk_patched.img <br /><br>重启之后就root成功了<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210607/05.webp"
                     
                ><br><br /></p>
<p><a class="link"   href="https://github.com/LSPosed/LSPosed" >https://github.com/LSPosed/LSPosed<i class="fas fa-external-link-alt"></i></a><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210607/06.webp"
                     
                ><br><br /><br>下载 Riru 压缩包，push到手机&#x2F;sdcard&#x2F;，打开magisk点击模块，选择Riru，安装后<br /><br>下载LSPosed，推送到 &#x2F;sdcard&#x2F;，，打开magisk点击模块，选择LSPosed，安装后重启</p>
]]></content>
      <tags>
        <tag>刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>unidbg踩坑记录，getobjectclass对象为null</title>
    <url>/2022/11/27/unidbg%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%EF%BC%8Cgetobjectclass%E5%AF%B9%E8%B1%A1%E4%B8%BAnull/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.dongchedi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.virtualmodule.android.AndroidModule;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Level;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">dongchedi</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line">    dongchedi() &#123;</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.ARM32SyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.unix.UnixSyscallHandler&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.AbstractEmulator&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.DalvikVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm.BaseVM&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line">        Logger.getLogger(<span class="string">&quot;com.github.unidbg.linux.android.dvm&quot;</span>).setLevel(Level.DEBUG);</span><br><span class="line"></span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android\\src\\test\\java\\com\\dongchedi\\dongchedi_6_5_1.apk&quot;</span>));</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">AndroidModule</span>(emulator, vm).register(memory);</span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="string">&quot;cjtfcc&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">tfccDecrypt</span><span class="params">(<span class="type">int</span> param1, <span class="type">int</span> param2, String param3, String param4)</span> &#123;</span><br><span class="line">        <span class="comment">// com.bdcaijing.tfccsdk.Tfcc</span></span><br><span class="line">        <span class="comment">// private native String tfccDecrypt(int i, int i2, String str, String str2);</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(vm.getJNIEnv()); <span class="comment">//第一个参数默认env</span></span><br><span class="line">        list.add(<span class="number">0</span>); <span class="comment">//第二个参数一般填0，一般用不到</span></span><br><span class="line">        list.add(param1);</span><br><span class="line">        list.add(param2);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">stringObject1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, param3);</span><br><span class="line">        list.add(vm.addLocalObject(stringObject1));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">stringObject2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, param4);</span><br><span class="line">        list.add(vm.addLocalObject(stringObject2));</span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xa2ac</span>, list.toArray());</span><br><span class="line">        System.out.println(vm.getObject(number.intValue()).getValue().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">dongchedi</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">dongchedi</span>();</span><br><span class="line">        test.tfccDecrypt(<span class="number">9</span>, <span class="number">1</span>, <span class="string">&quot;14zRM+40n2UGVx0DlI7hqDFjsxGR6eJsnnxUME5ZDT8=&quot;</span>,</span><br><span class="line">                <span class="string">&quot;AQAAAIY8QCEBiAWgEHTCmugnR4hHWlbOmpfOHoYQ+gXQHXvSrCBlQtFmGM8T7eHljYYTD8vWOsQa8SuOaBwMTYOS03qjuUktB2dRu3+mWr4z5N3uMrb1Es/MTUrWx8JGHVoX1z7f6luarDvT9Wf0KKbfHRkqaJANlwVEqULsZU6HkJ0zkaFh3AnU5eQRsPoxttOPOhsVLv/kNjpm1&quot;</span> +</span><br><span class="line">                <span class="string">&quot;qBHkENXSedO4MN+PGybTCOKH3Ri6dvoX9EXCUr41o2W0ujI46nYn7vUrRkHgHNOOrGkIL7Acn0wrU6nj3cZuFpxb+W+u6r+MFI8ScE9XQya3322RRqOQUr1xWXpCucv/zknN7pjyzptYk8iWRfeaCT+iSjkmwa+3EStu3U/TQakF1xh46hjPOczx7elte6qV9ztDyF61Eu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Nrz4K+9O4TgqDeg9FGv7k+sNXg4M8L+Vx2BzJ/9MfaOFF5YXlI2oeMk0FReBTV8cBdXv2j23ju5HUpNo45dYF+tLihymL3maOiuWYviIAk8OKjNG+juruF4YuYoAqJoJSvuZ9Avujl3mqL66AdZmzG7vTa29S1MWIwu3XYj96lcbGSav9m5g4yRb6zXcQDIpqAmYHVgRjX&quot;</span> +</span><br><span class="line">                <span class="string">&quot;7adt09SOuvrcuORpUh2jSt5smO+lpR7fuHk4tlCr6OlRr360IgJr82PmeAAKz1dV9tHGYlV+618tjgi36J4iLuWaw6Ix9iJ1R6cFJY6JIX8pU8NoGoUFDjK3Dm8Pm9j72J9cTQpEMR/HCT3BOw5YTTTQHl3eQgdZevUD8HFnECMvajFZxKe6obyPieE41WBk/EQ5WI2Bwtu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;rmyzxEq/VPIm1UfoqE78T4QOa2ey82Mw6TCIzMSMhCwiA2huzSnlus9RicQaPCX1isa0BitIISMHeHRFqab9ORMnHKVxEX3AhZN3OwcPKntx43yxZrTp5GLYwndyqchZCpTXhu/j/7WfUZRnIc2aOhKegFCLNdeml0Kha9FPSXE8AxTMr6ldw2p5vhPmzn5p2iRvgXoqdr5J&quot;</span> +</span><br><span class="line">                <span class="string">&quot;6W6QgBCEb8fGCupV+gLibY5mcLabHBmcSEkdax1h341Qxyk6s8/LvUlpx6MZHPM+/NgWf8bUvvbPKLrD7xhKPtCaaaO1PSGiNTPrlRJaajiBpJcMwMkjRbKT76+kDCL00teodYNyFBEkYmGJM5Sg7fHY1f6e3FXRYny6bXnr0R/mTnxWDPDAc9gn2eiyHofLRaBjvtbdpMStn&quot;</span> +</span><br><span class="line">                <span class="string">&quot;MolS5ybQt8GfaVifsjfQe3jwLmFNCtsXn6unDo189udnL9iOwtwIhLUtUvIU9IejQ33rKAMWQjrlvA99KTLzdk6ewItUa4mI9sFcpcR/uIbQiiHYs1qvfrQiAmvzY+Z4AArPV1X20cZiVX7rXy2OCLfoniIu5ZrDojH2InVHpwUljokhfylTw2gahQUOMrcObw+b2PvYn1xNC&quot;</span> +</span><br><span class="line">                <span class="string">&quot;kQxH8cJPcE7DlhNNO1SUZeQb5H5IQYdROwNOj0gcN4YmN1P2S2PC6VQzGJu2x0+T9e7PeW2jjIl4qM0N23z+A9W3IX0+x4oUU/1MNdgaxMlucq9SRoPnuyW/LC+PkDTN1tk6oMbKoqQSYiKn0dVOZKma6PWO3UogNGhFJN+uzG8TN0Vh5YDTrpJ/AhzGdpNu0aDFGXrXqaCx5n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Lcxfiq9XMzz47/nNbJ5GD/sBg2anQ25uYJQqueFTZsej5Buy+PpsZ9UCUlZ3QDdC8Z2dGfQCnnzvosx3vb3nZVUtkxruvGaDtTueshIcL6OFF+liJQ1N3hjfsom7F74c4NYZo3SbrUSlOOLWi9YALqszQq+s6XvUNBbKWzeCU236tn7MmtlBkdA+ZAe95f1JPy63XwxkK6wtfF&quot;</span> +</span><br><span class="line">                <span class="string">&quot;n7uxDQKfv/HVeKjvzQ+IAHv3wQmGSSUuHtusWtwFzTMXKqur3KNdLDQZIo6UV74/uvG3/CQnX3JoK3AHydHKV+kkMd9W6Uzjy37PixjrW5IFST6+thqb/yrK1chGM9MPJ7AbNeq9Zfhi5igComglK+5n0C+6OXebfNiKoMkM2f/ezRyGcMxEkKmyG2g9cZwfeDjZjDVvPiMd8Jf&quot;</span> +</span><br><span class="line">                <span class="string">&quot;6XOoXT47iq7JcWZ8PM8FELOWjegOP9hXUMPdkn2waqXbJ7eFwfb1vI/kSsX6QdTF5cXYcScuqFjft/hLd/a+JaSwEyFqIbWnZkHMMNuAqCmBmzk8ZEXzYkflQBKnTdiEgsXVrf4RokNgd//cFo6ZfrcdMdtbpiOEM3k9iD9HABFcsV4boY89g1Uqmx66emYxoD1UUI7XlDyGFgvY&quot;</span> +</span><br><span class="line">                <span class="string">&quot;uRFN5vcANjq9wM4mIfNRx8xN5JNj5EIcZG6fE3mq0jEQlEQf8V89ngy2x/Klp7c8OHWV9YDy3v4QeSTmSCrg8EvCx71UD0mhOPjBoF0EsUt6JseIrcKH+ORtrfSyPjUPnhkCnkTLZpyidfqUCJz6YksBQ7Ak+tA9vKN7Y2xGkgy/8jpwMfRjnmERo3YMrgaawqhp5RZLB0V2ZPLUC&quot;</span> +</span><br><span class="line">                <span class="string">&quot;s5MqqsJDnIp2KnCV8hJVDTUdz6/XlAPCWACEfZAZpX38dS7RTVw/KzJf903a7pdrsPJ+fW4MVIaMzF98w0GCRjFSPw8V44sbHQbrcFLgZ+7bF6G2Dm0eez6L5xIs0ptZcX8tN7UE24KxYJK8/THH47mRDs/gyMFE4r5r5XzB1vgtPPWURrjzCtODTxtcsxDaQ89e7WHuBA7IVBzRC2&quot;</span> +</span><br><span class="line">                <span class="string">&quot;5+lKeAndp3VlHpeGLzzLfHkgMqva7KsGE3rMPYk+ioGPl3TuPWrqawjwSKlsUP/vf61f80Br42DugXL4RPAoE5b5P/8628TZVqYMzkC1hfKNOzxkAOsYCW+vLizurCPm8yeIqDYlZq/DcFVxHxPkAR9uOFZwlKNXZbMzaDEU+ebXX4g+WG6dpKK0GSFV4MZX5SvpZrvIZvTspyVYjpXHV&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Atr+wCzO0N5tg1kGJABoj+aZ4GWGFYv7kzTMBuk0hDeFXfDgp+Af7tMAkfmG67iqopLbNccfhlE6fXBwZail88u/6S9zhqAgZLclp3cPFDnZdGLF0pNqzsx6pk2j5tS+srUVHT+M5gGYOhC6iofm0ek0CQYsSwd6e8uUV627Cb00qLT1d0BGax0oQA2UE+dgCiR2jZaO0bnPsh6a6VC3P0&quot;</span> +</span><br><span class="line">                <span class="string">&quot;vGdiWeNZyjTEHXD3YaUb9y49+bniXV7SpHcLiZj+voezbBQqCETrDTc1pLjicAgBtCJ4kPYUzDJBtB/NUQR+PHMwH4QrhgqaDKFPnCjFAOv63ob7aepyfMI/fWenLJmEuTQU/hWv7zxhvC3KX7hfcIPTtUYDRJofRS4F0UNTGY7wHf0nD+uqJPaxEamlsFMNtPLa2ZAskmEXy1tegY8sH8&quot;</span> +</span><br><span class="line">                <span class="string">&quot;V8pFL7Gn0EbOAonzSLwQKZhlESxQ7MPTu3fgP7mnuEknJmhk3dwiCNNePtG6NftfjQSeJGHl+qtJNdWL22jONkATEgCZDQfYCAGkDPnI/svE9N80b83xT5K/+MQaLZGX/cyTWKLIlz21uaHGSRo0MaNBwYrRjNOZhoHbN2Cy0sgVLvlaMGTnkH4PJ/I09GQxsNAKLXz+vAKKNwbA36Kw4n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;21WRWDoSBJ5gPjFKWHR1S4BYUCxI90O51M9InW1G06saOk991lD9RH6A0ywH3Nw4Mkg7BGLvdIdqCoqAmrcvgYJ1h/RvJOt/h2ipzcDpz/qaZU2UZabYEn3V714z0d5LMvN690tCaaaO1PSGiNTPrlRJaajhMKjIj0sQ1U1K4To1wyvhN4rsSeR+QtEIKK1xOW8yj5nhlEvksrd3GULB+hL&quot;</span> +</span><br><span class="line">                <span class="string">&quot;1ymx/tZgdQxe4ysd3cL9U/7tMmlPc9YWVtO22UO7iVrTfhTHmT0Rs9ttFNBjkyh/bPRTloBts7VeIUpze3ppRP4ncOJCaxxLOwtd0fA6iTvV4eAFeAcia29951yCHn91FjaNljJcPnRNy+u0VK+SlDptv5AcagR0luMfzGuIHOHdn9wIvb8/UDxAvxhwnieHQ7s1GdDUSq1T2xR5iHstyUu&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Ma/Gax0oQA2UE+dgCiR2jZaO5/TnlbXb9IKvNeQ1fAvHxiIwfpxozEMIvOzOrPbLwJjs8xXbkCH8GvEYiqQfMw2B3w6YIawzwVlcx+4CypfZvtYTatE+XCzs2j8rjFUZWUBv2olwN3ZfL3a0AfpAo0+LTSRIivoQSNEEuk7sIg2xU1lonGUe8JRYJovoyczZNNC/OUI5wD5kWCEM0v3A/kO&quot;</span> +</span><br><span class="line">                <span class="string">&quot;Du50mX+Sl1LtmX8FQdy1q5nbS1BWFqfF6cibw4CL5yMH&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行样本后报错：<br>GetObjectClass 的 object 为 null</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221127/01.webp"
                      alt="01"
                ></p>
<p>当前报错位置已经断下来了，输入bt查看调用栈</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221127/02.webp"
                     
                ></p>
<p>用ida打开样本so，跳到 0x092b8 地址</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221127/03.webp"
                     
                ></p>
<p>先分析一下，查看GetObjectClass的文档</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jclass GetObjectClass(JNIEnv *env, jobject obj);</span><br></pre></td></tr></table></figure>

<p>有两个参数，env和object，根据ARM函数调用约定采用，参数1<del>参数4 分别保存到 R0</del>R3 寄存器中</p>
<p>所以往上看R1出现的地址位置，0x92A8，进行断点查看调用的位置</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221127/04.webp"
                     
                ></p>
<p>ida跳到0x0a554，转为汇编代码后，可以看到object是v24，也就是入参a2，</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221127/05.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221127/06.webp"
                     
                ></p>
<p>查看该函数的地址为0xa2ac，这跟我们一开始调用的地址一样的，在看当时传递的第二个object，确实传的0</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221127/07.webp"
                     
                ></p>
<p>可以通过jadx查看正确的对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">tfccDecrypt</span><span class="params">(<span class="type">int</span> param1, <span class="type">int</span> param2, String param3, String param4)</span> &#123;</span><br><span class="line">    <span class="comment">// com.bdcaijing.tfccsdk.Tfcc</span></span><br><span class="line">    <span class="comment">// private native String tfccDecrypt(int i, int i2, String str, String str2);</span></span><br><span class="line">    List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    list.add(vm.getJNIEnv()); <span class="comment">//第一个参数默认env</span></span><br><span class="line"><span class="comment">//        list.add(0); //第二个参数一般填0，一般用不到</span></span><br><span class="line">    <span class="type">DvmClass</span> <span class="variable">Tfcc</span> <span class="operator">=</span> vm.resolveClass(<span class="string">&quot;com/bdcaijing/tfccsdk/Tfcc&quot;</span>);</span><br><span class="line">    DvmObject&lt;?&gt; TfccObject = Tfcc.newObject(<span class="literal">null</span>);</span><br><span class="line">    list.add(vm.addLocalObject(TfccObject));</span><br><span class="line">    list.add(param1);</span><br><span class="line">    list.add(param2);</span><br><span class="line">    <span class="type">StringObject</span> <span class="variable">stringObject1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, param3);</span><br><span class="line">    list.add(vm.addLocalObject(stringObject1));</span><br><span class="line">    <span class="type">StringObject</span> <span class="variable">stringObject2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, param4);</span><br><span class="line">    list.add(vm.addLocalObject(stringObject2));</span><br><span class="line">    <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0xa2ac</span>, list.toArray());</span><br><span class="line">    System.out.println(vm.getObject(number.intValue()).getValue().toString());</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>再次运行就可以了</p>
]]></content>
      <tags>
        <tag>Unidbg</tag>
      </tags>
  </entry>
  <entry>
    <title>动静态SO层算法还原和脱机(吾爱论坛2021春节安卓题目)</title>
    <url>/2021/12/12/%E5%8A%A8%E9%9D%99%E6%80%81SO%E5%B1%82%E7%AE%97%E6%B3%95%E8%BF%98%E5%8E%9F%E5%92%8C%E8%84%B1%E6%9C%BA-%E5%90%BE%E7%88%B1%E8%AE%BA%E5%9D%9B2021%E6%98%A5%E8%8A%82%E5%AE%89%E5%8D%93%E9%A2%98%E7%9B%AE/</url>
    <content><![CDATA[<p>文章的案例来自吾爱论坛2021春节安卓题目</br><br>链接：<a class="link"   href="https://www.52pojie.cn/forum.php?mod=viewthread&tid=1369661&highlight=2021%EF%BF%BD%EF%BF%BD%EF%BF%BD%EF%BF%BD" >案例链接<i class="fas fa-external-link-alt"></i></a></p>
<p>java用的是unicode编码，c语言用的是ASCII编码</p>
<p>明文限制的长度是30，检测函数在nativel-lib文件里<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/01.webp"
                     
                ></p>
<p>解压apk并用ida打开so文件<br />大概分析一下，传进来的参数判断是否为30位，然后进入sub_B90进行处理后，再进入sub_D90处理，结果为v9，最后v9和v19作比较，相等返回1，不等返回0；<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/02.webp"
                     
                ></p>
<h4 id="用ida动态调试"><a href="#用ida动态调试" class="headerlink" title="用ida动态调试"></a>用ida动态调试</h4><p>调试前先把ida目录下的dbgsrv、android-server拷贝到手机上<br />并修改权限 777<br />这里需要开启frida去获取so的基址+sub_B90的偏移量&#x3D;sub_B90的绝对地址<br />先运行frida，再运行android-server<br />frida代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_KeyStore_load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> addr_libnatuve = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(addr_libnatuve) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;so基址：&quot;</span>, addr_libnatuve)</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(hook_KeyStore_load)</span><br></pre></td></tr></table></figure>
<p>打印结果<br />so基址： 0x7613313000<br />0x7613313000+8AC<br />所以需要在动调调试的时候在位置打上断点<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/03.webp"
                     
                ><br><br />没显示汇编按空格<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/04.webp"
                     
                ></p>
<p>以go方式打开ida</p>
<p>选择Debugger–》Attach–》Remote ARM Linux&#x2F;Android debugger<br />输入手机IP，选择进程<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/05.webp"
                     
                ><br><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/06.webp"
                     
                ><br><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/07.webp"
                     
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/08.webp"
                     
                ><br><br />加载好后跳到指定位置，或者快捷键G<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/09.webp"
                     
                ></p>
<p>打上断点后，点击绿色小箭头继续运行，app点击验证，会断到当前位置<br />可以转为汇编跟静态ida的作比较，Edit–》Code，或者快捷键C<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/10.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/11.webp"
                     
                ><br /><br>按F8单步调试<br />打开寄存器，进入<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/12.webp"
                     
                ><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/13.webp"
                     
                ></p>
<h4 id="用Frida"><a href="#用Frida" class="headerlink" title="用Frida"></a>用Frida</h4><p>这里直接用fridahook 函数，sub_B90<br />sub_B90的偏移量为B90<br />这就是第一轮加密后的<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/14.webp"
                     
                ></p>
<p>hook 第二个函数<br />这是明文经两轮加密后的结果<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/15.webp"
                     
                ></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_KeyStore_load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> addr_libnatuve = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(addr_libnatuve) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;so基址：&quot;</span>, addr_libnatuve)</span><br><span class="line">            <span class="keyword">var</span> sub_B90 = addr_libnatuve.<span class="title function_">add</span>(<span class="number">0xB90</span>)</span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sub_B90, &#123;</span><br><span class="line">                <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">arg0</span> = args[<span class="number">0</span>]</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">arg1</span> = args[<span class="number">1</span>]</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">arg2</span> = args[<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// console.log(&quot;</span></span><br><span class="line"><span class="string">&quot;,hexdump(this.arg0))</span></span><br><span class="line"><span class="string">                    // console.log(&quot;</span></span><br><span class="line"><span class="string">&quot;,this.arg1);</span></span><br><span class="line"><span class="string">                    // console.log(&quot;</span></span><br><span class="line"><span class="string">&quot;,hexdump(this.arg2));</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>参数一：<span class="string">&quot;,Memory.readCString(this.arg0))</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>参数二：<span class="string">&quot;,this.arg1.toInt32());</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>参数三<span class="string">&quot;,Memory.readCString(this.arg2))</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                onLeave: function(retval)&#123;</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>sub_B90 onLeave<span class="string">&quot;);</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>运算结果<span class="string">&quot;);</span></span><br><span class="line"><span class="string">                    console.log(Memory.readByteArray(this.arg0, 30)); // 这里把结果赋值给了第一个参数</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            var sub_D90 = addr_libnatuve.add(0xD90)</span></span><br><span class="line"><span class="string">            Interceptor.attach(sub_D90, &#123;</span></span><br><span class="line"><span class="string">                onEnter: function(args)&#123;</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>sub_D90 onEnter<span class="string">&quot;);</span></span><br><span class="line"><span class="string">                    this.arg0 = args[0]</span></span><br><span class="line"><span class="string">                    this.arg1 = args[1]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>参数一：<span class="string">&quot;,Memory.readByteArray(args[0], 30))</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>参数二：<span class="string">&quot;, this.arg1.toInt32())</span></span><br><span class="line"><span class="string">                &#125;,</span></span><br><span class="line"><span class="string">                onLeave: function(retval)&#123;</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>sub_D90 onLeave<span class="string">&quot;);</span></span><br><span class="line"><span class="string">                    console.log(&quot;</span>运算结果<span class="string">&quot;);</span></span><br><span class="line"><span class="string">                    console.log(Memory.readCString(retval));</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">setImmediate(hook_KeyStore_load)</span></span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/16.webp"
                     
                ></p>
<h4 id="主动调用"><a href="#主动调用" class="headerlink" title="主动调用"></a>主动调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"># -*- <span class="attr">coding</span>: <span class="variable constant_">UTF</span>-<span class="number">8</span> -*-</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> frida, sys</span><br><span class="line"> </span><br><span class="line">jscode = <span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">var destAddr = &#x27;</span><span class="string">&#x27;;  //定位xsp地址</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">function inline_hook() &#123;</span></span><br><span class="line"><span class="string">    var so_addr = Module.findBaseAddress(&quot;libnative-lib.so&quot;);</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">    if (so_addr) &#123;</span></span><br><span class="line"><span class="string">        console.log(&quot;so_addr:&quot;, so_addr);</span></span><br><span class="line"><span class="string">         </span></span><br><span class="line"><span class="string">        var addr_b90 = so_addr.add(0xB90);</span></span><br><span class="line"><span class="string">        var sub_b90 = new NativeFunction(addr_b90 , &#x27;</span>int<span class="string">&#x27;, [&#x27;</span>pointer<span class="string">&#x27;, &#x27;</span>int<span class="string">&#x27;, &#x27;</span>pointer<span class="string">&#x27;]);</span></span><br><span class="line"><span class="string">        Interceptor.attach(sub_b90, &#123;</span></span><br><span class="line"><span class="string">            onEnter: function(args)</span></span><br><span class="line"><span class="string">            &#123; </span></span><br><span class="line"><span class="string">            destAddr = args[0];</span></span><br><span class="line"><span class="string">            console.log(&#x27;</span>onEnter <span class="variable constant_">B90</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string">            &#125;,</span></span><br><span class="line"><span class="string">            //在hook函数之后执行的语句</span></span><br><span class="line"><span class="string">            onLeave:function(retval)</span></span><br><span class="line"><span class="string">            &#123;</span></span><br><span class="line"><span class="string">            console.log(&#x27;</span>onLeave <span class="variable constant_">B90</span><span class="string">&#x27;);</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">        var addr_b2c = so_addr.add(0xb2c);</span></span><br><span class="line"><span class="string">        console.log(&quot;The addr_b2c:&quot;, addr_b2c);</span></span><br><span class="line"><span class="string">        Java.perform(function() &#123;</span></span><br><span class="line"><span class="string">            Interceptor.attach(addr_b2c, &#123;</span></span><br><span class="line"><span class="string">                onEnter: function(args) &#123;</span></span><br><span class="line"><span class="string">                console.log(&quot;addr_b2c OnEnter :&quot;,  Memory.readByteArray(destAddr.sub(0x38),64) );</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            &#125;)</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">setImmediate(inline_hook)</span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">   </span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">def <span class="title function_">on_message</span>(message, data):</span><br><span class="line">    <span class="keyword">if</span> message[<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;send&#x27;</span>:</span><br><span class="line">        <span class="title function_">print</span>(<span class="string">&quot; &#123;0&#125;&quot;</span>.<span class="title function_">format</span>(message[<span class="string">&#x27;payload&#x27;</span>]))</span><br><span class="line">    <span class="attr">else</span>:</span><br><span class="line">        <span class="title function_">print</span>(message)</span><br><span class="line">pass</span><br><span class="line">#<span class="title function_">print</span>(frida.<span class="title function_">enumerate_devices</span>())</span><br><span class="line"># 查找<span class="variable constant_">USB</span>设备并附加到目标进程</span><br><span class="line">device =  frida.<span class="title function_">get_usb_device</span>()</span><br><span class="line">#pid = device.<span class="title function_">spawn</span>([<span class="string">&quot;com.live.xctv&quot;</span>])</span><br><span class="line">  </span><br><span class="line">#session = device.<span class="title function_">attach</span>(pid)</span><br><span class="line">session =device.<span class="title function_">attach</span>(<span class="string">&#x27;cn.pojie52.cm01&#x27;</span>) #这里是要注入的apk包名</span><br><span class="line"># 在目标进程里创建脚本</span><br><span class="line">script = session.<span class="title function_">create_script</span>(jscode)</span><br><span class="line"># 注册消息回调</span><br><span class="line">script.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, on_message)</span><br><span class="line"><span class="title function_">print</span>(<span class="string">&#x27; Start attach&#x27;</span>)</span><br><span class="line"># 加载创建好的javascript脚本</span><br><span class="line">script.<span class="title function_">load</span>()</span><br><span class="line"># 读取系统输入</span><br><span class="line">sys.<span class="property">stdin</span>.<span class="title function_">read</span>()</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/17.webp"
                     
                ></p>
<h4 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h4><p>大概分析一下sub_b90，是根据传入的第三个参数s把v20进行了一个初始化，然后再把参数a1和v20进行了异或运算，主要看这个异或运算，先设想一下，如果是把a1进行了异或，那么得到的结果和a1之前的数据再异或就可以计算出异或的key，这里我们把它叫做xorkey，那么先看一下我们传入的参数，是30个1，也就是30个0x31 ，然后看结果，第一位是0xe0，0x31^0xe0 &#x3D; 209，然后把参数改为30个2，即0x32，得出首位的结果是0xe3，0xe3^0x32结果也是209，证明我们的思路是正确的，然后依次求出所有的xorkey，</p>
<p>这里的值是输入，30个1加密后异或来的<br />明文 ^ 密钥 &#x3D; 密文<br /># 拿到密钥<br />明文 ^ 密文 &#x3D; 密钥<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/18.webp"
                     
                ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>,</span><br><span class="line">     <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>]</span><br><span class="line">b = [<span class="number">0xe0</span>, <span class="number">0x6b</span>, <span class="number">0x37</span>, <span class="number">0xa1</span>, <span class="number">0x75</span>, <span class="number">0xd7</span>, <span class="number">0xf6</span>, <span class="number">0xd4</span>, <span class="number">0xef</span>, <span class="number">0x19</span>, <span class="number">0xc6</span>, <span class="number">0xc3</span>, <span class="number">0x57</span>, <span class="number">0xa0</span>, <span class="number">0xf9</span>, <span class="number">0xb4</span>, <span class="number">0x73</span>, <span class="number">0xee</span>, <span class="number">0xc8</span>,</span><br><span class="line">     <span class="number">0xd1</span>, <span class="number">0xb3</span>, <span class="number">0x30</span>, <span class="number">0x1a</span>, <span class="number">0x0a</span>, <span class="number">0x09</span>, <span class="number">0x52</span>, <span class="number">0x06</span>, <span class="number">0x8c</span>, <span class="number">0x1f</span>, <span class="number">0x7c</span>]</span><br><span class="line"></span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>):</span><br><span class="line">    c.append(a[i] ^ b[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<p>[209, 90, 6, 144, 68, 230, 199, 229, 222, 40, 247, 242, 102, 145, 200, 133, 66, 223, 249, 224, 130, 1, 43, 59, 56, 99, 55, 189, 46, 77]</p>
</br>

<p>异或的key找到了，现在要找异或后的正确值，才能算出答案明文<br />1.调试<br />![image.png]<img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/20.webp"
                     
                ><br />调试到这里，要在寄存器钟拿到v19<br />这里就是判断的地方，偏移量为B2C<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/21.webp"
                     
                ><br><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/22.webp"
                     
                ></p>
<h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><p>没计算前<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/23.webp"
                     
                ><br />计算后<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/24.webp"
                     
                ><br><br />这就是要的密文了<br />“5Gh2&#x2F;y6Poq2&#x2F;WIeLJfmh6yesnK7ndnJeWREFjRx8”</p>
<h4 id="另一种方式hook寄存器"><a href="#另一种方式hook寄存器" class="headerlink" title="另一种方式hook寄存器"></a>另一种方式hook寄存器</h4><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/25.webp"
                     
                ><br />基地址加B30就是结果寄存器的位置，同时我们需要的是x9寄存器的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_KeyStore_load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> addr_libnatuve = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative-lib.so&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(addr_libnatuve) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;so基址：&quot;</span>, addr_libnatuve)</span><br><span class="line">            <span class="keyword">var</span> <span class="variable constant_">LDRB</span> = addr_libnatuve.<span class="title function_">add</span>(<span class="number">0xB30</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;LDRB&quot;</span>, <span class="variable constant_">LDRB</span>)</span><br><span class="line">            <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="variable constant_">LDRB</span>, &#123;</span><br><span class="line">                <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Memory</span>.<span class="title function_">readCString</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">x9</span>))  <span class="comment">// 上下文获取x9寄存器</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;运算结果&quot;</span>);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Memory</span>.<span class="title function_">readCString</span>(retval)); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(hook_KeyStore_load)</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20211212/26.webp"
                     
                ></p>
<h4 id="异或出答案"><a href="#异或出答案" class="headerlink" title="异或出答案"></a>异或出答案</h4><p>密钥：[‘0xd1’, ‘0x5a’, ‘0x6’, ‘0x90’, ‘0x44’, ‘0xe6’, ‘0xc7’, ‘0xe5’, ‘0xde’, ‘0x28’, ‘0xf7’, ‘0xf2’, ‘0x66’, ‘0x91’, ‘0xc8’, ‘0x85’, ‘0x42’, ‘0xdf’, ‘0xf9’, ‘0xe0’, ‘0x82’, ‘0x1’, ‘0x2b’, ‘0x3b’, ‘0x38’, ‘0x63’, ‘0x37’, ‘0xbd’, ‘0x2e’, ‘0x4d’]<br />结果：“5Gh2&#x2F;y6Poq2&#x2F;WIeLJfmh6yesnK7ndnJeWREFjRx8”<br />结果^密钥&#x3D;答案<br /></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = [<span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>,</span><br><span class="line">     <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>, <span class="number">0x31</span>]</span><br><span class="line">b = [<span class="number">0xe0</span>, <span class="number">0x6b</span>, <span class="number">0x37</span>, <span class="number">0xa1</span>, <span class="number">0x75</span>, <span class="number">0xd7</span>, <span class="number">0xf6</span>, <span class="number">0xd4</span>, <span class="number">0xef</span>, <span class="number">0x19</span>, <span class="number">0xc6</span>, <span class="number">0xc3</span>, <span class="number">0x57</span>, <span class="number">0xa0</span>, <span class="number">0xf9</span>, <span class="number">0xb4</span>, <span class="number">0x73</span>, <span class="number">0xee</span>, <span class="number">0xc8</span>,</span><br><span class="line">     <span class="number">0xd1</span>, <span class="number">0xb3</span>, <span class="number">0x30</span>, <span class="number">0x1a</span>, <span class="number">0x0a</span>, <span class="number">0x09</span>, <span class="number">0x52</span>, <span class="number">0x06</span>, <span class="number">0x8c</span>, <span class="number">0x1f</span>, <span class="number">0x7c</span>]</span><br><span class="line"></span><br><span class="line">c = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">30</span>):</span><br><span class="line">    c.append(a[i] ^ b[i])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c) <span class="comment"># [209, 90, 6, 144, 68, 230, 199, 229, 222, 40, 247, 242, 102, 145, 200, 133, 66, 223, 249, 224, 130, 1, 43, 59, 56, 99, 55, 189, 46, 77]</span></span><br><span class="line"></span><br><span class="line">d = [<span class="number">0xd1</span>, <span class="number">0x5a</span>, <span class="number">0x6</span>, <span class="number">0x90</span>, <span class="number">0x44</span>, <span class="number">0xe6</span>, <span class="number">0xc7</span>, <span class="number">0xe5</span>, <span class="number">0xde</span>, <span class="number">0x28</span>, <span class="number">0xf7</span>, <span class="number">0xf2</span>, <span class="number">0x66</span>, <span class="number">0x91</span>, <span class="number">0xc8</span>, <span class="number">0x85</span>, <span class="number">0x42</span>, <span class="number">0xdf</span>, <span class="number">0xf9</span>, <span class="number">0xe0</span>, <span class="number">0x82</span>, <span class="number">0x1</span>, <span class="number">0x2b</span>, <span class="number">0x3b</span>, <span class="number">0x38</span>, <span class="number">0x63</span>, <span class="number">0x37</span>, <span class="number">0xbd</span>, <span class="number">0x2e</span>, <span class="number">0x4d</span>]</span><br><span class="line">data = base64.b64decode(<span class="string">&#x27;5Gh2/y6Poq2/WIeLJfmh6yesnK7ndnJeWREFjRx8&#x27;</span>.encode())</span><br><span class="line">flag = <span class="built_in">bytes</span>([d[i] ^ data[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(d))]).decode()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>


<p>运行结果为：</p>
<p>52pojieHappyChineseNewYear2021</p>
]]></content>
      <tags>
        <tag>frida</tag>
        <tag>安卓逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>unidbg补获取系统属性</title>
    <url>/2022/12/22/unidbg%E8%A1%A5%E8%8E%B7%E5%8F%96%E7%B3%BB%E7%BB%9F%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/000.webp"
                     
                ></p>
<h2 id="什么叫获取系统属性？"><a href="#什么叫获取系统属性？" class="headerlink" title="什么叫获取系统属性？"></a>什么叫获取系统属性？</h2><h3 id="Build类"><a href="#Build类" class="headerlink" title="Build类"></a>Build类</h3><p>第一种<br /> NDK中最常见的方式是通过JNI调用 ， 通过JNI调用JAVA方法获取本机的属性和信息，是最常见的做法，除了Build类，常见的还有 System.getProperty和Systemproperties.get等API。  <br />  Unidbg补环境过程中，最好补而且不会遗漏的就是这一类，因为Unidbg会给出清楚的报错，你没法对它置之不理。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">j<span class="keyword">class</span> <span class="title class_">androidBuildClass</span> = env-&gt;<span class="title class_">FindClass</span>(<span class="string">&quot;android/os/Build&quot;</span>);</span><br><span class="line">jfieldID <span class="variable constant_">SERIAL</span> = env-&gt;<span class="title class_">GetStaticFieldID</span>(androidBuildClass, <span class="string">&quot;SERIAL&quot;</span>,</span><br><span class="line"><span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">jstring serialNum = (jstring) env-&gt;<span class="title class_">GetStaticObjectField</span>(androidBuildClass,</span><br><span class="line"><span class="variable constant_">SERIAL</span>);</span><br></pre></td></tr></table></figure>

<h3 id="system-property-get"><a href="#system-property-get" class="headerlink" title="system_property_get"></a>system_property_get</h3><p>第二种常见方式是通过system_property_get 函数获取系统属性也是常见做法  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">char *key = <span class="string">&quot;ro.build.id&quot;</span>;</span><br><span class="line">char value[<span class="variable constant_">PROP_VALUE_MAX</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="title function_">__system_property_get</span>(key, value);</span><br></pre></td></tr></table></figure>
<p> 这类环境缺失容易被大家忽视，因为没有日志提示，即使src&#x2F;test&#x2F;resources&#x2F;log4j.properties中日志全 开，也不会打印相关信息。  </p>
<h3 id="通过文件访问"><a href="#通过文件访问" class="headerlink" title="通过文件访问"></a>通过文件访问</h3><p> 第三个常见方式是通过文件访问，比如读取&#x2F;proc&#x2F;pid&#x2F;maps，此种情况，Unidbg会提供日志输出，但 经常被大家忽视，事实上，不少朋友初学Unidbg时除了JAVA环境的报错，其他日志信息都不去管。  </p>
<h3 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h3><p> 第四个常见方式是通过popen()管道从shell中获取系统属性，其效果可以理解成在NDK中使用adb shell，popen参数一就是shell命令，返回值是一个fd文件描述符，可以read其内容，其中内容就是adb shell执行该命令应该返回的内容。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">char value[<span class="variable constant_">PROP_VALUE_MAX</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="attr">std</span>::string cmd = <span class="string">&quot;getprop ro.build.id&quot;</span>;</span><br><span class="line"><span class="variable constant_">FILE</span>* file = <span class="title function_">popen</span>(cmd.<span class="title function_">c_str</span>(), <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="title function_">fread</span>(value, <span class="variable constant_">PROP_VALUE_MAX</span>, <span class="number">1</span>, file);</span><br><span class="line"><span class="title function_">pclose</span>(file);</span><br></pre></td></tr></table></figure>


<h3 id="getenv函数"><a href="#getenv函数" class="headerlink" title="getenv函数"></a>getenv函数</h3><p>第五个常见方式是通过 getenv函数 获取进程环境变量，首先，Android系统层面存在一些默认的环境变 量，除此之外，样本可以设置自己进程内的环境变量。因此，样本可以在Native层获取系统环境变量或 者自身JAVA层设置的环境变量。 <br /> 我们可以通过ADB 查看环境变量有哪些，也可以查看环境变量的值。   </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">C</span>:\<span class="title class_">Users</span>\pr0214&gt;adb shell</span><br><span class="line"><span class="attr">bullhead</span>:/ $ <span class="keyword">export</span></span><br><span class="line"><span class="variable constant_">ANDROID_ASSETS</span></span><br><span class="line"><span class="variable constant_">ANDROID_BOOTLOGO</span></span><br><span class="line"><span class="variable constant_">ANDROID_DATA</span></span><br><span class="line"><span class="variable constant_">ANDROID_ROOT</span></span><br><span class="line">ANDROID_SOCKET_adbd</span><br><span class="line"><span class="variable constant_">ANDROID_STORAGE</span></span><br><span class="line"><span class="variable constant_">ASEC_MOUNTPOINT</span></span><br><span class="line"><span class="variable constant_">BOOTCLASSPATH</span></span><br><span class="line"><span class="variable constant_">DOWNLOAD_CACHE</span></span><br><span class="line"><span class="variable constant_">EXTERNAL_STORAGE</span></span><br><span class="line"><span class="variable constant_">HOME</span></span><br><span class="line"><span class="variable constant_">HOSTNAME</span></span><br><span class="line"><span class="variable constant_">LOGNAME</span></span><br><span class="line"><span class="variable constant_">PATH</span></span><br><span class="line"><span class="variable constant_">SHELL</span></span><br><span class="line"><span class="variable constant_">SYSTEMSERVERCLASSPATH</span></span><br><span class="line"><span class="variable constant_">TERM</span></span><br><span class="line"><span class="variable constant_">TMPDIR</span></span><br><span class="line"><span class="variable constant_">USER</span></span><br><span class="line"><span class="attr">bullhead</span>:/ $ echo $HOME</span><br><span class="line">/</span><br><span class="line"><span class="attr">bullhead</span>:/ $ echo $ANDROID_DATA</span><br><span class="line">/data</span><br><span class="line"><span class="attr">bullhead</span>:/ $ echo $SYSTEMSERVERCLASSPATH</span><br><span class="line">/system/framework/services.<span class="property">jar</span>:<span class="regexp">/system/</span>framework/ethernetservice.<span class="property">jar</span>:<span class="regexp">/system/</span>framework/wifiservice.<span class="property">jar</span>:<span class="regexp">/system/</span>framework/com.<span class="property">android</span>.<span class="property">location</span>.<span class="property">provider</span>.<span class="property">jar</span></span><br><span class="line"><span class="attr">bullhead</span>:/ $ echo $PATH</span><br><span class="line">/<span class="attr">sbin</span>:<span class="regexp">/system/</span><span class="attr">sbin</span>:<span class="regexp">/system/</span><span class="attr">bin</span>:<span class="regexp">/system/</span><span class="attr">xbin</span>:<span class="regexp">/vendor/</span><span class="attr">bin</span>:<span class="regexp">/vendor/</span>xbin</span><br><span class="line"><span class="attr">bullhead</span>:/ $</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p> 第六个常见方式是使用系统调用获取相关属性，不管是通过syscall函数还是内联汇编，都属此类。 常见的比如uname系统调用  </p>
<blockquote>
<p> uname - 获取当前内核的名称和信息<br>返回的信息是一个结构体  </p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">struct utsname &#123;</span><br><span class="line">char sysname[]; <span class="comment">/* 操作系统名称 (例如 &quot;Linux&quot;) */</span></span><br><span class="line">char nodename[]; <span class="comment">/* &quot;一些实现了的网络”内的名称*/</span></span><br><span class="line">char release[]; <span class="comment">/* 操作系统版本 (例如 &quot;2.6.28&quot;)*/</span></span><br><span class="line">char version[]; <span class="comment">/* 操作系统发布日期 */</span></span><br><span class="line">char machine[]; <span class="comment">/* 硬件标识符 */</span></span><br><span class="line">#ifdef _GNU_SOURCE</span><br><span class="line">char domainname[]; <span class="comment">/* NIS或YP域名 */</span></span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 日志全开的情况下，系统调用的相关调用会被全部打印， Unidbg的uname系统调用实现是个很好也很简单的检测点，十分规范的表明了自己是Unidbg。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">protected int <span class="title function_">uname</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">    <span class="title class_">RegisterContext</span> context = emulator.<span class="title function_">getContext</span>();</span><br><span class="line">    <span class="title class_">Pointer</span> buf = context.<span class="title function_">getPointerArg</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (log.<span class="title function_">isDebugEnabled</span>()) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;uname buf=&quot;</span> + buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final int <span class="variable constant_">SYS_NMLN</span> = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> sysName = buf.<span class="title function_">share</span>(<span class="number">0</span>);</span><br><span class="line">    sysName.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;Linux&quot;</span>); <span class="comment">/* Operating system name (e.g., &quot;Linux&quot;) */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> nodeName = sysName.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    nodeName.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;localhost&quot;</span>); <span class="comment">/* Name within &quot;some implementation-defined network&quot; */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> release = nodeName.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    release.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;1.0.0-unidbg&quot;</span>); <span class="comment">/* Operating system release (e.g., &quot;2.6.28&quot;) */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> version = release.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    version.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;#1 SMP PREEMPT Thu Apr 19 14:36:58 CST 2018&quot;</span>); <span class="comment">/* Operating system version */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> machine = version.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    machine.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;armv8l&quot;</span>); <span class="comment">/* Hardware identifier */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> domainName = machine.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    domainName.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;localdomain&quot;</span>); <span class="comment">/* NIS or YP domain name */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 以上这些是较为常见的获取系统属性的方式，  </p>
<h2 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h2><h3 id="system-property-get的处理"><a href="#system-property-get的处理" class="headerlink" title="__system_property_get的处理"></a>__system_property_get的处理</h3><p>一般运行报IO错误，继承IOResolver实现文件重定向接口，打上自己的日志</p>
<blockquote>
<p> lilac path:&#x2F;dev&#x2F;properties<br>lilac path:&#x2F;proc&#x2F;stat  </p>
</blockquote>
<p>一般这前两个文件访问，不需要管，这是libc初始化的内部逻辑  <br /> 文件访问处理好了，接下来用第二种的方式，是__system_property_get 这个函数的处理 ，此Unidbg 在src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;linux&#x2F;android 目录下有相 关类对它进行了Hook和封装，我们可以直接拿来用  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">SystemPropertyHook</span> systemPropertyHook = <span class="keyword">new</span> <span class="title class_">SystemPropertyHook</span>(emulator);</span><br><span class="line">systemPropertyHook.<span class="title function_">setPropertyProvider</span>(<span class="keyword">new</span> <span class="title class_">SystemPropertyProvider</span>() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="title class_">String</span> <span class="title function_">getProperty</span>(<span class="params"><span class="built_in">String</span> key</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;lilac Systemkey:&quot;</span>+key);</span><br><span class="line">        <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">memory.<span class="title function_">addHookListener</span>(systemPropertyHook);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>lilac Systemkey:ro.serialno<br>lilac Systemkey:ro.product.manufacturer<br>lilac Systemkey:ro.product.brand<br>lilac Systemkey:ro.product.model</p>
</blockquote>
<p> 通过adb shell 获取这些信息，一 一填入正确的值，建议使用Unidbg时，对应的测试机Android版本为 6.0，这样或许可以避免潜在的麻烦。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">C</span>:\<span class="title class_">Users</span>\zsk&gt;adb shell</span><br><span class="line"><span class="attr">angler</span>:/ $ su</span><br><span class="line"><span class="attr">angler</span>:/ # getprop ro.<span class="property">serialno</span></span><br><span class="line">84B5T15A04002645</span><br><span class="line"><span class="attr">angler</span>:/ # getprop ro.<span class="property">product</span>.<span class="property">manufacturer</span></span><br><span class="line"><span class="title class_">Huawei</span></span><br><span class="line"><span class="attr">angler</span>:/ # getprop ro.<span class="property">product</span>.<span class="property">brand</span></span><br><span class="line">google</span><br><span class="line"><span class="attr">angler</span>:/ # getprop ro.<span class="property">product</span>.<span class="property">model</span></span><br><span class="line"><span class="title class_">Nexus</span> 6P</span><br><span class="line"><span class="attr">angler</span>:/ #</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注册绑定IO重定向</span></span><br><span class="line">emulator.<span class="title function_">getSyscallHandler</span>().<span class="title function_">addIOResolver</span>(<span class="variable language_">this</span>);</span><br><span class="line"><span class="title class_">SystemPropertyHook</span> systemPropertyHook = <span class="keyword">new</span> <span class="title class_">SystemPropertyHook</span>(emulator);</span><br><span class="line">systemPropertyHook.<span class="title function_">setPropertyProvider</span>(<span class="keyword">new</span> <span class="title class_">SystemPropertyProvider</span>() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="title class_">String</span> <span class="title function_">getProperty</span>(<span class="params"><span class="built_in">String</span> key</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;lilac Systemkey:&quot;</span>+key);</span><br><span class="line">        <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ro.serialno&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;84B5T15A04002645&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ro.product.manufacturer&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Huawei&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ro.product.brand&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;google&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ro.product.model&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Nexus 6P&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">memory.<span class="title function_">addHookListener</span>(systemPropertyHook);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Android虚拟机</span></span><br><span class="line">vm = emulator.<span class="title function_">createDalvikVM</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;xxx.apk&quot;</span>));</span><br></pre></td></tr></table></figure>

<h3 id="popen的处理"><a href="#popen的处理" class="headerlink" title="popen的处理"></a>popen的处理</h3><p>接下来是第四种和第五种， 管popen和getenv，它俩都是libc里的函数，所以放一起说。我的想法是Hook这两个函数， 如果产生调用就打印日志 ， 基于 Unidbg原生Hook封装的各种Hook。 </p>
<ul>
<li>HOOK时机要在什么时候？这个样本的popen调用发生在目标函数中，如果发生在init中呢？ </li>
<li>我们通过HOOK得到了其参数，那怎么给它返回正确的值呢？</li>
</ul>
<p>避免so存在init_proc 函数，或者init_array非空，需要在Loadlibrary加载so文件前面开始Hook，为了实现这个目标，我们提前将libc加载进Unidbg内存中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">DalvikModule</span> dmLibc = vm.<span class="title function_">loadLibrary</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/main/resources/android/sdk23/lib/libc.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="title class_">Module</span> moduleLibc = dmLibc.<span class="title function_">getModule</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// HOOK popen</span></span><br><span class="line">int popenAddress = (int) moduleLibc.<span class="title function_">findSymbolByName</span>(<span class="string">&quot;popen&quot;</span>).<span class="title function_">getAddress</span>();</span><br><span class="line"><span class="comment">// 函数原型：FILE *popen(const char *command, const char *type);</span></span><br><span class="line">emulator.<span class="title function_">attach</span>().<span class="title function_">addBreakPoint</span>(popenAddress, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public boolean <span class="title function_">onHit</span>(<span class="params">Emulator&lt;?&gt; emulator, long address</span>) &#123;</span><br><span class="line">        <span class="title class_">RegisterContext</span> registerContext = emulator.<span class="title function_">getContext</span>();</span><br><span class="line">        <span class="title class_">String</span> command = registerContext.<span class="title function_">getPointerArg</span>(<span class="number">0</span>).<span class="title function_">getString</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;lilac popen command:&quot;</span>+command);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p> addBreakPoint 我们一般用于下断点，添加回调，在命中断点时打印输出popen的参数1(即传给shell的 命令)，并设置返回值为true，即做完打印程序继续跑，不用真断下来。  </p>
<p>第一个问题解决， 第二个问题，怎么给它合适的返回值呢？  <br /></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/02.webp"
                     
                ></p>
<p><br /> 其实下面奇怪的报错就是popen导致的，popen返回的是文件描述符 。<br /> NR &#x3D; 190，190是什么系统调用？Unidbg尚未实现  <br /></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/03.webp"
                     
                ><br><br /> 查一下表 <a class="link"   href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm-32_bit_EABI" >https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm-32_bit_EABI<i class="fas fa-external-link-alt"></i></a><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/04.webp"
                     
                ><br><br />而Unidbg提供了一种在底层修复和实现popen函数的法子。  <br />接着是 uname -a</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">angler</span>:/ # uname -a</span><br><span class="line"><span class="title class_">Linux</span> localhost <span class="number">3.10</span><span class="number">.73</span>-g33ace82f84b #<span class="number">1</span> <span class="variable constant_">SMP</span> <span class="variable constant_">PREEMPT</span> <span class="title class_">Fri</span> <span class="title class_">Oct</span> <span class="number">13</span> <span class="number">04</span>:<span class="number">41</span>:<span class="number">33</span> <span class="variable constant_">UTC</span> <span class="number">2017</span> aarch64</span><br></pre></td></tr></table></figure>

<p>首先实现自己的ARM32SyscallHandler，完整代码如下，你可以把它当成固定讨论，它是针对 popen报错的官方解决方案。 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">package com.<span class="property">bailong</span>.<span class="property">qtt</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">Emulator</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">arm</span>.<span class="property">context</span>.<span class="property">EditableArm32RegisterContext</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">linux</span>.<span class="property">ARM32SyscallHandler</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">linux</span>.<span class="property">file</span>.<span class="property">ByteArrayFileIO</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">linux</span>.<span class="property">file</span>.<span class="property">DumpFileIO</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">memory</span>.<span class="property">SvcMemory</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">pointer</span>.<span class="property">UnidbgPointer</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">sun</span>.<span class="property">jna</span>.<span class="property">Pointer</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">concurrent</span>.<span class="property">ThreadLocalRandom</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">qttSyscallHandler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ARM32SyscallHandler</span> &#123;</span><br><span class="line">    public <span class="title function_">qttSyscallHandler</span>(<span class="params">SvcMemory svcMemory</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(svcMemory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected boolean <span class="title function_">handleUnknownSyscall</span>(<span class="params">Emulator&lt;?&gt; emulator, int NR</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable constant_">NR</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">190</span>:</span><br><span class="line">                <span class="title function_">vfork</span>(emulator);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">114</span>:</span><br><span class="line">                <span class="title function_">wait4</span>(emulator);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">handleUnknownSyscall</span>(emulator, <span class="variable constant_">NR</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">wait4</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">        <span class="title class_">EditableArm32RegisterContext</span> context = (<span class="title class_">EditableArm32RegisterContext</span>) emulator.<span class="title function_">getContext</span>();</span><br><span class="line">        int pid = context.<span class="title function_">getR0Int</span>();</span><br><span class="line">        <span class="title class_">UnidbgPointer</span> wstatus = context.<span class="title function_">getR1Pointer</span>();</span><br><span class="line">        int options = context.<span class="title function_">getR2Int</span>();</span><br><span class="line">        <span class="title class_">Pointer</span> rusage = context.<span class="title function_">getR3Pointer</span>();</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;wait4 pid=&quot;</span> + pid + <span class="string">&quot;, wstatus=&quot;</span> + wstatus + <span class="string">&quot;, options=0x&quot;</span> + <span class="title class_">Integer</span>.<span class="title function_">toHexString</span>(options) + <span class="string">&quot;, rusage=&quot;</span> + rusage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">vfork</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">        <span class="title class_">EditableArm32RegisterContext</span> context = (<span class="title class_">EditableArm32RegisterContext</span>) emulator.<span class="title function_">getContext</span>();</span><br><span class="line">        int childPid = emulator.<span class="title function_">getPid</span>() + <span class="title class_">ThreadLocalRandom</span>.<span class="title function_">current</span>().<span class="title function_">nextInt</span>(<span class="number">256</span>);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;vfork pid=&quot;</span> + childPid);</span><br><span class="line">        context.<span class="title function_">setR0</span>(childPid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected int <span class="title function_">pipe2</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">        <span class="title class_">EditableArm32RegisterContext</span> context = (<span class="title class_">EditableArm32RegisterContext</span>) emulator.<span class="title function_">getContext</span>();</span><br><span class="line">        <span class="title class_">Pointer</span> pipefd = context.<span class="title function_">getPointerArg</span>(<span class="number">0</span>);</span><br><span class="line">        int flags = context.<span class="title function_">getIntArg</span>(<span class="number">1</span>);</span><br><span class="line">        int write = <span class="title function_">getMinFd</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fdMap</span>.<span class="title function_">put</span>(write, <span class="keyword">new</span> <span class="title class_">DumpFileIO</span>(write));</span><br><span class="line">        int read = <span class="title function_">getMinFd</span>();</span><br><span class="line">        <span class="comment">// stdout中写入popen command 应该返回的结果</span></span><br><span class="line">        <span class="title class_">String</span> stdout = <span class="string">&quot;Linux localhost 3.10.73-g33ace82f84b #1 SMP PREEMPT Fri Oct 13 04:41:33 UTC 2017 aarch64</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fdMap</span>.<span class="title function_">put</span>(read, <span class="keyword">new</span> <span class="title class_">ByteArrayFileIO</span>(<span class="number">0</span>, <span class="string">&quot;pipe2_read_side&quot;</span>, stdout.<span class="title function_">getBytes</span>()));</span><br><span class="line">        pipefd.<span class="title function_">setInt</span>(<span class="number">0</span>, read);</span><br><span class="line">        pipefd.<span class="title function_">setInt</span>(<span class="number">4</span>, write);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;pipe2 pipefd=&quot;</span> + pipefd + <span class="string">&quot;, flags=0x&quot;</span> + flags + <span class="string">&quot;, read=&quot;</span> + read + <span class="string">&quot;, write=&quot;</span> + write + <span class="string">&quot;, stdout=&quot;</span> + stdout);</span><br><span class="line">        context.<span class="title function_">setR0</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>解释一下为什么不直接补在ARM32SyscallHandler中？因为Unidbg并没有真正实现wait4和fork这两个 系统调用，只不过对于popen而言，用上述方式可以“凑合用”，既然不是完美的实现，自然不能放到 ARM32SyscallHandler中去，免得出大问题。  </p>
<p> 在pipe2中注释下的stdout中传入正确返回值即可，比如uname -a就是，需要注意，结果都i要加换行 符，这是shell结果的返回习惯。</p>
<p> 接下来让我们的emulator使用我们自己的syscallHandler，emulator &#x3D; new AndroidARMEmulator(new File(“target&#x2F;rootfs”)); 由如下洋洋洒洒十来行取代。  <br />  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line"><span class="comment">//        emulator = AndroidEmulatorBuilder.for32Bit().build();</span></span><br><span class="line"><span class="title class_">AndroidEmulatorBuilder</span> builder = <span class="keyword">new</span> <span class="title class_">AndroidEmulatorBuilder</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">    public <span class="title class_">AndroidEmulator</span> <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AndroidARMEmulator</span>(processName, rootDir,backendFactories) &#123;</span><br><span class="line">            @<span class="title class_">Override</span></span><br><span class="line">            protected <span class="title class_">UnixSyscallHandler</span>&lt;<span class="title class_">AndroidFileIO</span>&gt;</span><br><span class="line">            <span class="title function_">createSyscallHandler</span>(<span class="params">SvcMemory svcMemory</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">qttSyscallHandler</span>(svcMemory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">emulator = builder.<span class="title function_">setRootDir</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>)).<span class="title function_">build</span>();</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/05.webp"
                     
                ><br /> 直接跑出了结果，但我们的任务其实还没有完成&#x3D; &#x3D;，tag中搜索lilac popen，发现一共调用了三次  </p>
<blockquote>
<p>lilac popen command:uname -a<br>lilac popen command:cd &#x2F;system&#x2F;bin &amp;&amp; ls -l<br>lilac popen command:stat &#x2F;root  </p>
</blockquote>
<p> 我们上面的代码，似乎只处理了uname -a应该返回的值，后面两次呢？怎么在pipe2中根据 popen输入的command返回合适的输出呢？  <br />我们可以使用emulator的全局变量来完成这一点  <br /><br> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/06.webp"
                     
                ><br> <br /> 对应的qttSyscallHandler代码，其中 cd &#x2F;system&#x2F;bin &amp;&amp; ls -l 和 stat &#x2F;root 的结果来自adb shell，大家 根据自己的测试机情况填入合适的结果。  </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">protected int <span class="title function_">pipe2</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">    <span class="title class_">EditableArm32RegisterContext</span> context = (<span class="title class_">EditableArm32RegisterContext</span>) emulator.<span class="title function_">getContext</span>();</span><br><span class="line">    <span class="title class_">Pointer</span> pipefd = context.<span class="title function_">getPointerArg</span>(<span class="number">0</span>);</span><br><span class="line">    int flags = context.<span class="title function_">getIntArg</span>(<span class="number">1</span>);</span><br><span class="line">    int write = <span class="title function_">getMinFd</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fdMap</span>.<span class="title function_">put</span>(write, <span class="keyword">new</span> <span class="title class_">DumpFileIO</span>(write));</span><br><span class="line">    int read = <span class="title function_">getMinFd</span>();</span><br><span class="line">    <span class="title class_">String</span> stdout = <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    <span class="comment">// stdout中写入popen command 应该返回的结果</span></span><br><span class="line">    <span class="title class_">String</span> command = emulator.<span class="title function_">get</span>(<span class="string">&quot;command&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;uname -a&quot;</span>: &#123;</span><br><span class="line">            stdout = <span class="string">&quot;Linux localhost 3.10.73-g33ace82f84b #1 SMP PREEMPT Fri Oct 13 04:41:33 UTC 2017 aarch64</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;cd /system/bin &amp;&amp; ls -l&quot;</span>: &#123;</span><br><span class="line">            stdout = <span class="string">&quot;total 25152</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 128688 2009-01-01 08:00 abb</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;lrwxr-xr-x 1 root shell 6 2009-01-01 08:00 acpi -&gt; toybox</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 30240 2009-01-01 08:00 adbd</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 207 2009-01-01 08:00 am</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 456104 2009-01-01 08:00 apexd</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;lrwxr-xr-x 1 root shell 13 2009-01-01 08:00 app_process -&gt; app_process64</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 25212 2009-01-01 08:00 app_process32</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;stat /root&quot;</span>: &#123;</span><br><span class="line">            stdout = <span class="string">&quot;stat: &#x27;/root&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;command do not match!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fdMap</span>.<span class="title function_">put</span>(read, <span class="keyword">new</span> <span class="title class_">ByteArrayFileIO</span>(<span class="number">0</span>, <span class="string">&quot;pipe2_read_side&quot;</span>, stdout.<span class="title function_">getBytes</span>()));</span><br><span class="line">    pipefd.<span class="title function_">setInt</span>(<span class="number">0</span>, read);</span><br><span class="line">    pipefd.<span class="title function_">setInt</span>(<span class="number">4</span>, write);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;pipe2 pipefd=&quot;</span> + pipefd + <span class="string">&quot;, flags=0x&quot;</span> + flags + <span class="string">&quot;, read=&quot;</span> + read + <span class="string">&quot;, write=&quot;</span> + write + <span class="string">&quot;, stdout=&quot;</span> + stdout);</span><br><span class="line">    context.<span class="title function_">setR0</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="getenv的处理"><a href="#getenv的处理" class="headerlink" title="getenv的处理"></a>getenv的处理</h3><p> getenv的出现频率也挺高， 首先我们看一下当前测试机有哪些环境变量    </p>
<blockquote>
<p>angler:&#x2F;system&#x2F;bin $ export<br>ANDROID_ASSETS<br>ANDROID_BOOTLOGO<br>ANDROID_DATA<br>ANDROID_ROOT<br>ANDROID_SOCKET_adbd<br>ANDROID_STORAGE<br>ASEC_MOUNTPOINT<br>BOOTCLASSPATH<br>DOWNLOAD_CACHE<br>EXTERNAL_STORAGE<br>HOME<br>HOSTNAME<br>LOGNAME<br>PATH<br>SHELL<br>SYSTEMSERVERCLASSPATH<br>TERM<br>TMPDIR<br>USER</p>
</blockquote>
<p> 看一下PATH的内容  </p>
<blockquote>
<p>angler:&#x2F;system&#x2F;bin $ echo $PATH<br>&#x2F;sbin:&#x2F;system&#x2F;sbin:&#x2F;system&#x2F;bin:&#x2F;system&#x2F;xbin:&#x2F;vendor&#x2F;bin:&#x2F;vendor&#x2F;xbin</p>
</blockquote>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/07.webp"
                     
                ><br /> getValue取不到结果，原因就是getenv没有返回值，那么该怎么办呢？   这里给env返回正确的值有几种办法呢？  </p>
<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p> Unidbg提供了对环境变量的初始化，它在 src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;linux&#x2F;AndroidElfLoader.java中。  <br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/08.webp"
                     
                ><br /> 我们填上这一个就行，为了辨别不同方法是否生效，我们这里返回1  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.environ = initializeTLS(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">        <span class="string">&quot;ANDROID_DATA=/data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ANDROID_ROOT=/system&quot;</span>,</span><br><span class="line">        <span class="comment">//&quot;PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin&quot;,</span></span><br><span class="line">        <span class="string">&quot;NO_ADDR_COMPAT_LAYOUT_FIXUP=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PATH=1&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p> libc 提供了setenv方法，可以设置环境变量。 <br />在调用函数前先调用该方法 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setenv设置环境变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnv</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Symbol</span> <span class="variable">setenv</span> <span class="operator">=</span> <span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;setenv&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    setenv.call(emulator, <span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p> 通过HookZz hook函数，替换结果  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookgetEnvByHookZz</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator);</span><br><span class="line">    hookZz.wrap(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;getenv&quot;</span>), <span class="keyword">new</span> <span class="title class_">WrapCallback</span>&lt;EditableArm32RegisterContext&gt;() &#123;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, EditableArm32RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">            name = ctx.getPointerArg(<span class="number">0</span>).getString(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, EditableArm32RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;PATH&quot;</span>: &#123;</span><br><span class="line">                    <span class="type">MemoryBlock</span> <span class="variable">replaceBlock</span> <span class="operator">=</span> emulator.getMemory().malloc(<span class="number">0x100</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="type">UnidbgPointer</span> <span class="variable">replacePtr</span> <span class="operator">=</span> replaceBlock.getPointer();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathValue</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">                    replacePtr.write(<span class="number">0</span>, pathValue.getBytes(StandardCharsets.UTF_8), <span class="number">0</span>, pathValue.length());</span><br><span class="line">                    ctx.setR0(replacePtr.toIntPeer());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">super</span>.postCall(emulator, ctx, info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><p> 也可以通过断点的方式hook  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookgetEnvByBreakPointer</span><span class="params">()</span> &#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x7FE</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">EditableArm32RegisterContext</span> <span class="variable">registerContext</span> <span class="operator">=</span></span><br><span class="line">                    emulator.getContext();</span><br><span class="line">            registerContext.getPointerArg(<span class="number">0</span>).setString(<span class="number">0</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">            emulator.getBackend().reg_write(ArmConst.UC_ARM_REG_PC,</span><br><span class="line">                    (address) + <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 直接让R0指针指向正确的值，并操纵PC寄存器跳过这条指令  <br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/09.webp"
                     
                ></p>
<h4 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h4><p> 仿照SystemPropertyHook写一下，代码如下  <br />在 vm.loadLibrary 加载so文件之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">EnvHook</span> <span class="variable">envHook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvHook</span>(emulator);</span><br><span class="line">memory.addHookListener(envHook);</span><br></pre></td></tr></table></figure>
<p> EnvHook.java  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.ArmHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.HookStatus;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.context.RegisterContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.HookListener;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.SvcMemory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnvHook</span> <span class="keyword">implements</span> <span class="title class_">HookListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Emulator&lt;?&gt; emulator;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnvHook</span><span class="params">(Emulator&lt;?&gt; emulator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.emulator = emulator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">hook</span><span class="params">(SvcMemory svcMemory, String libraryName, String symbolName,</span></span><br><span class="line"><span class="params">                     <span class="keyword">final</span> <span class="type">long</span> old)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;libc.so&quot;</span>.equals(libraryName) &amp;&amp; <span class="string">&quot;getenv&quot;</span>.equals(symbolName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (emulator.is32Bit()) &#123;</span><br><span class="line">                <span class="keyword">return</span> svcMemory.registerSvc(<span class="keyword">new</span> <span class="title class_">ArmHook</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> HookStatus <span class="title function_">hook</span><span class="params">(Emulator&lt;?&gt; emulator)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> getenv(old);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).peer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> HookStatus <span class="title function_">getenv</span><span class="params">(<span class="type">long</span> old)</span> &#123;</span><br><span class="line">        <span class="type">RegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">        <span class="type">UnidbgPointer</span> <span class="variable">pointer</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> pointer.getString(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;PATH&quot;</span>:&#123;</span><br><span class="line">                pointer.setString(<span class="number">0</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> HookStatus.LR(emulator, pointer.peer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> HookStatus.RET(emulator, old);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Unidbg</tag>
      </tags>
  </entry>
  <entry>
    <title>对称加密算法AES的原理及分析</title>
    <url>/2022/12/27/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95AES%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/000.webp"></p>
<h2 id="AES算法简述"><a href="#AES算法简述" class="headerlink" title="AES算法简述"></a>AES算法简述</h2><p><strong>分组加密有几种方式分别是：</strong><br></p>
<p>ECB：是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。<font color="red">将整个明文分成若干段相同的小段，然后对每一小段进行加密</font><br>00112233445566778899aabbccddee 还差2位hex（1个字节），填充01：00112233445566778899aabbccddee01<br>00112233445566778899aabbccddeeff 等于128比特，需要填充一整个分组：00112233445566778899aabbccddeeff(hex)==&gt; 00112233445566778899aabbccddeeff10101010101010101010101010101010<br>最少填充一字节，最多填充一整个分组，不能不填充。<br></p>
<p>CBC：是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。<font color="red">先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密</font><br></p>
<p>CFB/OFB实际上是一种反馈模式，目的也是增强破解的难度。<font color="red">密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。</font><br></p>
<p>ECB和CBC的加密结果是不一样的，两者的模式不同，而且CBC会在第一个密码块运算时加入一个初始化向量。</p>
<br>
AES-128接收16字节的明文输入，16字节的密钥，输出16字节的密文结果。<br>

<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/01.webp"></p>
<p>入参：<br>明文：128比特（32个十六进制数、16个字节）<br>KEY：128比特（32十六进制数、16个字节）<br>出参：128比特（32个十六进制数、16个字节）</p>
<p>明文：7a68656e677368616f6b756e79796473（hex）<br>密钥：0123456789abcdef0123456789abcdef（hex）</p>
<p>下方是整体流程图：<br><br><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/02.webp"></p>
<p>首先看整体的流程图，我们发现，AES的整体图景可以分成左右两块，即明文的处理和密钥的编排。明文的处理主体是一个初始化轮密钥加和十轮运算，在初始化轮密钥加十轮运算中都需要使用密钥编排的结果。密钥编排将16个字节经过运算推演出11组轮密钥，每一组16个字节，称之为K0,K1,K2…K10<br><br></p>
<h2 id="密钥编排"><a href="#密钥编排" class="headerlink" title="密钥编排"></a>密钥编排</h2><p>下面我们看一下密钥扩展是如何算出来的，这是我们的密钥Key <strong>0123456789abcdef0123456789abcdef</strong>。为了区分密钥和密钥编排后的轮密钥，我们将此时的密钥叫主密钥。</p>
<p>在AES-128中，密钥扩展后得16*11共176字节，使用时<strong>逐十六个字节</strong>划分成K0,K1,…K10使用，但是在生成时，它是<strong>逐四个字节</strong>生成的，即44*4。我们不妨用数组来描述它，即一个包含了44个元素的数组,叫W。</p>
<p>这四十四个元素的生成规则有三种，如下图所示：</p>
<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/03.webp"></p>
<p>不同颜色代表了不同规则。最上方的W0,W1,W2,W3 就是主密钥本身切成四段。<br>Key = 0123456789abcdef0123456789abcdef<br>W0 = 01234567<br>W1 = 89abcdef<br>W2 = 01234567<br>W3 = 89abcdef</p>
<p>左侧的红色部分，W4,W8,W12,….W40的生成复杂一点。<br>Wn=g(Wn−1) xor Wn−4<br>xor 是异或运算，比如 W4=g(W3) xor W0。g(当前元素前面那个元素) 异或 当前元素头顶上那个元素。</p>
<p><strong><font color="red">那么关键点就是这个 g 函数了， g 函数一共三个步骤——循环左移、S盒替换、字节异或。</font></strong> 我们以W4运算中所需的W3为例。<br>W3=89abcdef</p>
<h3 id="g函数——循环左移、S盒替换、字节异或"><a href="#g函数——循环左移、S盒替换、字节异或" class="headerlink" title="g函数——循环左移、S盒替换、字节异或"></a>g函数——循环左移、S盒替换、字节异或</h3><h4 id="循环左移"><a href="#循环左移" class="headerlink" title="循环左移"></a>循环左移</h4><p>首先是循环左移，规则固定—— <strong><font color="red">将最左边的一个字节挪到右边即可</font></strong> <br></p>
<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/04.webp"></p>
<p><br>循环左移后为 <strong>abcdef89</strong></p>
<h4 id="S盒替换"><a href="#S盒替换" class="headerlink" title="S盒替换"></a>S盒替换</h4><p>第二步是S盒替换，S盒替换听着很高级，但操作上很简单——将数值本身作为索引取出S数组中对用的值。S盒是固定的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SBox = [</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">num = <span class="number">0xab</span></span><br><span class="line">result = SBox[num]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(result))</span><br><span class="line"><span class="comment"># 0x62</span></span><br></pre></td></tr></table></figure>

<p>S盒的背后有十分复杂的知识，但好在我们并不需要去了解。<br><br><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/05.webp"></p>
<p><br><strong>AB CD EF 89</strong> 经过S盒替换后为 <strong>62 BD DF A7</strong></p>
<h4 id="最高字节和一个固定常量异或"><a href="#最高字节和一个固定常量异或" class="headerlink" title="最高字节和一个固定常量异或"></a>最高字节和一个固定常量异或</h4><p>最后一个步骤更简单，将上一步结果中的最高字节和一个固定常量异或。W4的生成是第一个，用如下rcon表的第一个元素0x1。W40即第十次，用最后一个元素0x36.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rcon = [<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>]</span><br><span class="line"><span class="comment">#        W4    W8    W12   W16   W20   W24   W28   W32   W36   W40</span></span><br></pre></td></tr></table></figure>
<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/06.webp"></p>
<p><br><strong>62 BD DF A7 <strong>最高位62与rcon第一个元素，即0x01异或后为：</strong>63 BD DF A7</strong> <br>W4 = g(W3) xor W0<br>   = g(0x89abcdef) xor 0x01234567<br>   = 0x63BDDFA7 xor 0x01234567<br>   = 0x629e9ac0<br>最后一步可以直接用python算: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">0x63BDDFA7</span> ^ <span class="number">0x01234567</span>))</span><br></pre></td></tr></table></figure>
<p>上图中蓝色和红色的部分都讲完了，那么橙色部分呢？相当的简单，和红色部分类似，去掉g函数即可<br><em><strong>Wn=Wn−1 xor Wn−4</strong></em><br>打个比方，<em>W5 = W4 ^ W1</em> = 0x629e9ac0 ^ 0x89abcdef = 0xeb35572f<br> <br>如下是完整的密钥编排部分的Python代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sbox = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Rcon = (<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shiftRound</span>(<span class="params">array, num</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param array: 需要循环左移的数组</span></span><br><span class="line"><span class="string">    :param num: 循环左移的位数</span></span><br><span class="line"><span class="string">    :return: 使用Python切片，返回循环左移num个单位的array</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> array[num:] + array[:num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">array, index</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    g 函数</span></span><br><span class="line"><span class="string">    :param array: 待处理的四字节数组</span></span><br><span class="line"><span class="string">    :index:从1-10，每次使用Rcon中不同的数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 首先循环左移1位</span></span><br><span class="line">    array = shiftRound(array, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 字节替换</span></span><br><span class="line">    array = [Sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> array]</span><br><span class="line">    <span class="comment"># 首字节和rcon中对应元素异或</span></span><br><span class="line">    array = [(Rcon[index] ^ array[<span class="number">0</span>])] + array[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorTwoArray</span>(<span class="params">array1, array2</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    返回两个数组逐元素异或的新数组</span></span><br><span class="line"><span class="string">    :param array1: 一个array</span></span><br><span class="line"><span class="string">    :param array2: 另一个array</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(array1) == <span class="built_in">len</span>(array2)</span><br><span class="line">    <span class="keyword">return</span> [array1[i] ^ array2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array1))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showRoundKeys</span>(<span class="params">kList</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(kList)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"K%02d:"</span> %i +<span class="string">""</span>.join(<span class="string">"%02x"</span> % k <span class="keyword">for</span> k <span class="keyword">in</span> kList[i]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keyExpand</span>(<span class="params">key</span>):</span><br><span class="line">    master_key = text2matrix(key)</span><br><span class="line">    round_keys = [[<span class="number">0</span>] * <span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">44</span>)]</span><br><span class="line">    <span class="comment"># 规则一(图中红色部分)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        round_keys[i] = master_key[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">4</span> * <span class="number">11</span>):</span><br><span class="line">        <span class="comment"># 规则二(图中红色部分)</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(g(round_keys[i - <span class="number">1</span>], i // <span class="number">4</span>), round_keys[i - <span class="number">4</span>])</span><br><span class="line">        <span class="comment"># 规则三(图中橙色部分)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(round_keys[i - <span class="number">1</span>], round_keys[i - <span class="number">4</span>])</span><br><span class="line">    <span class="comment"># 将轮密钥从44*4转成11*16,方便后面在明文的运算里使用</span></span><br><span class="line">    kList = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(round_keys)):</span><br><span class="line">        kList[i//<span class="number">4</span>] += round_keys[i]</span><br><span class="line"></span><br><span class="line">    showRoundKeys(kList)</span><br><span class="line">    <span class="keyword">return</span> kList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_bytes = <span class="number">0x00112233445566778899aabbccddeeff</span></span><br><span class="line">key = <span class="number">0x2b7e151628aed2a6abf7158809cf4f3c</span></span><br><span class="line">kList = keyExpand(key)</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">K00:0123456789abcdef0123456789abcdef</span><br><span class="line">K01:629e9ac0eb35572fea16124863bddfa7</span><br><span class="line">K02:1a00c63bf13591141b23835c789e5cfb</span><br><span class="line">K03:154ac987e47f5893ff5cdbcf87c28734</span><br><span class="line">K04:385dd190dc228903237e52cca4bcd5f8</span><br><span class="line">K05:4d5e90d9917c19dab2024b1616be9eee</span><br><span class="line">K06:c355b89e5229a144e02bea52f69574bc</span><br><span class="line">K07:a9c7dddcfbee7c981bc596caed50e276</span><br><span class="line">K08:7a5fe58981b199119a740fdb7724edad</span><br><span class="line">K09:570a707cd6bbe96d4ccfe6b63beb0b1b</span><br><span class="line">K10:8821df9e5e9a36f31255d04529bedb5e</span><br></pre></td></tr></table></figure>
<p>我们对AES密钥编排部分的学习就基本完成了。</p>
<h2 id="明文运算"><a href="#明文运算" class="headerlink" title="明文运算"></a>明文运算</h2><p>现在开始学习明文的运算，即图中左边的部分。首先，我们要调整明文的格式，在AES中，数据以state的形式计算、中间存储和传输，中文名即<strong>状态</strong>。<br>从明文转到state形式很简单，以我们的明文<strong>7a68656e677368616f6b756e79796473</strong>为例。从上到下，从左到右。千万不要颠倒顺序，第一行不是“7a 68 65 6e”。除此之外，<strong>state中的数，我们一般用十六进制表示，且不加0x前缀，这样看着比较舒服。除非特意强调是十进制，否则下文均为十六进制。</strong><br></p>
<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/07.webp"></p>
<p><br>接下来是轮密钥加步骤，因为是第一次轮密钥加步骤，所以也叫初始轮密钥加。轮密钥加步骤听着很怪，但实质很简单。只需要将对应的轮密钥和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>  一样从上到下，从左到右排列。两个矩阵逐字节异或，这就是轮密钥加步骤。为什么要叫轮密钥加而不是轮密钥异或？我们卖个关子，后面再说。<br>初始的轮密钥加使用 K0 ，0123456789abcdef0123456789abcdef。<br></p>
<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/08.webp"></p>
<p><br>接下来就是十轮主运算，看如下的伪代码，我们可以清楚看到一轮运算中有什么，以及第十轮和前九轮有什么区别。<br></p>
<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/09.webp"></p>
<p><br>初始的明文转<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>和最后的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>转明文自不必说，然后是初始轮密钥，使用 K0 。<br>前九轮运算中，包含四个步骤： <strong><font color="red">字节替换，循环左移，列混淆，轮密钥加。</font></strong> <br>第十轮中，包含三个步骤：字节替换，循环左移，轮密钥加。相比前九轮缺一个列混淆，其余相同。<br>十轮运算中的轮密钥加，和初始轮密钥加相比，除了使用的轮密钥不同外，并无不同，分别为K1…..K10。<br>而 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.482ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4191 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1217,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1646,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(2405,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2895,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3256,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3722,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container> <strong>字节替换步骤，和密钥编排中的S盒替换完全一致。</strong><br> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.482ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4191 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1217,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1646,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(2405,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2895,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3256,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3722,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container> 即循环左移，和密钥编排中的循环左移类似，但有差异。密钥编排中， g 函数中也需循环左移，但其中待处理的数据仅有一行，而明文编排中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container> 是四行。<br>其循环左移规则如下：<strong>第一行不循环左移，第二行循环左移1字节，第三行循环左移2字节，第四行循环左移3字节。</strong></p>
<p><img lazyload="" alt="image" data-src="https://github.com/Zskkk/blog-images/raw/master/20221227/10.webp"></p>
<p><br>相对复杂的是列混淆步骤，列混淆步骤涉及两块知识，1是矩阵乘法，2是伽罗瓦域的加法和乘法。前者还好，后者属于抽象代数的内容，比较复杂。<br>先看第一块——矩阵乘法。首先演示简单的矩阵相乘，<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="29.02ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 12827 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g><g data-mml-node="mo" transform="translate(3722.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mrow" transform="translate(4444.4,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g><g data-mml-node="mo" transform="translate(8222.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(9278,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mtd" transform="translate(1574.5,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(48,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mtd" transform="translate(1529,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2799,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g></g></g></svg></mjx-container><br>左边准备相乘的两个矩阵，我们称它俩为矩阵A和矩阵B，如何求结果矩阵中的abcd ？规则如下：第m行第n列的值等于<strong>矩阵</strong>A的第m行的元素与<strong>矩阵</strong>B的第n列对应元素乘积之和。<br>a是第一行第一列，那么就是A的第一行和B的第一列元素<strong>乘积之和</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.058ex" height="1.715ex" role="img" focusable="false" viewBox="0 -676 9307.4 758"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2584.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3307,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><g data-mml-node="mo" transform="translate(4029.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5029.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5751.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(6473.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7251.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8307.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br>同理可得<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="20.831ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 9207.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(706.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1762.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2484.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3207,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(3929.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4929.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5651.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(6373.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(7151.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8207.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="20.84ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 9211.4 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(710.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1766.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2488.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3211,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><g data-mml-node="mo" transform="translate(3933.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4933.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(5655.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(6377.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7155.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8211.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.037ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 9298.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(797.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1853.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2575.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3298,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(4020.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5020.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(5742.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(6464.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(7242.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8298.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br>即<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="31.172ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 13778 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g><g data-mml-node="mo" transform="translate(3722.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mrow" transform="translate(4444.4,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g><g data-mml-node="mo" transform="translate(8222.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(9278,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mtd" transform="translate(2000,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mtd" transform="translate(2000,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mo" transform="translate(3750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g></g></g></svg></mjx-container><br><br> </p>
<p>所谓乘积之和，指乘法和加法。<br>再来看AES列混淆中的矩阵乘法，我们的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container> ，<strong>左边乘如下所示固定矩阵</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex;" xmlns="http://www.w3.org/2000/svg" width="36.553ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 16156.4 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z" transform="translate(0,1951)"></path><path data-c="23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z" transform="translate(0,-1451)"></path><path data-c="23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g><g data-mml-node="mtable" transform="translate(889,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(4500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtd" transform="translate(4500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(4500,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(4500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(5889,0)"><path data-c="23AB" d="M170 875Q170 892 172 895T189 899H194H211L222 893Q345 826 420 715T503 476Q504 467 504 230Q504 51 504 21T499 -9H498Q496 -10 444 -10Q402 -10 394 -9T385 -4Q384 -2 384 240V311V366Q384 469 380 513T358 609Q342 657 319 698T271 767T227 812T189 843T171 856T170 875Z" transform="translate(0,1951)"></path><path data-c="23AD" d="M384 -239V-57Q384 4 389 9Q391 10 455 10Q496 10 498 9Q501 8 502 5Q504 -5 504 -230Q504 -261 504 -311T505 -381Q505 -486 492 -551T435 -691Q357 -820 222 -893L211 -899H195Q176 -899 173 -896T170 -874Q170 -858 171 -855T184 -846Q262 -793 312 -709T378 -525Q378 -524 379 -522Q383 -493 384 -351Q384 -345 384 -334Q384 -276 384 -239Z" transform="translate(0,-1451)"></path><path data-c="23AC" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 925V782Q504 676 511 616T546 490Q563 446 587 408T633 345T674 304T705 278T717 268Q718 267 718 250T717 232Q717 231 697 216T648 169T588 93T534 -24T505 -179Q504 -191 504 -425Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -424Q384 -191 385 -182Q394 -49 463 61T645 241L659 250L645 259Q539 325 467 434T385 682Q384 692 384 873Q384 1153 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g></g><g data-mml-node="mo" transform="translate(7000.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mrow" transform="translate(7722.4,0)"><g data-mml-node="mo"><path data-c="23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z" transform="translate(0,1951)"></path><path data-c="23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z" transform="translate(0,-1451)"></path><path data-c="23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g><g data-mml-node="mtable" transform="translate(889,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd" transform="translate(39,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g><g data-mml-node="mtd" transform="translate(1890,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g><g data-mml-node="mtd" transform="translate(3908.5,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g></g><g data-mml-node="mtd" transform="translate(5605,0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(34.5,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mtd" transform="translate(1897.5,0)"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g><g data-mml-node="mtd" transform="translate(3844,0)"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g></g><g data-mml-node="mtd" transform="translate(5686.5,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(34,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mtd" transform="translate(1879,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g><g data-mml-node="mtd" transform="translate(3716,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="mtd" transform="translate(5749,0)"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(1828,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mtd" transform="translate(3820,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mtd" transform="translate(5755,0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7545,0)"><path data-c="23AB" d="M170 875Q170 892 172 895T189 899H194H211L222 893Q345 826 420 715T503 476Q504 467 504 230Q504 51 504 21T499 -9H498Q496 -10 444 -10Q402 -10 394 -9T385 -4Q384 -2 384 240V311V366Q384 469 380 513T358 609Q342 657 319 698T271 767T227 812T189 843T171 856T170 875Z" transform="translate(0,1951)"></path><path data-c="23AD" d="M384 -239V-57Q384 4 389 9Q391 10 455 10Q496 10 498 9Q501 8 502 5Q504 -5 504 -230Q504 -261 504 -311T505 -381Q505 -486 492 -551T435 -691Q357 -820 222 -893L211 -899H195Q176 -899 173 -896T170 -874Q170 -858 171 -855T184 -846Q262 -793 312 -709T378 -525Q378 -524 379 -522Q383 -493 384 -351Q384 -345 384 -334Q384 -276 384 -239Z" transform="translate(0,-1451)"></path><path data-c="23AC" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 925V782Q504 676 511 616T546 490Q563 446 587 408T633 345T674 304T705 278T717 268Q718 267 718 250T717 232Q717 231 697 216T648 169T588 93T534 -24T505 -179Q504 -191 504 -425Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -424Q384 -191 385 -182Q394 -49 463 61T645 241L659 250L645 259Q539 325 467 434T385 682Q384 692 384 873Q384 1153 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g></g></g></g></svg></mjx-container><br><br><br>看起来有些复杂，小例子中是2*2的矩阵要算4个值，这里是4*4的矩阵要算16个值。我们这里只管第一列，其他列的计算类似。</p>
<p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex;" xmlns="http://www.w3.org/2000/svg" width="36.331ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 16058.3 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z" transform="translate(0,1951)"></path><path data-c="23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z" transform="translate(0,-1451)"></path><path data-c="23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g><g data-mml-node="mtable" transform="translate(889,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1472.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2472.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(2972.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3953.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4953.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5936.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6936.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(8764.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(10936.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(13108.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1972.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2472.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3453.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4453.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(4953.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5936.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6936.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(8764.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(10936.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(13108.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(0,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1972.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(2953.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3953.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(4453.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5436.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6436.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(6936.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(8764.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(10936.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(13108.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1472.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2472.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3453.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4453.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5436.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6436.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(6936.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(8764.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(10936.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(13108.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(15169.3,0)"><path data-c="23AB" d="M170 875Q170 892 172 895T189 899H194H211L222 893Q345 826 420 715T503 476Q504 467 504 230Q504 51 504 21T499 -9H498Q496 -10 444 -10Q402 -10 394 -9T385 -4Q384 -2 384 240V311V366Q384 469 380 513T358 609Q342 657 319 698T271 767T227 812T189 843T171 856T170 875Z" transform="translate(0,1951)"></path><path data-c="23AD" d="M384 -239V-57Q384 4 389 9Q391 10 455 10Q496 10 498 9Q501 8 502 5Q504 -5 504 -230Q504 -261 504 -311T505 -381Q505 -486 492 -551T435 -691Q357 -820 222 -893L211 -899H195Q176 -899 173 -896T170 -874Q170 -858 171 -855T184 -846Q262 -793 312 -709T378 -525Q378 -524 379 -522Q383 -493 384 -351Q384 -345 384 -334Q384 -276 384 -239Z" transform="translate(0,-1451)"></path><path data-c="23AC" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 925V782Q504 676 511 616T546 490Q563 446 587 408T633 345T674 304T705 278T717 268Q718 267 718 250T717 232Q717 231 697 216T648 169T588 93T534 -24T505 -179Q504 -191 504 -425Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -424Q384 -191 385 -182Q394 -49 463 61T645 241L659 250L645 259Q539 325 467 434T385 682Q384 692 384 873Q384 1153 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g></g></g></g></svg></mjx-container></p>
<br>
列混淆中的的加法和乘法并不是小例子或日常中的那样，其中的加法指 <font color="red">异或运算</font> 。2A + 3B + C + D 即 2A ^ 3B ^ C ^ D，这也是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="15.928ex" height="2.084ex" role="img" focusable="false" viewBox="0 -716 7040 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1270,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1790,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(2549,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3034,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3606,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4206,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4726,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(5615,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(6081,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6571,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container> 叫轮密钥加而不是轮密钥异或的原因——加法就是异或。那么其中的乘法呢？乘法复杂一些，想真正理解的可以网上冲浪搜索<font color="red">伽罗瓦域内乘法</font>。我们这里仅考虑如下三种情况，因为AES-128加密中，列混淆的乘法中，仅涉及这三个数。
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.019ex" height="1.781ex" role="img" focusable="false" viewBox="0 -705 3544.2 787"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1516.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2294.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3072.2,0)"><path data-c="3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z"></path></g></g></g></svg></mjx-container>
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.019ex" height="1.781ex" role="img" focusable="false" viewBox="0 -705 3544.2 787"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1516.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2294.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3072.2,0)"><path data-c="3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z"></path></g></g></g></svg></mjx-container>
<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.019ex" height="1.781ex" role="img" focusable="false" viewBox="0 -705 3544.2 787"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1516.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2294.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3072.2,0)"><path data-c="3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z"></path></g></g></g></svg></mjx-container>
结合Python代码可以更清晰，函数名中 mul 是multiply（乘）的缩写。<br>

<br>

<p><strong>x * 1，结果为x本身</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_01</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure>
<p><strong>x * 2，首先切换到二进制形式，最高位为0时，比特串左移1比特，最右边补0即可。如果最高位为1，比特串左移1比特，最右边补0，最后再异或上 0x1B</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_02</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0x80</span>:</span><br><span class="line">        res = (num &lt;&lt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    res = (num &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res % <span class="number">0x100</span></span><br></pre></td></tr></table></figure>
<p><strong>x * 3 = (x * 02) + x，注意”加“是异或哦</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_03</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> (mul_by_02(num) ^ num)</span><br></pre></td></tr></table></figure>
<p>列混淆，就这么讲完了。下面看完整的AES代码实现<br> </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Sbox = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Rcon = (<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shiftRound</span>(<span class="params">array, num</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param array: 需要循环左移的数组</span></span><br><span class="line"><span class="string">    :param num: 循环左移的位数</span></span><br><span class="line"><span class="string">    :return: 使用Python切片，返回循环左移num个单位的array</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> array[num:] + array[:num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">array, index</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    g 函数</span></span><br><span class="line"><span class="string">    :param array: 待处理的四字节数组</span></span><br><span class="line"><span class="string">    :index:从1-10，每次使用Rcon中不同的数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 首先循环左移1位</span></span><br><span class="line">    array = shiftRound(array, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 字节替换</span></span><br><span class="line">    array = [Sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> array]</span><br><span class="line">    <span class="comment"># 首字节和rcon中对应元素异或</span></span><br><span class="line">    array = [(Rcon[index] ^ array[<span class="number">0</span>])] + array[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorTwoArray</span>(<span class="params">array1, array2</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    返回两个数组逐元素异或的新数组</span></span><br><span class="line"><span class="string">    :param array1: 一个array</span></span><br><span class="line"><span class="string">    :param array2: 另一个array</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(array1) == <span class="built_in">len</span>(array2)</span><br><span class="line">    <span class="keyword">return</span> [array1[i] ^ array2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array1))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showRoundKeys</span>(<span class="params">round_keys</span>):</span><br><span class="line">    <span class="comment"># 将轮密钥从44*4转成11*16</span></span><br><span class="line">    kList = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(round_keys)):</span><br><span class="line">        kList[i // <span class="number">4</span>] += round_keys[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(kList)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"K%02d:"</span> % i + <span class="string">""</span>.join(<span class="string">"%02x"</span> % k <span class="keyword">for</span> k <span class="keyword">in</span> kList[i]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keyExpand</span>(<span class="params">key</span>):</span><br><span class="line">    master_key = text2matrix(key)</span><br><span class="line">    round_keys = [[<span class="number">0</span>] * <span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">44</span>)]</span><br><span class="line">    <span class="comment"># 规则一(图中红色部分)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        round_keys[i] = master_key[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">4</span> * <span class="number">11</span>):</span><br><span class="line">        <span class="comment"># 规则二(图中红色部分)</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(g(round_keys[i - <span class="number">1</span>], i // <span class="number">4</span>), round_keys[i - <span class="number">4</span>])</span><br><span class="line">        <span class="comment"># 规则三(图中橙色部分)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(round_keys[i - <span class="number">1</span>], round_keys[i - <span class="number">4</span>])</span><br><span class="line">    showRoundKeys(round_keys)</span><br><span class="line">    <span class="keyword">return</span> round_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AddRoundKeys</span>(<span class="params">state, roundKey</span>):</span><br><span class="line">    result = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        result[i] = xorTwoArray(state[i], roundKey[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SubBytes</span>(<span class="params">state</span>):</span><br><span class="line">    result = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        result[i] = [Sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> state[i]]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ShiftRows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_02</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0x80</span>:</span><br><span class="line">        res = (num &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = (num &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span></span><br><span class="line">    <span class="keyword">return</span> res % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_03</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> mul_by_02(num) ^ num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MixColumns</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        s0 = mul_by_02(state[i][<span class="number">0</span>]) ^ mul_by_03(state[i][<span class="number">1</span>]) ^ state[i][<span class="number">2</span>] ^ state[i][<span class="number">3</span>]</span><br><span class="line">        s1 = state[i][<span class="number">0</span>] ^ mul_by_02(state[i][<span class="number">1</span>]) ^ mul_by_03(state[i][<span class="number">2</span>]) ^ state[i][<span class="number">3</span>]</span><br><span class="line">        s2 = state[i][<span class="number">0</span>] ^ state[i][<span class="number">1</span>] ^ mul_by_02(state[i][<span class="number">2</span>]) ^ mul_by_03(state[i][<span class="number">3</span>])</span><br><span class="line">        s3 = mul_by_03(state[i][<span class="number">0</span>]) ^ state[i][<span class="number">1</span>] ^ state[i][<span class="number">2</span>] ^ mul_by_02(state[i][<span class="number">3</span>])</span><br><span class="line">        state[i][<span class="number">0</span>] = s0</span><br><span class="line">        state[i][<span class="number">1</span>] = s1</span><br><span class="line">        state[i][<span class="number">2</span>] = s2</span><br><span class="line">        state[i][<span class="number">3</span>] = s3</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">state2Text</span>(<span class="params">state</span>):</span><br><span class="line">    text = <span class="built_in">sum</span>(state, [])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(<span class="string">"%02x"</span> % k <span class="keyword">for</span> k <span class="keyword">in</span> text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">input_bytes, kList</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param input_bytes: 输入的明文</span></span><br><span class="line"><span class="string">    :param kList: K0-K10</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    plainState = text2matrix(input_bytes)</span><br><span class="line">    <span class="comment"># 初始轮密钥加</span></span><br><span class="line">    state = AddRoundKeys(plainState, kList[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        state = SubBytes(state)</span><br><span class="line">        state = ShiftRows(state)</span><br><span class="line">        state = MixColumns(state)</span><br><span class="line">        state = AddRoundKeys(state, kList[<span class="number">4</span> * i:<span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">    state = SubBytes(state)</span><br><span class="line">    state = ShiftRows(state)</span><br><span class="line">    state = AddRoundKeys(state, kList[<span class="number">40</span>:<span class="number">44</span>])</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_bytes = <span class="number">0x7a68656e677368616f6b756e79796473</span></span><br><span class="line">key = <span class="number">0x0123456789abcdef0123456789abcdef</span></span><br><span class="line">kList = keyExpand(key)</span><br><span class="line">cipherState = encrypt(input_bytes, kList)</span><br><span class="line">cipher = state2Text(cipherState)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><br> <br> </p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>对称加密算法DES的原理及分析</title>
    <url>/2022/07/07/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95DES%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/01.webp"
                     
                ></p>
<h3 id="手算DES"><a href="#手算DES" class="headerlink" title="手算DES"></a>手算DES</h3><p>入参：<br />明文：64比特（16个十六进制数、8个字节）<br />KEY：64比特（16个十六进制数、8个字节）<br />出参：64比特（16个十六进制数、8个字节）</p>
<p>明文：0123456789ABCDEF（hex）<br />密钥：133457799BBCDFF1（hex）<br />结果：85e813540f0ab405fdf2e174492922f8<br />因为模式的原因，会进行填充，这里先把结果当成 85e813540f0ab405（hex）</p>
<h4 id="1-对明文初始置换（重排）"><a href="#1-对明文初始置换（重排）" class="headerlink" title="1.对明文初始置换（重排）"></a>1.对明文初始置换（重排）</h4><p>PI置换表（IP表）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI = [<span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>, <span class="number">10</span>, <span class="number">2</span>,</span><br><span class="line">      <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">      <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>, <span class="number">14</span>, <span class="number">6</span>,</span><br><span class="line">      <span class="number">64</span>, <span class="number">56</span>, <span class="number">48</span>, <span class="number">40</span>, <span class="number">32</span>, <span class="number">24</span>, <span class="number">16</span>, <span class="number">8</span>,</span><br><span class="line">      <span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>, <span class="number">1</span>,</span><br><span class="line">      <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>, <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>,</span><br><span class="line">      <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>,</span><br><span class="line">      <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>
<p>根据置换表的索引对明文进行重新排列（例如明文第58的位置放到第一位）<br />明文 0123456789ABCDEF（hex）<br />转为二进制 00000001 00100011 01000101 01100111 10001001 10101011 11001101 11101111<br />重新排列后 11001100 00000000 11001100 11111111 11110000 10101010 11110000 10101010<br />排列顺序如图所示：<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/02.webp"
                     
                ></p>
<h4 id="2-对密钥进行编排"><a href="#2-对密钥进行编排" class="headerlink" title="2.对密钥进行编排"></a>2.对密钥进行编排</h4><p><strong>PC1（CP_1）（置换选择一表）</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CP_1 = [<span class="number">57</span>, <span class="number">49</span>, <span class="number">41</span>, <span class="number">33</span>, <span class="number">25</span>, <span class="number">17</span>, <span class="number">9</span>,</span><br><span class="line">        <span class="number">1</span>, <span class="number">58</span>, <span class="number">50</span>, <span class="number">42</span>, <span class="number">34</span>, <span class="number">26</span>, <span class="number">18</span>,</span><br><span class="line">        <span class="number">10</span>, <span class="number">2</span>, <span class="number">59</span>, <span class="number">51</span>, <span class="number">43</span>, <span class="number">35</span>, <span class="number">27</span>,</span><br><span class="line">        <span class="number">19</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">60</span>, <span class="number">52</span>, <span class="number">44</span>, <span class="number">36</span>,</span><br><span class="line">        <span class="number">63</span>, <span class="number">55</span>, <span class="number">47</span>, <span class="number">39</span>, <span class="number">31</span>, <span class="number">23</span>, <span class="number">15</span>,</span><br><span class="line">        <span class="number">7</span>, <span class="number">62</span>, <span class="number">54</span>, <span class="number">46</span>, <span class="number">38</span>, <span class="number">30</span>, <span class="number">22</span>,</span><br><span class="line">        <span class="number">14</span>, <span class="number">6</span>, <span class="number">61</span>, <span class="number">53</span>, <span class="number">45</span>, <span class="number">37</span>, <span class="number">29</span>,</span><br><span class="line">        <span class="number">21</span>, <span class="number">13</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">20</span>, <span class="number">12</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>密钥：133457799BBCDFF1（hex）<br />转为二进制：00010011 00110100 01010111 01111001 10011011 10111100 11011111 11110001<br />重新排列后：1111000 0110011 0010101 0101111 0101010 1011001 1001111 0001111<br />对DES来说，密钥64位，只有56位被使用，每8个比特的最后一位被舍弃掉<br />对重新编排后的拆分成左右两部分<br />L0：1111000 0110011 0010101 0101111<br />R0：0101010 1011001 1001111 0001111</p>
<h4 id="3-对编排后的密钥进行16轮循环左移生成16个子密钥"><a href="#3-对编排后的密钥进行16轮循环左移生成16个子密钥" class="headerlink" title="3.对编排后的密钥进行16轮循环左移生成16个子密钥"></a>3.对编排后的密钥进行16轮循环左移生成16个子密钥</h4><p>对L0和R0进行16轮循环左移，每轮根据上一轮左移n位+本次左移的位数（或者是本次左移索引+前面左移索引位数），左移后加在一起LnRn，然后根据PC2（CP_2）表重新编排为K，只有48位，生成16个子密钥（注：索引是从1开始）。<br /><br><font color="red">生成的16个子密钥subkeys会对应明文处理16轮每轮的key</font></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">SHIFT = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CP_2 = [<span class="number">14</span>, <span class="number">17</span>, <span class="number">11</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">28</span>,</span><br><span class="line">        <span class="number">15</span>, <span class="number">6</span>, <span class="number">21</span>, <span class="number">10</span>, <span class="number">23</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">4</span>,</span><br><span class="line">        <span class="number">26</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">27</span>, <span class="number">20</span>, <span class="number">13</span>, <span class="number">2</span>,</span><br><span class="line">        <span class="number">41</span>, <span class="number">52</span>, <span class="number">31</span>, <span class="number">37</span>, <span class="number">47</span>, <span class="number">55</span>, <span class="number">30</span>, <span class="number">40</span>,</span><br><span class="line">        <span class="number">51</span>, <span class="number">45</span>, <span class="number">33</span>, <span class="number">48</span>, <span class="number">44</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">56</span>,</span><br><span class="line">        <span class="number">34</span>, <span class="number">53</span>, <span class="number">46</span>, <span class="number">42</span>, <span class="number">50</span>, <span class="number">36</span>, <span class="number">29</span>, <span class="number">32</span>]</span><br></pre></td></tr></table></figure>
<p>L1：1110000 1100110 0101010 1011111<br />R1：1010101 0110011 0011110 0011110<br />L1R1：1110000 1100110 0101010 1011111 1010101 0110011 0011110 0011110<br />编排后K1：00011011 00000010 11101111 11111100 01110000 01110010</p>
<p>第二次左移2位（对L0和R0左移2位，或者对L1和R1左移1位）<br />L2：1100001 1001100 1010101 0111111<br />R2：0101010 1100110 0111100 0111101<br />L2R2：1100001 1001100 1010101 0111111 0101010 1100110 0111100 0111101<br />编排后K2：01111001 10101110 11011001 11011011 11001001 11100101</p>
<p>第三次左移4位（对L0和R0左移4位，或者对L2和R2左移2位）<br />L3：0000110 0110010 1010101 1111111<br />R3：0101011 0011001 1110001 1110101<br />L3R3：0000110 0110010 1010101 1111111 0101011 0011001 1110001 1110101<br />编排后K3：010101 011111 110010 001010 010000 101100 111110 011001<br />…</p>
<p>K1 &#x3D; 000110 110000 001011 101111 111111 000111 000001 110010<br />K2 &#x3D; 011110 011010 111011 011001 110110 111100 100111 100101<br />K3 &#x3D; 010101 011111 110010 001010 010000 101100 111110 011001<br />K4 &#x3D; 011100 101010 110111 010110 110110 110011 010100 011101<br />K5 &#x3D; 011111 001110 110000 000111 111010 110101 001110 101000<br />K6 &#x3D; 011000 111010 010100 111110 010100 000111 101100 101111<br />K7 &#x3D; 111011 001000 010010 110111 111101 100001 100010 111100<br />K8 &#x3D; 111101 111000 101000 111010 110000 010011 101111 111011<br />K9 &#x3D; 111000 001101 101111 101011 111011 011110 011110 000001<br />K10 &#x3D; 101100 011111 001101 000111 101110 100100 011001 001111<br />K11 &#x3D; 001000 010101 111111 010011 110111 101101 001110 000110<br />K12 &#x3D; 011101 010111 000111 110101 100101 000110 011111 101001<br />K13 &#x3D; 100101 111100 010111 010001 111110 101011 101001 000001<br />K14 &#x3D; 010111 110100 001110 110111 111100 101110 011100 111010<br />K15 &#x3D; 101111 111001 000110 001101 001111 010011 111100 001010<br />K16 &#x3D; 110010 110011 110110 001011 000011 100001 011111 110101</p>
<h4 id="4-对明文进行16轮运算加密"><a href="#4-对明文进行16轮运算加密" class="headerlink" title="4.对明文进行16轮运算加密"></a>4.对明文进行16轮运算加密</h4><p>明文重新编排后的 11001100 00000000 11001100 11111111 11110000 10101010 11110000 10101010<br />拆分成左右两部分<br />L0：11001100 00000000 11001100 11111111<br />R0：11110000 10101010 11110000 10101010<br />每一轮运算只对R进行改变<br />加密：<br />Li+1&#x3D;Ri<br />Ri+1&#x3D;Li⊕F(Ri,Ki)<br /><br />解密：<br>Ri&#x3D;Li+1<br>Li&#x3D;Ri+1⊕F(Li+1,Ki)<br /></p>
<font color="red">
f函数：
1. f函数首先将输入经过E表扩展置换，将32位的输入扩展为48位。</br>
2. 将48位结果与第i轮第密钥ki进行XOR(异或)操作</br>
3. 将异或操作第结果送入S盒进行压缩，压缩成32位</br>
4. 将32位的结果送入P盒置换</font>
</br>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/03.webp"
                     
                ></p>
</br>

<p>Expand表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">E = [<span class="number">32</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,</span><br><span class="line">     <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>,</span><br><span class="line">     <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>,</span><br><span class="line">     <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>,</span><br><span class="line">     <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>,</span><br><span class="line">     <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>,</span><br><span class="line">     <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>,</span><br><span class="line">     <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>S盒（S_BOX，8组）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S_BOX = [    </span><br><span class="line">[[<span class="number">14</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">8</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">7</span>],</span><br><span class="line"> [<span class="number">0</span>, <span class="number">15</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line"> [<span class="number">4</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">0</span>],</span><br><span class="line"> [<span class="number">15</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">13</span>],</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">[[<span class="number">15</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line"> [<span class="number">3</span>, <span class="number">13</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">5</span>],</span><br><span class="line"> [<span class="number">0</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">15</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">[[<span class="number">10</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">8</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">14</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">1</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">7</span>],</span><br><span class="line"> [<span class="number">1</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">12</span>],</span><br><span class="line">],</span><br><span class="line"></span><br><span class="line">[[<span class="number">7</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">15</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">8</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line"> [<span class="number">10</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>],</span><br><span class="line"> [<span class="number">3</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">14</span>],</span><br><span class="line">],  </span><br><span class="line"></span><br><span class="line">[[<span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>],</span><br><span class="line"> [<span class="number">14</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">6</span>],</span><br><span class="line"> [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">0</span>, <span class="number">14</span>],</span><br><span class="line"> [<span class="number">11</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">3</span>],</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">[[<span class="number">12</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">11</span>],</span><br><span class="line"> [<span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">8</span>],</span><br><span class="line"> [<span class="number">9</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">1</span>, <span class="number">13</span>, <span class="number">11</span>, <span class="number">6</span>],</span><br><span class="line"> [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>],</span><br><span class="line">], </span><br><span class="line"></span><br><span class="line">[[<span class="number">4</span>, <span class="number">11</span>, <span class="number">2</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">1</span>],</span><br><span class="line"> [<span class="number">13</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">14</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">15</span>, <span class="number">8</span>, <span class="number">6</span>],</span><br><span class="line"> [<span class="number">1</span>, <span class="number">4</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">14</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>],</span><br><span class="line"> [<span class="number">6</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>],</span><br><span class="line">],</span><br><span class="line">   </span><br><span class="line">[[<span class="number">13</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">15</span>, <span class="number">11</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">12</span>, <span class="number">7</span>],</span><br><span class="line"> [<span class="number">1</span>, <span class="number">15</span>, <span class="number">13</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">14</span>, <span class="number">9</span>, <span class="number">2</span>],</span><br><span class="line"> [<span class="number">7</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line"> [<span class="number">2</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">15</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">11</span>],</span><br><span class="line">]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>P盒</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">P = [<span class="number">16</span>, <span class="number">7</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">29</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>,</span><br><span class="line">     <span class="number">1</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">26</span>, <span class="number">5</span>, <span class="number">18</span>, <span class="number">31</span>, <span class="number">10</span>,</span><br><span class="line">     <span class="number">2</span>, <span class="number">8</span>, <span class="number">24</span>, <span class="number">14</span>, <span class="number">32</span>, <span class="number">27</span>, <span class="number">3</span>, <span class="number">9</span>,</span><br><span class="line">     <span class="number">19</span>, <span class="number">13</span>, <span class="number">30</span>, <span class="number">6</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">4</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure>

<p>第一轮为例：<br />R1&#x3D; L0⊕f(R0，K1)<br />F函数	P(S(E(Ri)⊕Ki))：<br />R0：11110000 10101010 11110000 10101010<br />经过E表编排：01111010 00010101 01010101 01111010 00010101 01010101<br />与K1异或后：011000 010001 011110 111010 100001 100110 010100 100111<br /><br><font color="red">把异或后的拆分8组，进行8轮S盒运算</font><br><br />B1 &#x3D; 011000 <br />B2 &#x3D; 010001 <br />B3 &#x3D; 011110 <br />B4 &#x3D; 111010 <br />B5 &#x3D; 100001 <br />B6 &#x3D; 100110 <br />B7 &#x3D; 010100 <br />B8 &#x3D; 100111<br /><br><font color="red">将每一组前后1个比特拼接为row转十进制，中间4个比特为column转十进制，然后去S盒映射第i个row行column列</font><br><br />B1	0 1100 0 <br />row：00 &#x3D;&#x3D;&gt; 0  （十进制）<br />column：1100 &#x3D;&#x3D;&gt; 12  （十进制）<br />(0, 12) &#x3D;&#x3D;&gt; S[0][0][12]&#x3D;&#x3D;&gt;5<br />B1 &#x3D; 5 &#x3D;&#x3D;&gt; 0101 （二进制）</p>
<p>B2 	0 1000 1<br />row：01 &#x3D;&#x3D;&gt; 1  （十进制）<br />column：1000 &#x3D;&#x3D;&gt; 8  （十进制）<br />(1, 8) &#x3D;&#x3D;&gt; S[1][1][8]&#x3D;&#x3D;&gt;12<br />B1 &#x3D;12&#x3D;&#x3D;&gt; 1100（二进制）</p>
<p>B3 	0 1111 0 <br />row：00 &#x3D;&#x3D;&gt; 0  （十进制）<br />column：1111&#x3D;&#x3D;&gt; 15  （十进制）<br />(0, 15) &#x3D;&#x3D;&gt; S[2][0][15]&#x3D;&#x3D;&gt;8<br />B1 &#x3D;8&#x3D;&#x3D;&gt; 1000（二进制）<br />…<br />6<em>8&#x3D;48bit 经过8轮 4</em>8&#x3D;32bit<br />把B1-B8拼接起来：<br />01011100 10000010 10110101 10010111</p>
<p>经过P盒置换后：00100011 01001010 10101001 10111011<br />F函数结束，结果异或L0<br />R1：11101111 01001010 01100101 01000100<br />L1：R0<br />…<br />16轮后<br />R16：00001010 01001100 11011001 10010101<br />L16：01000011 01000010 00110010 00110100<br />R16L16拼接（R在前），再经过末置换表（PI_1）（64位）：<br />R16L16：00001010 01001100 11011001 10010101 01000011 01000010 00110010 00110100<br />置换后：10000101 11101000 00010011 01010100 00001111 00001010 10110100 00000101<br />转为hex就是结果了：85e813540f0ab405<br /></p>
<p><strong>PI_1表</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">PI_1 = [<span class="number">40</span>, <span class="number">8</span>, <span class="number">48</span>, <span class="number">16</span>, <span class="number">56</span>, <span class="number">24</span>, <span class="number">64</span>, <span class="number">32</span>,</span><br><span class="line">        <span class="number">39</span>, <span class="number">7</span>, <span class="number">47</span>, <span class="number">15</span>, <span class="number">55</span>, <span class="number">23</span>, <span class="number">63</span>, <span class="number">31</span>,</span><br><span class="line">        <span class="number">38</span>, <span class="number">6</span>, <span class="number">46</span>, <span class="number">14</span>, <span class="number">54</span>, <span class="number">22</span>, <span class="number">62</span>, <span class="number">30</span>,</span><br><span class="line">        <span class="number">37</span>, <span class="number">5</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">53</span>, <span class="number">21</span>, <span class="number">61</span>, <span class="number">29</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">4</span>, <span class="number">44</span>, <span class="number">12</span>, <span class="number">52</span>, <span class="number">20</span>, <span class="number">60</span>, <span class="number">28</span>,</span><br><span class="line">        <span class="number">35</span>, <span class="number">3</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">51</span>, <span class="number">19</span>, <span class="number">59</span>, <span class="number">27</span>,</span><br><span class="line">        <span class="number">34</span>, <span class="number">2</span>, <span class="number">42</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">18</span>, <span class="number">58</span>, <span class="number">26</span>,</span><br><span class="line">        <span class="number">33</span>, <span class="number">1</span>, <span class="number">41</span>, <span class="number">9</span>, <span class="number">49</span>, <span class="number">17</span>, <span class="number">57</span>, <span class="number">25</span>]</span><br></pre></td></tr></table></figure>

<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/04.webp"
                     
                ></p>
<h3 id="分组密码的填充"><a href="#分组密码的填充" class="headerlink" title="分组密码的填充"></a>分组密码的填充</h3><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/05.webp"
                     
                ><br><br /><br><font color="red">Passing只用于CBC和ECB模式，默认采用PKCS#7进行填充</font><br><br />DES 64比特明文，64比特密钥，结果64比特输出<br />那为什么明文刚好是64比特，如果输入是56比特？20比特？或者什么都不输入呢？<br />明文会切割成每64比特为一组进行des加密，最后一组小于或等于64都会进行填充<br />如果传入的是utf，需先转hex<br /></p>
<p>小于64比特：<br /><br>123456789（hex）&#x3D;&#x3D;&gt; 1234567809（hex）<br /><br>还差6位hex（3个字节），填充030303：1234567809030303</p>
<p>123456789abcd（hex）&#x3D;&#x3D;&gt;123456789abc0d（hex）<br />还差2位hex（1个字节），填充01：123456789abc0d01</p>
<br />

<p>等于64比特，需要填充一整个分组0808080808080808：<br />0123456789abcdef（hex）&#x3D;&#x3D;&gt; 0123456789abcdef0808080808080808</p>
<p>最少填充一字节，最多填充一整个分组，不能不填充。<br /></p>
<h3 id="分组密码的工作模式"><a href="#分组密码的工作模式" class="headerlink" title="分组密码的工作模式"></a>分组密码的工作模式</h3><h4 id="ECB"><a href="#ECB" class="headerlink" title="ECB"></a>ECB</h4><p>相同的分组输入，计算后的结果是完全一致的，每个分组单独处理，叫ECB工作模式<br />这种模式有很多好处，我们可以直接for 循环，将很长的输入分成对应个数的分组，每个分组得到结果后拼接在一起就行，而且这也意味着可以并行计算。 <br />如果ECB模式是可行的、安全的，那么我们一定选择它，因为最简单和高效。那也就不会出现别的工作模式了，可惜的是它并不安全。<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/06.webp"
                     
                ></p>
<h4 id="CBC"><a href="#CBC" class="headerlink" title="CBC"></a>CBC</h4><p>最常用的模式<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/07.webp"
                     
                ><br />其实想法也很朴素，每个明文分组在加密前多一个步骤，和上一个分组的密文块进行异或运算。因为第一个明文块没有所谓的“上一个分组的密文块“，所以需要人给一个64比特，或者说8字节的输入，我们叫它初始化向量，IV。<br />在cyberchef中验证一下</p>
<blockquote>
<p>明文：123456789ABCDEF0（hex）<br /><br>密钥：133457799BBCDFF1（hex）<br /><br>使用CBC模式<br /><br>IV：0123456789ABCDEF<br /><br>计算结果：0ecb68bac16aece07cbadcfa7a974bcc（hex）</p>
</blockquote>
<p>按照我们上面的说法<br /><br><font color="red">0ecb68bac16aece0</font>的明文应该就是<font color="red">123456789ABCDEF0</font>和<font color="red">0123456789ABCDEF</font>异或的结果<br /><br>得到结果<font color="red">1317131f1317131f</font><br /><br>使用cyberchef计算<font color="red">123456789ABCDEF0 ^ 0123456789ABCDEF</font> 得到结果<font color="red">1317131f1317131f</font>，单独计算其DES加密结果，注意这儿要用ECB模式: <font color="red">0ecb68bac16aece0 fdf2e174492922f8</font>，因为<font color="red">1317131f1317131f</font>是一个分组的长度，所以要填充0808080808080808， <font color="red">fdf2e174492922f8</font>是08的结果，所以不用管。可以发现，第一块加密结果<font color="red">0ecb68bac16aece0</font>正是我们所预期的。<br /></p>
<p>接下来看一下第二块，第二块即0808080808080808，按照CBC的规则计算 <font color="red">0ecb68bac16aece0 ^ 0808080808080808 &#x3D; 06c360b2c962e4e8</font>，单独计算ECB下的<font color="red">06c360b2c962e4e8</font> 结果为<font color="red">7cbadcfa7a974bcc fdf2e174492922f8</font>，第二块结果<font color="red">7cbadcfa7a974bcc</font>也完全正确。</p>
<h4 id="CFB"><a href="#CFB" class="headerlink" title="CFB"></a>CFB</h4><blockquote>
<p>明文：123456789ABCDEF0<br /><br>密钥：133457799BBCDFF1<br /><br>IV：0123456789ABCDEF<br /><br>模式：CFB<br /><br>结果: 97dc452c95b66af5<br /><br>IV即0123456789ABCDEF的des加密结果85e813540f0ab405<br /><br>85e813540f0ab405 与 123456789ABCDEF0 的异或结果是97dc452c95b66af5</p>
</blockquote>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/08.webp"
                     
                ></p>
<h4 id="OFB"><a href="#OFB" class="headerlink" title="OFB"></a>OFB</h4><blockquote>
<p>明文：123456789ABCDEF0<br /><br>密钥：133457799BBCDFF1<br /><br>IV：0123456789ABCDEF<br /><br>模式：OFB<br /><br>结果: 97dc452c95b66af5<br /><br>即一个分组的OFB与CFB是一样一样的<br /></p>
</blockquote>
<p>两个分组的计算：</p>
<blockquote>
<p>明文：123456789ABCDEF0 123456789ABCDEF0<br /><br>密钥：133457799BBCDFF1<br /><br>IV：0123456789ABCDEF<br /><br>模式：OFB<br /><br>结果：97dc452c95b66af5 759a2c51fb637db5</p>
</blockquote>
<p>直接观察第二个分组759a2c51fb637db5是如何计算出来呢?<br />它是明文和加密两次的IV的异或结果<br />明文：123456789ABCDEF0 加密第一次：85e813540f0ab405 加密第二次 67ae7a2961dfa345f，最后异或 67ae7a2961dfa345f ^ 123456789ABCDEF0 &#x3D; 759a2c51fb637db5<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220707/09.webp"
                     
                ></p>
<h4 id="CTR"><a href="#CTR" class="headerlink" title="CTR"></a>CTR</h4>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包进阶之通杀okhttp证书</title>
    <url>/2021/09/05/%E6%8A%93%E5%8C%85%E8%BF%9B%E9%98%B6%E4%B9%8B%E9%80%9A%E6%9D%80okhttp%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<h1 id="三层检验"><a href="#三层检验" class="headerlink" title="三层检验"></a>三层检验</h1><p>okhttp在客户端有三种检验证书方法<br>证书验证sslSocketFactory<br>证书锁定certificatePinner<br>域名验证hostmaneVerfier</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210905/01.webp"
                     
                ></p>
<p>如何做到通杀？<br>三个检验方法都基于 OkHttpClient.Builder()<br>要先找到 OkHttpClient，由于经过混淆的，无法直接定位</p>
<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="先把内存中的类的存到数组"><a href="#先把内存中的类的存到数组" class="headerlink" title="先把内存中的类的存到数组"></a>先把内存中的类的存到数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> classesNames = <span class="keyword">new</span> <span class="title class_">Array</span>()   <span class="comment">// 存放加载的类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.把已经加载内存中的类枚举出来，存到一个数组里</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadClasses</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">clsName, handle</span>)&#123;</span><br><span class="line">                classesNames.<span class="title function_">push</span>(clsName);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Search Class Completed!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">loadClasses</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>

<h2 id="查找-okhttp3-OkHttpClient类和证书CertificatePinner类"><a href="#查找-okhttp3-OkHttpClient类和证书CertificatePinner类" class="headerlink" title="查找 okhttp3.OkHttpClient类和证书CertificatePinner类"></a>查找 okhttp3.OkHttpClient类和证书CertificatePinner类</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findOkhttpClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)  <span class="comment">// 反射框架，可以提供类的一些属性，例如是不是final，sttic等</span></span><br><span class="line">		<span class="comment">// 判断类是否是OkhttpClient</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isOkhttpClient</span>(<span class="params">clsName</span>)&#123;</span><br><span class="line">			<span class="comment">// Okhttp3.OkHttpClient</span></span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">                <span class="keyword">var</span> interfaces = cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>()  <span class="comment">// 通过反射获得当前类的一些接口</span></span><br><span class="line">                <span class="keyword">const</span> count = interfaces.<span class="property">length</span></span><br><span class="line">                <span class="comment">//console.log(count)</span></span><br><span class="line">				<span class="comment">// 当前类如果实现的接口小于2，就不是，okhttp实现的接口Cloneable, Call.Factory, WebSocket.Factory </span></span><br><span class="line">                <span class="keyword">if</span>(count &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">				<span class="comment">// 对实现的接口进行遍历，进行判断</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> interface_ = interfaces[i]</span><br><span class="line">                    <span class="keyword">var</span> interface_name = interface_.<span class="title function_">getName</span>()</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(interface_name.<span class="title function_">indexOf</span>(<span class="string">&quot;Cloneable&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        flag = <span class="literal">true</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(interface_name.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &lt;= <span class="number">0</span>)&#123;  <span class="comment">// 内部类Call.Factory</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                </span><br><span class="line">				<span class="comment">// 过滤当前类没有内部类</span></span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>().<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">// 过滤父类不是Object，OkHttpClient没有继承其他类</span></span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&#x27;java.lang.Object&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isCertificatePinner</span>(<span class="params">clsName,prefix</span>)&#123;</span><br><span class="line">            <span class="comment">// prefix=Okhttp3.</span></span><br><span class="line">			<span class="comment">// CertificatePinner类</span></span><br><span class="line">            <span class="keyword">if</span>(!clsName.<span class="title function_">startsWith</span>(prefix))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>().<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>().<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&quot;java.lang.Object&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 类属性是否有Final</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="title class_">Modifier</span>.<span class="title function_">isFinal</span>(cls.<span class="property">class</span>.<span class="title function_">getModifiers</span>()))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">			<span class="comment">// 获得所有方法，然后遍历</span></span><br><span class="line">            <span class="keyword">var</span> methods = cls.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> method = methods[i]</span><br><span class="line">				<span class="comment">// 过滤方法没有参数的</span></span><br><span class="line">                <span class="keyword">if</span>(method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">// 方法的第一个参数是java.security.cert.Certificate</span></span><br><span class="line">                <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="string">&quot;java.security.cert.Certificate&quot;</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">false</span></span><br><span class="line">			<span class="comment">// 获取类的所有成员变量</span></span><br><span class="line">            <span class="keyword">var</span> fields = cls.<span class="property">class</span>.<span class="title function_">getDeclaredFields</span>()</span><br><span class="line">			<span class="comment">// 类包含set集合</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; fields.<span class="property">length</span>; k++)&#123;</span><br><span class="line">                <span class="keyword">var</span> field = fields[k];</span><br><span class="line">                <span class="keyword">if</span>(field.<span class="title function_">getType</span>().<span class="title function_">getName</span>() == <span class="string">&quot;java.util.Set&quot;</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classesNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">			<span class="comment">// 如果类名是OkhttpClient，就保存为变量</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isOkhttpClient</span>(classesNames[i]))&#123;</span><br><span class="line">                <span class="title class_">OkhttpClientClassName</span> = classesNames[i]</span><br><span class="line">                <span class="comment">//console.log(OkhttpClientClassName)</span></span><br><span class="line">                <span class="keyword">var</span> splits = classesNames[i].<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="keyword">var</span> len = splits.<span class="property">length</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len-<span class="number">1</span>; j++)&#123;</span><br><span class="line">					<span class="comment">// Okhttp3.OkHttpClient</span></span><br><span class="line">                    prefix = prefix + splits[j] + <span class="string">&#x27;.&#x27;</span>  <span class="comment">// 当前包名的一个前缀，prefix=Okhttp3.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找CertificatePinner类</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classesNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isCertificatePinner</span>(classesNames[i],prefix))&#123;</span><br><span class="line">                <span class="title class_">CertificatePinnerClassName</span> = classesNames[i]</span><br><span class="line">                <span class="comment">//console.log(CertificatePinnerClassName)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Found Class: &quot;</span>+classesNames.<span class="property">length</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Okhttp&#x27;s package prefix: &quot;</span>+prefix)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Find the OkhttpClient: &quot;</span>+<span class="title class_">OkhttpClientClassName</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Find the OkhttpCertificatePinner: &quot;</span>+<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">OkhttpClientClassName</span> == <span class="string">&quot;&quot;</span> || <span class="title class_">CertificatePinnerClassName</span> == <span class="string">&quot;&quot;</span> || prefix == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Can&#x27;t find the okhttp class&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>attach模式运行</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210905/02.webp"
                     
                ></p>
<h2 id="找到之后进行hook"><a href="#找到之后进行hook" class="headerlink" title="找到之后进行hook"></a>找到之后进行hook</h2><p>找builder内部类<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210905/03.webp"
                     
                ></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)</span><br><span class="line">        <span class="comment">//TrustAllManager，自定义类，hook方法置空，什么都不干</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">TrustAllManagerClass</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;TrustAllManager&quot;</span>,</span><br><span class="line">            <span class="attr">implements</span>:[<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.X509TrustManager&quot;</span>)],</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">checkClientTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;checkClientTrusted Called!!&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">checkServerTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;checkServerTrusted Called!!&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> [];</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> trustAllManagerHandle = <span class="title class_">TrustAllManagerClass</span>.$new()</span><br><span class="line">		<span class="comment">// 仿造</span></span><br><span class="line">		<span class="comment">// SSLContext context = SSLContext.getInstance(&quot;TLS&quot;);</span></span><br><span class="line">        <span class="comment">// context.init(null, trustManagers ,new SecureRandom());</span></span><br><span class="line">        <span class="comment">// SSLSocketFactory factory = context.getSocketFactory();</span></span><br><span class="line">        <span class="keyword">var</span> sslContext = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.SSLContext&quot;</span>).<span class="title function_">getInstance</span>(<span class="string">&quot;TLS&quot;</span>)</span><br><span class="line">        sslContext.<span class="title function_">init</span>(<span class="literal">null</span>,<span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;Ljavax.net.ssl.X509TrustManager;&quot;</span>,[trustAllManagerHandle]),<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">var</span> sslSocketFactory = sslContext.<span class="title function_">getSocketFactory</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//HostnameVerify，自定义类</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MyHostnameVerify</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;MyHostnameVerify&quot;</span>,</span><br><span class="line">            <span class="attr">implements</span>:[<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>)],</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">verify</span>(<span class="params">hostname, session</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(hostname)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> myHostnameVerifyHandle = <span class="title class_">MyHostnameVerify</span>.$new()</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 已经拿到okhttp3.OkHttpClient，拿它的内部类builder</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">BuilderClassName</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">OkhttpClientClassName</span>).<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>()[<span class="number">0</span>].<span class="title function_">getName</span>()</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">OkhttpClient</span>$Buidler = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">BuilderClassName</span>)</span><br><span class="line">		<span class="comment">// 通过反射获取builder的所有方法</span></span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">OkhttpClient</span>$Buidler.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> method = methods[i]</span><br><span class="line">			<span class="comment">// 过滤方法没有参数的，目标方法都有参数</span></span><br><span class="line">			<span class="comment">// builder.sslSocketFactory(factory, (X509TrustManager) trustManagers[0]);</span></span><br><span class="line">			<span class="comment">// builder.certificatePinner(cerBuilder.build());</span></span><br><span class="line">			<span class="comment">// builder.hostnameVerifier(new HostnameVerifier()&#123;&#125;)；</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 第一道校验，第一个参数的类名是javax.net.ssl.SSLSocketFactory就进行hook，参数替换为自定义参数</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="string">&quot;javax.net.ssl.SSLSocketFactory&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> sslSocketFacotryMethodName  = method.<span class="title function_">getName</span>()</span><br><span class="line">				<span class="comment">// 获取该方法的重载个数</span></span><br><span class="line">                <span class="keyword">var</span> len = <span class="title class_">OkhttpClient</span>$Buidler[sslSocketFacotryMethodName].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">				<span class="comment">// 遍历重载</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                    <span class="title class_">OkhttpClient</span>$Buidler[sslSocketFacotryMethodName].<span class="property">overloads</span>[j].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">SSLSocketFactory</span>)&#123;</span><br><span class="line">						<span class="comment">// 把参数替换为自定义的类</span></span><br><span class="line">                        <span class="variable language_">arguments</span>[<span class="number">0</span>] = sslSocketFactory</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>[sslSocketFacotryMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(sslSocketFacotryMethodName,<span class="string">&quot;Hooked!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 第三道校验，第一个参数是javax.net.ssl.HostnameVerifier就进行hook，参数替换为自定义参数</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> hostnameVerifierMethodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> len = <span class="title class_">OkhttpClient</span>$Buidler[hostnameVerifierMethodName].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                    <span class="title class_">OkhttpClient</span>$Buidler[hostnameVerifierMethodName].<span class="property">overloads</span>[j].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">hostnameVerifier</span>)&#123;</span><br><span class="line">                        <span class="variable language_">arguments</span>[<span class="number">0</span>] = myHostnameVerifyHandle</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>[hostnameVerifierMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(hostnameVerifierMethodName, <span class="string">&quot;Hooked!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 第二到校验，参数替换为它默认的，builder.certificatePinner(cerBuilder.build());</span></span><br><span class="line">			<span class="comment">// 默认public static final CertificatePinner DEFAULT = new Builder().build();</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="title class_">CertificatePinnerClassName</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> <span class="title class_">CertificatePinnerClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line">                <span class="keyword">var</span> certificatePinnerMethodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                <span class="keyword">var</span> len = <span class="title class_">OkhttpClient</span>$Buidler[certificatePinnerMethodName].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                    <span class="title class_">OkhttpClient</span>$Buidler[certificatePinnerMethodName].<span class="property">overloads</span>[j].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;certificatePinner add called!&quot;</span>)</span><br><span class="line">						<span class="comment">// 拿到所有的域，遍历</span></span><br><span class="line">                        <span class="keyword">var</span> fields = <span class="title class_">CertificatePinnerClass</span>.<span class="property">class</span>.<span class="title function_">getDeclaredFields</span>()</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; fields.<span class="property">length</span>; k++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> field = fields[k];</span><br><span class="line">                            <span class="keyword">var</span> modifiers = field.<span class="title function_">getModifiers</span>()</span><br><span class="line">							<span class="comment">// public static final CertificatePinner DEFAULT = new Builder().build();</span></span><br><span class="line">                            <span class="keyword">if</span>(<span class="title class_">Modifier</span>.<span class="title function_">isFinal</span>(modifiers) &amp;&amp; <span class="title class_">Modifier</span>.<span class="title function_">isStatic</span>(modifiers) &amp;&amp; <span class="title class_">Modifier</span>.<span class="title function_">isPublic</span>(modifiers))&#123;</span><br><span class="line">                                <span class="variable language_">arguments</span>[<span class="number">0</span>] = field.<span class="title function_">get</span>(<span class="title class_">CertificatePinnerClass</span>.<span class="property">class</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>[certificatePinnerMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>( method.<span class="title function_">getName</span>(),<span class="string">&quot;Hooked!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">CertificatePinnerClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">CertificatePinnerClass</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> method = methods[i]</span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getReturnType</span>().<span class="title function_">getName</span>() == <span class="string">&#x27;void&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> methodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName+<span class="string">&quot; Hooked!&quot;</span>)</span><br><span class="line">                <span class="keyword">var</span> m_len = <span class="title class_">CertificatePinnerClass</span>[methodName].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; m_len; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title class_">CertificatePinnerClass</span>[methodName].<span class="property">overloads</span>[j].<span class="property">returnType</span>.<span class="property">name</span> == <span class="string">&#x27;V&#x27;</span>)&#123;</span><br><span class="line">                        <span class="title class_">CertificatePinnerClass</span>[methodName].<span class="property">overloads</span>[j].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;certificatePinner check called!&quot;</span>)</span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210905/04.webp"
                     
                ></p>
<h2 id="使用spwan模式主动加载类名"><a href="#使用spwan模式主动加载类名" class="headerlink" title="使用spwan模式主动加载类名"></a>使用spwan模式主动加载类名</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadOkhttpClient</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">// 把找到的类名替换这里</span></span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;okhttp3.OkHttpClient&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="comment">//console.error(e)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>滴答清单app<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210905/05.webp"
                     
                ></p>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> classesNames = <span class="keyword">new</span> <span class="title class_">Array</span>()  <span class="comment">// 存放加载的类</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OkhttpClientClassName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">CertificatePinnerClassName</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">var</span> prefix = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadOkhttpClient</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;q.x&quot;</span>)</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="comment">//console.error(e)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1.把已经加载内存中的类枚举出来，存到一个数组里</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadClasses</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">clsName, handle</span>)&#123;</span><br><span class="line">                classesNames.<span class="title function_">push</span>(clsName)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Search Class Completed!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findOkhttpClass</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)  <span class="comment">// 反射框架，可以提供类的一些属性，例如是不是final，sttic等</span></span><br><span class="line">		<span class="comment">// 判断类是否是OkhttpClient</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isOkhttpClient</span>(<span class="params">clsName</span>)&#123;</span><br><span class="line">			<span class="comment">// Okhttp3.OkHttpClient</span></span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">                <span class="keyword">var</span> interfaces = cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>()  <span class="comment">// 通过反射获得当前类的一些接口</span></span><br><span class="line">                <span class="keyword">const</span> count = interfaces.<span class="property">length</span></span><br><span class="line">                <span class="comment">//console.log(count)</span></span><br><span class="line">				<span class="comment">// 当前类如果实现的接口小于2，就不是，okhttp实现的接口Cloneable, Call.Factory, WebSocket.Factory </span></span><br><span class="line">                <span class="keyword">if</span>(count &lt; <span class="number">2</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">				<span class="comment">// 对实现的接口进行遍历，进行判断</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++)&#123;</span><br><span class="line">                    <span class="keyword">var</span> interface_ = interfaces[i]</span><br><span class="line">                    <span class="keyword">var</span> interface_name = interface_.<span class="title function_">getName</span>()</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span>(interface_name.<span class="title function_">indexOf</span>(<span class="string">&quot;Cloneable&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                        flag = <span class="literal">true</span></span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="keyword">if</span>(interface_name.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &lt;= <span class="number">0</span>)&#123;  <span class="comment">// 内部类Call.Factory</span></span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                </span><br><span class="line">				<span class="comment">// 过滤当前类没有内部类</span></span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>().<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">// 过滤父类不是Object，OkHttpClient没有继承其他类</span></span><br><span class="line">                <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&#x27;java.lang.Object&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">isCertificatePinner</span>(<span class="params">clsName,prefix</span>)&#123;</span><br><span class="line">            <span class="comment">// prefix=Okhttp3.</span></span><br><span class="line">			<span class="comment">// CertificatePinner类</span></span><br><span class="line">            <span class="keyword">if</span>(!clsName.<span class="title function_">startsWith</span>(prefix))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">indexOf</span>(<span class="string">&quot;$&quot;</span>) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(clsName.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="property">length</span> != <span class="number">2</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getInterfaces</span>().<span class="property">length</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>().<span class="property">length</span> &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">getSuperclass</span>().<span class="title function_">getName</span>() != <span class="string">&quot;java.lang.Object&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 类属性是否有Final</span></span><br><span class="line">            <span class="keyword">if</span>(!<span class="title class_">Modifier</span>.<span class="title function_">isFinal</span>(cls.<span class="property">class</span>.<span class="title function_">getModifiers</span>()))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">var</span> flag = <span class="literal">false</span></span><br><span class="line">			<span class="comment">// 获得所有方法，然后遍历</span></span><br><span class="line">            <span class="keyword">var</span> methods = cls.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">var</span> method = methods[i]</span><br><span class="line">				<span class="comment">// 过滤方法没有参数的</span></span><br><span class="line">                <span class="keyword">if</span>(method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">// 方法的第一个参数是java.security.cert.Certificate</span></span><br><span class="line">                <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="string">&quot;java.security.cert.Certificate&quot;</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            flag = <span class="literal">false</span></span><br><span class="line">			<span class="comment">// 获取类的所有成员变量</span></span><br><span class="line">            <span class="keyword">var</span> fields = cls.<span class="property">class</span>.<span class="title function_">getDeclaredFields</span>()</span><br><span class="line">			<span class="comment">// 类包含set集合</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; fields.<span class="property">length</span>; k++)&#123;</span><br><span class="line">                <span class="keyword">var</span> field = fields[k];</span><br><span class="line">                <span class="keyword">if</span>(field.<span class="title function_">getType</span>().<span class="title function_">getName</span>() == <span class="string">&quot;java.util.Set&quot;</span>)&#123;</span><br><span class="line">                    flag = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!flag) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classesNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">			<span class="comment">// 如果类名是OkhttpClient，就保存为变量</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isOkhttpClient</span>(classesNames[i]))&#123;</span><br><span class="line">                <span class="title class_">OkhttpClientClassName</span> = classesNames[i]</span><br><span class="line">                <span class="comment">//console.log(OkhttpClientClassName)</span></span><br><span class="line">                <span class="keyword">var</span> splits = classesNames[i].<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                <span class="keyword">var</span> len = splits.<span class="property">length</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len-<span class="number">1</span>; j++)&#123;</span><br><span class="line">					<span class="comment">// Okhttp3.OkHttpClient</span></span><br><span class="line">                    prefix = prefix + splits[j] + <span class="string">&#x27;.&#x27;</span>  <span class="comment">// 当前包名的一个前缀，prefix=Okhttp3.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找CertificatePinner类</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; classesNames.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">isCertificatePinner</span>(classesNames[i],prefix))&#123;</span><br><span class="line">                <span class="title class_">CertificatePinnerClassName</span> = classesNames[i]</span><br><span class="line">                <span class="comment">//console.log(CertificatePinnerClassName)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Found Class: &quot;</span>+classesNames.<span class="property">length</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Okhttp&#x27;s package prefix: &quot;</span>+prefix)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Find the OkhttpClient: &quot;</span>+<span class="title class_">OkhttpClientClassName</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Find the OkhttpCertificatePinner: &quot;</span>+<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">OkhttpClientClassName</span> == <span class="string">&quot;&quot;</span> || <span class="title class_">CertificatePinnerClassName</span> == <span class="string">&quot;&quot;</span> || prefix == <span class="string">&quot;&quot;</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Can&#x27;t find the okhttp class&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Modifier</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.reflect.Modifier&quot;</span>)</span><br><span class="line">        <span class="comment">//TrustAllManager，自定义类，hook方法置空，什么都不干</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">TrustAllManagerClass</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;TrustAllManager&quot;</span>,</span><br><span class="line">            <span class="attr">implements</span>:[<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.X509TrustManager&quot;</span>)],</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">checkClientTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;checkClientTrusted Called!!&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">checkServerTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;checkServerTrusted Called!!&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> [];</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> trustAllManagerHandle = <span class="title class_">TrustAllManagerClass</span>.$new()</span><br><span class="line">		<span class="comment">// 仿造</span></span><br><span class="line">		<span class="comment">// SSLContext context = SSLContext.getInstance(&quot;TLS&quot;);</span></span><br><span class="line">        <span class="comment">// context.init(null, trustManagers ,new SecureRandom());</span></span><br><span class="line">        <span class="comment">// SSLSocketFactory factory = context.getSocketFactory();</span></span><br><span class="line">        <span class="keyword">var</span> sslContext = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.SSLContext&quot;</span>).<span class="title function_">getInstance</span>(<span class="string">&quot;TLS&quot;</span>)</span><br><span class="line">        sslContext.<span class="title function_">init</span>(<span class="literal">null</span>,<span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;Ljavax.net.ssl.X509TrustManager;&quot;</span>,[trustAllManagerHandle]),<span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">var</span> sslSocketFactory = sslContext.<span class="title function_">getSocketFactory</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//HostnameVerify，自定义类</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MyHostnameVerify</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&quot;MyHostnameVerify&quot;</span>,</span><br><span class="line">            <span class="attr">implements</span>:[<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>)],</span><br><span class="line">            <span class="attr">methods</span>: &#123;</span><br><span class="line">                <span class="title function_">verify</span>(<span class="params">hostname, session</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(hostname)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">var</span> myHostnameVerifyHandle = <span class="title class_">MyHostnameVerify</span>.$new()</span><br><span class="line">		</span><br><span class="line">		<span class="comment">// 已经拿到okhttp3.OkHttpClient，拿它的内部类builder</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">BuilderClassName</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">OkhttpClientClassName</span>).<span class="property">class</span>.<span class="title function_">getDeclaredClasses</span>()[<span class="number">0</span>].<span class="title function_">getName</span>()</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">OkhttpClient</span>$Buidler = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">BuilderClassName</span>)</span><br><span class="line">		<span class="comment">// 通过反射获取builder的所有方法</span></span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">OkhttpClient</span>$Buidler.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> method = methods[i]</span><br><span class="line">			<span class="comment">// 过滤方法没有参数的，目标方法都有参数</span></span><br><span class="line">			<span class="comment">// builder.sslSocketFactory(factory, (X509TrustManager) trustManagers[0]);</span></span><br><span class="line">			<span class="comment">// builder.certificatePinner(cerBuilder.build());</span></span><br><span class="line">			<span class="comment">// builder.hostnameVerifier(new HostnameVerifier()&#123;&#125;)；</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getParameterCount</span>() &lt; <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 第一道校验，第一个参数的类名是javax.net.ssl.SSLSocketFactory就进行hook，参数替换为自定义参数</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="string">&quot;javax.net.ssl.SSLSocketFactory&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> sslSocketFacotryMethodName  = method.<span class="title function_">getName</span>()</span><br><span class="line">				<span class="comment">// 获取该方法的重载个数</span></span><br><span class="line">                <span class="keyword">var</span> len = <span class="title class_">OkhttpClient</span>$Buidler[sslSocketFacotryMethodName].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">				<span class="comment">// 遍历重载</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                    <span class="title class_">OkhttpClient</span>$Buidler[sslSocketFacotryMethodName].<span class="property">overloads</span>[j].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">SSLSocketFactory</span>)&#123;</span><br><span class="line">						<span class="comment">// 把参数替换为自定义的类</span></span><br><span class="line">                        <span class="variable language_">arguments</span>[<span class="number">0</span>] = sslSocketFactory</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>[sslSocketFacotryMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(sslSocketFacotryMethodName,<span class="string">&quot;Hooked!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 第三道校验，第一个参数是javax.net.ssl.HostnameVerifier就进行hook，参数替换为自定义参数</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="string">&quot;javax.net.ssl.HostnameVerifier&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> hostnameVerifierMethodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> len = <span class="title class_">OkhttpClient</span>$Buidler[hostnameVerifierMethodName].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                    <span class="title class_">OkhttpClient</span>$Buidler[hostnameVerifierMethodName].<span class="property">overloads</span>[j].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">hostnameVerifier</span>)&#123;</span><br><span class="line">                        <span class="variable language_">arguments</span>[<span class="number">0</span>] = myHostnameVerifyHandle</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>[hostnameVerifierMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(hostnameVerifierMethodName, <span class="string">&quot;Hooked!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">// 第二到校验，参数替换为它默认的，builder.certificatePinner(cerBuilder.build());</span></span><br><span class="line">			<span class="comment">// 默认public static final CertificatePinner DEFAULT = new Builder().build();</span></span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getParameterTypes</span>()[<span class="number">0</span>].<span class="title function_">getName</span>() == <span class="title class_">CertificatePinnerClassName</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> <span class="title class_">CertificatePinnerClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line">                <span class="keyword">var</span> certificatePinnerMethodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                <span class="keyword">var</span> len = <span class="title class_">OkhttpClient</span>$Buidler[certificatePinnerMethodName].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len; j++)&#123;</span><br><span class="line">                    <span class="title class_">OkhttpClient</span>$Buidler[certificatePinnerMethodName].<span class="property">overloads</span>[j].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;certificatePinner add called!&quot;</span>)</span><br><span class="line">						<span class="comment">// 拿到所有的域，遍历</span></span><br><span class="line">                        <span class="keyword">var</span> fields = <span class="title class_">CertificatePinnerClass</span>.<span class="property">class</span>.<span class="title function_">getDeclaredFields</span>()</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; fields.<span class="property">length</span>; k++)&#123;</span><br><span class="line">                            <span class="keyword">var</span> field = fields[k];</span><br><span class="line">                            <span class="keyword">var</span> modifiers = field.<span class="title function_">getModifiers</span>()</span><br><span class="line">							<span class="comment">// public static final CertificatePinner DEFAULT = new Builder().build();</span></span><br><span class="line">                            <span class="keyword">if</span>(<span class="title class_">Modifier</span>.<span class="title function_">isFinal</span>(modifiers) &amp;&amp; <span class="title class_">Modifier</span>.<span class="title function_">isStatic</span>(modifiers) &amp;&amp; <span class="title class_">Modifier</span>.<span class="title function_">isPublic</span>(modifiers))&#123;</span><br><span class="line">                                <span class="variable language_">arguments</span>[<span class="number">0</span>] = field.<span class="title function_">get</span>(<span class="title class_">CertificatePinnerClass</span>.<span class="property">class</span>)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> <span class="variable language_">this</span>[certificatePinnerMethodName].<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>( method.<span class="title function_">getName</span>(),<span class="string">&quot;Hooked!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">CertificatePinnerClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="title class_">CertificatePinnerClassName</span>)</span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">CertificatePinnerClass</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; methods.<span class="property">length</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">var</span> method = methods[i]</span><br><span class="line">            <span class="keyword">if</span>(method.<span class="title function_">getReturnType</span>().<span class="title function_">getName</span>() == <span class="string">&#x27;void&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> methodName = method.<span class="title function_">getName</span>()</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(methodName+<span class="string">&quot; Hooked!&quot;</span>)</span><br><span class="line">                <span class="keyword">var</span> m_len = <span class="title class_">CertificatePinnerClass</span>[methodName].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; m_len; j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="title class_">CertificatePinnerClass</span>[methodName].<span class="property">overloads</span>[j].<span class="property">returnType</span>.<span class="property">name</span> == <span class="string">&#x27;V&#x27;</span>)&#123;</span><br><span class="line">                        <span class="title class_">CertificatePinnerClass</span>[methodName].<span class="property">overloads</span>[j].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;certificatePinner check called!&quot;</span>)</span><br><span class="line">                        &#125;   </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">loadOkhttpClient</span>()</span><br><span class="line">    <span class="title function_">loadClasses</span>()</span><br><span class="line">    <span class="title function_">findOkhttpClass</span>()</span><br><span class="line">    <span class="title function_">hook</span>()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包进阶之双端校验</title>
    <url>/2021/09/02/%E6%8A%93%E5%8C%85%E8%BF%9B%E9%98%B6%E4%B9%8B%E5%8F%8C%E7%AB%AF%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<p>挂上vpn，打开charles抓包可以看到没网络，但是可以抓到包，怀疑是服务器校验客户端证书了<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210902/01.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210902/02.webp"
                     
                ><br>这里推荐一下肉老师的文章 <a class="link"   href="https://www.anquanke.com/post/id/197657" >https://www.anquanke.com/post/id/197657<i class="fas fa-external-link-alt"></i></a><br>引用里面一张图<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210902/03.webp"
                     
                ><br>原本服务器校验的是app的证书，但是挂上charles，服务器校验的是charles的证书，一匹配发现不是app的证书，就返回网络失败，所以我们要将app中内置的证书导入到Charles中去。<br>这个操作通常需要完成两项内容：</p>
<ol>
<li>找到证书文件</li>
<li>找到证书密码<br>首先找证书文件，直接对apk进行解包，直接过滤搜索后缀名为p12的文件即可，一般常用的命令为<strong>tree -NCfhl |grep -i p12</strong>，直接打印出p12文件的路径</li>
</ol>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210902/04.webp"
                     
                ><br>找证书密码一般解密会调用现成的API，<strong>java.security.KeyStore</strong> ，直接使用frida打印出来，<br>也可以hook系统文件库，这里直接使用现成的代码，</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_KeyStore_load</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">StringClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">KeyStore</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.KeyStore$LoadStoreParameter&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load1:&quot;</span>, arg0);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.InputStream&#x27;</span>, <span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0, arg1</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()));</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? <span class="title class_">StringClass</span>.$new(arg1) : <span class="literal">null</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook_KeyStore_load...&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(hook_KeyStore_load)</span><br></pre></td></tr></table></figure>
<p>使用spawn的模式启动，密码一下子就吐出来了<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210902/05.webp"
                     
                ><br>把证书导入到charles，并输入刚才的密码<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210902/06.webp"
                     
                ><br>再次抓包试试，这次页面跳转了，请求也是正常了<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210902/07.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210902/08.webp"
                     
                ></p>
]]></content>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>某东实时弹幕抓取</title>
    <url>/2020/12/27/%E6%9F%90%E4%B8%9C%E5%AE%9E%E6%97%B6%E5%BC%B9%E5%B9%95%E6%8A%93%E5%8F%96/</url>
    <content><![CDATA[<h2 id="1-抓包，查找sign"><a href="#1-抓包，查找sign" class="headerlink" title="1.抓包，查找sign"></a>1.抓包，查找sign</h2><p>对于已经拿到sign只想看弹幕的部分直接跳到4。</p>
<p>用的抓包工具是HttpCanary，随便进入一间直播间，可以看到弹幕走的是websocket，携带的url参数token来自于下面post返回的结果，经过分析只有st,sign,sv三个参数会变，其余都不变。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/01.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/02.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/03.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/04.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/05.webp"
                     
                ><br>既然分析完了，那就从sign开始入手。当时我找这个sign找了一会没找出来，由于sign会跟其它参数拼接成url，所以我就搜其它参数wifiBssid，搜出来很明显就在第一个。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/06.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/07.webp"
                     
                ><br>这里hook这个getReportString方法，把它的调用堆栈打印出来，然后去查看。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/08.webp"
                     
                ><br>这里我就直接贴出来了，省得大家浪费时间去找，眼尖的可以看到里面有signature，不就跟我们要的sign很像吗，这里把b方法三个参数hook打印一下，<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/09.webp"
                     
                ><br>进到signature这个方法，可以看到这只是接口，那就搜索这个类，看它在哪里被实现。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/10.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/11.webp"
                     
                ><br>被getSignFromJni方法实现了，再深入看一下，可以看到加密过程在so里面。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/12.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/13.webp"
                     
                ><br>这里就直接hook这个函数打印参数，多调用几次，然后跟抓到的数据做对比，看哪些参数不变。经过我的测试，这些参数不用修改，可以直接拿过来用，而且都是string类型的，也不用做什么类型转换。返回值的st，sign，sv都是组成url需要的参数，而且这里的参数v3是post的body的值。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/14.webp"
                     
                ></p>
<h2 id="2-使用rpc进行调用"><a href="#2-使用rpc进行调用" class="headerlink" title="2.使用rpc进行调用"></a>2.使用rpc进行调用</h2><p>这里就直接使用rpc进行调用就可以了，根据它的参数照搬就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> frida</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">rpc_sign = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">rpc.exports = &#123;</span></span><br><span class="line"><span class="string">    getsign: function(function_id, body_string, uuid)&#123;</span></span><br><span class="line"><span class="string">      var sig = &quot;&quot;;</span></span><br><span class="line"><span class="string">      Java.perform(</span></span><br><span class="line"><span class="string">        function()&#123;</span></span><br><span class="line"><span class="string">            //拿到context上下文</span></span><br><span class="line"><span class="string">            var currentApplication = Java.use(&#x27;android.app.ActivityThread&#x27;).currentApplication();</span></span><br><span class="line"><span class="string">            var context = currentApplication.getApplicationContext();</span></span><br><span class="line"><span class="string">            var BitmapkitUtils = Java.use(&#x27;com.jingdong.common.utils.BitmapkitUtils&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            sig = BitmapkitUtils.getSignFromJni(context, function_id, body_string, uuid, &#x27;android&#x27;, &#x27;9.2.0&#x27;);</span></span><br><span class="line"><span class="string">        &#125; </span></span><br><span class="line"><span class="string">      )</span></span><br><span class="line"><span class="string">       return sig;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_sign</span>(<span class="params">function_id, body_string, u</span>):</span><br><span class="line">    process = frida.get_remote_device().attach(<span class="string">&#x27;com.jingdong.app.mall&#x27;</span>)</span><br><span class="line">    script = process.create_script(rpc_sign)</span><br><span class="line">    script.load()</span><br><span class="line">    sign = script.exports.getsign(function_id, body_string, u)</span><br><span class="line">    <span class="keyword">return</span> sign</span><br><span class="line"></span><br><span class="line">body_data = &#123;<span class="string">&quot;appId&quot;</span>:<span class="string">&quot;jd.mall&quot;</span>,<span class="string">&quot;content&quot;</span>:<span class="string">&quot;tbV8seY199tCdw6GllmkWyCNNENuGsgwLByA7svt5HbPXvlI9wQhHMk3dT7f0ldfpq6M0MCiUD+A\nVrY390Yct0FSub03INUml9n1bS9rZSF3XT0q1kQdehKPO4CccMiEA6NQXYiqYn9wLsDDYEIjmkVA\nEbXI88CwO0K7uhwemdhQMZrcIFj6jMmyiDNDxSA1OjFw88hR0oSCF0m8ll9o9iU2MVSHDipF5ZDn\nFR4E+82mwfRYIxamafB+nWG8GuHcKhiQOWGbChTcG3TxcGT053wfcc6uuMD7+L4PcsNRQjM9syFc\nXR6FBu/sCV/kH/3rT8w/m3zV1c9JpW9lq/7WVzCVvAIj7RNt2zzYFisymCE=&quot;</span>&#125;</span><br><span class="line">body_string = json.dumps(body_data, ensure_ascii=<span class="literal">False</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">function_id = <span class="string">&#x27;liveauth&#x27;</span></span><br><span class="line">u = <span class="string">&#x27;-a08d16f38776&#x27;</span></span><br><span class="line">sign = get_sign(function_id, body_string, u)</span><br><span class="line"><span class="built_in">print</span>(sign)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=1608288325570&amp;sign=bf449b04f88afea4c08e18006127cace&amp;sv=121</span><br></pre></td></tr></table></figure>

<h2 id="3-构造请求拿到认证"><a href="#3-构造请求拿到认证" class="headerlink" title="3.构造请求拿到认证"></a>3.构造请求拿到认证</h2><p>上面只是拿到了sign，还得拼接url进行请求，这里就不展示了，要的参数基本都有了，其它不变的参数照搬就行，我就直接post请求拿结果了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;code&#x27;: 0, &#x27;msg&#x27;: &#x27;鉴权成功&#x27;, &#x27;data&#x27;: &#123;&#x27;liveUrl&#x27;: &#x27;wss://live-ws4.jd.com&#x27;, &#x27;token&#x27;: &#x27;amQubWFsbF_muLjlrqJfOTMxMTE0MzY4NDNfMTYwODI3OTE4NzA5NGxTNkViVw==&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-建立WebSocket"><a href="#4-建立WebSocket" class="headerlink" title="4.建立WebSocket"></a>4.建立WebSocket</h2><p>保存刚才请求websocket，打开可以看到它请求的参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;app&quot;: &quot;com.jingdong.app.mall&quot;,</span><br><span class="line">  &quot;host&quot;: &quot;live-ws4.jd.com&quot;,</span><br><span class="line">  &quot;remoteIp&quot;: &quot;106.39.169.212&quot;,</span><br><span class="line">  &quot;remotePort&quot;: 443,</span><br><span class="line">  &quot;sessionId&quot;: &quot;c77ac6e9-019d-4ac9-8611-92f24eb29851&quot;,</span><br><span class="line">  &quot;time&quot;: &quot;2020-12-19 23:48:18&quot;,</span><br><span class="line">  &quot;url&quot;: &quot;wss://live-ws4.jd.com/?token\u003damQubWFsbF_muLjlrqJfMjg5NDU0ODc3NDZfMTYwODI3Mjg5ODE0NFdSb0xibw\u003d\u003d&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>怎么建立WebSocket连接呢？<br>这里就需要用到python的aiowebsocket库。<br>详细的说明和使用方法请看：<a class="link"   href="https://zhuanlan.zhihu.com/p/82089648" >https://zhuanlan.zhihu.com/p/82089648<i class="fas fa-external-link-alt"></i></a><br>代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> aiowebsocket.converses <span class="keyword">import</span> AioWebSocket</span><br><span class="line"><span class="keyword">import</span> LiveBarrage</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">startup</span>(<span class="params">uri</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AioWebSocket(uri) <span class="keyword">as</span> aws:</span><br><span class="line">        converse = aws.manipulator</span><br><span class="line">        <span class="comment"># 客户端给服务端发送消息</span></span><br><span class="line">        a = &#123;</span><br><span class="line">            <span class="string">&quot;aid&quot;</span>: <span class="string">&quot;dongdong&quot;</span>,</span><br><span class="line">            <span class="string">&quot;body&quot;</span>: &#123;<span class="string">&quot;ext&quot;</span>:</span><br><span class="line">                        &#123;<span class="string">&quot;appid&quot;</span>:<span class="string">&quot;jd.mall&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;entrace&quot;</span>:<span class="string">&quot;6&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;ver&quot;</span>:<span class="string">&quot;1.1&quot;</span>&#125;,</span><br><span class="line">                    <span class="string">&quot;groupid&quot;</span>:<span class="string">&quot;3092724&quot;</span>, <span class="comment"># 这个是房间号</span></span><br><span class="line">                    <span class="string">&quot;nickName&quot;</span>:<span class="string">&quot;神秘观众&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;join_live_broadcast&quot;</span>&#125;,</span><br><span class="line">            <span class="string">&quot;from&quot;</span>:&#123;<span class="string">&quot;app&quot;</span>:<span class="string">&quot;jd.live&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;clientType&quot;</span>:<span class="string">&quot;android&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;dvc&quot;</span>:<span class="string">&quot;-a08d16f38776&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;pin&quot;</span>:<span class="string">&quot;&quot;</span>&#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>:<span class="string">&quot;df09a645-8e9b-4aad-b699-d44753ca8738&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>:<span class="string">&quot;chat_group_message&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ver&quot;</span>:<span class="string">&quot;9.3.2&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 把json转换为字符串</span></span><br><span class="line">        body_string = json.dumps(a, ensure_ascii=<span class="literal">False</span>).replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment"># print(body_string)</span></span><br><span class="line">        <span class="keyword">await</span> converse.send(body_string)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            mes = <span class="keyword">await</span> converse.receive()</span><br><span class="line">            <span class="comment"># 设置编码</span></span><br><span class="line">            mes = mes.decode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">            <span class="comment"># nickName是用户名，判断nickName可以过滤非弹幕消息</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;nickName&#x27;</span> <span class="keyword">in</span> mes:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;&#123;time&#125;-Client receive: &#123;rec&#125;&#x27;</span></span><br><span class="line">                    .<span class="built_in">format</span>(time=datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>), rec=mes))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    token = LiveBarrage.token()  <span class="comment"># 这里返回的是post请求后拿到的token</span></span><br><span class="line">    <span class="comment">#remote = &#x27;wss://api.bbxapp.vip/v1/ifcontract/realTime&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(token)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        asyncio.get_event_loop().run_until_complete(startup(token))</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> exc:</span><br><span class="line">        logging.info(<span class="string">&#x27;Quit.&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>运行结果如下：<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/15.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/16.webp"
                     
                ></p>
<p>可以看到是实时抓取的，到这里就结束了。</p>
<h2 id="5-其它接口"><a href="#5-其它接口" class="headerlink" title="5.其它接口"></a>5.其它接口</h2><p>这个app的接口参数都是一样的，不同的接口由functionId这个参数决定的。<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20201227/17.webp"
                     
                ></p>
<p>这里我就把其它的接口名发出来，然后post的参数hook查看一下照搬就可以了。<br>搜索 search<br>商品评价列表 getCommentListWithCard<br>问答 getQuestionList<br>直播带货商品 liveCartDetail<br>弹幕 liveauth</p>
]]></content>
      <tags>
        <tag>抓包</tag>
        <tag>安卓逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>抓包进阶之SSL unpinning</title>
    <url>/2021/09/25/%E6%8A%93%E5%8C%85%E8%BF%9B%E9%98%B6%E4%B9%8BSSL-unpinning/</url>
    <content><![CDATA[<h1 id="SSL-Pinning-Bypass"><a href="#SSL-Pinning-Bypass" class="headerlink" title="SSL Pinning Bypass"></a>SSL Pinning Bypass</h1><p>客户端的证书绑定（pinning）。一种情况没有分析，就是客户端并不会默认信任系统根证书目录中的证书，而是在代码里再加一层校验，这就是证书绑定机制——SSL pinning，如果这段代码的校验过不了，那么客户端还是会报证书错误。<br>两层校验，<br>第一种不信任系统证书，使用自己的证书。<br>第二种在自己证书上再做一层判断<br>● Https客户端代码校验服务器证书<br>案例是自己配置的证书，不是ca机构签发的。这段代码放了自己的证书，一段检验机制</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/01.webp"
                     
                ></p>
<p>打开charles抓包，抓包失败</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/02.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/03.webp"
                     
                ></p>
<p>信任所有证书，都为空表示都信任</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/04.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/05.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/06.webp"
                     
                ></p>
<p>因为图片是https的，修改一下ssl</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/07.webp"
                     
                ></p>
<p>成功抓包<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/08.webp"
                     
                ></p>
<h2 id="让客户端信任系统根证书目录中的证书"><a href="#让客户端信任系统根证书目录中的证书" class="headerlink" title="让客户端信任系统根证书目录中的证书"></a>让客户端信任系统根证书目录中的证书</h2><p>把证书校验重新开起来<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/09.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/10.webp"
                     
                ></p>
<p>hook住checkServerTrusted，将其所有重载都置空；<br>使用spawn模式运行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 检查一个类是否继承某一个接口</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">checkIsImplementeInterFace</span>(<span class="params">clsName, interface_</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">              <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(cls.<span class="property">class</span> != <span class="literal">undefined</span>)</span><br><span class="line">                <span class="keyword">if</span>(interface_.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(cls.<span class="property">class</span>))&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">TrustManagerInterface</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.TrustManager&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>).<span class="property">check</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;[Ljava.security.cert.Certificate;&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CertificatePinner check called!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;okhttp3.CertificatePinner&quot;</span>).<span class="property">check</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.util.List&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CertificatePinner check called!&quot;</span>)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">clsName,handle</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">checkIsImplementeInterFace</span>(clsName,<span class="title class_">TrustManagerInterface</span>))&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName)</span><br><span class="line">                    <span class="keyword">var</span> targetClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">                    <span class="keyword">var</span> len = targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                        targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                            </span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName + i + <span class="string">&quot;checkServerTrusted Called!&quot;</span>)</span><br><span class="line">                            <span class="comment">//return targetClass[&quot;checkServerTrusted&quot;].overloads[i].apply(this,arguments)</span></span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Search Classes Completed!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p>成功抓到包</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/11.webp"
                     
                ></p>
<h2 id="过检验证书"><a href="#过检验证书" class="headerlink" title="过检验证书"></a>过检验证书</h2><p>把证书检验开启</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/12.webp"
                     
                ></p>
<h2 id="objection绕过检测"><a href="#objection绕过检测" class="headerlink" title="objection绕过检测"></a>objection绕过检测</h2><p>使用objection，直接将SSL pinning给disable掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">android sslpinning disable</span><br></pre></td></tr></table></figure>

<h1 id="ssl-pinning-服务器检验客户端证书"><a href="#ssl-pinning-服务器检验客户端证书" class="headerlink" title="ssl pinning+服务器检验客户端证书"></a>ssl pinning+服务器检验客户端证书</h1><p>注册页面抓包，证书不信任<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/13.webp"
                     
                ></p>
<p>用frida hook掉他的一些检测，</p>
<h2 id="ssl-pinning（hook掉证书验证-自定义证书-）"><a href="#ssl-pinning（hook掉证书验证-自定义证书-）" class="headerlink" title="ssl pinning（hook掉证书验证(自定义证书)）"></a>ssl pinning（hook掉证书验证(自定义证书)）</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 检查一个类是否继承某一个接口</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">checkIsImplementeInterFace</span>(<span class="params">clsName, interface_</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">              <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(cls.<span class="property">class</span> != <span class="literal">undefined</span>)</span><br><span class="line">                <span class="keyword">if</span>(interface_.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(cls.<span class="property">class</span>))&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">TrustManagerInterface</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.TrustManager&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;[Ljava.security.cert.Certificate;&#x27;).implementation = function()&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(&quot;CertificatePinner check called!&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;java.util.List&#x27;).implementation = function()&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(&quot;CertificatePinner check called!&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">clsName,handle</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">checkIsImplementeInterFace</span>(clsName,<span class="title class_">TrustManagerInterface</span>))&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName)</span><br><span class="line">                    <span class="keyword">var</span> targetClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">                    <span class="keyword">var</span> len = targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                        targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                            </span><br><span class="line">                            <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName + i + <span class="string">&quot;checkServerTrusted Called!&quot;</span>)</span><br><span class="line">                            <span class="comment">//return targetClass[&quot;checkServerTrusted&quot;].overloads[i].apply(this,arguments)</span></span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Search Classes Completed!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>

<h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">checkIsImplementeInterFace</span>(<span class="params">clsName, interface_</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> cls = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">              <span class="keyword">if</span>(cls.<span class="property">class</span>.<span class="title function_">isInterface</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(cls.<span class="property">class</span> != <span class="literal">undefined</span>)</span><br><span class="line">                <span class="keyword">if</span>(interface_.<span class="property">class</span>.<span class="title function_">isAssignableFrom</span>(cls.<span class="property">class</span>))&#123;</span><br><span class="line">                  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">TrustManagerInterface</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;javax.net.ssl.TrustManager&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;[Ljava.security.cert.Certificate;&#x27;).implementation = function()&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(&quot;CertificatePinner check called!&quot;)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;java.util.List&#x27;).implementation = function()&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(&quot;CertificatePinner check called!&quot;)</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Java.enumerateClassLoaders(&#123;</span></span><br><span class="line">        <span class="comment">//   onMatch: function(loader)&#123;</span></span><br><span class="line">        <span class="comment">//       try&#123;</span></span><br><span class="line">        <span class="comment">//           if(loader.findClass(&quot;okhttp3.OkHttpClient$Builder&quot;))&#123;</span></span><br><span class="line">        <span class="comment">//             console.log(&quot;Found the really Classloader&quot;)</span></span><br><span class="line">        <span class="comment">//             Java.classFactory.loader = loader</span></span><br><span class="line">        <span class="comment">//           &#125;</span></span><br><span class="line">        <span class="comment">//       &#125;catch(e)&#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//       &#125;</span></span><br><span class="line">        <span class="comment">//   &#125;,</span></span><br><span class="line">        <span class="comment">//   onComplete: function()&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(&quot;Search Loaders Completed!&quot;)</span></span><br><span class="line">        <span class="comment">//   &#125;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="comment">// Java.use(&quot;okhttp3.OkHttpClient$Builder&quot;).certificatePinner.implementation = function(certificatePinner)&#123;</span></span><br><span class="line">        <span class="comment">//   return this.certificatePinner(Java.use(&quot;okhttp3.CertificatePinner&quot;).DEFAULT.value) //CertificatePinner.DEFAULT</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">enumerateLoadedClasses</span>(&#123;</span><br><span class="line">            <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">clsName,handle</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title function_">checkIsImplementeInterFace</span>(clsName,<span class="title class_">TrustManagerInterface</span>))&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName)</span><br><span class="line">                    <span class="keyword">var</span> targetClass = <span class="title class_">Java</span>.<span class="title function_">use</span>(clsName)</span><br><span class="line">                    <span class="keyword">var</span> len = targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>.<span class="property">length</span></span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">                      <span class="comment">//console.log(targetClass[&quot;checkServerTrusted&quot;].overloads[i].returnType.name)</span></span><br><span class="line">                      <span class="keyword">if</span>(targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>[i].<span class="property">returnType</span>.<span class="property">name</span> == <span class="string">&#x27;V&#x27;</span>)&#123;</span><br><span class="line">                        targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                          <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName + i + <span class="string">&quot;checkServerTrusted Called!&quot;</span>)</span><br><span class="line">                          <span class="comment">//return targetClass[&quot;checkServerTrusted&quot;].overloads[i].apply(this,arguments)</span></span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        targetClass[<span class="string">&quot;checkServerTrusted&quot;</span>].<span class="property">overloads</span>[i].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                          <span class="variable language_">console</span>.<span class="title function_">log</span>(clsName + i + <span class="string">&quot;checkServerTrusted Called!&quot;</span>)</span><br><span class="line">                          <span class="comment">//return targetClass[&quot;checkServerTrusted&quot;].overloads[i].apply(this,arguments)</span></span><br><span class="line">                          <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">                        &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Search Classes Completed!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p>现在可以抓到包，证明请求发出去，那就是证书不对<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/14.webp"
                     
                ></p>
<h2 id="dump-证书"><a href="#dump-证书" class="headerlink" title="dump 证书"></a>dump 证书</h2><p>先关掉vpn，让它正常发请求，并用脚本把证书导出</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>把证书密码dump出来，手动解压apk搜索证书导入charles即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">print_stack</span>(<span class="params">p</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;=====&gt;&quot;</span>, p)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Exception&quot;</span>).$new()));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">StringClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">KeyStore</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>);</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.security.KeyStore$LoadStoreParameter&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0</span>) &#123;</span><br><span class="line">            <span class="comment">// print_stack(&quot;KeyStore.load1&quot;);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load1:&quot;</span>, arg0);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title class_">KeyStore</span>.<span class="property">load</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.io.InputStream&#x27;</span>, <span class="string">&#x27;[C&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg0, arg1</span>) &#123;</span><br><span class="line">            <span class="comment">// print_stack(&quot;KeyStore.load2&quot;);</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;KeyStore.load2:&quot;</span>, arg0, arg1 ? <span class="title class_">StringClass</span>.$new(arg1) : <span class="literal">null</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">load</span>(arg0, arg1);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook_KeyStore_load...&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/15.webp"
                     
                ></p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>dump出证书到手机，并修改证书密码 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enter!&quot;</span>)</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">storeP12</span>(<span class="params">pri, p7, p12Path, p12Password</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> X509Certificate = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>)</span><br><span class="line">            <span class="keyword">var</span> p7X509 = <span class="title class_">Java</span>.<span class="title function_">cast</span>(p7, X509Certificate);</span><br><span class="line">            <span class="keyword">var</span> chain = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&quot;java.security.cert.X509Certificate&quot;</span>, [p7X509])</span><br><span class="line">            <span class="keyword">var</span> ks = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore&quot;</span>).<span class="title function_">getInstance</span>(<span class="string">&quot;PKCS12&quot;</span>, <span class="string">&quot;BC&quot;</span>);</span><br><span class="line">            ks.<span class="title function_">load</span>(<span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">            ks.<span class="title function_">setKeyEntry</span>(<span class="string">&quot;client&quot;</span>, pri, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(p12Password).<span class="title function_">toCharArray</span>(), chain);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> out = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.io.FileOutputStream&quot;</span>).$new(p12Path);</span><br><span class="line">              ks.<span class="title function_">store</span>(out, <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.String&#x27;</span>).$new(p12Password).<span class="title function_">toCharArray</span>())</span><br><span class="line">            &#125; <span class="keyword">catch</span> (exp) &#123;</span><br><span class="line">              <span class="variable language_">console</span>.<span class="title function_">log</span>(exp)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">//在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式，证书密码为r0ysue</span></span><br><span class="line">          <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore$PrivateKeyEntry&quot;</span>).<span class="property">getPrivateKey</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>()</span><br><span class="line">            <span class="keyword">var</span> packageName = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>().<span class="title function_">getPackageName</span>();</span><br><span class="line">            <span class="title function_">storeP12</span>(<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>(), <span class="variable language_">this</span>.<span class="title function_">getCertificate</span>(), <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName + <span class="string">&#x27;.p12&#x27;</span>, <span class="string">&#x27;r0ysue&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dumpClinetCertificate=&gt;&quot;</span> + <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName + <span class="string">&#x27;.p12&#x27;</span> + <span class="string">&#x27;   pwd: r0ysue&#x27;</span>);            </span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.KeyStore$PrivateKeyEntry&quot;</span>).<span class="property">getCertificateChain</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getCertificateChain</span>()</span><br><span class="line">            <span class="keyword">var</span> packageName = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>).<span class="title function_">currentApplication</span>().<span class="title function_">getApplicationContext</span>().<span class="title function_">getPackageName</span>();</span><br><span class="line">            <span class="title function_">storeP12</span>(<span class="variable language_">this</span>.<span class="title function_">getPrivateKey</span>(), <span class="variable language_">this</span>.<span class="title function_">getCertificate</span>(), <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName + <span class="string">&#x27;.p12&#x27;</span>, <span class="string">&#x27;r0ysue&#x27;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dumpClinetCertificate=&gt;&quot;</span> + <span class="string">&#x27;/sdcard/Download/&#x27;</span> + packageName + <span class="string">&#x27;.p12&#x27;</span> + <span class="string">&#x27;   pwd: r0ysue&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/16.webp"
                     
                ></p>
<h2 id="charles导入证书"><a href="#charles导入证书" class="headerlink" title="charles导入证书"></a>charles导入证书</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb pull /sdcard/Download/com.ninemax.ncsearchnew.p12 /root/Desktop/</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/17.webp"
                     
                ><br>再运行绕过本地校验脚本，成功抓包<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/18.webp"
                     
                ></p>
<h1 id="混淆的okhhtp3抓包"><a href="#混淆的okhhtp3抓包" class="headerlink" title="混淆的okhhtp3抓包"></a>混淆的okhhtp3抓包</h1><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/19.webp"
                     
                ></p>
<p>通过它的官网知道是https，用的ca机构证书。不需要hook证书校验这一步<br>jadx打开搜索 CertificatePinner</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/20.webp"
                     
                ></p>
<p>通过查看的CertificatePinner源码，和该app的代码对比，基本一样的逻辑，证书校验不通过就会抛异常</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/21.webp"
                     
                ><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/22.webp"
                     
                ></p>
<p>使用frida对其hook，置空</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;q.g&quot;</span>).<span class="property">a</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;check called!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure>
<p>charles设置443端口<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/23.webp"
                     
                ></p>
<p>成功抓包</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210925/24.webp"
                     
                ></p>
]]></content>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
  <entry>
    <title>对称加解密算法RC4原理过程及实现</title>
    <url>/2022/09/15/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95RC4%E5%8E%9F%E7%90%86%E8%BF%87%E7%A8%8B%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RC4是一种流密码，可实现短密钥到长密钥的转换，流密码的加密就是比特的异或，为了安全性，关键就是密钥的生成，RC4就是解决密钥生成问题的。<br></br></p>
<p><strong>流密码结构：</strong><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220915/01.webp"
                     
                ></p>
</br>

<p>流密码类似于”一次一密”，不同的是”一次一密”使用的是真正的随机数流，而流密码使用的是伪随机数流。</br><br>设计流密码的主要因素</br><br>1、加密序列的周期要长，若出现重复的周期过短，容易被破解</br><br>2、密钥流应该尽可能地接近真正随机数流的特征</br><br>3、密钥长度要长，以避免琼穷举攻击</br></br></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20220915/02.webp"
                     
                ></p>
</br>


<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-密钥编排，向量S和Y初始化"><a href="#1-密钥编排，向量S和Y初始化" class="headerlink" title="1. 密钥编排，向量S和Y初始化"></a>1. 密钥编排，向量S和Y初始化</h2><p>RC4的实现需要三个向量，初始向量S，密钥K,临时向量T</p>
<p>初始化向量S和T，将向量S填充为0到255的数值，根据密钥K，填充向量T。如果密钥K</p>
<p>比向量S短，就依次重复填充密钥K，如果与向量S等长，那么向量T与密钥K相同。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S = []  <span class="comment"># 状态数组</span></span><br><span class="line">T = []  <span class="comment"># 临时数组</span></span><br><span class="line"><span class="comment"># 初始化S和T</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    S.append(i)</span><br><span class="line">    T.append(key[i % <span class="built_in">len</span>(key)])</span><br></pre></td></tr></table></figure>

</br>

<h2 id="2-向量S的初始置换，将原来有序的向量S重新排列"><a href="#2-向量S的初始置换，将原来有序的向量S重新排列" class="headerlink" title="2. 向量S的初始置换，将原来有序的向量S重新排列"></a>2. 向量S的初始置换，将原来有序的向量S重新排列</h2><p>从0遍历到255，每次 j&#x3D;(j+S[i]+ord(T[i]))%256，然后交换S[i] 和 S[j]，这样S盒顺序就被打乱了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用T产生S的初始置换</span></span><br><span class="line">j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    j = (j + S[i] + <span class="built_in">ord</span>(T[i])) % <span class="number">256</span></span><br><span class="line">    S[i], S[j] = S[j], S[i]  <span class="comment"># 交换S[i] 和 S[j]</span></span><br><span class="line">    <span class="comment"># print(S)</span></span><br></pre></td></tr></table></figure>
</br>

<h2 id="3-密钥生成，每加密一个字符，就需要生成一个字节的密钥"><a href="#3-密钥生成，每加密一个字符，就需要生成一个字节的密钥" class="headerlink" title="3. 密钥生成，每加密一个字符，就需要生成一个字节的密钥"></a>3. 密钥生成，每加密一个字符，就需要生成一个字节的密钥</h2><p>根据明文长度生成密钥流</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Ks = []</span><br><span class="line">i = j = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(M)):</span><br><span class="line">    i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">    j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">    S[i], S[j] = S[j], S[i]</span><br><span class="line">    t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">    Ks.append(t)</span><br></pre></td></tr></table></figure>

</br>

<h2 id="4-循环明文长度，每一个字符跟向量S异或"><a href="#4-循环明文长度，每一个字符跟向量S异或" class="headerlink" title="4. 循环明文长度，每一个字符跟向量S异或"></a>4. 循环明文长度，每一个字符跟向量S异或</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(M)):</span><br><span class="line">    C += <span class="built_in">chr</span>(<span class="built_in">ord</span>(M[i]) ^ S[Ks[i]])</span><br><span class="line"><span class="keyword">return</span> C</span><br></pre></td></tr></table></figure>

<p>解密也就是把密文当成明文再把加密执行一次</br></br></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 密钥编排函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">    S = []  <span class="comment"># 状态数组</span></span><br><span class="line">    T = []  <span class="comment"># 临时数组</span></span><br><span class="line">    <span class="comment"># 初始化S和T</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S.append(i)</span><br><span class="line">        T.append(key[i % <span class="built_in">len</span>(key)])</span><br><span class="line">        <span class="comment"># print(S)</span></span><br><span class="line">        <span class="comment"># print(T)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用T产生S的初始置换</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + <span class="built_in">ord</span>(T[i])) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]  <span class="comment"># 交换S[i] 和 S[j]</span></span><br><span class="line">        <span class="comment"># print(S)</span></span><br><span class="line">        <span class="comment"># print(T)</span></span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"></span><br><span class="line"><span class="comment"># 密钥流生成函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generateKey</span>(<span class="params">S, M</span>):</span><br><span class="line">    Ks = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(M)):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span></span><br><span class="line">        Ks.append(t)</span><br><span class="line">    <span class="keyword">return</span> Ks</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rc4_encode</span>(<span class="params">M, key</span>):</span><br><span class="line">    C = <span class="string">&quot;&quot;</span></span><br><span class="line">    S = KSA(key)  <span class="comment"># 密钥编排</span></span><br><span class="line">    Ks = generateKey(S, M)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(M)):</span><br><span class="line">        C += <span class="built_in">chr</span>(<span class="built_in">ord</span>(M[i]) ^ S[Ks[i]])</span><br><span class="line">    <span class="keyword">return</span> C</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Rc4_decode</span>(<span class="params">C, key</span>):</span><br><span class="line">    M = <span class="string">&quot;&quot;</span></span><br><span class="line">    S = KSA(key)  <span class="comment"># 密钥编排</span></span><br><span class="line">    Ks = generateKey(S, C)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(C)):</span><br><span class="line">        M += <span class="built_in">chr</span>(<span class="built_in">ord</span>(C[i]) ^ S[Ks[i]])</span><br><span class="line">    <span class="keyword">return</span> M</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;123456789&#x27;</span></span><br><span class="line">m = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line">C = Rc4_encode(m, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加密后密文：&quot;</span>, C)</span><br><span class="line"></span><br><span class="line">M = Rc4_decode(C, key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;解密后明文：&quot;</span>, M)</span><br></pre></td></tr></table></figure>

</br>

<h2 id="c"><a href="#c" class="headerlink" title="c++"></a>c++</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *S, <span class="type">char</span> *key, <span class="type">int</span> key_len)</span> </span>&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> T[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        S[i] = i;</span><br><span class="line">        T[i] = key[i % key_len];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">        j = (j + S[i] + T[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rc4_crypto</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *S, <span class="type">char</span> *text, <span class="type">int</span> text_len)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; text_len; k++) &#123;</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span>;</span><br><span class="line">        <span class="built_in">swap</span>(S[i], S[j]);</span><br><span class="line">        t = (S[i] + S[j]) % <span class="number">256</span>;</span><br><span class="line">        text[k] ^= S[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">rc4_main</span><span class="params">(<span class="type">char</span> *text, <span class="type">int</span> text_len, <span class="type">char</span> *key)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> key_len = <span class="keyword">sizeof</span> key - <span class="number">1</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> S[<span class="number">256</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">rc4_init</span>(S, key, key_len);</span><br><span class="line">    <span class="built_in">rc4_crypto</span>(S, text, text_len);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;result =&gt; %s\n&quot;</span>, text);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    char out[100] = &#123;0&#125;;</span></span><br><span class="line">    <span class="comment">//    base64_encode(text,out);</span></span><br><span class="line">    <span class="comment">//    printf(&quot;result(base64) =&gt; %s&quot;, out);</span></span><br><span class="line">    <span class="keyword">return</span> text;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> key[] = <span class="string">&quot;12345&quot;</span>;</span><br><span class="line">    <span class="type">char</span> text[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="type">int</span> text_len = <span class="built_in">sizeof</span>(text) - <span class="number">1</span>;</span><br><span class="line">    string aa = <span class="built_in">rc4_main</span>(text, text_len, key);</span><br><span class="line">    cout&lt;&lt;aa&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>某鱼直播软件使用unidbg算法分析</title>
    <url>/2023/01/09/%E6%9F%90%E9%B1%BC%E7%9B%B4%E6%92%AD%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8unidbg%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20221223/000.webp"
                     
                ></p>
<h2 id="Unidbg-模拟执行"><a href="#Unidbg-模拟执行" class="headerlink" title="Unidbg 模拟执行"></a>Unidbg 模拟执行</h2><p> 首先模拟执行，先搭个架子  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.douyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DalvikModule;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.VM;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DouYu</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DouYu</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build();</span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;</span>));</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DouYu</span> <span class="variable">douYu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DouYu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/01.webp"
                     
                ><br /> 报了一个 ”不合法的JNI版本“ 错误，具体出错的原因有很多，一个常见的问题是SO的依赖库缺失。即程 序调用依赖库中某个函数时，因为这个依赖库没加载到Unidbg虚拟内存中，进而发生寻址错误，比如上 图就是 0x1664 地址访问失败。在Unidbg日志的第三行我们看到， libc++_shared.so 加载失败，即库缺失报错。 我们的目标SO依赖了 libc++_shared.so ，这个库是C++的支持库，但不在Unidbg默认支持的SO里。 我们要在apk的lib里把它拷贝出来。<br />在加载so文件前添加这两行，目标so依赖的其他so文件要在其前面加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">DalvikModule</span> <span class="variable">dm_shared</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">dm_shared.callJNI_OnLoad(emulator);</span><br></pre></td></tr></table></figure>
<p>再次运行就一切正常了<br />下面就到了今天的主角——native_makeUrl函数，Unidbg中先call它，参数很长，构造的很随意，因为只是学习用途。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.douyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ArrayObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DouYu</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DouYu</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build();</span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;</span>));</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm_shared</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        dm_shared.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        emulator.traceCode(module.base, module.base + module.size);</span></span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMakeUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// args list</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// arg1 env</span></span><br><span class="line">        list.add(vm.getJNIEnv());</span><br><span class="line">        <span class="comment">// arg2 jobject/jclazz 一般用不到，直接填0</span></span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="literal">null</span>);</span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;aid&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;client_sys&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;time&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input3_1);</span><br><span class="line">        vm.addLocalObject(input3_2);</span><br><span class="line">        vm.addLocalObject(input3_3);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input3_1, input3_2, input3_3)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;android1&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;android&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;1673232015&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input4_1);</span><br><span class="line">        vm.addLocalObject(input4_2);</span><br><span class="line">        vm.addLocalObject(input4_3);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input4_1, input4_2, input4_3)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input5_1);</span><br><span class="line">        vm.addLocalObject(input5_2);</span><br><span class="line">        vm.addLocalObject(input5_3);</span><br><span class="line">        vm.addLocalObject(input5_4);</span><br><span class="line">        vm.addLocalObject(input5_5);</span><br><span class="line">        vm.addLocalObject(input5_6);</span><br><span class="line">        vm.addLocalObject(input5_7);</span><br><span class="line">        vm.addLocalObject(input5_8);</span><br><span class="line">        vm.addLocalObject(input5_9);</span><br><span class="line">        vm.addLocalObject(input5_10);</span><br><span class="line">        vm.addLocalObject(input5_11);</span><br><span class="line">        vm.addLocalObject(input5_12);</span><br><span class="line">        vm.addLocalObject(input5_13);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input5_1, input5_2, input5_3,input5_4, input5_5, input5_6,input5_7, input5_8, input5_9,input5_10, input5_11, input5_12,input5_13)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input6_1);</span><br><span class="line">        vm.addLocalObject(input6_2);</span><br><span class="line">        vm.addLocalObject(input6_3);</span><br><span class="line">        vm.addLocalObject(input6_4);</span><br><span class="line">        vm.addLocalObject(input6_5);</span><br><span class="line">        vm.addLocalObject(input6_6);</span><br><span class="line">        vm.addLocalObject(input6_7);</span><br><span class="line">        vm.addLocalObject(input6_8);</span><br><span class="line">        vm.addLocalObject(input6_9);</span><br><span class="line">        vm.addLocalObject(input6_10);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input6_1, input6_2, input6_3,input6_4, input6_5, input6_6,input6_7, input6_8, input6_9,input6_10)));</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 参数准备完成</span></span><br><span class="line">        <span class="comment">// call function</span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x2f91</span>, list.toArray());</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DouYu</span> <span class="variable">douYu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DouYu</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">makeUrl</span> <span class="operator">=</span> douYu.getMakeUrl();</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+ makeUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 运行后直接出结果  <br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/02.webp"
                     
                ><br /> 可以发现，结果由四部分组成，前三个参数是我们 input4 传进去的内容，所以需要分析的只有auth的 来源。 多次运行会发现，auth 的值，恒为 3c179e17e8e9b06d7b18c68555b92220，长度 32 位。  </p>
<h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p> 首先，确认函数执行流的汇编长度，如果行数过多上千万甚至上亿行，就只能放弃。如果几十万行，那就还可以看看。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traceLength</span><span class="params">()</span> &#123;</span><br><span class="line">    emulator.getBackend().hook_add_new(<span class="keyword">new</span> <span class="title class_">CodeHook</span>() &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook</span><span class="params">(Backend backend, <span class="type">long</span> address, <span class="type">int</span> size, Object user)</span> &#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAttach</span><span class="params">(UnHook unHook)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">module</span>.base, <span class="keyword">module</span>.size + <span class="keyword">module</span>.base, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/03.webp"
                     
                ><br />运行计数总共九十一万行， 不超过100w行的执行流，要么程序没怎么混淆，要么逻辑不 太复杂。两者任意一个复杂度高一些，都不会只有100w行汇编以内。  <br />使用findcrypt插件再确认一下样本大概使用了哪些加密算法<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/04.webp"
                     
                ><br /> SO中至少存在 AES&#x2F;BASE64，至于我们的函数中用了什么？这得具体分析，毕竟Findcrypt只是一个静态 的、加密特征匹配插件。 </p>
<ul>
<li>目标函数可能用了AES&#x2F;Base64，说“可能”是上述算法可能用于SO中其他函数而非目标函数。 </li>
<li>目标函数可能用了AES和Base64之外的其他加密算法，因为FIndCrypt提供了静态的、有限的分析，很容易遗漏。</li>
</ul>
<p>使用Unidbg处理算法，一般而言，自下而上分析更省时省力，这得益于Unidbg两方面的能力 </p>
<ul>
<li><strong><font color="red">强大方便的内存读写监控</font></strong></br> </li>
<li><strong><font color="red">无地址随机化</font></strong></li>
</ul>
<p>这让我们可以逆流而上，自结果推来源，分析算法和数据块十分轻松。 <br />重新看运行结果图<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/05.webp"
                     
                ><br />运算结果来自于NewStringUTF，这个JString从哪里来的？    <br /> 日志提示调用处在0x336f，这个地址实际上是LR（返回地址），所以NewStringUTF函数调用是 0x336f 的上一条 0x336C。  <br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/06.webp"
                     
                ><br><br /> 在 0x336C 下断点  <br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/07.webp"
                     
                ><br><br /> 回顾一下NewStringUTF 这个JNI方法，数据来源就是参数二字符数组  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstring <span class="title function_">NewStringUTF</span><span class="params">(JNIEnv *env, const <span class="type">char</span> *bytes)</span>;</span><br></pre></td></tr></table></figure>
<p> 数据从地址0x402d20a0开始，我们要监控auth&#x3D;后面的数据，即从0x402d20a0+len(aid&#x3D;android1&amp;client_sys&#x3D;android&amp;time&#x3D;1638452332&amp;auth&#x3D;)开始，数一下auth的32个字节所处的地址，监控对它的写入。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">emulator.traceWrite(<span class="number">0x401D20D5</span>, <span class="number">0x401D20D5</span>+<span class="number">0x20</span>);</span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/08.webp"
                     
                ><br><br /> 从下往上寻找对内存最晚的操作，可以发现，这32个字节的赋值发生在libc里。一般数据在libc里赋值， 指的是调用了libc中memcpy等库函数做拷贝、转换、比较等处理，而非数据生成的第一现场。  <br /> 把Unidbg的libc.so拷贝一份出来，扔到IDA里。搜索0x17d3a，看具体是哪个函数。我们发现 是在strcat函数里，即做字符串拼接。  <br />hook strcat 函数，进行追踪  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *strcat(<span class="type">char</span> *dest, const <span class="type">char</span> *src)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><font color="red">dest – 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串。</strong></font> </li>
<li><strong><font color="red">src – 指向要追加的字符串，该字符串不会覆盖目标字符串。</strong></font></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookStrCat</span><span class="params">()</span>&#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;strcat&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">r1</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;strcat:&quot;</span>+ r1);</span><br><span class="line">            System.out.println(r1.getString(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 运行，可以发现结果的四个字段就是strcat 逐步拼接的结果  <br /><br> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/09.webp"
                     
                ><br> <br /> 对来源 0xbffff69b 做traceWrite，千万记得加后缀L。  <br /> 发现依然来自于libc，这不是好事，说明我们还没到第一现场。  <br /><br> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/10.webp"
                     
                ><br> <br />从IDA跳到地址 0x176dc，看到是在_memcpy_base函数里</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall <span class="title function_">_memcpy_base</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> *a2, unsigned <span class="type">int</span> a3, <span class="type">int</span> a4, <span class="type">int</span> a5,</span></span><br><span class="line"><span class="params"><span class="type">int</span> a6)</span></span><br></pre></td></tr></table></figure>
<p> 它应该是memcpy函数内部的子函数，我们Hook一下memcpy，其原型如下  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> *memcpy(<span class="keyword">void</span> *str1, const <span class="keyword">void</span> *str2, size_t n)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><font color="red">str1 – 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。</strong></font> </li>
<li><strong><font color="red">str2 – 指向要复制的数据源，类型强制转换为 void* 指针。</strong></font> </li>
<li><strong><font color="red">n – 要被复制的字节数。</strong></font></li>
</ul>
<p> 我们打印str2，长度为n  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookMemcpy</span><span class="params">()</span>&#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;memcpy&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">r1</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> emulator.getContext().getIntArg(<span class="number">2</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;memcpy&quot;</span>);</span><br><span class="line">            Inspector.inspect(r1.getByteArray(<span class="number">0</span>, length), r1.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 运行发现，程序逻辑上逐两个字节进行拷贝  <br /><br> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/11.webp"
                     
                ><br> <br />140处调用。看的头疼，所以我尝试性的搜索了下3c179e17e8e9b06d7b18c68555b92220，期待某次 memcpy可以看到它，那么我们就能找到它的产生之处了。  <br /><br> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/12.webp"
                     
                ><br> <br /> 打印memcpy的str2时，我采用了Unidbg的Inspect API，它会在 打印内存块时，顺带打印数据的MD5值，这个设计主要是为了比较两个内存块是否全然等值，但这里却 帮到了我们。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0000</span>: <span class="number">61</span> <span class="number">69</span> <span class="number">64</span> <span class="number">3D</span> <span class="number">61</span> 6E <span class="number">64</span> <span class="number">72</span> <span class="number">6F</span> <span class="number">69</span> <span class="number">64</span> <span class="number">31</span> <span class="number">26</span> <span class="number">63</span> 6C <span class="number">69</span>    aid=android1&amp;cli</span><br><span class="line"><span class="number">0010</span>: <span class="number">65</span> 6E <span class="number">74</span> <span class="number">5F</span> <span class="number">73</span> <span class="number">79</span> <span class="number">73</span> <span class="number">3D</span> <span class="number">61</span> 6E <span class="number">64</span> <span class="number">72</span> <span class="number">6F</span> <span class="number">69</span> <span class="number">64</span> <span class="number">26</span>    ent_sys=android&amp;</span><br><span class="line"><span class="number">0020</span>: <span class="number">74</span> <span class="number">69</span> <span class="number">6D</span> <span class="number">65</span> <span class="number">3D</span> <span class="number">31</span> <span class="number">36</span> <span class="number">37</span> <span class="number">33</span> <span class="number">32</span> <span class="number">33</span> <span class="number">32</span> <span class="number">30</span> <span class="number">31</span> <span class="number">35</span> <span class="number">76</span>    time=1673232015v</span><br><span class="line"><span class="number">0030</span>: <span class="number">71</span> <span class="number">34</span> <span class="number">37</span> <span class="number">48</span> <span class="number">64</span> <span class="number">39</span> 4A <span class="number">55</span> <span class="number">67</span> <span class="number">66</span> <span class="number">44</span> <span class="number">43</span> <span class="number">79</span> <span class="number">74</span> <span class="number">43</span>       q47Hd9JUgfDCytC</span><br></pre></td></tr></table></figure>
<p>vq47Hd9JUgfDCytC 这十个字节是未知的，其余三个字段是传进来的，我们结合上面的MD5会产生一种 明悟，这不就是加盐MD5吗？传进来的参数拼接后加上”vq47Hd9JUgfDCytC“，MD5后传出去。 <br />那么现在问题就变成了，vq47Hd9JUgfDCytC是哪里来的？  <br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/13.webp"
                     
                ><br><br /> 对0xbffff500L 做traceWrite  <br /></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/14.webp"
                     
                ><br><br /> ida打开libmakeurl.so，看一下来源0x8a88，十六个字节都来自这里  <br /></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/15.webp"
                     
                ><br><br /> 前面我们用过Findcrypt，有看到RijnDael_AES_LONG_inv_45FC4，它自动将0x8a9e所位于的函数中，一个数组标记为AES的S逆盒。这告诉我们，十六字节的生成处是AES的运算逻辑。换而言之，这十六字节大概率是AES加密或解密的输出。  <br />可是，样本使用了Ollvm，比如0x8a9e这一行，就是Ollvm中的指令替换。 <br />我们先不要陷入函数的细节里，因为如果是标准AES，那根本不用 分析加密程序的内部，自然也就不用考虑这些混淆了。  <br /> 0x8a88 位于 sub_8228 函数内，Hook sub_8228，顺利断下  <br /> 观察两个参数  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_8228</span><span class="params">(unsigned __int64 a1, _QWORD *a2)</span></span><br></pre></td></tr></table></figure>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/16.webp"
                     
                ><br><br /> 参数2像是buffer，存放加密结果。blr用于在函数返回处下断点，然后c继续跑，在函数运行结束后再次 查看参数2指向的内存。  <br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/17.webp"
                     
                ></p>
<p>可以发现确实是我们要分析的十六个字节。至于参数1是什么意思，硬看似乎看不出来。 <br />因此可以判断，sub_8228生成了我们要分析的十六个字节，而且它像AES的执行逻辑。 <br />AES 加密还是解密？什么工作模式？明文是什么？Key是什么？一概不知。我们得到sub_8228上层去看看。 <br />重新运行程序，bt 打印调用栈  <br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/18.webp"
                     
                ><br />跳到 0x08ba7 看一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_8B3C</span><span class="params">(const <span class="type">char</span> *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  signed <span class="type">int</span> i; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r1</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r1</span></span><br><span class="line">  signed <span class="type">int</span> v10; <span class="comment">// [sp+4h] [bp-144h]</span></span><br><span class="line">  signed <span class="type">int</span> v11; <span class="comment">// [sp+Ch] [bp-13Ch]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">280</span>]; <span class="comment">// [sp+10h] [bp-138h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [sp+128h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  v10 = (strlen(a1) + <span class="number">15</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">  sub_72BC(v12, a2, <span class="number">128</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i = v11 + <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="number">1590846758</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = v7 &amp; <span class="number">0x7FFFFFFF</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v8 != <span class="number">1590846758</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v11 = i;</span><br><span class="line">      v7 = <span class="number">131555431</span>;</span><br><span class="line">      <span class="keyword">if</span> ( i &lt; v10 )</span><br><span class="line">        v7 = <span class="number">1574041125</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v8 == <span class="number">131555431</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v8 != <span class="number">1574041125</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_8228(v12, a3 + <span class="number">16</span> * v11, &amp;a1[<span class="number">16</span> * v11]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _stack_chk_guard - v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 首先我们知道，sub_8228是AES的具体运算程序，刚才Hook确认了这一点。而密钥编排一般发生在具 体运算前面，即早于sub_8228。整个函数体内，就只有sub_72BC 一个函数了，那也可能在sub_8B3C外层。更重要的线索是它的参数3，128。AES 存在128&#x2F;192&#x2F;256 三种密钥的规格，这里就是在指定AES的规格，并生成对应的轮密钥。 char v12[280]; v12是一个较大的数组，用于存放生成轮密钥的结果。<br />那么可以大胆猜测sub_8B3C的a2就是十六字节长的AES-128密钥。进而参数1就是 十六字节的输入。  <br />对 sub_8B3C 进行断点查看参数<br /><br> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/19.webp"
                     
                ><br> <br />密钥是30292827262524232221000000000000，暂时不知道是加密还是解密，结果是 767134374864394a5567664443797443（vq47Hd9JUgfDCytC）<br />看看加密过程对的上吗<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/20.webp"
                     
                ><br> <br />因为aes会对明文进行填充，它会自动按照PKCS7约定，再次填充一个分组的长度，输出也是两个分组的结果。  这里结果a7488462036f15054005472d6f487c67才是对的，后面是填充后的分组加密而来的可以不用管<br />跟我们上面的 sub_8B3C 的参数一是一致的，说明 vq47Hd9JUgfDCytC 是由明文a7488462036f15054005472d6f487c67，密钥30292827262524232221000000000000解密而来的</p>
<p>我们这里做一个讨论，如何从一个小的线索点，分析出AES的全貌。<br />以 sub_72BC(v12, a2, 128); 为例，我们猜测它是密钥编排函数，那么如何快速验证呢？ <br />我Hook 入参时a2指向的十六字节，以及函数结束后v13指向的176字节（因为是AES-128，所以轮密钥 是4*44）。  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook72bc</span><span class="params">()</span>&#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x72bc</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        UnidbgPointer v12;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">registerContext</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">a2</span> <span class="operator">=</span> registerContext.getPointerArg(<span class="number">1</span>);</span><br><span class="line">            v12 = registerContext.getPointerArg(<span class="number">0</span>);</span><br><span class="line">            Inspector.inspect(a2.getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;key &quot;</span> + a2.toString());</span><br><span class="line">            <span class="comment">// 函数结束对v12hook查看</span></span><br><span class="line">            emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                    Inspector.inspect(v12.getByteArray(<span class="number">0</span>, <span class="number">176</span>), <span class="string">&quot;Round Key &quot;</span>+v12.toString());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[<span class="number">17</span>:<span class="number">01</span>:<span class="number">35</span> <span class="number">327</span>]key unidbg@<span class="number">0xbffff3d8</span>, md5=037ff8eefc91404afaed9fa22e282e3f, hex=<span class="number">30292827262524232221000000000000</span></span><br><span class="line">size: <span class="number">16</span></span><br><span class="line"><span class="number">0000</span>: <span class="number">30</span> <span class="number">29</span> <span class="number">28</span> <span class="number">27</span> <span class="number">26</span> <span class="number">25</span> <span class="number">24</span> <span class="number">23</span> <span class="number">22</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="number">0</span>)(<span class="string">&#x27;&amp;%$#&quot;!......</span></span><br><span class="line"><span class="string">^-----------------------------------------------------------------------------^</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;-----------------------------------------------------------------------------&lt;</span></span><br><span class="line"><span class="string">[17:01:35 336]Round Key unidbg@0xbffff290, md5=159aaceb29acbcbd8d87b091ce103546, hex=0a00000098f2ffbf30292827262524232221000000000000524a4b44746f6f67564e6f67564e6f677fe2cef50b8da1925dc3cef50b8da19226d081de2d5d204c709eeeb97b134f2b535470ff7e0950b30e97be0a7584f1211cf58d6262fcddd16c6b63db19ef92fae3baa0b681467d67ed2d1ebcf4c28c4686defa090798876eeab599d21e771594f387d87bf41f5f151eaac6c700ddd35329e13518ddfe6a0dc354accac3897f99b833db3665cdb13b</span></span><br><span class="line"><span class="string">size: 176</span></span><br><span class="line"><span class="string">0000: 0A 00 00 00 98 F2 FF BF 30 29 28 27 26 25 24 23    ........0)(&#x27;</span>&amp;%$#</span><br><span class="line"><span class="number">0010</span>: <span class="number">22</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">52</span> 4A 4B <span class="number">44</span> <span class="number">74</span> <span class="number">6F</span> <span class="number">6F</span> <span class="number">67</span>    <span class="string">&quot;!......RJKDtoog</span></span><br><span class="line"><span class="string">0020: 56 4E 6F 67 56 4E 6F 67 7F E2 CE F5 0B 8D A1 92    VNogVNog........</span></span><br><span class="line"><span class="string">0030: 5D C3 CE F5 0B 8D A1 92 26 D0 81 DE 2D 5D 20 4C    ].......&amp;...-] L</span></span><br><span class="line"><span class="string">0040: 70 9E EE B9 7B 13 4F 2B 53 54 70 FF 7E 09 50 B3    p...&#123;.O+STp.~.P.</span></span><br><span class="line"><span class="string">0050: 0E 97 BE 0A 75 84 F1 21 1C F5 8D 62 62 FC DD D1    ....u..!...bb...</span></span><br><span class="line"><span class="string">0060: 6C 6B 63 DB 19 EF 92 FA E3 BA A0 B6 81 46 7D 67    lkc..........F&#125;g</span></span><br><span class="line"><span class="string">0070: ED 2D 1E BC F4 C2 8C 46 86 DE FA 09 07 98 87 6E    .-.....F.......n</span></span><br><span class="line"><span class="string">0080: EA B5 99 D2 1E 77 15 94 F3 87 D8 7B F4 1F 5F 15    .....w.....&#123;.._.</span></span><br><span class="line"><span class="string">0090: 1E AA C6 C7 00 DD D3 53 29 E1 35 18 DD FE 6A 0D    .......S).5...j.</span></span><br><span class="line"><span class="string">00A0: C3 54 AC CA C3 89 7F 99 B8 33 DB 36 65 CD B1 3B    .T.......3.6e..;</span></span><br><span class="line"><span class="string">^-----------------------------------------------------------------------------^</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>

<p> RoundKey 的结果像是一个结构体，两个int组成，第一个是0x0000000a，即代表了AES-128的十轮运 算，第二个是指针，值为0xbffff298，是v12往后偏移八个字节。  <br /> 我们不妨修改一下hook72bc，看一下0xbffff298具体打印什么  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook72bc</span><span class="params">()</span>&#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x72bc</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        UnidbgPointer v12;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">registerContext</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">a2</span> <span class="operator">=</span> registerContext.getPointerArg(<span class="number">1</span>);</span><br><span class="line">            v12 = registerContext.getPointerArg(<span class="number">0</span>);</span><br><span class="line">            Inspector.inspect(a2.getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;key &quot;</span> + a2.toString());</span><br><span class="line">            <span class="comment">// 函数结束对v12hook查看</span></span><br><span class="line">            emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                    <span class="comment">//Inspector.inspect(v12.getByteArray(0, 176), &quot;Round Key &quot;+v12.toString());</span></span><br><span class="line">                    Inspector.inspect(v12.getByteArray(<span class="number">8</span>, <span class="number">176</span>), <span class="string">&quot;Round Key &quot;</span>+v12.toString());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 结果如下  </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">17</span>:<span class="number">20</span>:<span class="number">19</span> <span class="number">949</span>]key unidbg@<span class="number">0xbffff3d8</span>, md5=037ff8eefc91404afaed9fa22e282e3f, hex=<span class="number">30292827262524232221000000000000</span></span><br><span class="line">size: <span class="number">16</span></span><br><span class="line"><span class="number">0000</span>: <span class="number">30</span> <span class="number">29</span> <span class="number">28</span> <span class="number">27</span> <span class="number">26</span> <span class="number">25</span> <span class="number">24</span> <span class="number">23</span> <span class="number">22</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="number">0</span>)(<span class="string">&#x27;&amp;%$#&quot;!......</span></span><br><span class="line"><span class="string">^-----------------------------------------------------------------------------^</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;-----------------------------------------------------------------------------&lt;</span></span><br><span class="line"><span class="string">[17:20:19 957]Round Key unidbg@0xbffff290, md5=1a32868f8f948e426e209b5995588178, hex=30292827262524232221000000000000524a4b44746f6f67564e6f67564e6f677fe2cef50b8da1925dc3cef50b8da19226d081de2d5d204c709eeeb97b134f2b535470ff7e0950b30e97be0a7584f1211cf58d6262fcddd16c6b63db19ef92fae3baa0b681467d67ed2d1ebcf4c28c4686defa090798876eeab599d21e771594f387d87bf41f5f151eaac6c700ddd35329e13518ddfe6a0dc354accac3897f99b833db3665cdb13ba6991df165106268</span></span><br><span class="line"><span class="string">size: 176</span></span><br><span class="line"><span class="string">0000: 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00    0)(&#x27;</span>&amp;%$#<span class="string">&quot;!......</span></span><br><span class="line"><span class="string">0010: 52 4A 4B 44 74 6F 6F 67 56 4E 6F 67 56 4E 6F 67    RJKDtoogVNogVNog</span></span><br><span class="line"><span class="string">0020: 7F E2 CE F5 0B 8D A1 92 5D C3 CE F5 0B 8D A1 92    ........].......</span></span><br><span class="line"><span class="string">0030: 26 D0 81 DE 2D 5D 20 4C 70 9E EE B9 7B 13 4F 2B    &amp;...-] Lp...&#123;.O+</span></span><br><span class="line"><span class="string">0040: 53 54 70 FF 7E 09 50 B3 0E 97 BE 0A 75 84 F1 21    STp.~.P.....u..!</span></span><br><span class="line"><span class="string">0050: 1C F5 8D 62 62 FC DD D1 6C 6B 63 DB 19 EF 92 FA    ...bb...lkc.....</span></span><br><span class="line"><span class="string">0060: E3 BA A0 B6 81 46 7D 67 ED 2D 1E BC F4 C2 8C 46    .....F&#125;g.-.....F</span></span><br><span class="line"><span class="string">0070: 86 DE FA 09 07 98 87 6E EA B5 99 D2 1E 77 15 94    .......n.....w..</span></span><br><span class="line"><span class="string">0080: F3 87 D8 7B F4 1F 5F 15 1E AA C6 C7 00 DD D3 53    ...&#123;.._........S</span></span><br><span class="line"><span class="string">0090: 29 E1 35 18 DD FE 6A 0D C3 54 AC CA C3 89 7F 99    ).5...j..T......</span></span><br><span class="line"><span class="string">00A0: B8 33 DB 36 65 CD B1 3B A6 99 1D F1 65 10 62 68    .3.6e..;....e.bh</span></span><br><span class="line"><span class="string">^-----------------------------------------------------------------------------^</span></span><br></pre></td></tr></table></figure>

<p> 首先我们就可以确定，这就是密钥编排的结果，这是我们根据AES-128的编排性质推断出来的。 </p>
<ul>
<li>轮密钥的前十六个字节就是主密钥，完全符合 </li>
<li>十六个字节后面的编排规则，以行为单位看的话，前四个字节较为复杂，后十二字节只是简单异 或。如下验证</li>
</ul>
<p>密钥 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00<br />按照密钥的编排 4个字节一组<br />W0 30 29 28 27<br />W1 26 25 24 23<br />W2 22 21 00 00<br />W3 00 00 00 00<br />根据结果我们也可以看出<br />W4 &#x3D; 52 4A 4B 44<br />W5 &#x3D; 74 6F 6F 67<br />验证可以得到 W4 xor W1 &#x3D; W5</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\Users\zsk&gt;python</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.10</span> (tags/v3<span class="number">.8</span><span class="number">.10</span>:3d8993a, May  <span class="number">3</span> <span class="number">2021</span>, <span class="number">11</span>:<span class="number">48</span>:<span class="number">03</span>) [MSC v<span class="number">.1928</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; hex(<span class="number">0x524A4B44</span>^<span class="number">0x26252423</span>)</span><br><span class="line"><span class="string">&#x27;0x746f6f67&#x27;</span></span><br></pre></td></tr></table></figure>
<p> 确实符合编排的规律。  <br /><br><strong><font color="red">因此可以认定 72bc 就是密钥编排函数，并确定了密钥。怎么仅从这个线索，推出输入呢？</strong></font></p>
<ul>
<li><strong><font color="red">如果是加密，那么对K0做traceRead可以定位到算法的输入，对K10做traceRead，其运算结果就是算法 的输出。</strong></font></li>
<li><strong><font color="red">如果是解密，那么对K0做traceRead可以定位算法的输出，对K10做traceRead，其运算结果就是算法的 输入。</strong></font></li>
</ul>
<p><strong><font color="red">换个情况，如果只知道算法的输入，该怎么确认密钥呢？</strong></font></p>
<ul>
<li><strong><font color="red">如果是加密，那么对算法的输入做traceRead，可以定位到K0，在AES-128上意味着主密钥；</strong></font></li>
<li><strong><font color="red">如果是CBC 模式，那么定位到IV。 如果是解密，那么对算法的输入做traceRead，可以定位到K10，使用stark 逆推主密钥。</strong></font></li>
</ul>
<p><strong><font color="red">再换个情况，如果只知道算法的输出，该怎么确认其他要素？</strong></font></p>
<ul>
<li><strong><font color="red">如果是加密过程，对算法的输出做traceWrite，运算的双方中有一方是K10。</strong></font> </li>
<li><strong><font color="red">如果是解密过程，对算法的输出做traceWrite，运算的双方中有一方是K0。</strong></font></li>
</ul>
<p>下面考虑Key和密文哪里来的 在sub_8B3C打断点，查看堆栈，发现都位于 sub_A298  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_A298</span><span class="params">(<span class="type">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> v1; <span class="comment">// r9</span></span><br><span class="line">    <span class="type">int</span> v3; <span class="comment">// r11</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// r0</span></span><br><span class="line">    <span class="type">int</span> v6; <span class="comment">// [sp+0h] [bp-78h]</span></span><br><span class="line">    <span class="type">int</span> v7; <span class="comment">// [sp+4h] [bp-74h]</span></span><br><span class="line">    _QWORD v8[<span class="number">2</span>]; <span class="comment">// [sp+8h] [bp-70h] BYREF</span></span><br><span class="line">    <span class="type">char</span> v9[<span class="number">20</span>]; <span class="comment">// [sp+18h] [bp-60h] BYREF</span></span><br><span class="line">    _QWORD v10[<span class="number">2</span>]; <span class="comment">// [sp+30h] [bp-48h] BYREF</span></span><br><span class="line">    <span class="type">char</span> v11[<span class="number">20</span>]; <span class="comment">// [sp+40h] [bp-38h] BYREF</span></span><br><span class="line">    <span class="type">int</span> v12; <span class="comment">// [sp+58h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    v10[<span class="number">0</span>] = unk_45688;</span><br><span class="line">    v10[<span class="number">1</span>] = unk_45690;</span><br><span class="line">    <span class="built_in">strcpy</span>(v11, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">    v8[<span class="number">0</span>] = unk_45CF0;</span><br><span class="line">    v8[<span class="number">1</span>] = unk_45CF8;</span><br><span class="line">    <span class="built_in">strcpy</span>(v9, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(a1, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1282341844</span>; ; i = <span class="number">1282341844</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> ( i != <span class="number">967467364</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( i == <span class="number">1282341844</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        v6 = v3;</span><br><span class="line">                        i = <span class="number">1618205161</span>;</span><br><span class="line">                        <span class="keyword">if</span> ( v3 &lt; <span class="number">32</span> )</span><br><span class="line">                            i = <span class="number">-1314423687</span>;</span><br><span class="line">                        <span class="keyword">if</span> ( i &lt;= <span class="number">967467363</span> )</span><br><span class="line">                            <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        v1 = <span class="number">0</span>;</span><br><span class="line">                        LABEL_14:</span><br><span class="line">                        i = <span class="number">967467364</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            v7 = v1;</span><br><span class="line">            i = <span class="number">-688078044</span>;</span><br><span class="line">            <span class="keyword">if</span> ( v1 &lt; <span class="number">32</span> )</span><br><span class="line">                i = <span class="number">-1194610101</span>;</span><br><span class="line">            LABEL_15:</span><br><span class="line">            <span class="keyword">if</span> ( i != <span class="number">-1314423687</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            *((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; <span class="number">0x8E</span> | ~*((_BYTE *)v8 + v6) &amp; <span class="number">0x71</span>) ^ <span class="number">0x51</span>;</span><br><span class="line">            v3 = v6 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">-1194610101</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        *((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; <span class="number">0xE9</span> | *((_BYTE *)v10 + v7) &amp; <span class="number">0x16</span>) ^ <span class="number">0xC9</span>;</span><br><span class="line">        v1 = v7 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sub_8B3C</span>((<span class="type">const</span> <span class="type">char</span> *)v10, (<span class="type">int</span>)v8, (<span class="type">int</span>)a1);</span><br><span class="line">    <span class="keyword">return</span> _stack_chk_guard - v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 其中v10 ， 前八个字节来自0x45688，后八个字节来自0x45690。因为这两个八字节是紧连着的，所以可 以一并看。  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">.rodata:<span class="number">00045688</span> <span class="number">87</span>                            unk_45688 DCB <span class="number">0x87</span>                      ; DATA XREF: sub_A298+E↑o</span><br><span class="line">.rodata:<span class="number">00045688</span>                                                                       ; sub_A298+<span class="number">18</span>↑o</span><br><span class="line">.rodata:<span class="number">00045688</span>                                                                       ; .text:off_A424↑o</span><br><span class="line">.rodata:<span class="number">00045689</span> <span class="number">68</span>                            DCB <span class="number">0x68</span> ; h</span><br><span class="line">.rodata:<span class="number">0004568</span>A A4                            DCB <span class="number">0xA4</span></span><br><span class="line">.rodata:<span class="number">0004568B</span> <span class="number">42</span>                            DCB <span class="number">0x42</span> ; B</span><br><span class="line">.rodata:<span class="number">0004568</span>C <span class="number">23</span>                            DCB <span class="number">0x23</span> ; #</span><br><span class="line">.rodata:<span class="number">0004568</span>D <span class="number">4F</span>                            DCB <span class="number">0x4F</span> ; O</span><br><span class="line">.rodata:<span class="number">0004568</span>E <span class="number">35</span>                            DCB <span class="number">0x35</span> ; <span class="number">5</span></span><br><span class="line">.rodata:<span class="number">0004568F</span> <span class="number">25</span>                            DCB <span class="number">0x25</span> ; %</span><br><span class="line">.rodata:<span class="number">00045690</span> <span class="number">60</span>                            unk_45690 DCB <span class="number">0x60</span> ; `</span><br><span class="line">.rodata:<span class="number">00045691</span> <span class="number">25</span>                            DCB <span class="number">0x25</span> ; %</span><br><span class="line">.rodata:<span class="number">00045692</span> <span class="number">67</span>                            DCB <span class="number">0x67</span> ; g</span><br><span class="line">.rodata:<span class="number">00045693</span> <span class="number">0</span>D                            DCB  <span class="number">0xD</span></span><br><span class="line">.rodata:<span class="number">00045694</span> <span class="number">4F</span>                            DCB <span class="number">0x4F</span> ; O</span><br><span class="line">.rodata:<span class="number">00045695</span> <span class="number">68</span>                            DCB <span class="number">0x68</span> ; h</span><br><span class="line">.rodata:<span class="number">00045696</span> <span class="number">5</span>C                            DCB <span class="number">0x5C</span> ; \</span><br><span class="line">.rodata:<span class="number">00045697</span> <span class="number">47</span>                            DCB <span class="number">0x47</span> ; G</span><br></pre></td></tr></table></figure>

<p> 在逐字节经过如下处理后成为我们的密文  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; <span class="number">0xE9</span> | *((_BYTE *)v10 + v7) &amp; <span class="number">0x16</span>) ^ <span class="number">0xC9</span>;</span><br></pre></td></tr></table></figure>
<p> <br />而密钥也一样，前八个字节来自0x45CF0，后八个字节来自0x45CF8。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">.rodata:<span class="number">00045</span>CF0 <span class="number">10</span>                            unk_45CF0 DCB <span class="number">0x10</span>                      ; DATA XREF: sub_A298+<span class="number">24</span>↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A298+<span class="number">2</span>C↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_A428↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A430+<span class="number">50</span>↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A430+<span class="number">5</span>E↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_A5D0↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A5D8+<span class="number">4</span>E↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A5D8+<span class="number">5</span>C↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_A770↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A778+<span class="number">4</span>E↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A778+<span class="number">5</span>C↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_A910↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A918+<span class="number">50</span>↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A918+<span class="number">5</span>E↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_AAA4↑o ...</span><br><span class="line">.rodata:<span class="number">00045</span>CF1 <span class="number">09</span>                            DCB    <span class="number">9</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF2 <span class="number">08</span>                            DCB    <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF3 <span class="number">07</span>                            DCB    <span class="number">7</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF4 <span class="number">06</span>                            DCB    <span class="number">6</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF5 <span class="number">05</span>                            DCB    <span class="number">5</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF6 <span class="number">04</span>                            DCB    <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF7 <span class="number">03</span>                            DCB    <span class="number">3</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF8 <span class="number">02</span>                            unk_45CF8 DCB    <span class="number">2</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF9 <span class="number">01</span>                            DCB    <span class="number">1</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFA <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFB <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFC <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFD <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFE <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFF <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br></pre></td></tr></table></figure>
<p> 它经过了如下逐字节的处理  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">*((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; <span class="number">0x8E</span> | ~*((_BYTE *)v8 + v6) &amp; <span class="number">0x71</span>) ^ <span class="number">0x51</span>;</span><br></pre></td></tr></table></figure>
<p> 看起来有些云里雾里的，这是Ollvm中指令替换的功劳。  <br /> 真正功能上而言，只是SO中硬编码的两串十六进制字节，在异或0x20后，就成为了密文和Key，在运行 时AES解密出明文，作为MD5的盐。  <br /> 我们以Key为例，它的完整流程如下（下面均为十六进制字节）  <br /> 首先，Key是 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00，开发者不希望硬编码在SO里，所以先 将它异或0x20，在SO中硬编码即 10 09 08 07 06 05 04 03 02 01 20 20 20 20 20 20。  <br /> 然后在使用时，将这么一串异或0x20，因为异或两次等于自身，所以Key重新变成30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00，正常参与运算。  </p>
<p> 那么下面这两种运算，其功能都等价于单字节异或0x20，怎么变成这个样子了呢？  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; <span class="number">0xE9</span> | *((_BYTE *)v10 + v7) &amp; <span class="number">0x16</span>) ^ <span class="number">0xC9</span>;</span><br><span class="line">*((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; <span class="number">0x8E</span> | ~*((_BYTE *)v8 + v6) &amp; <span class="number">0x71</span>) ^ <span class="number">0x51</span>;</span><br></pre></td></tr></table></figure>
<p> <br />这就是指令替换的目的，将简单的加减乘除、异或、与等运算，替换成等价但更复杂的指令序列。  <br />演示一下这个过程 <br />S &#x3D; A ^ B <br />异或0不影响结果 <br />S &#x3D; A ^ B ^ 0 <br />0可以展开成C ^ C <br />S &#x3D; A ^ B ^ C ^ C <br />做一下简单的分配 <br />S &#x3D; (A^C)^(B^C) <br />两数异或时可以等价替换如下，可以自行验证。  <br /> </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a ^ b =&gt; (~a &amp; b) | (a &amp; ~b) </span><br></pre></td></tr></table></figure>
<p>那么</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S = (~A &amp; C) | (A &amp; ~C) ^ (~B &amp; C) | (B &amp; ~C)</span><br></pre></td></tr></table></figure>
<br />  
 回到 S = A ^ B，假设A 就是我们的待处理数据，B是0x20，即将数据和0x20异或，我们再选择C为0xE9 
 
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S = (~A &amp; 0xE9) | (A &amp; ~0xE9) ^ (~0x20 &amp; 0xE9) | (0x20 &amp; ~0xE9)</span><br></pre></td></tr></table></figure>
<p> <br /> 0xE9 在取反后即 0x16，而异或的另外一方，因为不存在未知数，编译器会直接优化计算出结果  <br /></p>
<p> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230109/21.webp"
                     
                ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">S = (~A &amp; 0xE9) | (A &amp; 0xE9) ^ 0xC9</span><br></pre></td></tr></table></figure>
<p>  <br /> A 代入 *((_BYTE *)v10 + v7) 不就是 <br /></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; 0xE9) | (*((_BYTE *)v10 + v7) &amp; 0xE9) ^ 0xC9</span><br></pre></td></tr></table></figure>
<p>A 代入 *((_BYTE *)v8 + v6) ，C 为0x71时，就是 另一个式子。 <br />本质上，两者都是逐字节与0x20异或。  </p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.douyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.Backend;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.CodeHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.UnHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.context.RegisterContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.debugger.BreakPointCallback;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ArrayObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.utils.Inspector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DouYu</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DouYu</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build();</span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;</span>));</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm_shared</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        dm_shared.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// NewStringUTF断点</span></span><br><span class="line">        <span class="comment">//emulator.attach().addBreakPoint(module.base + 0x336c);</span></span><br><span class="line">        <span class="comment">// 监控地址写入, auth的32个字节所处的地址， 401d20a0 + len(aid=android1&amp;client_sys=android&amp;time=1638452332&amp;auth=)</span></span><br><span class="line">        <span class="comment">//emulator.traceWrite(0x401D20D5, 0x401D20D5+0x20);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监控strcat函数，看结果是在哪里写入的</span></span><br><span class="line">        <span class="comment">//emulator.traceWrite(0xbffff69bL, 0xbffff69bL+0x20);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对 vq47Hd9JUgfDCytC 做traceWrite</span></span><br><span class="line">        <span class="comment">//emulator.traceWrite(0xbffff500L, 0xbffff69bL+0x20);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对 vq47Hd9JUgfDCytC 出现的位置函数 sub_8228(unsigned __int64 a1, _QWORD *a2) 进行断点</span></span><br><span class="line">        <span class="comment">//emulator.attach().addBreakPoint(module.base + 0x8228);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对调用生成 vq47Hd9JUgfDCytC 函数的上一级断点</span></span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x8B3C</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMakeUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// args list</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// arg1 env</span></span><br><span class="line">        list.add(vm.getJNIEnv());</span><br><span class="line">        <span class="comment">// arg2 jobject/jclazz 一般用不到，直接填0</span></span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="literal">null</span>);</span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;aid&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;client_sys&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;time&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input3_1);</span><br><span class="line">        vm.addLocalObject(input3_2);</span><br><span class="line">        vm.addLocalObject(input3_3);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input3_1, input3_2, input3_3)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;android1&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;android&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;1673232015&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input4_1);</span><br><span class="line">        vm.addLocalObject(input4_2);</span><br><span class="line">        vm.addLocalObject(input4_3);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input4_1, input4_2, input4_3)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input5_1);</span><br><span class="line">        vm.addLocalObject(input5_2);</span><br><span class="line">        vm.addLocalObject(input5_3);</span><br><span class="line">        vm.addLocalObject(input5_4);</span><br><span class="line">        vm.addLocalObject(input5_5);</span><br><span class="line">        vm.addLocalObject(input5_6);</span><br><span class="line">        vm.addLocalObject(input5_7);</span><br><span class="line">        vm.addLocalObject(input5_8);</span><br><span class="line">        vm.addLocalObject(input5_9);</span><br><span class="line">        vm.addLocalObject(input5_10);</span><br><span class="line">        vm.addLocalObject(input5_11);</span><br><span class="line">        vm.addLocalObject(input5_12);</span><br><span class="line">        vm.addLocalObject(input5_13);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input5_1, input5_2, input5_3,input5_4, input5_5, input5_6,input5_7, input5_8, input5_9,input5_10, input5_11, input5_12,input5_13)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input6_1);</span><br><span class="line">        vm.addLocalObject(input6_2);</span><br><span class="line">        vm.addLocalObject(input6_3);</span><br><span class="line">        vm.addLocalObject(input6_4);</span><br><span class="line">        vm.addLocalObject(input6_5);</span><br><span class="line">        vm.addLocalObject(input6_6);</span><br><span class="line">        vm.addLocalObject(input6_7);</span><br><span class="line">        vm.addLocalObject(input6_8);</span><br><span class="line">        vm.addLocalObject(input6_9);</span><br><span class="line">        vm.addLocalObject(input6_10);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input6_1, input6_2, input6_3,input6_4, input6_5, input6_6,input6_7, input6_8, input6_9,input6_10)));</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 参数准备完成</span></span><br><span class="line">        <span class="comment">// call function</span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x2f91</span>, list.toArray());</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traceLength</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator.getBackend().hook_add_new(<span class="keyword">new</span> <span class="title class_">CodeHook</span>() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook</span><span class="params">(Backend backend, <span class="type">long</span> address, <span class="type">int</span> size, Object user)</span> &#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">                System.out.println(count);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAttach</span><span class="params">(UnHook unHook)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">module</span>.base, <span class="keyword">module</span>.size + <span class="keyword">module</span>.base, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookStrCat</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;strcat&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                <span class="type">UnidbgPointer</span> <span class="variable">r1</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">1</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;strcat:&quot;</span>+ r1);</span><br><span class="line">                System.out.println(r1.getString(<span class="number">0</span>));</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookMemcpy</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;memcpy&quot;</span>, <span class="literal">true</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                <span class="type">UnidbgPointer</span> <span class="variable">r1</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">1</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> emulator.getContext().getIntArg(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;memcpy&quot;</span>);</span><br><span class="line">                Inspector.inspect(r1.getByteArray(<span class="number">0</span>, length), r1.toString());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook72bc</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x72bc</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">            UnidbgPointer v12;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                <span class="type">RegisterContext</span> <span class="variable">registerContext</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">                <span class="type">UnidbgPointer</span> <span class="variable">a2</span> <span class="operator">=</span> registerContext.getPointerArg(<span class="number">1</span>);</span><br><span class="line">                v12 = registerContext.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                Inspector.inspect(a2.getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;key &quot;</span> + a2.toString());</span><br><span class="line">                <span class="comment">// 函数结束对v12hook查看</span></span><br><span class="line">                emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                        <span class="comment">//Inspector.inspect(v12.getByteArray(0, 176), &quot;Round Key &quot;+v12.toString());</span></span><br><span class="line">                        Inspector.inspect(v12.getByteArray(<span class="number">8</span>, <span class="number">176</span>), <span class="string">&quot;Round Key &quot;</span>+v12.toString());</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DouYu</span> <span class="variable">douYu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DouYu</span>();</span><br><span class="line">        <span class="comment">//douYu.traceLength();</span></span><br><span class="line">        <span class="comment">//douYu.hookStrCat();</span></span><br><span class="line">        <span class="comment">//douYu.hookMemcpy();</span></span><br><span class="line">        <span class="comment">//douYu.hook72bc();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">makeUrl</span> <span class="operator">=</span> douYu.getMakeUrl();</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+ makeUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>安卓逆向</tag>
        <tag>Unidbg</tag>
      </tags>
  </entry>
  <entry>
    <title>某音web端X-Bogus 逆向分析算法</title>
    <url>/2023/03/08/%E6%9F%90%E9%9F%B3web%E7%AB%AFX-Bogus-%E9%80%86%E5%90%91%E5%88%86%E6%9E%90%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>目标：视频评论接口X-Bogus参数<br />接口地址：’aHR0cHM6Ly93d3cuZG91eWluLmNvbS9hd2VtZS92MS93ZWIvY29tbWVudC9saXN0Lw&#x3D;&#x3D;’</p>
<h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>该接口是xhr请求，使用xhr下断点，当url中包含X-Bogus时就断下<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/01.png"
                      alt="image.png"
                ><br />看调用栈上一层是在webmssdk.es5.js文件里，其实这个文件就是生成参数的，通过查阅知道这就是jsvmp，而且整体上也做了混淆。<br />这里使用v_jstools插件进行变量的压缩计算。<br />还原后使用浏览器的 Overrides 替换功能将 webmssdk.es5.js替换掉。<br />往上跟栈也就是跟到上图的堆栈b那里，X-Bogus参数是在this.openArgs[1]里面，直接打一个条件断点在b那<br /><code>this.openArgs[1].indexOf(&quot;X-Bogus&quot;) != -1</code><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/02.png"
                      alt="image.png"
                ><br />翻页评论重新触发请求，如图所示，到这里就已经生成了X-Bogus<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/03.png"
                      alt="image.png"
                ><br />如图所示，$函数这里就已经生成了X-Bogus，this.openArgs[1]就是携带了xb的完整url<br />仔细观察这段代码，有很多三元表达式，当 M 的值为 15 时，就会走到这段逻辑，执行完函数后赋值给K，K 的值生成之后，有一个 O[S] &#x3D; K 的操作。<br />再往上看代码，O初始化的地方<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/04.png"
                      alt="image.png"
                ><br />O 是一个数组，单步调试的话会发现代码会一直走这个 if-else 的逻辑，几乎每一步都有 O 数组的参与，不断往里面增删改查值，for 循环里面的 j 值，决定着后续 if 语句的走向，这里也就是插桩的关键所在。</p>
<h3 id="插桩分析"><a href="#插桩分析" class="headerlink" title="插桩分析"></a>插桩分析</h3><p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/05.png"
                      alt="image.png"
                ><br />大的 for 循环和 if-else 逻辑有两个地方，为了保证最后的日志更加详细完整，在这两个地方都下个日志断点（右键 Add logpoint），断点内容为：<br />“位置 1”, “索引j”, j, “索引A”, A, “值O: “, JSON.stringify(O, function(key, value) {if (value &#x3D;&#x3D; window) {return undefined} return value})<br />“位置 2”, “索引j”, j, “索引A”, A, “值O: “, JSON.stringify(O, function(key, value) {if (value &#x3D;&#x3D; window) {return undefined} return value})<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/06.png"
                      alt="image.png"
                ></p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/07.png"
                      alt="image.png"
                ><br />插桩输出 O 的时候为什么要写这么长一串呢？首先 JSON.stringify() 方法的作用是将 JavaScript 值转换为 JSON 字符串，基础语法是 JSON.stringify(value[, replacer [, space]])，如果不将其转换成 JSON，那么 O 的值，输出可能是这样的：[empty, Array(26), 1, Array(0)]，你看不到 Array 数组里面具体的值，该方法有个可选参数 replacer，如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值，在函数中可以对成员进行处理，最后返回处理后的值，如果此函数返回 undefined，则排除该成员。<br />下好日志断点后，注意前面我们下的 XHR 断点不要取消，然后进行翻页出发请求，控制台就开始打印日志了，如果 XHR 断点取消了，日志就会一直打印直到卡死。日志输出完毕后，右键Save as保存下来到本地进行分析<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/08.png"
                      alt="image.png"
                ><br />顺便记录下当前已经生成的xb，<code>DFSzswVupV0ANJPItap8URXAIQ5f</code><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/09.png"
                      alt="image.png"
                ><br />xb由DFSzswVupV0ANJPItap8URXAIQ5f这28位字符组成的，现在看是怎么来的，打开刚才的日志，在里面搜索，找到第一次出现的地方。<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/10.png"
                      alt="image.png"
                ><br />可以看到是逐个生成的，在9047行，xb后面的元素是null，到了下一行9048就生了下一个字符f，那么在这两步之间就是f的生成逻辑，这个时候我们看第9047行的日志断点是 位置 2 索引j 16 索引A 716，那么我们回到原网页，在位置2，下一个条件断点（右键 Add conditional breakpoint），当 j&#x3D;&#x3D;16 &amp;&amp; A&#x3D;&#x3D;716 &amp;&amp; O[7] &#x3D;&#x3D; 21 时就断下。之所以要加 O[7] 是因为 索引j 16 索引A 716 的位置有很多，多加个限制条件就可以缩小范围，当然有可能加了多个条件仍然有多个位置都满足，就需要自己筛选了，通过断点断下的时候看看控制台前面输出的日志来判断是不是我们想要的位置。<br />继续翻页，断下之后开始单步跟，来到下图所示的地方：<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/11.png"
                      alt="image.png"
                ><br />到这里之后，就不要下一步了，再下一步有可能整个语句就执行完毕了，其中的细节你看不到，所以这里我们在控制台挨个输入看看：<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/12.png"
                      alt="image.png"
                ><br />可以看到实际上的逻辑就是返回指定位置的字符，w 的值就是 O[5]，m 的值就是 O[4]，经过多次调试发现 m 的值是固定的，P 就是 charAt() 方法。我们再看看我们本地的日志，O[5] 的值为 [16]，charAt() 取值出来就是f，逻辑完全正确。<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/13.png"
                      alt="image.png"
                ><br />现在我们还需要知道这个16是怎么来的，继续往上看，找到16第一次出现的地方，在第9046行，那么我们就要使其在上一步断下，也就是第9045行，如下图所示：<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/14.png"
                      alt="image.png"
                ><br />第9045行的索引信息为 位置 2 索引j 47 索引A 708，同样的下条件断点观察怎么生成的：<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/15.png"
                      alt="image.png"
                ><br />可以看到逻辑是 O[5] &amp; O[6]，再把值赋给O[5]，再看我们之前本地的日志<br />O[5] &#x3D; 5809808<br />O[6] &#x3D; 63<br />5809808 &amp; 63 &#x3D; 16，逻辑正确，16就是这么来的。接下来又开始找 5809808 和 63 是怎么生成的，先看看63是怎么来的，同样在生成的上一步，也就是第9044行下个条件断点，这行的索引为 位置 2 索引j 72 索引A 704。<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/16.png"
                      alt="image.png"
                ><br /> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/17.png"
                      alt="image.png"
                ><br />可以看到 63 是直接 F[A] 生成的，F 是一个大数组，A 就是索引为 704，F 这个大数组怎么来的先不用管，经过几次测试发现是固定的。<br />5809808后面再说，再逐个找倒数的字符串的生成，记录下来<br />xb &#x3D; “DFSzswVupV0ANJPItap8URXAIQ5f”<br />m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”<br />第28字符串 &#x3D;&#x3D;&gt; f&#x3D;m[16]，16&#x3D;5809808&amp;63，63&#x3D;F[704]<br />第27字符串 &#x3D;&#x3D;&gt; 5&#x3D;m[26]，26&#x3D;1664&gt;&gt;6，6&#x3D;F[646]<br />第26字符串 &#x3D;&#x3D;&gt; Q&#x3D;m[10]，10&#x3D;40960&gt;&gt;12，12&#x3D;F[580]<br />第25字符串 &#x3D;&#x3D;&gt; I&#x3D;m[22]，22&#x3D;5767168&gt;&gt;18，18&#x3D;F[510]<br />第24字符串 &#x3D;&#x3D;&gt; A&#x3D;m[30]，30&#x3D;7701854&amp;63，63&#x3D;F[704]<br />第23字符串 &#x3D;&#x3D;&gt; X&#x3D;m[21]，21&#x3D;1344&gt;&gt;6，6&#x3D;F[646]<br />第22字符串 &#x3D;&#x3D;&gt; R&#x3D;m[24]，24&#x3D;98304&gt;&gt;12，12&#x3D;F[580]<br />第21字符串 &#x3D;&#x3D;&gt; U&#x3D;m[29]，29&#x3D;7602176&gt;&gt;18，18&#x3D;F[510]<br />第20字符串 &#x3D;&#x3D;&gt; 8&#x3D;m[12]，12&#x3D;16232652&amp;63，63&#x3D;F[704]</p>
<p>把xb &#x3D; DFSz swVu pV0A NJPI tap8 URXA IQ5f，将其看成每四个为一组，从上面的规律可以得到，每4个字符串为一组，每组的字符生成流程都是一样的</p>
<p>就差大数字是怎么来的，搜本地日志5809808第一次出现的位置，x直接定位到第一次出现的地方第8979行的上一行第8978行，位置 2 索引j 48 索引A 454<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/18.png"
                      alt="image.png"
                ><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/19.png"
                      alt="image.png"
                ><br />可以看出大数字是O[2]|O[3]计算而来，那我们本地5809808就是5809664|144</p>
<p>找到144第一次出现的地方，同样的操作<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/20.png"
                      alt="image.png"
                ><br />114是由O[4].charCodeAt(O[5])生成，O[4]&#x3D;’\x02ÿ-%.,2\x10^\x8F\x1AÖ÷°cÛ\x85^X¦?’，O[5]&#x3D;20<br />经过几次测试知道乱码字符串是跟url有关，生成过程后面说。用我们本地的O[4]试一下<br />“\u0002ÿ-%.,\u000F^\u001AÖ÷°Ìu^X¦”.charCodeAt(20)<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/25.png"
                      alt="image.png"
                ><br />经过后面8位字符的跟进后，记录了一下规则<br />xb &#x3D; “DFSzswVupV0ANJPItap8URXAIQ5f”<br />m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”<br /></p>
<ul>
<li><p>第28字符串f：	<br>  f&#x3D;m[16]<br>  16&#x3D;5809808&amp;63<br /> 63&#x3D;F[704]<br />	5809808&#x3D;5809664|144<br />	144&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(20)<br />	5809664&#x3D;5767168|42496<br /> 42496&#x3D;166&lt;&lt;8<br />	8&#x3D;F[386]<br />	166&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(19)<br />	5767168&#x3D;88&lt;&lt;16<br />	16&#x3D;F[320]<br />	88&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(18)<br /></p>
</li>
<li><p>第27字符串5：<br />	5&#x3D;m[26]<br />	26&#x3D;1664&gt;&gt;6<br />	6&#x3D;F[646]<br />	1664&#x3D;5809808&amp;4032<br />	4032&#x3D;F[638]<br /></p>
</li>
<li><p>第26字符串Q：<br />	Q&#x3D;m[10]<br />	10&#x3D;40960&gt;&gt;12<br />	12&#x3D;F[580]<br />	40960&#x3D;5809808&amp;258048<br />	258048&#x3D;F[568]<br /></p>
</li>
<li><p>第25字符串I：<br />	I&#x3D;m[22]<br />	22&#x3D;5767168&gt;&gt;18<br />	18&#x3D;F[510]<br />	5767168&#x3D;5809808&amp;16515072<br />	16515072&#x3D;F[498]</p>
</li>
<li><p>第24字符串A:<br />	A&#x3D;m[30]<br />	30&#x3D;7701854&amp;63<br />	63&#x3D;F[704]<br />	7701854&#x3D;7701760|94<br />	94&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(17)<br />	7701760&#x3D;7667712|34048<br />	34048&#x3D;133&lt;&lt;8<br />	8&#x3D;F[386]<br />	133&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(16)<br />	7667712&#x3D;117&lt;&lt;16<br />	16&#x3D;F[320]<br />	117&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(15)<br /></p>
</li>
<li><p>第23字符串X：<br />	X&#x3D;m[21]<br />	21&#x3D;1344&gt;&gt;6<br />	6&#x3D;F[646]<br />	1344&#x3D;7701854&amp;4032<br />	4032&#x3D;F[638]<br /></p>
</li>
<li><p>第22字符串R：<br />	R&#x3D;m[24]<br />	24&#x3D;98304&gt;&gt;12<br />	12&#x3D;F[580]<br />	98304&#x3D;7701854&amp;258048<br />	258048&#x3D;F[568]<br /></p>
</li>
<li><p>第21字符串U：<br />	U&#x3D;m[29]<br />	29&#x3D;7602176&gt;&gt;18<br />	18&#x3D;F[510]<br />	7602176&#x3D;7701854&amp;16515072<br />	16515072&#x3D;F[498]</p>
</li>
</ul>
<p>正序整理了一下，大致的流程就是<br />m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”<br />xb &#x3D; “DFSz swVu pV0A NJPI tap8 URXA IQ5f”<br /><strong>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;第6组 URXA &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong><br />“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(15) &#x3D; 117<br />F[320] &#x3D; 16<br />117 &lt;&lt; 16 &#x3D; 7667712</p>
<p>“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(16) &#x3D; 133<br />F[386] &#x3D; 8<br />133 &lt;&lt; 8 &#x3D; 34048<br />7667712|34048 &#x3D; 7701760</p>
<p>“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(17) &#x3D; 94<br />7701760 | 94 &#x3D; 7701854</p>
<p>F[498] &#x3D; 16515072<br />7701854 &amp; 16515072 &#x3D; 7602176<br />F[510] &#x3D; 18<br />7602176 &gt;&gt; 18 &#x3D; 29<br />m.charAt(29) &#x3D; ‘U’</p>
<p>F[568] &#x3D; 258048<br />7701854 &amp; 258048 &#x3D; 98304<br />F[580] &#x3D; 12<br />98304 &gt;&gt; 12 &#x3D; 24<br />m.charAt(24) &#x3D; ‘R’<br />	<br />F[638] &#x3D; 4032<br />7701854 &amp; 4032 &#x3D; 1344<br />F[646] &#x3D; 6<br />1344 &gt;&gt; 6 &#x3D; 21<br />m.charAt(21) &#x3D; ‘X’</p>
<p>F[704] &#x3D; 63<br />7701854 &amp; 63 &#x3D; 30<br />m.charAt(30) &#x3D; ‘A’<br />	<br /><strong>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;第7组 IQ5f &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong><br />“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(18) &#x3D; 88<br />F[320] &#x3D; 16<br />88 &lt;&lt; 16 &#x3D; 5767168</p>
<p>“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(19) &#x3D; 166<br />F[386] &#x3D; 8<br />166 &lt;&lt; 8 &#x3D; 42496<br />5767168 | 42496 &#x3D; 5809664</p>
<p>“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(20) &#x3D; 144<br />5809664 | 144 &#x3D; 5809808</p>
<p>F[498] &#x3D; 16515072<br />5809808 &amp; 16515072 &#x3D; 5767168<br />F[510] &#x3D; 18<br />5767168 &gt;&gt; 18 &#x3D; 22<br />m.charAt(22) &#x3D; ‘I’</p>
<p>F[568] &#x3D; 258048<br />5809808 &amp; 258048 &#x3D; 40960<br />F[580] &#x3D; 12<br />40960 &gt;&gt; 12 &#x3D; 10<br />m.charAt(10) &#x3D; ‘Q’</p>
<p>F[638] &#x3D; 4032<br />5809808 &amp; 4032 &#x3D; 1664<br />F[646] &#x3D; 6<br />1664 &gt;&gt; 6 &#x3D; 26<br />m.charAt(26) &#x3D; ‘5’</p>
<p>F[704] &#x3D; 63<br />5809808 &amp; 63 &#x3D; 16<br />m.charAt(16) &#x3D; ‘f’</p>
<p>将流程对比一下就可以发现，每个步骤 F 里面的取值都是一样的，这个可以直接写死，不同之处就在于最开始的 charCodeAt() 操作，也就是返回乱码字符串指定位置字符的 Unicode 编码，第7组依次是 18、19、20，第6组依次是15、16、17，以此类推，第1组刚好是0、1、2，如下图所示：<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/21.png"
                      alt="image.png"
                ><br />每一组的逻辑都是一样的，依次生成七组字符串，最后拼接成完整的 X-Bogus。</p>
<h3 id="乱码字符串生成逻辑"><a href="#乱码字符串生成逻辑" class="headerlink" title="乱码字符串生成逻辑"></a>乱码字符串生成逻辑</h3><p>该样本对应的param_url &#x3D; “device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;aweme_id&#x3D;7071984856741186853&amp;cursor&#x3D;0&amp;count&#x3D;20&amp;item_type&#x3D;0&amp;insert_ids&#x3D;&amp;rcFT&#x3D;&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;2048&amp;screen_height&#x3D;1152&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Chrome&amp;browser_version&#x3D;110.0.0.0&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;110.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;20&amp;device_memory&#x3D;8&amp;platform&#x3D;PC&amp;downlink&#x3D;3.85&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100&amp;webid&#x3D;7206219799877142077&amp;msToken&#x3D;Z9-0y9elP0-Obz51QiLXg2qpd-dyJHammHH_0hNY48UFC3RxAx8bjxf2Hpmxmm52cmDQVfBP0lf1UwzvAtbOcW6RGQuSY_1W-plCkw-lP-OkNH00Ion2DohnZlsySAc&#x3D;”<br />在进行下一步之前，我们要注意两点：</p>
<ul>
<li>文章演示有些变量前后不对应，因为每次插桩的值都是会变的，看流程就行了，流程是正确的；</li>
<li>我们日志输出是经过 JSON.stringify 处理了的，有些步骤是向某个函数传入乱码字符串进行处理，你会发现处理后的结果和日志不一致，这是正常的。</li>
</ul>
<p>乱码字符串的生成相对来说稍微复杂一点，但思路仍然一样，这里就不一一截图展示了，直接用日志描述一下关键步骤，注意以下日志是正向的步骤，就不逆着推了，建议自己先逆着把流程走一走，再来看这个步骤就看得懂了。<br /></p>
<p><strong>Step1</strong>：首先对 URL 后面的参数，也就是 Query String Parameters 进行两次 MD5、两次转 Uint8Array 处理，最后得到的 Uint8Array 对象在后面的步骤中用得到，步骤如下：<br />位置 1 索引j 4 索引A 134：将 URL 后面的参数进行 MD5 加密得到字符串<br />位置 1 索引j 16 索引A 494：将上一步的字符串转换为 Uint8Array 对象<br />位置 1 索引j 4 索引A 134：将上一步的 Uint8Array 对象进行 MD5 加密，得到字符串<br />位置 1 索引j 16 索引A 504：将上一步的字符串转换为 Uint8Array 对象</p>
<p>上述步骤中，我们将最终得到的结果命名为 uint8Array，md5字符串转uint8Array，跟进到相应位置把函数抠出来即可<br /></p>
<p><strong>Step2</strong>：生成两个大数，一个是时间戳，我们称之为 fixedString1，另一个调用某个方法生成，我们称之为 fixedString2。<br />fixedString1<br />位置 1 索引j 43 索引A 1032：1677985818608 &#x2F; 1000 &#x3D; 1677985818.608<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/22.png"
                      alt="image.png"
                ><br />fixedString2<br />位置 1 索引j 16 索引A 1060：P.apply(null, []) &#x3D; 1489154074<br />上述步骤中，P 对应以下方法，缺失的方法自行补齐：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x17dd8c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _0x2fc47d || (_0xeb6638.<span class="property">perf</span> ? -<span class="number">1</span> : _0x2fc47d = <span class="title function_">_0x5bc542</span>(<span class="number">3735928559</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (a) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_0x5bc542</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b, c = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    c.<span class="property">width</span> = <span class="number">48</span>, c.<span class="property">height</span> = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">var</span> e = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    e.<span class="property">font</span> = <span class="string">&quot;14px serif&quot;</span>, e.<span class="title function_">fillText</span>(<span class="string">&quot;龘ฑภ경&quot;</span>, <span class="number">2</span>, <span class="number">12</span>), e.<span class="property">shadowBlur</span> = <span class="number">2</span>, e.<span class="property">showOffsetX</span> = <span class="number">1</span>, </span><br><span class="line">    e.<span class="property">showColor</span> = <span class="string">&quot;lime&quot;</span>, e.<span class="title function_">arc</span>(<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>), e.<span class="title function_">stroke</span>(), b = c.<span class="title function_">toDataURL</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = <span class="number">0</span>; d &lt; <span class="number">32</span>; d++) &#123;</span><br><span class="line">        a = <span class="number">65599</span> * a + b.<span class="title function_">charCodeAt</span>(a % b.<span class="property">length</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Step3</strong>：先后生成两个数组，我们称之为 array1、array2，array2 就是由 array1 的元素位置变换后得来的，严格来讲，array1 不是一个完整的数组，而是一个个数字，这一点可以在日志中体现出来，为了方便我们就直接将其视为一个数组，两个数组都有19个元素，步骤如下：<br />array1[0] 至 array1[3] 为定值  [64,0.00390625,1,8]<br />array1[4]<br />位置 1 索引j 25 索引A 1172：uint8Array[14] &#x3D; 127<br />array1[5]<br />位置 1 索引j 25 索引A 1196：uint8Array[15] &#x3D; 208</p>
<p>array1[6]、array1[7] 可以直接写死<br /></p>
<p>array1[8]、array1[9]  与 ua 有关, 可以直接写死<br /></p>
<p>array1[10]<br />位置 1 索引j 52 索引A 1316：fixedString1 &gt;&gt; 24 &#x3D; 100<br />位置 1 索引j 47 索引A 1324：100 &amp; 255 &#x3D; 100</p>
<p>array1[11]<br />位置 1 索引j 52 索引A 1348：fixedString1 &gt;&gt; 16 &#x3D; 25604<br />位置 1 索引j 47 索引A 1356：25604 &amp; 255 &#x3D; 4</p>
<p>array1[12]<br />位置 1 索引j 52 索引A 1380：fixedString1 &gt;&gt; 8 &#x3D; 6554632<br />位置 1 索引j 47 索引A 1388：6554632 &amp; 255 &#x3D; 8</p>
<p>array1[13]<br />位置 1 索引j 52 索引A 1412：fixedString1 &gt;&gt; 0 &#x3D; 1677985818<br />位置 1 索引j 47 索引A 1420：1677985818 &amp; 255 &#x3D; 26</p>
<p>array1[14]<br />位置 1 索引j 52 索引A 1444：fixedString2 &gt;&gt; 24 &#x3D; 88<br />位置 1 索引j 47 索引A 1452 ：88 &amp; 255 &#x3D; 88</p>
<p>array1[15]<br />位置 1 索引j 52 索引A 1476：fixedString2 &gt;&gt; 16 &#x3D; 22722<br />位置 1 索引j 47 索引A 1484：22722 &amp; 255 &#x3D; 194</p>
<p>array1[16]<br />位置 1 索引j 52 索引A 1508：fixedString2 &gt;&gt; 8 &#x3D; 5817008<br />位置 1 索引j 47 索引A 1516：5817008 &amp; 255 &#x3D; 176</p>
<p>array1[17]<br />位置 1 索引j 52 索引A 1540：fixedString2 &gt;&gt; 0 &#x3D; 1489154074<br />位置 1 索引j 47 索引A 1548：1489154074 &amp; 255 &#x3D; 26</p>
<p>array1[18]<br />前面18个字符全部进行亦或<br />位置 1 索引j 49 索引A 1736：array1.reduce(function(a, b) { return a ^ b; }); &#x3D; 96</p>
<p>array1 完整值如下<br />位置 1 索引j 16 索引A 1932：<br />array1 &#x3D; [64,0.00390625,1,8,127,208,69,63,35,157,100,4,8,26,88,194,176,26,96]<br />array2 由 array1 元素交换位置而来：<br />array2 &#x3D; [array1[0], array1[2], array1[4], array1[6], array1[8], array1[10], array1[12], array1[14], array1[16], array1[18], array1[1], array1[3], array1[5], array1[7], array1[9], array1[11], array1[13], array1[15], array1[17]]<br />array2 完整值如下<br />array2 &#x3D; [64, 1, 127, 69, 35, 100, 8, 88, 176, 96, 0.00390625, 8, 208, 63, 157, 4, 26, 194, 26]</p>
<p><strong>Step4</strong>：将 Step3 得到的 array2 经过转换得到乱码字符串，步骤如下：<br />位置 1 索引j 16 索引A 1932：<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/23.png"
                      alt="image.png"
                ><br />_0x398111.apply(null, array2) &#x3D; ‘@\u0000\u0001\bÐE?#d\u0004\b\u001aXÂ°\u001a&#96;’</p>
<!-- ```javascript
function _0x398111(a, b, c, e, d, t, f, r, n, o, i, _, x, u, s, l, v, h, p) {
    var y = new Uint8Array(19);
    return y[0] = a, y[1] = i, y[2] = b, y[3] = _, y[4] = c, y[5] = x, y[6] = e, y[7] = u, 
    y[8] = d, y[9] = s, y[10] = t, y[11] = l, y[12] = f, y[13] = v, y[14] = r, y[15] = h, 
    y[16] = n, y[17] = p, y[18] = o, String.fromCharCode.apply(null, y);
}
``` -->

<p>位置 1 索引j 16 索引A 1986：<br />_0x25788b.apply(null, [‘ÿ’,‘@\x00\x01\bïwE?#\x9Dd\x074\x89XÂ°\x1Aû’]) &#x3D; ‘-%.,\u000f^\u001aÖ÷°Ìu�^X¦’</p>
<!-- ```javascript
function _0x25788b(a, b) {
    for (var c, e = [], d = 0, t = "", f = 0; f < 256; f++) {
        e[f] = f;
    }
    for (var r = 0; r < 256; r++) {
        d = (d + e[r] + a.charCodeAt(r % a.length)) % 256, c = e[r], e[r] = e[d], e[d] = c;
    }
    var n = 0;
    d = 0;
    for (var o = 0; o < b.length; o++) {
        d = (d + e[n = (n + 1) % 256]) % 256, c = e[n], e[n] = e[d], e[d] = c, t += String.fromCharCode(b.charCodeAt(o) ^ e[(e[n] + e[d]) % 256]);
    }
    return t;
}
``` -->
<p> <br />位置 1 索引j 16 索引A 2038：<br />_0x94582.apply(null, [2,255,’-%.,\u000f^\u001aÖ÷°Ìu�^X¦’]) &#x3D; “\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu�^X¦”</p>
<!-- ```javascript
function _0x86cb82(a) {
    return String.fromCharCode(a);
}
function _0x94582(a, b, c) {
    return _0x86cb82(a) + _0x86cb82(b) + c;
}
``` -->
<p>至此乱码字符串的流程就结束了。<br>以上缺的函数根据相应的索引根据到代码位置抠出来即可</p>
<p>测试成功，我这里把生成方式封装成api接口<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230308/24.png"
                      alt="image.png"
                ></p>
]]></content>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌Pixel3刷机以及magisk的安装</title>
    <url>/2023/02/11/%E8%B0%B7%E6%AD%8CPixel3%E5%88%B7%E6%9C%BA%E4%BB%A5%E5%8F%8Amagisk%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h3 id="一、刷机"><a href="#一、刷机" class="headerlink" title="一、刷机"></a>一、刷机</h3><p>1、首先找到对应自己手机的镜像版本，进行下载，<a class="link"   href="https://developers.google.cn/android/images#blueline" >https://developers.google.cn/android/images#blueline<i class="fas fa-external-link-alt"></i></a><br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/01.webp"
                      alt="image.png"
                ><br />新建个文件夹shuaji，下载完解压到刷机里面<br /><br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/02.webp"
                      alt="image.png"
                ><br />2、下载刷机工具platform-tools.zip，<a class="link"   href="https://developer.android.com/studio/releases/platform-tools?hl=zh-cn" >https://developer.android.com/studio/releases/platform-tools?hl=zh-cn<i class="fas fa-external-link-alt"></i></a>，根据操作系统下载，链接需要翻墙才能打开，我也把下载链接放出来，可以直接下载<br><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/03.webp"
                      alt="image.png"
                ></p>
<ul>
<li><a class="link"   href="https://dl.google.com/android/repository/platform-tools_r33.0.3-windows.zip" >下载适用于 Windows 的 SDK Platform-Tools<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://dl.google.com/android/repository/platform-tools_r33.0.3-darwin.zip" >下载适用于 Mac 的 SDK Platform-Tools<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://dl.google.com/android/repository/platform-tools_r33.0.3-linux.zip" >下载适用于 Linux 的 SDK Platform-Tools<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>下载完，同样解压到shuaji目录下<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/04.webp"
                      alt="image.png"
                ><br />3、手机关机，关机后 长按住 关键键+音量减键（或者开机界面执行adb reboot bootloader），手机进入bootloader<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/05.webp"
                     
                ><br />4、winfows运行shuaji目录下flash-all.bat，mac则需要运行flash-all.sh文件，整个过程会自动处理完成，伴随着重启几次。<br /> <img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/06.webp"
                      alt="image.png"
                ><br />过了几分钟后，到这里就刷机成功了<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/07.webp"
                     
                ><br />5.修改手机配置<br />（1）点击English，换成简体中文，然后点击开始，能跳过的则跳过。<br />（2）点击设置，点击关于手机，多次点击版本号，开启开发者模式，在开发者模式开启USB调式。<br />（3）在设置修改手机日期时间为当前日期时间（不弄可能没网）</p>
<h3 id="二、解锁root"><a href="#二、解锁root" class="headerlink" title="二、解锁root"></a>二、解锁root</h3><p>下载Magisk，<a class="link"   href="https://github.com/topjohnwu/Magisk/tags" >https://github.com/topjohnwu/Magisk/tags<i class="fas fa-external-link-alt"></i></a>，我这下载的是v24.0的<br /><br>1.usb连接电脑后，使用命令 adb install Magisk-v24.0.apk 进行安装。<br /><br>2.解压上面shuaji文件目录下的image-xxxx.zip，把boot.img 通过adb push到手机&#x2F;sdcard&#x2F;download&#x2F;<br />命令：adb push boot.img &#x2F;sdcard&#x2F;download&#x2F;<br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/08.webp"
                      alt="image.png"
                ><br /><br>3.手机上如下操作magisk，生成 magisk_patched-24000_xxxxx.img 文件<img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/09.webp"
                      alt="image.png"
                ><br /><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/10.webp"
                      alt="image.png"
                ><br />选择刚才上传的boot.img 然后点击开始，接着会在目录下生成带magisk的文件<img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20230211/11.webp"
                      alt="image.png"
                ><br />4.把生成的magisk_patched-24000_xxxxx.img 通过 adb pull 到电脑fastboot.exe所在的目录，也就是shuaji目录，命令如下 adb pull &#x2F;sdcard&#x2F;Download&#x2F;magisk_patched-24000_qJQvu.img .<br />5. 执行 adb reboot bootloader 手机进入bootloader<br />6. 执行命令 fastboot flash boot magisk_patched-24000_qJQvu.img 刷magisk fastboot reboot<br />7. 手机点击电源键让手机正常启动，magisk安装成功，root完成</p>
]]></content>
      <tags>
        <tag>刷机</tag>
      </tags>
  </entry>
  <entry>
    <title>检测vpn抓包</title>
    <url>/2021/09/06/%E6%A3%80%E6%B5%8Bvpn%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<p>这是肉师傅知识星球的一道检测vpn抓包的练习题，当检测到开启vpn就会闪退<br>软件我放在网盘了，需要的自取<br>链接：<a class="link"   href="https://pan.baidu.com/s/1h4QkrLyDlz8Wb1XylzYLWA" >https://pan.baidu.com/s/1h4QkrLyDlz8Wb1XylzYLWA<i class="fas fa-external-link-alt"></i></a><br>提取码：jjrh<br>既然已经知道是检测vpn了，通过查询资料以下4个类跟网络相关</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210906/01.webp"
                     
                ></p>
<p>通过百度知道java.net.NetworkInterface.getName()是检测vpn的api，用objection来hook查看一下</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210906/02.webp"
                     
                ></p>
<p>发现当开关vpn时，会检测到tun0的网卡，可以用来监测是否开启vpn。<br>那用frida来hook修改tun0的返回值看看能不能绕过</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210906/03.webp"
                     
                ></p>
<p>还是会闪退，怀疑检测点不止一个<br>NetworkCapabilities 也有检测vpn的<br>用objection hook一下 android.net.ConnectivityManager.getNetworkCapabilities</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210906/04.webp"
                     
                ></p>
<p>通过查看文档知道，返回null即可</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210906/05.webp"
                     
                ></p>
<p>用frida hook返回为null，还是闪退，用jadx打开查看报错位置</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210906/06.webp"
                     
                ></p>
<p>这里返回null的话就无法调用后面的hasTransport方法，直接hook hasTransport修改返回值为false绕过</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210906/07.webp"
                     
                ></p>
<p>开启vpn后app不闪退了，成功绕过</p>
<p><img  
                     lazyload
                     alt="image"
                     data-src="https://github.com/Zskkk/blog-images/raw/master/20210906/08.webp"
                     
                ></p>
<p>完整代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.net.NetworkInterface&quot;</span>).<span class="property">getName</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> string_class = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line">            <span class="keyword">var</span> gname = <span class="variable language_">this</span>.<span class="title function_">getName</span>();</span><br><span class="line">            <span class="keyword">if</span>(gname == string_class.$new(<span class="string">&quot;tun0&quot;</span>))&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;find ===&gt; &quot;</span>, gname);</span><br><span class="line">                <span class="keyword">return</span> string_class.$new(<span class="string">&quot;rmnet_data0&quot;</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;gname ===&gt; &quot;</span>, gname)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> gname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Java.use(&quot;android.net.ConnectivityManager&quot;).getNetworkCapabilities.implementation = function(v)&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(v)</span></span><br><span class="line">        <span class="comment">//     var res = this.getNetworkCapabilities(v)</span></span><br><span class="line">        <span class="comment">//     console.log(&quot;res ==&gt; &quot;, res)</span></span><br><span class="line">        <span class="comment">//     return null;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.net.NetworkCapabilities&quot;</span>).<span class="property">hasTransport</span>.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">v</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">            <span class="keyword">var</span> res = <span class="variable language_">this</span>.<span class="title function_">hasTransport</span>(v)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res ==&gt; &quot;</span>, res)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>抓包</tag>
      </tags>
  </entry>
</search>
