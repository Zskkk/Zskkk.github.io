<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://www.zskkk.cn/atom.xml" rel="self"/>
  
  <link href="https://www.zskkk.cn/"/>
  <updated>2024-07-16T16:00:00.000Z</updated>
  <id>https://www.zskkk.cn/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SM4国密算法原理及分析</title>
    <link href="https://www.zskkk.cn/posts/61783/"/>
    <id>https://www.zskkk.cn/posts/61783/</id>
    <published>2024-07-16T16:00:00.000Z</published>
    <updated>2024-07-16T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240717/01.webp"                                     ></p><p>明文：31323334353637383930616263646566（16个字节）</br>KEY：31323334353637383930616263646566（16个字节）</br></p><h3 id="加密方式"><a href="#加密方式" class="headerlink" title="加密方式"></a>加密方式</h3><p>ecb模式：它将明文消息分成固定长度的块,然后独立地对每个块进行加密。将所有密文块连接起来,形成最终的密文。<br>cbc模式：通过将前一个密文块与当前明文块异或后再加密来增强安全性。第一组与iv异或加密后的值参与第二组异或。将所有密文块连接起来,形成最终的密文。</br></p><h3 id="密钥编排"><a href="#密钥编排" class="headerlink" title="密钥编排"></a>密钥编排</h3><p>固定参数CK</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SM4_CK = [</span><br><span class="line">    <span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>,</span><br><span class="line">    <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">    <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>,</span><br><span class="line">    <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">    <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>,</span><br><span class="line">    <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">    <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>,</span><br><span class="line">    <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>S盒</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">SM4_BOX = [</span><br><span class="line">    <span class="number">0xd6</span>, <span class="number">0x90</span>, <span class="number">0xe9</span>, <span class="number">0xfe</span>, <span class="number">0xcc</span>, <span class="number">0xe1</span>, <span class="number">0x3d</span>, <span class="number">0xb7</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x14</span>, <span class="number">0xc2</span>, <span class="number">0x28</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x2b</span>, <span class="number">0x67</span>, <span class="number">0x9a</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0xbe</span>, <span class="number">0x04</span>, <span class="number">0xc3</span>, <span class="number">0xaa</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9c</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0x98</span>, <span class="number">0x7a</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0b</span>, <span class="number">0x43</span>, <span class="number">0xed</span>,</span><br><span class="line">    <span class="number">0xcf</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0xe4</span>, <span class="number">0xb3</span>, <span class="number">0x1c</span>, <span class="number">0xa9</span>, <span class="number">0xc9</span>, <span class="number">0x08</span>, <span class="number">0xe8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xdf</span>, <span class="number">0x94</span>, <span class="number">0xfa</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0x3f</span>, <span class="number">0xa6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0xfc</span>, <span class="number">0xf3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xba</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>,</span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x85</span>, <span class="number">0x4f</span>, <span class="number">0xa8</span>, <span class="number">0x68</span>, <span class="number">0x6b</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xda</span>, <span class="number">0x8b</span>, <span class="number">0xf8</span>, <span class="number">0xeb</span>,</span><br><span class="line">    <span class="number">0x0f</span>, <span class="number">0x4b</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9d</span>, <span class="number">0x35</span>, <span class="number">0x1e</span>, <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x5e</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xd1</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xd4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9f</span>, <span class="number">0xd3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x4c</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0xc4</span>, <span class="number">0xc8</span>, <span class="number">0x9e</span>, <span class="number">0xea</span>, <span class="number">0xbf</span>, <span class="number">0x8a</span>, <span class="number">0xd2</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0xb5</span>, <span class="number">0xa3</span>, <span class="number">0xf7</span>, <span class="number">0xf2</span>, <span class="number">0xce</span>, <span class="number">0xf9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xa1</span>, <span class="number">0xe0</span>, <span class="number">0xae</span>, <span class="number">0x5d</span>, <span class="number">0xa4</span>, <span class="number">0x9b</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x1a</span>, <span class="number">0x55</span>, <span class="number">0xad</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xf5</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0xe3</span>, <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0xe2</span>, <span class="number">0x2e</span>, <span class="number">0x82</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0xca</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xab</span>, <span class="number">0x0d</span>, <span class="number">0x53</span>, <span class="number">0x4e</span>, <span class="number">0x6f</span>, <span class="number">0xd5</span>, <span class="number">0xdb</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xde</span>, <span class="number">0xfd</span>, <span class="number">0x8e</span>, <span class="number">0x2f</span>, <span class="number">0x03</span>, <span class="number">0xff</span>, <span class="number">0x6a</span>, <span class="number">0x72</span>, <span class="number">0x6d</span>, <span class="number">0x6c</span>, <span class="number">0x5b</span>, <span class="number">0x51</span>, <span class="number">0x8d</span>, <span class="number">0x1b</span>, <span class="number">0xaf</span>,</span><br><span class="line">    <span class="number">0x92</span>, <span class="number">0xbb</span>, <span class="number">0xdd</span>, <span class="number">0xbc</span>, <span class="number">0x7f</span>, <span class="number">0x11</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x1f</span>, <span class="number">0x10</span>, <span class="number">0x5a</span>, <span class="number">0xd8</span>, <span class="number">0x0a</span>, <span class="number">0xc1</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xa5</span>, <span class="number">0xcd</span>, <span class="number">0x7b</span>, <span class="number">0xbd</span>, <span class="number">0x2d</span>, <span class="number">0x74</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb8</span>, <span class="number">0xe5</span>, <span class="number">0xb4</span>, <span class="number">0xb0</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4a</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7e</span>, <span class="number">0x65</span>, <span class="number">0xb9</span>, <span class="number">0xf1</span>, <span class="number">0x09</span>, <span class="number">0xc5</span>, <span class="number">0x6e</span>, <span class="number">0xc6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xf0</span>, <span class="number">0x7d</span>, <span class="number">0xec</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x4d</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xee</span>, <span class="number">0x5f</span>, <span class="number">0x3e</span>, <span class="number">0xd7</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>,</span><br><span class="line">    <span class="number">0x48</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>对密钥进行四字节分割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MK0: 31323334</span><br><span class="line">MK1: 35363738</span><br><span class="line">MK2: 39306162</span><br><span class="line">MK3: 63646566</span><br></pre></td></tr></table></figure><p>分别与FK进行异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SM4_FK = [<span class="number">0xa3b1bac6</span>, <span class="number">0x56aa3350</span>, <span class="number">0x677d9197</span>, <span class="number">0xb27022dc</span>]</span><br></pre></td></tr></table></figure><p>异或结果k</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k0: 928389F2</span><br><span class="line">k1: 639C0468</span><br><span class="line">k2: 5E4DF0F5</span><br><span class="line">k3: D11447BA</span><br></pre></td></tr></table></figure><p><font color="red">密钥编排共32轮 生成 4 * 32 个字节的数组</font><br>第一轮 当 i &#x3D; 0 时</br><font color="red">box_in &#x3D; k1 ^ k2^ k3^ SM4_CK[i]</font></br>即 box_in &#x3D; 0x639C0468 ^ 0x5E4DF0F5 ^ 0xD11447BA ^ 0x70E15 &#x3D; 0xECC2BD32</br><br>将 box_in 0xECC2BD32 拆分成四个单字节进行S盒的替换<br><font color="red">box_out &#x3D; SM4_BOX[0xEC] SM4_BOX[0xC2] SM4_BOX[0xBD] SM4_BOX[0x32] </font></br>即 box_out &#x3D; C5 AF 6C 1C</br><br>得到轮密钥<br><font color="red">key_r[i] &#x3D; k0 ^ box_out ^ box_out左移13位 ^ box_out左移23位</font></br>即 key_r[0] &#x3D; 0x928389F2 ^ 0xC5AF6C1C ^ 0xED8398B5 ^ 0xE62D7B6 &#x3D; 0xB4CDAAED</br><br><font color="red">最后将k1赋值k0，k2赋值k1，k3赋值k2，key_r[i]赋值k3</font><br>即 k0 &#x3D; k1 &#x3D; 0x639C0468<br>    k1 &#x3D; k2 &#x3D; 0x5E4DF0F5<br>    k2 &#x3D; k3 &#x3D; 0xD11447BA<br>    k3 &#x3D; key_r[0] &#x3D; 0xB4CDAAED</p><p>循环得到32个key_r</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">key_r = [<span class="string">&#x27;0xB4CDAAED&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x393A0943&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x5419A218&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x430FEB9A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xB7B64328&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x89FD60C4&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x80FED71C&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x78CC97DB&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x541BB50E&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x9E47804C&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xE4558316&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xAF89E123&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xDA4E6F12&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x1A123F42&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x163D31AC&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x41782FDF&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xAD1F9760&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x22F3ED65&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xD6A523CF&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x5D5258D6&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x6964712A&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x81C9EA81&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xC78DF2DB&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xCDFB8685&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x4860C851&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xC6EEAC9F&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xEB2F69F3&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x679AB10F&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x8383A684&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0xE38ED125&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x894B0AEA&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;0x68C6DFA8&#x27;</span>]</span><br></pre></td></tr></table></figure><p> 密钥编排代码逻辑<br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"> SM4_FK = [<span class="number">0xa3b1bac6</span>, <span class="number">0x56aa3350</span>, <span class="number">0x677d9197</span>, <span class="number">0xb27022dc</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># CK</span></span><br><span class="line">SM4_CK = [</span><br><span class="line">    <span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>,</span><br><span class="line">    <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">    <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>,</span><br><span class="line">    <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">    <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>,</span><br><span class="line">    <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">    <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>,</span><br><span class="line">    <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># S盒</span></span><br><span class="line">SM4_BOX = [</span><br><span class="line">    <span class="number">0xd6</span>, <span class="number">0x90</span>, <span class="number">0xe9</span>, <span class="number">0xfe</span>, <span class="number">0xcc</span>, <span class="number">0xe1</span>, <span class="number">0x3d</span>, <span class="number">0xb7</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x14</span>, <span class="number">0xc2</span>, <span class="number">0x28</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x2b</span>, <span class="number">0x67</span>, <span class="number">0x9a</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0xbe</span>, <span class="number">0x04</span>, <span class="number">0xc3</span>, <span class="number">0xaa</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9c</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0x98</span>, <span class="number">0x7a</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0b</span>, <span class="number">0x43</span>, <span class="number">0xed</span>,</span><br><span class="line">    <span class="number">0xcf</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0xe4</span>, <span class="number">0xb3</span>, <span class="number">0x1c</span>, <span class="number">0xa9</span>, <span class="number">0xc9</span>, <span class="number">0x08</span>, <span class="number">0xe8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xdf</span>, <span class="number">0x94</span>, <span class="number">0xfa</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0x3f</span>, <span class="number">0xa6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0xfc</span>, <span class="number">0xf3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xba</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>,</span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x85</span>, <span class="number">0x4f</span>, <span class="number">0xa8</span>, <span class="number">0x68</span>, <span class="number">0x6b</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xda</span>, <span class="number">0x8b</span>, <span class="number">0xf8</span>, <span class="number">0xeb</span>,</span><br><span class="line">    <span class="number">0x0f</span>, <span class="number">0x4b</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9d</span>, <span class="number">0x35</span>, <span class="number">0x1e</span>, <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x5e</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xd1</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xd4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9f</span>, <span class="number">0xd3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x4c</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0xc4</span>, <span class="number">0xc8</span>, <span class="number">0x9e</span>, <span class="number">0xea</span>, <span class="number">0xbf</span>, <span class="number">0x8a</span>, <span class="number">0xd2</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0xb5</span>, <span class="number">0xa3</span>, <span class="number">0xf7</span>, <span class="number">0xf2</span>, <span class="number">0xce</span>, <span class="number">0xf9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xa1</span>, <span class="number">0xe0</span>, <span class="number">0xae</span>, <span class="number">0x5d</span>, <span class="number">0xa4</span>, <span class="number">0x9b</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x1a</span>, <span class="number">0x55</span>, <span class="number">0xad</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xf5</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0xe3</span>, <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0xe2</span>, <span class="number">0x2e</span>, <span class="number">0x82</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0xca</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xab</span>, <span class="number">0x0d</span>, <span class="number">0x53</span>, <span class="number">0x4e</span>, <span class="number">0x6f</span>, <span class="number">0xd5</span>, <span class="number">0xdb</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xde</span>, <span class="number">0xfd</span>, <span class="number">0x8e</span>, <span class="number">0x2f</span>, <span class="number">0x03</span>, <span class="number">0xff</span>, <span class="number">0x6a</span>, <span class="number">0x72</span>, <span class="number">0x6d</span>, <span class="number">0x6c</span>, <span class="number">0x5b</span>, <span class="number">0x51</span>, <span class="number">0x8d</span>, <span class="number">0x1b</span>, <span class="number">0xaf</span>,</span><br><span class="line">    <span class="number">0x92</span>, <span class="number">0xbb</span>, <span class="number">0xdd</span>, <span class="number">0xbc</span>, <span class="number">0x7f</span>, <span class="number">0x11</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x1f</span>, <span class="number">0x10</span>, <span class="number">0x5a</span>, <span class="number">0xd8</span>, <span class="number">0x0a</span>, <span class="number">0xc1</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xa5</span>, <span class="number">0xcd</span>, <span class="number">0x7b</span>, <span class="number">0xbd</span>, <span class="number">0x2d</span>, <span class="number">0x74</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb8</span>, <span class="number">0xe5</span>, <span class="number">0xb4</span>, <span class="number">0xb0</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4a</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7e</span>, <span class="number">0x65</span>, <span class="number">0xb9</span>, <span class="number">0xf1</span>, <span class="number">0x09</span>, <span class="number">0xc5</span>, <span class="number">0x6e</span>, <span class="number">0xc6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xf0</span>, <span class="number">0x7d</span>, <span class="number">0xec</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x4d</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xee</span>, <span class="number">0x5f</span>, <span class="number">0x3e</span>, <span class="number">0xd7</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>,</span><br><span class="line">    <span class="number">0x48</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM4</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.key_r = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接四个单字节</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_uint32_be</span>(<span class="params">key_data</span>):</span><br><span class="line">        <span class="keyword">return</span> (key_data[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (key_data[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (key_data[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (key_data[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将四个字节拆分</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put_uint32_be</span>(<span class="params">src</span>):</span><br><span class="line">        <span class="keyword">return</span> [(src &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>, (src &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>, (src &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>, src &amp; <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环左移</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>):</span><br><span class="line">        <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_round_key</span>(<span class="params">self, ka</span>):</span><br><span class="line">        b = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        a = self.put_uint32_be(ka)</span><br><span class="line">        b[<span class="number">0</span>] = SM4_BOX[a[<span class="number">0</span>]]</span><br><span class="line">        b[<span class="number">1</span>] = SM4_BOX[a[<span class="number">1</span>]]</span><br><span class="line">        b[<span class="number">2</span>] = SM4_BOX[a[<span class="number">2</span>]]</span><br><span class="line">        b[<span class="number">3</span>] = SM4_BOX[a[<span class="number">3</span>]]</span><br><span class="line">        box_out = self.get_uint32_be(b[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        rk = box_out ^ (self.rotl(box_out, <span class="number">13</span>)) ^ (self.rotl(box_out, <span class="number">23</span>))</span><br><span class="line">        <span class="keyword">return</span> rk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">key_generate</span>(<span class="params">self, key</span>):</span><br><span class="line">        key = self.bytes_to_list(key)</span><br><span class="line">        k = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        k0 = self.get_uint32_be(key[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        k1 = self.get_uint32_be(key[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line">        k2 = self.get_uint32_be(key[<span class="number">8</span>:<span class="number">12</span>])</span><br><span class="line">        k3 = self.get_uint32_be(key[<span class="number">12</span>:<span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">        k[<span class="number">0</span>] = k0 ^ SM4_FK[<span class="number">0</span>]</span><br><span class="line">        k[<span class="number">1</span>] = k1 ^ SM4_FK[<span class="number">1</span>]</span><br><span class="line">        k[<span class="number">2</span>] = k2 ^ SM4_FK[<span class="number">2</span>]</span><br><span class="line">        k[<span class="number">3</span>] = k3 ^ SM4_FK[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_in = k[<span class="number">1</span>] ^ k[<span class="number">2</span>] ^ k[<span class="number">3</span>] ^ SM4_CK[i]</span><br><span class="line">            self.key_r[i] = k[<span class="number">0</span>] ^ self._round_key(box_in)</span><br><span class="line">            k[<span class="number">0</span>] = k[<span class="number">1</span>]</span><br><span class="line">            k[<span class="number">1</span>] = k[<span class="number">2</span>]</span><br><span class="line">            k[<span class="number">2</span>] = k[<span class="number">3</span>]</span><br><span class="line">            k[<span class="number">3</span>] = self.key_r[i]</span><br></pre></td></tr></table></figure></p><h3 id="明文处理"><a href="#明文处理" class="headerlink" title="明文处理"></a>明文处理</h3><p>明文不满16字节及16字节倍数，需要填充至16字节的倍数，如果已经是16字节倍数则填充一组16字节<br>两种填充规则：</p><ul><li>PKCS7: 在明文末尾添加填充字节,填充字节的值等于填充的字节数。<br>例如明文是 31323334353637383930 长度为10字节，则在末尾添加6个值为0x06的字节，填充值16字节。</li><li>ZERO: 在明文末尾添加填充0x0,填充字节的值等于填充的字节数。<br>例如明文是 31323334353637383930 长度为10字节，则在末尾添加6个值为0x00的字节，填充值16字节。</li></ul><p>填充如果明文大于16字节，需要分组处理，每16字节一组<br>对明文 31323334353637383930616263646566 进行四字节分割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x0: 31323334</span><br><span class="line">x1: 35363738</span><br><span class="line">x2: 39306162</span><br><span class="line">x3: 63646566</span><br></pre></td></tr></table></figure><p>明文处理共32轮  最终的 x3 x2 x1 x0 组成16字节密文<br>第一轮 当 i &#x3D; 0 时<br><font color="red">box_input &#x3D; x1 ^ x2 ^ x3 ^ key_r[i]</font><br>即 box_input &#x3D; 0x35363738 ^ 0x39306162 ^ 0x63646566 ^ 0xB4CDAAED &#x3D; 0xDBAF99D1</br><br>将 box_input 0xDBAF99D1 拆分成四个单字节进行S盒的替换<br><font color="red">box_out &#x3D; SM4_BOX[0xDB] SM4_BOX[0xAF] SM4_BOX[0x99] SM4_BOX[0xD1] </font><br>即 box_out &#x3D; 12 6F 93 C1</br><br>box_out 循环左移与明文异或<br><font color="red">temp &#x3D; x0 ^ box_out ^ box_out左移2位 ^ box_out左移10位 ^ box_out左移18位 ^ box_out左移24位</font><br>即 temp &#x3D; 0x31323334 ^ 0x126F93C1 ^ 0x49BE4F04 ^ 0xBE4F0449 ^ 0x4F0449BE ^ 0xC1126F93 &#x3D; 0x5ABACD95</br><br><font color="red">最后将x1赋值x0，x2赋值x1，x3赋值x2，temp赋值x3</font><br>即 x0 &#x3D; x1 &#x3D; 0x35363738<br>    x1 &#x3D; x2 &#x3D; 0x39306162<br>    x2 &#x3D; x3 &#x3D; 0x63646566<br>    x3 &#x3D; temp &#x3D; 0x5ABACD95</br><br>循环得到32轮后结果<br>x0 &#x3D; 0x6E15AEA9<br>x1 &#x3D; 0x1B3702C5<br>x2 &#x3D; 0xE3A63336<br>x3 &#x3D; 0x071F23E0</br><br><font color="red">最终结果 x3 x2 x1 x0</font><br>output &#x3D; x3 x2 x1 x0<br>即 out_put &#x3D; 071F23E0 E3A63336 1B3702C5 6E15AEA9</br><br>加密逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">PKCS7 = <span class="number">0</span></span><br><span class="line">ZERO = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM4</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, padding_mode=PKCS7</span>):</span><br><span class="line">        self.key_r = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line">        self.padding_mode = padding_mode</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接四个单字节</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_uint32_be</span>(<span class="params">key_data</span>):</span><br><span class="line">        <span class="keyword">return</span> (key_data[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (key_data[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (key_data[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (key_data[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将四个字节拆分</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put_uint32_be</span>(<span class="params">src</span>):</span><br><span class="line">        <span class="keyword">return</span> [(src &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>, (src &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>, (src &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>, src &amp; <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环左移</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>):</span><br><span class="line">        <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将列表转换为bytes</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_to_bytes</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join([<span class="built_in">bytes</span>((i,)) <span class="keyword">for</span> i <span class="keyword">in</span> data])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将bytes转换为列表</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bytes_to_list</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 明文填充</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pkcs7_padding</span>(<span class="params">data, block=<span class="number">16</span></span>):</span><br><span class="line">        <span class="keyword">return</span> data + [(<span class="number">16</span> - <span class="built_in">len</span>(data) % block) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span> - <span class="built_in">len</span>(data) % block)]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zero_padding</span>(<span class="params">data, block=<span class="number">16</span></span>):</span><br><span class="line">        <span class="keyword">return</span> data + [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span> - <span class="built_in">len</span>(data) % block)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">one_round</span>(<span class="params">self, in_put</span>):</span><br><span class="line">        in_put = self.bytes_to_list(in_put)</span><br><span class="line">        x0 = self.get_uint32_be(in_put[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        x1 = self.get_uint32_be(in_put[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line">        x2 = self.get_uint32_be(in_put[<span class="number">8</span>:<span class="number">12</span>])</span><br><span class="line">        x3 = self.get_uint32_be(in_put[<span class="number">12</span>:<span class="number">16</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_input = x1 ^ x2 ^ x3 ^ self.key_r[i]</span><br><span class="line">            a = self.put_uint32_be(box_input)</span><br><span class="line">            b = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">            b[<span class="number">0</span>] = SM4_BOX[a[<span class="number">0</span>]]</span><br><span class="line">            b[<span class="number">1</span>] = SM4_BOX[a[<span class="number">1</span>]]</span><br><span class="line">            b[<span class="number">2</span>] = SM4_BOX[a[<span class="number">2</span>]]</span><br><span class="line">            b[<span class="number">3</span>] = SM4_BOX[a[<span class="number">3</span>]]</span><br><span class="line">            box_out = self.get_uint32_be(b[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">            temp = x0 ^ box_out ^ self.rotl(box_out, <span class="number">2</span>) ^ self.rotl(box_out, <span class="number">10</span>) ^ self.rotl(box_out, <span class="number">18</span>) ^ self.rotl(box_out, <span class="number">24</span>)</span><br><span class="line">            x0, x1, x2, x3 = x1, x2, x3, temp</span><br><span class="line">        <span class="keyword">return</span> self.put_uint32_be(x3) + self.put_uint32_be(x2) + self.put_uint32_be(x1) + self.put_uint32_be(x0)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_ecb</span>(<span class="params">self, input_data</span>):</span><br><span class="line">        input_data = self.bytes_to_list(input_data)</span><br><span class="line">        <span class="keyword">if</span> self.padding_mode == PKCS7:</span><br><span class="line">            input_data = self.pkcs7_padding(input_data)</span><br><span class="line">        <span class="keyword">elif</span> self.padding_mode == ZERO:</span><br><span class="line">            input_data = self.zero_padding(input_data)</span><br><span class="line"></span><br><span class="line">        length = <span class="built_in">len</span>(input_data)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        output_data = []</span><br><span class="line">        <span class="keyword">while</span> length &gt; <span class="number">0</span>:</span><br><span class="line">            output_data += self.one_round(input_data[i:i + <span class="number">16</span>])</span><br><span class="line">            i += <span class="number">16</span></span><br><span class="line">            length -= <span class="number">16</span></span><br><span class="line">        <span class="keyword">return</span> self.list_to_bytes(output_data)</span><br></pre></td></tr></table></figure><h3 id="SM4-CBC模式"><a href="#SM4-CBC模式" class="headerlink" title="SM4 CBC模式"></a>SM4 CBC模式</h3><p>上面实现的是ecb模式，cbc模式会在分组加密的时候与iv异或，异或后的结果替换明文参与加密。且每组加密完的结果会做为下一轮的iv参与异或。<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240717/02.webp"                                     ></p><p>明文：31323334353637383930616263646566（16个字节）<br>KEY：31323334353637383930616263646566（16个字节）<br>IV：   1234567890abcdef1234567890abcdef（16个字节）</br><br>明文和IV每个字节分别异或后拼接<br>明文: 0x31 0x32 0x33 0x34 0x35 0x36 0x37 0x38 0x39 0x30 0x61 0x62 0x63 0x64 0x65 0x66<br>IV:    0x12 0x34 0x56 0x78 0x90 0xab 0xcd 0xef 0x12 0x34 0x56 0x78 0x90 0xab 0xcd 0xef<br>结果: 23 06 65 4c a5 9d fa d7 2b 04 37 1a f3 cf a8 89<br>异或后的结果当成“明文”参与加密，其他流程跟ecb模式一样</p><p>代码逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt_cbc</span>(<span class="params">self, iv, input_data</span>):</span><br><span class="line">    input_data = self.bytes_to_list(input_data)</span><br><span class="line">    iv = self.bytes_to_list(iv)</span><br><span class="line">    <span class="keyword">if</span> self.padding_mode == PKCS7:</span><br><span class="line">        input_data = self.pkcs7_padding(input_data)</span><br><span class="line">    <span class="keyword">elif</span> self.padding_mode == ZERO:</span><br><span class="line">        input_data = self.zero_padding(input_data)</span><br><span class="line"></span><br><span class="line">    length = <span class="built_in">len</span>(input_data)</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    output_data = []</span><br><span class="line">    tmp_input = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">    <span class="keyword">while</span> length &gt; <span class="number">0</span>:</span><br><span class="line">        tmp_input[<span class="number">0</span>:<span class="number">16</span>] = self.xor(input_data[i:i + <span class="number">16</span>], iv[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">        output_data += self.one_round(tmp_input[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">        iv = copy.deepcopy(output_data[i:i + <span class="number">16</span>])</span><br><span class="line">        i += <span class="number">16</span></span><br><span class="line">        length -= <span class="number">16</span></span><br><span class="line">    <span class="keyword">return</span> self.list_to_bytes(output_data)</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">SM4_FK = [<span class="number">0xa3b1bac6</span>, <span class="number">0x56aa3350</span>, <span class="number">0x677d9197</span>, <span class="number">0xb27022dc</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># CK</span></span><br><span class="line">SM4_CK = [</span><br><span class="line">    <span class="number">0x00070e15</span>, <span class="number">0x1c232a31</span>, <span class="number">0x383f464d</span>, <span class="number">0x545b6269</span>,</span><br><span class="line">    <span class="number">0x70777e85</span>, <span class="number">0x8c939aa1</span>, <span class="number">0xa8afb6bd</span>, <span class="number">0xc4cbd2d9</span>,</span><br><span class="line">    <span class="number">0xe0e7eef5</span>, <span class="number">0xfc030a11</span>, <span class="number">0x181f262d</span>, <span class="number">0x343b4249</span>,</span><br><span class="line">    <span class="number">0x50575e65</span>, <span class="number">0x6c737a81</span>, <span class="number">0x888f969d</span>, <span class="number">0xa4abb2b9</span>,</span><br><span class="line">    <span class="number">0xc0c7ced5</span>, <span class="number">0xdce3eaf1</span>, <span class="number">0xf8ff060d</span>, <span class="number">0x141b2229</span>,</span><br><span class="line">    <span class="number">0x30373e45</span>, <span class="number">0x4c535a61</span>, <span class="number">0x686f767d</span>, <span class="number">0x848b9299</span>,</span><br><span class="line">    <span class="number">0xa0a7aeb5</span>, <span class="number">0xbcc3cad1</span>, <span class="number">0xd8dfe6ed</span>, <span class="number">0xf4fb0209</span>,</span><br><span class="line">    <span class="number">0x10171e25</span>, <span class="number">0x2c333a41</span>, <span class="number">0x484f565d</span>, <span class="number">0x646b7279</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># S盒</span></span><br><span class="line">SM4_BOX = [</span><br><span class="line">    <span class="number">0xd6</span>, <span class="number">0x90</span>, <span class="number">0xe9</span>, <span class="number">0xfe</span>, <span class="number">0xcc</span>, <span class="number">0xe1</span>, <span class="number">0x3d</span>, <span class="number">0xb7</span>, <span class="number">0x16</span>, <span class="number">0xb6</span>, <span class="number">0x14</span>, <span class="number">0xc2</span>, <span class="number">0x28</span>, <span class="number">0xfb</span>, <span class="number">0x2c</span>,</span><br><span class="line">    <span class="number">0x05</span>, <span class="number">0x2b</span>, <span class="number">0x67</span>, <span class="number">0x9a</span>, <span class="number">0x76</span>, <span class="number">0x2a</span>, <span class="number">0xbe</span>, <span class="number">0x04</span>, <span class="number">0xc3</span>, <span class="number">0xaa</span>, <span class="number">0x44</span>, <span class="number">0x13</span>, <span class="number">0x26</span>, <span class="number">0x49</span>, <span class="number">0x86</span>,</span><br><span class="line">    <span class="number">0x06</span>, <span class="number">0x99</span>, <span class="number">0x9c</span>, <span class="number">0x42</span>, <span class="number">0x50</span>, <span class="number">0xf4</span>, <span class="number">0x91</span>, <span class="number">0xef</span>, <span class="number">0x98</span>, <span class="number">0x7a</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x0b</span>, <span class="number">0x43</span>, <span class="number">0xed</span>,</span><br><span class="line">    <span class="number">0xcf</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0xe4</span>, <span class="number">0xb3</span>, <span class="number">0x1c</span>, <span class="number">0xa9</span>, <span class="number">0xc9</span>, <span class="number">0x08</span>, <span class="number">0xe8</span>, <span class="number">0x95</span>, <span class="number">0x80</span>, <span class="number">0xdf</span>, <span class="number">0x94</span>, <span class="number">0xfa</span>,</span><br><span class="line">    <span class="number">0x75</span>, <span class="number">0x8f</span>, <span class="number">0x3f</span>, <span class="number">0xa6</span>, <span class="number">0x47</span>, <span class="number">0x07</span>, <span class="number">0xa7</span>, <span class="number">0xfc</span>, <span class="number">0xf3</span>, <span class="number">0x73</span>, <span class="number">0x17</span>, <span class="number">0xba</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x3c</span>,</span><br><span class="line">    <span class="number">0x19</span>, <span class="number">0xe6</span>, <span class="number">0x85</span>, <span class="number">0x4f</span>, <span class="number">0xa8</span>, <span class="number">0x68</span>, <span class="number">0x6b</span>, <span class="number">0x81</span>, <span class="number">0xb2</span>, <span class="number">0x71</span>, <span class="number">0x64</span>, <span class="number">0xda</span>, <span class="number">0x8b</span>, <span class="number">0xf8</span>, <span class="number">0xeb</span>,</span><br><span class="line">    <span class="number">0x0f</span>, <span class="number">0x4b</span>, <span class="number">0x70</span>, <span class="number">0x56</span>, <span class="number">0x9d</span>, <span class="number">0x35</span>, <span class="number">0x1e</span>, <span class="number">0x24</span>, <span class="number">0x0e</span>, <span class="number">0x5e</span>, <span class="number">0x63</span>, <span class="number">0x58</span>, <span class="number">0xd1</span>, <span class="number">0xa2</span>, <span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x22</span>, <span class="number">0x7c</span>, <span class="number">0x3b</span>, <span class="number">0x01</span>, <span class="number">0x21</span>, <span class="number">0x78</span>, <span class="number">0x87</span>, <span class="number">0xd4</span>, <span class="number">0x00</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0x9f</span>, <span class="number">0xd3</span>, <span class="number">0x27</span>, <span class="number">0x52</span>,</span><br><span class="line">    <span class="number">0x4c</span>, <span class="number">0x36</span>, <span class="number">0x02</span>, <span class="number">0xe7</span>, <span class="number">0xa0</span>, <span class="number">0xc4</span>, <span class="number">0xc8</span>, <span class="number">0x9e</span>, <span class="number">0xea</span>, <span class="number">0xbf</span>, <span class="number">0x8a</span>, <span class="number">0xd2</span>, <span class="number">0x40</span>, <span class="number">0xc7</span>, <span class="number">0x38</span>,</span><br><span class="line">    <span class="number">0xb5</span>, <span class="number">0xa3</span>, <span class="number">0xf7</span>, <span class="number">0xf2</span>, <span class="number">0xce</span>, <span class="number">0xf9</span>, <span class="number">0x61</span>, <span class="number">0x15</span>, <span class="number">0xa1</span>, <span class="number">0xe0</span>, <span class="number">0xae</span>, <span class="number">0x5d</span>, <span class="number">0xa4</span>, <span class="number">0x9b</span>, <span class="number">0x34</span>,</span><br><span class="line">    <span class="number">0x1a</span>, <span class="number">0x55</span>, <span class="number">0xad</span>, <span class="number">0x93</span>, <span class="number">0x32</span>, <span class="number">0x30</span>, <span class="number">0xf5</span>, <span class="number">0x8c</span>, <span class="number">0xb1</span>, <span class="number">0xe3</span>, <span class="number">0x1d</span>, <span class="number">0xf6</span>, <span class="number">0xe2</span>, <span class="number">0x2e</span>, <span class="number">0x82</span>,</span><br><span class="line">    <span class="number">0x66</span>, <span class="number">0xca</span>, <span class="number">0x60</span>, <span class="number">0xc0</span>, <span class="number">0x29</span>, <span class="number">0x23</span>, <span class="number">0xab</span>, <span class="number">0x0d</span>, <span class="number">0x53</span>, <span class="number">0x4e</span>, <span class="number">0x6f</span>, <span class="number">0xd5</span>, <span class="number">0xdb</span>, <span class="number">0x37</span>, <span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0xde</span>, <span class="number">0xfd</span>, <span class="number">0x8e</span>, <span class="number">0x2f</span>, <span class="number">0x03</span>, <span class="number">0xff</span>, <span class="number">0x6a</span>, <span class="number">0x72</span>, <span class="number">0x6d</span>, <span class="number">0x6c</span>, <span class="number">0x5b</span>, <span class="number">0x51</span>, <span class="number">0x8d</span>, <span class="number">0x1b</span>, <span class="number">0xaf</span>,</span><br><span class="line">    <span class="number">0x92</span>, <span class="number">0xbb</span>, <span class="number">0xdd</span>, <span class="number">0xbc</span>, <span class="number">0x7f</span>, <span class="number">0x11</span>, <span class="number">0xd9</span>, <span class="number">0x5c</span>, <span class="number">0x41</span>, <span class="number">0x1f</span>, <span class="number">0x10</span>, <span class="number">0x5a</span>, <span class="number">0xd8</span>, <span class="number">0x0a</span>, <span class="number">0xc1</span>,</span><br><span class="line">    <span class="number">0x31</span>, <span class="number">0x88</span>, <span class="number">0xa5</span>, <span class="number">0xcd</span>, <span class="number">0x7b</span>, <span class="number">0xbd</span>, <span class="number">0x2d</span>, <span class="number">0x74</span>, <span class="number">0xd0</span>, <span class="number">0x12</span>, <span class="number">0xb8</span>, <span class="number">0xe5</span>, <span class="number">0xb4</span>, <span class="number">0xb0</span>, <span class="number">0x89</span>,</span><br><span class="line">    <span class="number">0x69</span>, <span class="number">0x97</span>, <span class="number">0x4a</span>, <span class="number">0x0c</span>, <span class="number">0x96</span>, <span class="number">0x77</span>, <span class="number">0x7e</span>, <span class="number">0x65</span>, <span class="number">0xb9</span>, <span class="number">0xf1</span>, <span class="number">0x09</span>, <span class="number">0xc5</span>, <span class="number">0x6e</span>, <span class="number">0xc6</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x18</span>, <span class="number">0xf0</span>, <span class="number">0x7d</span>, <span class="number">0xec</span>, <span class="number">0x3a</span>, <span class="number">0xdc</span>, <span class="number">0x4d</span>, <span class="number">0x20</span>, <span class="number">0x79</span>, <span class="number">0xee</span>, <span class="number">0x5f</span>, <span class="number">0x3e</span>, <span class="number">0xd7</span>, <span class="number">0xcb</span>, <span class="number">0x39</span>,</span><br><span class="line">    <span class="number">0x48</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">PKCS7 = <span class="number">0</span></span><br><span class="line">ZERO = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SM4</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, padding_mode=PKCS7</span>):</span><br><span class="line">        self.key_r = [<span class="number">0</span>] * <span class="number">32</span></span><br><span class="line">        self.padding_mode = padding_mode</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 拼接四个单字节</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_uint32_be</span>(<span class="params">key_data</span>):</span><br><span class="line">        <span class="keyword">return</span> (key_data[<span class="number">0</span>] &lt;&lt; <span class="number">24</span>) | (key_data[<span class="number">1</span>] &lt;&lt; <span class="number">16</span>) | (key_data[<span class="number">2</span>] &lt;&lt; <span class="number">8</span>) | (key_data[<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将四个字节拆分</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">put_uint32_be</span>(<span class="params">src</span>):</span><br><span class="line">        <span class="keyword">return</span> [(src &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span>, (src &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>, (src &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>, src &amp; <span class="number">0xFF</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 循环左移</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rotl</span>(<span class="params">x, n</span>):</span><br><span class="line">        <span class="keyword">return</span> ((x &lt;&lt; n) &amp; <span class="number">0xffffffff</span>) | ((x &gt;&gt; (<span class="number">32</span> - n)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将列表转换为bytes</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list_to_bytes</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;&#x27;</span>.join([<span class="built_in">bytes</span>((i,)) <span class="keyword">for</span> i <span class="keyword">in</span> data])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将bytes转换为列表</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bytes_to_list</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="keyword">return</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> data]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 明文填充</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pkcs7_padding</span>(<span class="params">data, block=<span class="number">16</span></span>):</span><br><span class="line">        <span class="keyword">return</span> data + [(<span class="number">16</span> - <span class="built_in">len</span>(data) % block) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span> - <span class="built_in">len</span>(data) % block)]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">zero_padding</span>(<span class="params">data, block=<span class="number">16</span></span>):</span><br><span class="line">        <span class="keyword">return</span> data + [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span> - <span class="built_in">len</span>(data) % block)]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">xor</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: x ^ y, a, b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_round_key</span>(<span class="params">self, ka</span>):</span><br><span class="line">        b = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        a = self.put_uint32_be(ka)</span><br><span class="line">        b[<span class="number">0</span>] = SM4_BOX[a[<span class="number">0</span>]]</span><br><span class="line">        b[<span class="number">1</span>] = SM4_BOX[a[<span class="number">1</span>]]</span><br><span class="line">        b[<span class="number">2</span>] = SM4_BOX[a[<span class="number">2</span>]]</span><br><span class="line">        b[<span class="number">3</span>] = SM4_BOX[a[<span class="number">3</span>]]</span><br><span class="line">        box_out = self.get_uint32_be(b[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        rk = box_out ^ (self.rotl(box_out, <span class="number">13</span>)) ^ (self.rotl(box_out, <span class="number">23</span>))</span><br><span class="line">        <span class="keyword">return</span> rk</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">key_generate</span>(<span class="params">self, key</span>):</span><br><span class="line">        key = self.bytes_to_list(key)</span><br><span class="line">        k = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        k0 = self.get_uint32_be(key[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        k1 = self.get_uint32_be(key[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line">        k2 = self.get_uint32_be(key[<span class="number">8</span>:<span class="number">12</span>])</span><br><span class="line">        k3 = self.get_uint32_be(key[<span class="number">12</span>:<span class="number">16</span>])</span><br><span class="line"></span><br><span class="line">        k[<span class="number">0</span>] = k0 ^ SM4_FK[<span class="number">0</span>]</span><br><span class="line">        k[<span class="number">1</span>] = k1 ^ SM4_FK[<span class="number">1</span>]</span><br><span class="line">        k[<span class="number">2</span>] = k2 ^ SM4_FK[<span class="number">2</span>]</span><br><span class="line">        k[<span class="number">3</span>] = k3 ^ SM4_FK[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_in = k[<span class="number">1</span>] ^ k[<span class="number">2</span>] ^ k[<span class="number">3</span>] ^ SM4_CK[i]</span><br><span class="line">            self.key_r[i] = k[<span class="number">0</span>] ^ self._round_key(box_in)</span><br><span class="line">            k[<span class="number">0</span>] = k[<span class="number">1</span>]</span><br><span class="line">            k[<span class="number">1</span>] = k[<span class="number">2</span>]</span><br><span class="line">            k[<span class="number">2</span>] = k[<span class="number">3</span>]</span><br><span class="line">            k[<span class="number">3</span>] = self.key_r[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">one_round</span>(<span class="params">self, in_put</span>):</span><br><span class="line">        in_put = self.bytes_to_list(in_put)</span><br><span class="line">        x0 = self.get_uint32_be(in_put[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">        x1 = self.get_uint32_be(in_put[<span class="number">4</span>:<span class="number">8</span>])</span><br><span class="line">        x2 = self.get_uint32_be(in_put[<span class="number">8</span>:<span class="number">12</span>])</span><br><span class="line">        x3 = self.get_uint32_be(in_put[<span class="number">12</span>:<span class="number">16</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">            box_input = x1 ^ x2 ^ x3 ^ self.key_r[i]</span><br><span class="line">            a = self.put_uint32_be(box_input)</span><br><span class="line">            b = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">            b[<span class="number">0</span>] = SM4_BOX[a[<span class="number">0</span>]]</span><br><span class="line">            b[<span class="number">1</span>] = SM4_BOX[a[<span class="number">1</span>]]</span><br><span class="line">            b[<span class="number">2</span>] = SM4_BOX[a[<span class="number">2</span>]]</span><br><span class="line">            b[<span class="number">3</span>] = SM4_BOX[a[<span class="number">3</span>]]</span><br><span class="line">            box_out = self.get_uint32_be(b[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">            temp = x0 ^ box_out ^ self.rotl(box_out, <span class="number">2</span>) ^ self.rotl(box_out, <span class="number">10</span>) ^ self.rotl(box_out, <span class="number">18</span>) ^ self.rotl(box_out, <span class="number">24</span>)</span><br><span class="line">            x0, x1, x2, x3 = x1, x2, x3, temp</span><br><span class="line">        <span class="keyword">return</span> self.put_uint32_be(x3) + self.put_uint32_be(x2) + self.put_uint32_be(x1) + self.put_uint32_be(x0)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_ecb</span>(<span class="params">self, input_data</span>):</span><br><span class="line">        input_data = self.bytes_to_list(input_data)</span><br><span class="line">        <span class="keyword">if</span> self.padding_mode == PKCS7:</span><br><span class="line">            input_data = self.pkcs7_padding(input_data)</span><br><span class="line">        <span class="keyword">elif</span> self.padding_mode == ZERO:</span><br><span class="line">            input_data = self.zero_padding(input_data)</span><br><span class="line"></span><br><span class="line">        length = <span class="built_in">len</span>(input_data)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        output_data = []</span><br><span class="line">        <span class="keyword">while</span> length &gt; <span class="number">0</span>:</span><br><span class="line">            output_data += self.one_round(input_data[i:i + <span class="number">16</span>])</span><br><span class="line">            i += <span class="number">16</span></span><br><span class="line">            length -= <span class="number">16</span></span><br><span class="line">        <span class="keyword">return</span> self.list_to_bytes(output_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt_cbc</span>(<span class="params">self, iv, input_data</span>):</span><br><span class="line">        input_data = self.bytes_to_list(input_data)</span><br><span class="line">        iv = self.bytes_to_list(iv)</span><br><span class="line">        <span class="keyword">if</span> self.padding_mode == PKCS7:</span><br><span class="line">            input_data = self.pkcs7_padding(input_data)</span><br><span class="line">        <span class="keyword">elif</span> self.padding_mode == ZERO:</span><br><span class="line">            input_data = self.zero_padding(input_data)</span><br><span class="line"></span><br><span class="line">        length = <span class="built_in">len</span>(input_data)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        output_data = []</span><br><span class="line">        tmp_input = [<span class="number">0</span>] * <span class="number">16</span></span><br><span class="line">        <span class="keyword">while</span> length &gt; <span class="number">0</span>:</span><br><span class="line">            tmp_input[<span class="number">0</span>:<span class="number">16</span>] = self.xor(input_data[i:i + <span class="number">16</span>], iv[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">            output_data += self.one_round(tmp_input[<span class="number">0</span>:<span class="number">16</span>])</span><br><span class="line">            iv = copy.deepcopy(output_data[i:i + <span class="number">16</span>])</span><br><span class="line">            i += <span class="number">16</span></span><br><span class="line">            length -= <span class="number">16</span></span><br><span class="line">        <span class="keyword">return</span> self.list_to_bytes(output_data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 16进制密钥和初始化向量</span></span><br><span class="line">    key_hex = <span class="string">&#x27;31323334353637383930616263646566&#x27;</span></span><br><span class="line">    iv_hex = <span class="string">&#x27;1234567890abcdef1234567890abcdef&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 16进制明文</span></span><br><span class="line">    data_hex = <span class="string">&#x27;31323334353637383930616263646566&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 转换为bytes类型</span></span><br><span class="line">    key_b = <span class="built_in">bytes</span>.fromhex(key_hex)</span><br><span class="line">    iv_b = <span class="built_in">bytes</span>.fromhex(iv_hex)</span><br><span class="line">    data_b = <span class="built_in">bytes</span>.fromhex(data_hex)</span><br><span class="line"></span><br><span class="line">    cipher = SM4(PKCS7)</span><br><span class="line">    cipher.key_generate(key_b)</span><br><span class="line"></span><br><span class="line">    ecb_result = cipher.encrypt_ecb(data_b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ecb_result: &quot;</span>, ecb_result.<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">    cbc_result = cipher.encrypt_cbc(iv_b, data_b)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cbc_result: &quot;</span>, cbc_result.<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     alt=&quot;image&quot;
                     data-src=&quot;https://jsd.cdn.zzko.cn/gh/Zskkk/blo</summary>
      
    
    
    
    
    <category term="算法" scheme="https://www.zskkk.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向系列(二) 反调试与绕过案例实战</title>
    <link href="https://www.zskkk.cn/posts/51299/"/>
    <id>https://www.zskkk.cn/posts/51299/</id>
    <published>2024-01-31T16:00:00.000Z</published>
    <updated>2024-01-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目地址：<a class="link"   href="https://github.com/cherubstar/iOSEnvDetection" >https://github.com/cherubstar/iOSEnvDetection<i class="fas fa-external-link-alt"></i></a><br>根据项目使用Xcode构建app安装到手机上<br>iPhone：iPhone se2(越狱)，iOS 14.4.1</p><h3 id="Frida检测"><a href="#Frida检测" class="headerlink" title="Frida检测"></a>Frida检测</h3><h4 id="端口检测"><a href="#端口检测" class="headerlink" title="端口检测"></a>端口检测</h4><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/01.webp"                                     ><br>上来先用objection搜索有没有frida相关的类，可以看到其中FridaDetection比较符合，对其hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking search classes frida</span><br><span class="line"><span class="title class_">EnvDetection</span>.<span class="property">FridaDetectionViewModel</span></span><br><span class="line">_TtGC7SwiftUIP10$1a5ddeda09BoxVTableVGVS_11StateObjectC12EnvDetection23FridaDetectionViewModel_P10$1a5d8f8983Box_</span><br><span class="line">_TtGC7SwiftUIP10$1a5ddeda09BoxVTableGVS_P10$1a5db422825ObservedObjectPropertyBoxC12EnvDetection23FridaDetectionViewModel__</span><br><span class="line"><span class="title class_">FridaDetection</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Found</span> <span class="number">4</span> classes</span><br><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking list class_methods <span class="title class_">FridaDetection</span></span><br><span class="line">- checkListeningPort27042</span><br><span class="line"></span><br><span class="line"><span class="title class_">Found</span> <span class="number">1</span> methods</span><br></pre></td></tr></table></figure><p>只有 checkListeningPort27042 一个函数，hook查看调用栈返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking watch method <span class="string">&quot;*[FridaDetection checkListeningPort27042]&quot;</span> --dump-args --dump-backtrace --dump-<span class="keyword">return</span></span><br><span class="line">(agent) <span class="title class_">Found</span> selector at <span class="number">0x102034000</span> <span class="keyword">as</span> -[<span class="title class_">FridaDetection</span> checkListeningPort27042]</span><br><span class="line">(agent) <span class="title class_">Registering</span> job <span class="number">246950.</span> <span class="title class_">Type</span>: watch-method <span class="attr">for</span>: *[<span class="title class_">FridaDetection</span> checkListeningPort27042]</span><br><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # (agent) [<span class="number">246950</span>] <span class="title class_">Called</span>: *[<span class="title class_">FridaDetection</span> checkListeningPort27042] <span class="number">0</span> <span class="title function_">arguments</span>(<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">246950</span>] *[<span class="title class_">FridaDetection</span> checkListeningPort27042] <span class="title class_">Backtrace</span>:</span><br><span class="line">        <span class="number">0x102051240</span> <span class="title class_">EnvDetection</span>!<span class="title class_">FridaDetectionViewModel</span>.<span class="title function_">checkListeningPort27042</span>()</span><br><span class="line">        <span class="number">0x1020865d4</span> <span class="title class_">EnvDetection</span>!closure #<span class="number">2</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">FridaDetectionView</span>.<span class="property">body</span>.<span class="property">getter</span></span><br><span class="line">        <span class="number">0x1a56f0e30</span> <span class="title class_">SwiftUI</span>!partial apply <span class="keyword">for</span> implicit closure #<span class="number">2</span> <span class="keyword">in</span> implicit closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">WrappedButtonStyle</span>.<span class="property">Body</span>.<span class="property">body</span>.<span class="property">getter</span></span><br><span class="line">        <span class="number">0x1a5a07f28</span> <span class="title class_">SwiftUI</span>!closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">PressableGestureCallbacks</span>.<span class="title function_">dispatch</span>(<span class="attr">phase</span>:<span class="attr">state</span>:)</span><br><span class="line">        <span class="number">0x1a5771b98</span> <span class="title class_">SwiftUI</span>!thunk <span class="keyword">for</span> @escaping @callee_guaranteed () -&gt; ()</span><br><span class="line">        <span class="number">0x1a5771bc0</span> <span class="title class_">SwiftUI</span>!thunk <span class="keyword">for</span> @escaping @callee_guaranteed () -&gt; (@out ())</span><br><span class="line">        <span class="number">0x1a5771b98</span> <span class="title class_">SwiftUI</span>!thunk <span class="keyword">for</span> @escaping @callee_guaranteed () -&gt; ()</span><br><span class="line">        <span class="number">0x1a5760764</span> <span class="title class_">SwiftUI</span>!<span class="keyword">static</span> <span class="title class_">Update</span>.<span class="title function_">end</span>()</span><br><span class="line">        <span class="number">0x1a57b2e6c</span> <span class="title class_">SwiftUI</span>!<span class="title class_">EventBindingManager</span>.<span class="title function_">send</span>(<span class="attr">_</span>:)</span><br><span class="line">        <span class="number">0x1a5c3fe50</span> <span class="title class_">SwiftUI</span>!specialized <span class="title class_">EventBindingBridge</span>.<span class="title function_">send</span>(<span class="attr">_</span>:<span class="attr">source</span>:)</span><br><span class="line">        <span class="number">0x1a5c3df28</span> <span class="title class_">SwiftUI</span>!<span class="title class_">UIKitGestureRecognizer</span>.<span class="title function_">send</span>(<span class="attr">touches</span>:<span class="attr">event</span>:<span class="attr">phase</span>:)</span><br><span class="line">        <span class="number">0x1a5c3ebe0</span> <span class="title class_">SwiftUI</span>!@objc <span class="title class_">UIKitGestureRecognizer</span>.<span class="title function_">touchesBegan</span>(<span class="attr">_</span>:<span class="attr">with</span>:)</span><br><span class="line">        <span class="number">0x1a11cad2c</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIGestureRecognizer</span> <span class="attr">_componentsEnded</span>:<span class="attr">withEvent</span>:]</span><br><span class="line">        <span class="number">0x1a171325c</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_sendEventToGestureRecognizer</span>:]</span><br><span class="line">        <span class="number">0x1a11c0bd4</span> <span class="title class_">UIKitCore</span>!__47-[<span class="title class_">UIGestureEnvironment</span> <span class="attr">_updateForEvent</span>:<span class="attr">window</span>:]_block_invoke</span><br><span class="line">        <span class="number">0x1a11c08b4</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIGestureEnvironment</span> <span class="attr">_updateForEvent</span>:<span class="attr">window</span>:]</span><br><span class="line">(agent) [<span class="number">246950</span>] <span class="title class_">Return</span> <span class="title class_">Value</span>: <span class="number">0x1</span></span><br></pre></td></tr></table></figure><p>返回了0x1，那是不是把函数返回值改为0x0，就不会被检测到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking set return_value <span class="string">&quot;*[FridaDetection checkListeningPort27042]&quot;</span> <span class="number">0x0</span></span><br></pre></td></tr></table></figure><p>再点击检测则过掉了<br>frida代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">ObjC</span>.<span class="property">classes</span>[<span class="string">&quot;FridaDetection&quot;</span>][<span class="string">&quot;- checkListeningPort27042&quot;</span>].<span class="property">implementation</span>, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret =&gt;&quot;</span>, ret);</span><br><span class="line">            ret.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">NativePointer</span>(<span class="number">0x0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><h4 id="文件检测"><a href="#文件检测" class="headerlink" title="文件检测"></a>文件检测</h4><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/02.webp"                                     ><br>既然是文件检测，那肯定涉及到文件的读取，查资料把文件操作相关的类都用objection查找一遍，最终得到是 NSFileManager 类，进行hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking watch <span class="keyword">class</span> <span class="title class_">NSFileManager</span></span><br></pre></td></tr></table></figure><p>手机Frida文件检测刷新一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # (agent) [<span class="number">703964</span>] <span class="title class_">Called</span>: [<span class="title class_">NSFileManager</span> defaultManager] (<span class="title class_">Kind</span>: <span class="keyword">class</span>) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">703964</span>] <span class="title class_">Called</span>: [<span class="title class_">NSFileManager</span> _registerForUbiquityAccountChangeNotifications] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">703964</span>] <span class="title class_">Called</span>: [<span class="title class_">NSFileManager</span> defaultManager] (<span class="title class_">Kind</span>: <span class="keyword">class</span>) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">703964</span>] <span class="title class_">Called</span>: [<span class="title class_">NSFileManager</span> _registerForUbiquityAccountChangeNotifications] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">703964</span>] <span class="title class_">Called</span>: [<span class="title class_">NSFileManager</span> defaultManager] (<span class="title class_">Kind</span>: <span class="keyword">class</span>) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">703964</span>] <span class="title class_">Called</span>: [<span class="title class_">NSFileManager</span> _registerForUbiquityAccountChangeNotifications] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br></pre></td></tr></table></figure><p>对这两个函数进行hook查看调用栈返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking watch method <span class="string">&quot;*[NSFileManager _registerForUbiquityAccountChangeNotifications]&quot;</span> --dump-args --dump-backtrace --dump-<span class="keyword">return</span></span><br><span class="line">(agent) <span class="title class_">Found</span> selector at <span class="number">0x19feee6b0</span> <span class="keyword">as</span> -[<span class="title class_">NSFileManager</span> _registerForUbiquityAccountChangeNotifications]</span><br><span class="line">(agent) <span class="title class_">Registering</span> job <span class="number">536962.</span> <span class="title class_">Type</span>: watch-method <span class="attr">for</span>: *[<span class="title class_">NSFileManager</span> _registerForUbiquityAccountChangeNotifications]</span><br><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking watch method <span class="string">&quot;*[NSFileManager defaultManager]&quot;</span> --dump-args --dump-backtrace --dump-<span class="keyword">return</span></span><br><span class="line">(agent) <span class="title class_">Found</span> selector at <span class="number">0x19feec534</span> <span class="keyword">as</span> +[<span class="title class_">NSFileManager</span> defaultManager]</span><br><span class="line">(agent) <span class="title class_">Registering</span> job <span class="number">371228.</span> <span class="title class_">Type</span>: watch-method <span class="attr">for</span>: *[<span class="title class_">NSFileManager</span> defaultManager]</span><br><span class="line"></span><br><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # (agent) [<span class="number">371228</span>] <span class="title class_">Called</span>: *[<span class="title class_">NSFileManager</span> defaultManager] <span class="number">0</span> <span class="title function_">arguments</span>(<span class="title class_">Kind</span>: <span class="keyword">class</span>) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">371228</span>] *[<span class="title class_">NSFileManager</span> defaultManager] <span class="title class_">Backtrace</span>:</span><br><span class="line">        <span class="number">0x1a000f3d4</span> <span class="title class_">Foundation</span>!standardDefaultCenter</span><br><span class="line">        <span class="number">0x1a199dc5c</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITextEffectsWindow</span> <span class="attr">updateForOrientation</span>:<span class="attr">forceResetTransform</span>:]</span><br><span class="line">        <span class="number">0x1a199e2f0</span> <span class="title class_">UIKitCore</span>!+[<span class="title class_">UITextEffectsWindow</span> <span class="attr">_sharedTextEffectsWindowforWindowScene</span>:<span class="attr">allowHosted</span>:<span class="attr">matchesStatusBarOrientationOnAccess</span>:<span class="attr">shouldCreateIfNecessary</span>:]</span><br><span class="line">        <span class="number">0x1a199e3fc</span> <span class="title class_">UIKitCore</span>!+[<span class="title class_">UITextEffectsWindow</span> <span class="attr">sharedTextEffectsWindowForWindowScene</span>:]</span><br><span class="line">        <span class="number">0x1a10c640c</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIInputResponderController</span> containerWindow]</span><br><span class="line">        <span class="number">0x1a10c651c</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIInputResponderController</span> containerRootController]</span><br><span class="line">        <span class="number">0x1a149a1a8</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIPeripheralHost</span>(<span class="title class_">UIKitInternal</span>) _isTransitioning]</span><br><span class="line">        <span class="number">0x1a0fa219c</span> <span class="title class_">UIKitCore</span>!-[_UINavigationInteractiveTransition <span class="attr">_gestureRecognizer</span>:<span class="attr">shouldReceiveEvent</span>:]</span><br><span class="line">        <span class="number">0x1a11cfd54</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIGestureRecognizer</span> <span class="attr">_delegateShouldReceiveEvent</span>:]</span><br><span class="line">        <span class="number">0x1a11cf3f4</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIGestureRecognizer</span> <span class="attr">_shouldReceiveTouch</span>:<span class="attr">forEvent</span>:<span class="attr">recognizerView</span>:]</span><br><span class="line">        <span class="number">0x1a171234c</span> <span class="title class_">UIKitCore</span>!__72-[<span class="title class_">UITouchesEvent</span> <span class="attr">_addGestureRecognizersForView</span>:<span class="attr">toTouch</span>:<span class="attr">forContinuation</span>:]_block_invoke</span><br><span class="line">        <span class="number">0x1a1711cf8</span> <span class="title class_">UIKitCore</span>!__62-[<span class="title class_">UITouchesEvent</span> <span class="attr">_collectGestureRecognizersForView</span>:<span class="attr">withBlock</span>:]_block_invoke</span><br><span class="line">        <span class="number">0x1a1711784</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_collectGestureRecognizersForView</span>:<span class="attr">withBlock</span>:]</span><br><span class="line">        <span class="number">0x1a17121b8</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_addGestureRecognizersForView</span>:<span class="attr">toTouch</span>:<span class="attr">forContinuation</span>:]</span><br><span class="line">        <span class="number">0x1a1712074</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_addGestureRecognizersForView</span>:<span class="attr">toTouch</span>:]</span><br><span class="line">        <span class="number">0x1a1712690</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_addTouch</span>:<span class="attr">forDelayedDelivery</span>:]</span><br><span class="line">(agent) [<span class="number">371228</span>] <span class="title class_">Return</span> <span class="title class_">Value</span>: <span class="number">0x283a77540</span></span><br><span class="line">(agent) [<span class="number">536962</span>] <span class="title class_">Called</span>: *[<span class="title class_">NSFileManager</span> _registerForUbiquityAccountChangeNotifications] <span class="number">0</span> <span class="title function_">arguments</span>(<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">536962</span>] *[<span class="title class_">NSFileManager</span> _registerForUbiquityAccountChangeNotifications] <span class="title class_">Backtrace</span>:</span><br><span class="line">        <span class="number">0x1a000f3e0</span> <span class="title class_">Foundation</span>!standardDefaultCenter</span><br><span class="line">        <span class="number">0x1a199dc5c</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITextEffectsWindow</span> <span class="attr">updateForOrientation</span>:<span class="attr">forceResetTransform</span>:]</span><br><span class="line">        <span class="number">0x1a199e2f0</span> <span class="title class_">UIKitCore</span>!+[<span class="title class_">UITextEffectsWindow</span> <span class="attr">_sharedTextEffectsWindowforWindowScene</span>:<span class="attr">allowHosted</span>:<span class="attr">matchesStatusBarOrientationOnAccess</span>:<span class="attr">shouldCreateIfNecessary</span>:]</span><br><span class="line">        <span class="number">0x1a199e3fc</span> <span class="title class_">UIKitCore</span>!+[<span class="title class_">UITextEffectsWindow</span> <span class="attr">sharedTextEffectsWindowForWindowScene</span>:]</span><br><span class="line">        <span class="number">0x1a10c640c</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIInputResponderController</span> containerWindow]</span><br><span class="line">        <span class="number">0x1a10c651c</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIInputResponderController</span> containerRootController]</span><br><span class="line">        <span class="number">0x1a149a1a8</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIPeripheralHost</span>(<span class="title class_">UIKitInternal</span>) _isTransitioning]</span><br><span class="line">        <span class="number">0x1a0fa219c</span> <span class="title class_">UIKitCore</span>!-[_UINavigationInteractiveTransition <span class="attr">_gestureRecognizer</span>:<span class="attr">shouldReceiveEvent</span>:]</span><br><span class="line">        <span class="number">0x1a11cfd54</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIGestureRecognizer</span> <span class="attr">_delegateShouldReceiveEvent</span>:]</span><br><span class="line">        <span class="number">0x1a11cf3f4</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UIGestureRecognizer</span> <span class="attr">_shouldReceiveTouch</span>:<span class="attr">forEvent</span>:<span class="attr">recognizerView</span>:]</span><br><span class="line">        <span class="number">0x1a171234c</span> <span class="title class_">UIKitCore</span>!__72-[<span class="title class_">UITouchesEvent</span> <span class="attr">_addGestureRecognizersForView</span>:<span class="attr">toTouch</span>:<span class="attr">forContinuation</span>:]_block_invoke</span><br><span class="line">        <span class="number">0x1a1711cf8</span> <span class="title class_">UIKitCore</span>!__62-[<span class="title class_">UITouchesEvent</span> <span class="attr">_collectGestureRecognizersForView</span>:<span class="attr">withBlock</span>:]_block_invoke</span><br><span class="line">        <span class="number">0x1a1711784</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_collectGestureRecognizersForView</span>:<span class="attr">withBlock</span>:]</span><br><span class="line">        <span class="number">0x1a17121b8</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_addGestureRecognizersForView</span>:<span class="attr">toTouch</span>:<span class="attr">forContinuation</span>:]</span><br><span class="line">        <span class="number">0x1a1712074</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_addGestureRecognizersForView</span>:<span class="attr">toTouch</span>:]</span><br><span class="line">        <span class="number">0x1a1712690</span> <span class="title class_">UIKitCore</span>!-[<span class="title class_">UITouchesEvent</span> <span class="attr">_addTouch</span>:<span class="attr">forDelayedDelivery</span>:]</span><br></pre></td></tr></table></figure><p>看了调用栈都是跟系统相关的，底层会去调用libc下的open函数，frida hook open函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_libc_open</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> openAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;open&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(openAddr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;path =&gt;&quot;</span>, args[<span class="number">0</span>].<span class="title function_">readCString</span>());</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n\t&quot;</span>))</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(retval)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[iOS <span class="title class_">Device</span>::<span class="title class_">EnvDetection</span> ]-&gt; <span class="function"><span class="params">path</span> =&gt;</span> <span class="regexp">/usr/</span>lib/frida/frida-server</span><br><span class="line"><span class="number">0x100486284</span> <span class="title class_">EnvDetection</span>!-[<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByOpen</span>:]</span><br><span class="line">        <span class="number">0x1004d8978</span> <span class="title class_">EnvDetection</span>!<span class="title class_">CommonUtils</span>.<span class="title function_">checkPath</span>(<span class="attr">path</span>:)</span><br><span class="line">        <span class="number">0x1004af724</span> <span class="title class_">EnvDetection</span>!closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">FridaFileDetectionView</span>.<span class="property">body</span>.<span class="property">getter</span></span><br><span class="line">        <span class="number">0x1a5c0a280</span> <span class="title class_">SwiftUI</span>!<span class="title class_">HStack</span>.<span class="title function_">init</span>(<span class="attr">alignment</span>:<span class="attr">spacing</span>:<span class="attr">content</span>:)</span><br><span class="line">        <span class="number">0x1004af280</span> <span class="title class_">EnvDetection</span>!closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">FridaFileDetectionView</span>.<span class="property">body</span>.<span class="property">getter</span></span><br><span class="line">        <span class="number">0x1a5b0ee74</span> <span class="title class_">SwiftUI</span>!<span class="title class_">ForEachChild</span>.<span class="title function_">updateValue</span>()</span><br><span class="line">        <span class="number">0x1a562d7fc</span> <span class="title class_">SwiftUI</span>!partial apply <span class="keyword">for</span> implicit closure #<span class="number">2</span> <span class="keyword">in</span> implicit closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">Attribute</span>.<span class="property">init</span>&lt;A&gt;(<span class="attr">_</span>:)</span><br><span class="line">        <span class="number">0x1c8168a50</span> <span class="title class_">AttributeGraph</span>!<span class="attr">AG</span>::<span class="title class_">Graph</span>::<span class="title class_">UpdateStack</span>::<span class="title function_">update</span>()</span><br><span class="line">        <span class="number">0x1c8168e84</span> <span class="title class_">AttributeGraph</span>!<span class="attr">AG</span>::<span class="title class_">Graph</span>::<span class="title function_">update_attribute</span>(<span class="attr">AG</span>::<span class="attr">data</span>::ptr&lt;<span class="attr">AG</span>::<span class="title class_">Node</span>&gt;, bool)</span><br><span class="line">        <span class="number">0x1c8172088</span> <span class="title class_">AttributeGraph</span>!<span class="attr">AG</span>::<span class="title class_">Subgraph</span>::<span class="title function_">update</span>(unsigned int)</span><br><span class="line">        <span class="number">0x1a5c80cdc</span> <span class="title class_">SwiftUI</span>!<span class="title class_">GraphHost</span>.<span class="title function_">runTransaction</span>()</span><br><span class="line">        <span class="number">0x1a5c83e1c</span> <span class="title class_">SwiftUI</span>!<span class="title class_">GraphHost</span>.<span class="title function_">runTransaction</span>(<span class="attr">_</span>:)</span><br><span class="line">        <span class="number">0x1a5c827a8</span> <span class="title class_">SwiftUI</span>!<span class="title class_">GraphHost</span>.<span class="title function_">flushTransactions</span>()</span><br><span class="line">        <span class="number">0x1a5c83db4</span> <span class="title class_">SwiftUI</span>!closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">GraphHost</span>.<span class="property">asyncTransaction</span>&lt;A&gt;(<span class="attr">_</span>:<span class="attr">mutation</span>:<span class="attr">style</span>:)</span><br><span class="line">        <span class="number">0x1a5752168</span> <span class="title class_">SwiftUI</span>!partial apply <span class="keyword">for</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">ViewGraphDelegate</span>.<span class="property">updateGraph</span>&lt;A&gt;(<span class="attr">body</span>:)</span><br><span class="line">        <span class="number">0x1a5bd5e9c</span> <span class="title class_">SwiftUI</span>!closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">ViewRendererHost</span>.<span class="property">updateViewGraph</span>&lt;A&gt;(<span class="attr">body</span>:)</span><br><span class="line"><span class="number">0xffffffffffffffff</span></span><br></pre></td></tr></table></figure><p>这里调用了open的只有 &#x2F;usr&#x2F;lib&#x2F;frida&#x2F;frida-server 未发现的文件，看它的调用栈上一级[FileAndFolderPathDetection checkPathByOpen:] 很像是检测路径的，objection hook一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking watch <span class="keyword">class</span> <span class="title class_">FileAndFolderPathDetection</span></span><br><span class="line">(agent) <span class="title class_">Watching</span> <span class="attr">method</span>: - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line">(agent) <span class="title class_">Watching</span> <span class="attr">method</span>: - <span class="attr">checkPathByAccess</span>:</span><br><span class="line">(agent) <span class="title class_">Watching</span> <span class="attr">method</span>: - <span class="attr">checkPathByStat</span>:</span><br><span class="line">(agent) <span class="title class_">Watching</span> <span class="attr">method</span>: - <span class="attr">checkPathByLstat</span>:</span><br><span class="line">(agent) <span class="title class_">Watching</span> <span class="attr">method</span>: - <span class="attr">checkPathByStatfs</span>:</span><br><span class="line">(agent) <span class="title class_">Watching</span> <span class="attr">method</span>: - <span class="attr">checkPathByOpen</span>:</span><br><span class="line">(agent) <span class="title class_">Watching</span> <span class="attr">method</span>: - <span class="attr">checkPathByFopen</span>:</span><br><span class="line">(agent) <span class="title class_">Registering</span> job <span class="number">393195.</span> <span class="title class_">Type</span>: watch-<span class="keyword">class</span>-methods <span class="attr">for</span>: <span class="title class_">FileAndFolderPathDetection</span></span><br><span class="line"></span><br><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # (agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByNSFileManager</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByAccess</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByNSFileManager</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByAccess</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByStat</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByLstat</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByStatfs</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByOpen</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByFopen</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByNSFileManager</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByNSFileManager</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByNSFileManager</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByNSFileManager</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByNSFileManager</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">393195</span>] <span class="title class_">Called</span>: [<span class="title class_">FileAndFolderPathDetection</span> <span class="attr">checkPathByNSFileManager</span>:] (<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br></pre></td></tr></table></figure><p>这里使用frida对FileAndFolderPathDetection的所有函数进行hook，打印一下参数返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">print_arguments</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">var</span> last_arg = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">var</span> arg = (<span class="keyword">new</span> <span class="title class_">ObjC</span>.<span class="title class_">Object</span>(args[i])).<span class="title function_">toString</span>();</span><br><span class="line">        <span class="keyword">if</span> (arg == <span class="string">&#x27;nil&#x27;</span> || arg == last_arg) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        last_arg = arg;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; args&#x27;</span> + (i-<span class="number">2</span>) + <span class="string">&#x27;: &#x27;</span> + (<span class="keyword">new</span> <span class="title class_">ObjC</span>.<span class="title class_">Object</span>(args[i])).<span class="title function_">toString</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">IosTraceClass</span>(<span class="params">targetClass</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Entering ios hooking =&gt; &quot;</span> + targetClass)</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">ObjC</span>.<span class="property">classes</span>.<span class="title function_">hasOwnProperty</span>(targetClass)) &#123;</span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">ObjC</span>.<span class="property">classes</span>[targetClass].<span class="property">$ownMethods</span>;</span><br><span class="line">        methods.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">method</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hooking &quot;</span> + method);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">ObjC</span>.<span class="property">classes</span>[targetClass][method].<span class="property">implementation</span>, &#123;</span><br><span class="line">                    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">output</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">output</span> = <span class="variable language_">this</span>.<span class="property">output</span>.<span class="title function_">concat</span>(<span class="string">&quot;[*] Detected call to: &quot;</span> + targetClass + <span class="string">&quot; -&gt; &quot;</span> + method)</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">output</span> = <span class="variable language_">this</span>.<span class="property">output</span>.<span class="title function_">concat</span>(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">output</span> = <span class="variable language_">this</span>.<span class="property">output</span>.<span class="title function_">concat</span>(<span class="title function_">print_arguments</span>(args))</span><br><span class="line">                    &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">ret</span>) &#123;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">output</span> = <span class="variable language_">this</span>.<span class="property">output</span>.<span class="title function_">concat</span>(<span class="string">&quot;\r\nios return value =&gt; &quot;</span>, ret, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">output</span>)</span><br><span class="line">                        <span class="comment">// ret.replace(new NativePointer(0x0)); // 修改返回值</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ios hooking failed error is =&gt; &quot;</span>, error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">traceClass</span>(<span class="params">targetClass</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">ObjC</span>.<span class="property">available</span>) &#123;</span><br><span class="line">        <span class="title class_">IosTraceClass</span>(targetClass)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">traceClass</span>(<span class="string">&quot;FileAndFolderPathDetection&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">[iOS <span class="title class_">Device</span>::<span class="title class_">EnvDetection</span> ]-&gt; [*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>sbin/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByAccess</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>sbin/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x1</span></span><br><span class="line"> </span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>lib/frida/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByAccess</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>lib/frida/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByStat</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>lib/frida/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByLstat</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>lib/frida/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByStatfs</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>lib/frida/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByOpen</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>lib/frida/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByFopen</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>lib/frida/frida-server</span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x0</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/usr/</span>lib/frida/frida-agent.<span class="property">dylib</span></span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/Library/</span><span class="title class_">LaunchDaemons</span>/re.<span class="property">frida</span>.<span class="property">server</span>.<span class="property">plist</span></span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/Library/</span>dpkg/info/re.<span class="property">frida</span>.<span class="property">server</span>.<span class="property">extrainst_</span></span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/Library/</span>dpkg/info/re.<span class="property">frida</span>.<span class="property">server</span>.<span class="property">list</span></span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/Library/</span>dpkg/info/re.<span class="property">frida</span>.<span class="property">server</span>.<span class="property">prerm</span></span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x1</span></span><br><span class="line"></span><br><span class="line">[*] <span class="title class_">Detected</span> call <span class="attr">to</span>: <span class="title class_">FileAndFolderPathDetection</span> -&gt; - <span class="attr">checkPathByNSFileManager</span>:</span><br><span class="line"> <span class="attr">args0</span>: <span class="regexp">/Library/</span>dpkg/info/re.<span class="property">frida</span>.<span class="property">server</span>.<span class="property">md5sums</span></span><br><span class="line">ios <span class="keyword">return</span> <span class="function"><span class="params">value</span> =&gt;</span> <span class="number">0x1</span></span><br></pre></td></tr></table></figure><p>跟上面的图对照可以发现返回值是0x1的就是检测到的，所以修改所有函数的返回值为0x0，上面代码30行去掉注释，再次运行就全过掉了。<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/03.webp"                                     ></p><h3 id="越狱检测"><a href="#越狱检测" class="headerlink" title="越狱检测"></a>越狱检测</h3><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/04.webp"                                     ><br>其中文件&#x2F;目录检测，插件APP检测也都是同上面frida文件检测，也是同样过掉了。</p><h3 id="代理检测"><a href="#代理检测" class="headerlink" title="代理检测"></a>代理检测</h3><h4 id="代理APP检测"><a href="#代理APP检测" class="headerlink" title="代理APP检测"></a>代理APP检测</h4><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/05.webp"                                     ><br>我设备下载还打开了Shadowrocket，不知道为什么代理APP检测测出来。<br>也是objection查找类试了好几个关键词 proxy，network出来很多个类，既然它APP检测有Shadowrocket，直接ida打开搜索字符串<br>下载app压缩包：<br><a class="link"   href="https://github.com/cherubstar/iOSEnvDetection/releases/download/1.3/EnvDetection.app.zip" >https://github.com/cherubstar/iOSEnvDetection/releases/download/1.3/EnvDetection.app.zip<i class="fas fa-external-link-alt"></i></a><br>解压后用ida打开EnvDetection<br>菜单View-&gt;Open subviews-&gt;Strings 查找Shadowrocket会找到 Shadowrocket.app，按x查找引用，跳到引用的地方</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005618</span> <span class="built_in">A2</span> <span class="number">03</span> <span class="number">00</span> B0 <span class="number">42</span> <span class="number">20</span> <span class="number">0</span>E <span class="number">91</span>       <span class="keyword">ADRL</span>            X2, cfstr_HttpcatcherApp <span class="comment">; &quot;HttpCatcher.app&quot;</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005620</span> E8 <span class="number">03</span> <span class="number">00</span> <span class="number">91</span>                   <span class="keyword">MOV</span>             X8, <span class="built_in">SP</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005624</span> E8 <span class="number">57</span> <span class="number">00</span> F9                   <span class="keyword">STR</span>             X8, [<span class="built_in">SP</span>,<span class="number">#0x1E0</span>+var_138]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005628</span> A9 <span class="number">03</span> <span class="number">00</span> B0 <span class="number">29</span> <span class="built_in">A1</span> <span class="number">0</span>E <span class="number">91</span>       <span class="keyword">ADRL</span>            X9, cfstr_KitsunebiApp  <span class="comment">; &quot;Kitsunebi.app&quot;</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005630</span> <span class="number">09</span> <span class="number">01</span> <span class="number">00</span> F9                   <span class="keyword">STR</span>             X9, [X8,<span class="number">#0x1E0</span>+var_1E0]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005634</span> A9 <span class="number">03</span> <span class="number">00</span> B0 <span class="number">29</span> <span class="number">21</span> <span class="number">0</span>F <span class="number">91</span>       <span class="keyword">ADRL</span>            X9, cfstr_PotatsoApp    <span class="comment">; &quot;Potatso.app&quot;</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">000000010000563</span>C <span class="number">09</span> <span class="number">05</span> <span class="number">00</span> F9                   <span class="keyword">STR</span>             X9, [X8,<span class="number">#0x1E0</span>+var_1D8]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005640</span> A9 <span class="number">03</span> <span class="number">00</span> B0 <span class="number">29</span> <span class="built_in">A1</span> <span class="number">0</span>F <span class="number">91</span>       <span class="keyword">ADRL</span>            X9, cfstr_QuantumultApp <span class="comment">; &quot;Quantumult.app&quot;</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005648</span> <span class="number">09</span> <span class="number">09</span> <span class="number">00</span> F9                   <span class="keyword">STR</span>             X9, [X8,<span class="number">#0x1E0</span>+var_1D0]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">000000010000564</span>C A9 <span class="number">03</span> <span class="number">00</span> B0 <span class="number">29</span> <span class="number">21</span> <span class="number">10</span> <span class="number">91</span>       <span class="keyword">ADRL</span>            X9, cfstr_QuantumultXApp <span class="comment">; &quot;Quantumult X.app&quot;</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005654</span> <span class="number">09</span> <span class="number">0</span>D <span class="number">00</span> F9                   <span class="keyword">STR</span>             X9, [X8,<span class="number">#0x1E0</span>+var_1C8]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005658</span> A9 <span class="number">03</span> <span class="number">00</span> B0 <span class="number">29</span> <span class="built_in">A1</span> <span class="number">10</span> <span class="number">91</span>       <span class="keyword">ADRL</span>            X9, cfstr_ShadowrocketAp <span class="comment">; &quot;Shadowrocket.app&quot;</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005660</span> <span class="number">09</span> <span class="number">11</span> <span class="number">00</span> F9                   <span class="keyword">STR</span>             X9, [X8,<span class="number">#0x1E0</span>+var_1C0]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005664</span> A9 <span class="number">03</span> <span class="number">00</span> B0 <span class="number">29</span> <span class="number">21</span> <span class="number">11</span> <span class="number">91</span>       <span class="keyword">ADRL</span>            X9, cfstr_SurgeIosApp   <span class="comment">; &quot;Surge-iOS.app&quot;</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">000000010000566</span>C <span class="number">09</span> <span class="number">15</span> <span class="number">00</span> F9                   <span class="keyword">STR</span>             X9, [X8,<span class="number">#0x1E0</span>+var_1B8]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100005670</span> A9 <span class="number">03</span> <span class="number">00</span> B0 <span class="number">29</span> <span class="built_in">A1</span> <span class="number">11</span> <span class="number">91</span>       <span class="keyword">ADRL</span>            X9, cfstr_ThorApp       <span class="comment">; &quot;Thor.app&quot;</span></span><br></pre></td></tr></table></figure><p>按tab跳到代码页面，发现函数名是 -[AgentDetection checkAgentAppIsInstalled](AgentDetection *self, SEL a2)，使用objection hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking watch method <span class="string">&quot;-[AgentDetection checkAgentAppIsInstalled]&quot;</span> --dump-args --dump-backtrace --dump-<span class="keyword">return</span></span><br><span class="line">(agent) <span class="title class_">Found</span> selector at <span class="number">0x1026b8f34</span> <span class="keyword">as</span> -[<span class="title class_">AgentDetection</span> checkAgentAppIsInstalled]</span><br><span class="line">(agent) <span class="title class_">Registering</span> job <span class="number">473143.</span> <span class="title class_">Type</span>: watch-method <span class="attr">for</span>: -[<span class="title class_">AgentDetection</span> checkAgentAppIsInstalled]</span><br><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # (agent) [<span class="number">473143</span>] <span class="title class_">Called</span>: -[<span class="title class_">AgentDetection</span> checkAgentAppIsInstalled] <span class="number">0</span> <span class="title function_">arguments</span>(<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">473143</span>] -[<span class="title class_">AgentDetection</span> checkAgentAppIsInstalled] <span class="title class_">Backtrace</span>:</span><br><span class="line">        <span class="number">0x1026da35c</span> <span class="title class_">EnvDetection</span>!<span class="title class_">AgentDetectionViewModel</span>.<span class="title function_">isInstalled</span>()</span><br><span class="line">        <span class="number">0x10270d8ac</span> <span class="title class_">EnvDetection</span>!closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">AgentApplicationDetectionView</span>.<span class="property">body</span>.<span class="property">getter</span></span><br><span class="line">        <span class="number">0x197e23a60</span> <span class="title class_">SwiftUI</span>!<span class="title class_">List</span>&lt;&gt;.<span class="title function_">init</span>(<span class="attr">content</span>:)</span><br><span class="line">        <span class="number">0x10270d3c0</span> <span class="title class_">EnvDetection</span>!<span class="title class_">AgentApplicationDetectionView</span>.<span class="property">body</span>.<span class="property">getter</span></span><br><span class="line">        <span class="number">0x10270ef98</span> <span class="title class_">EnvDetection</span>!protocol witness <span class="keyword">for</span> <span class="title class_">View</span>.<span class="property">body</span>.<span class="property">getter</span> <span class="keyword">in</span> conformance <span class="title class_">AgentApplicationDetectionView</span></span><br><span class="line">        <span class="number">0x197b35b8c</span> <span class="title class_">SwiftUI</span>!partial apply <span class="keyword">for</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">ViewBodyAccessor</span>.<span class="title function_">updateBody</span>(<span class="attr">of</span>:<span class="attr">changed</span>:)</span><br><span class="line">        <span class="number">0x197e8e248</span> <span class="title class_">SwiftUI</span>!closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">BodyAccessor</span>.<span class="title function_">setBody</span>(<span class="attr">_</span>:)</span><br><span class="line">        <span class="number">0x197b2f328</span> <span class="title class_">SwiftUI</span>!<span class="title class_">ViewBodyAccessor</span>.<span class="title function_">updateBody</span>(<span class="attr">of</span>:<span class="attr">changed</span>:)</span><br><span class="line">        <span class="number">0x197e8e6d4</span> <span class="title class_">SwiftUI</span>!<span class="title class_">DynamicBody</span>.<span class="title function_">updateValue</span>()</span><br><span class="line">        <span class="number">0x197b557fc</span> <span class="title class_">SwiftUI</span>!partial apply <span class="keyword">for</span> implicit closure #<span class="number">2</span> <span class="keyword">in</span> implicit closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">Attribute</span>.<span class="property">init</span>&lt;A&gt;(<span class="attr">_</span>:)</span><br><span class="line">        <span class="number">0x1ba690a50</span> <span class="title class_">AttributeGraph</span>!<span class="attr">AG</span>::<span class="title class_">Graph</span>::<span class="title class_">UpdateStack</span>::<span class="title function_">update</span>()</span><br><span class="line">        <span class="number">0x1ba690e84</span> <span class="title class_">AttributeGraph</span>!<span class="attr">AG</span>::<span class="title class_">Graph</span>::<span class="title function_">update_attribute</span>(<span class="attr">AG</span>::<span class="attr">data</span>::ptr&lt;<span class="attr">AG</span>::<span class="title class_">Node</span>&gt;, bool)</span><br><span class="line">        <span class="number">0x1ba696588</span> <span class="title class_">AttributeGraph</span>!<span class="attr">AG</span>::<span class="title class_">Graph</span>::<span class="title function_">input_value_ref_slow</span>(<span class="attr">AG</span>::<span class="attr">data</span>::ptr&lt;<span class="attr">AG</span>::<span class="title class_">Node</span>&gt;, <span class="attr">AG</span>::<span class="title class_">AttributeID</span>, unsigned int, <span class="title class_">AGSwiftMetadata</span> <span class="keyword">const</span>*, bool*, long)</span><br><span class="line">        <span class="number">0x1ba6a85bc</span> <span class="title class_">AttributeGraph</span>!<span class="title class_">AGGraphGetValue</span></span><br><span class="line">        <span class="number">0x197fa11c4</span> <span class="title class_">SwiftUI</span>!<span class="title class_">EnvironmentReadingChild</span>.<span class="title function_">updateValue</span>()</span><br><span class="line">        <span class="number">0x197b557fc</span> <span class="title class_">SwiftUI</span>!partial apply <span class="keyword">for</span> implicit closure #<span class="number">2</span> <span class="keyword">in</span> implicit closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> closure #<span class="number">1</span> <span class="keyword">in</span> <span class="title class_">Attribute</span>.<span class="property">init</span>&lt;A&gt;(<span class="attr">_</span>:)</span><br><span class="line">(agent) [<span class="number">473143</span>] <span class="title class_">Return</span> <span class="title class_">Value</span>: <span class="number">0x281954120</span></span><br></pre></td></tr></table></figure><p>没啥有用的信息，在ida的伪代码找到了调用 AppInfo的listInstalledApps</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v26 = (id)objc_alloc_init(&amp;OBJC_CLASS___AppInfo);</span><br><span class="line">v5 = objc_msgSend(v26, <span class="string">&quot;listInstalledApps&quot;</span>);</span><br></pre></td></tr></table></figure><p>直接函数列表过滤查看listInstalledApps的实现，查看代码找到，对其hook</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v2 = -[AppInfo fetchApps](self, <span class="string">&quot;fetchApps&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_fetchApps</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">ObjC</span>.<span class="property">classes</span>[<span class="string">&quot;AppInfo&quot;</span>][<span class="string">&quot;- fetchApps&quot;</span>].<span class="property">implementation</span>, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n\t&quot;</span>))</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret value is =&gt; &quot;</span>,ret, <span class="string">&quot;=&gt;&quot;</span>, <span class="title class_">ObjC</span>.<span class="title class_">Object</span>(ret), <span class="string">&quot;=&gt;&quot;</span>, <span class="title class_">ObjC</span>.<span class="title class_">Object</span>(ret).<span class="property">$className</span>);</span><br><span class="line">            <span class="comment">// var emptyNSArray = Objc.classes.NSArray[&#x27;new&#x27;]();</span></span><br><span class="line">            <span class="comment">// ret.replace(emptyNSArray);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用栈里找到了 -[AgentDetection checkAgentAppIsInstalled]，这个返回值是NSArray，返回一份不包含任何关键app的NSArray给它即可。为了通用，直接创建一个空的NSArray返回给fetchApps，Objc.classes.NSArray<a href="">‘new’</a>，去掉7，8行注释即可</p><h4 id="常规代理检测"><a href="#常规代理检测" class="headerlink" title="常规代理检测"></a>常规代理检测</h4><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/06.webp"                                     ><br>用objection看一下AgentDetection函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # ios hooking list class_methods <span class="title class_">AgentDetection</span></span><br><span class="line">- checkAgentAppIsInstalled</span><br><span class="line">- checkProxyStatusByCFNetworkCopySystemProxySettings</span><br><span class="line">- getCFNetworkCopySystemProxySettingsDetails</span><br><span class="line">- setConnectionProxyDictionary</span><br></pre></td></tr></table></figure><p>看输出的函数名后面3个检测代理的，其中常规代理检测会调用checkProxyStatusByCFNetworkCopySystemProxySettings，直接hook</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # (agent) [<span class="number">237829</span>] <span class="title class_">Called</span>: *[<span class="title class_">AgentDetection</span> checkProxyStatusByCFNetworkCopySystemProxySettings] <span class="number">0</span> <span class="title function_">arguments</span>(<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">237829</span>] <span class="title class_">Return</span> <span class="title class_">Value</span>: <span class="number">0x0</span></span><br><span class="line"><span class="comment">// 开启代理后</span></span><br><span class="line">com.<span class="property">zsk</span>.<span class="property">EnvDetection</span> on (<span class="attr">iPhone</span>: <span class="number">14.4</span><span class="number">.1</span>) [usb] # (agent) [<span class="number">237829</span>] <span class="title class_">Called</span>: *[<span class="title class_">AgentDetection</span> checkProxyStatusByCFNetworkCopySystemProxySettings] <span class="number">0</span> <span class="title function_">arguments</span>(<span class="title class_">Kind</span>: instance) (<span class="title class_">Super</span>: <span class="title class_">NSObject</span>)</span><br><span class="line">(agent) [<span class="number">237829</span>] <span class="title class_">Return</span> <span class="title class_">Value</span>: <span class="number">0x1</span></span><br></pre></td></tr></table></figure><p>则直接修改其返回值为0x0即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_checkSystemProxy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">ObjC</span>.<span class="property">classes</span>[<span class="string">&quot;AgentDetection&quot;</span>][<span class="string">&quot;- checkProxyStatusByCFNetworkCopySystemProxySettings&quot;</span>].<span class="property">implementation</span>, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">ret</span>)&#123;</span><br><span class="line">            ret.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">NativePointer</span>(<span class="number">0x0</span>))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置代理检测变量"><a href="#设置代理检测变量" class="headerlink" title="设置代理检测变量"></a>设置代理检测变量</h4><p>如果使用WiFi 代理抓包，会发现请求发不出去，charles也抓不到任何包<br>如果使用vpn代理的话，以Shadowrocket为例，Shadowrocket 的作用是代理转发，vpn代理是处于网络层的，可以抓到更多的数据包，也可以过掉代理检测。<br>一般抓包也推荐使用vpn代理</p><h3 id="调试检测"><a href="#调试检测" class="headerlink" title="调试检测"></a>调试检测</h3><h4 id="常规反调试函数"><a href="#常规反调试函数" class="headerlink" title="常规反调试函数"></a>常规反调试函数</h4><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/07.webp"                                     ></p><h5 id="ptrace"><a href="#ptrace" class="headerlink" title="ptrace"></a>ptrace</h5><p>用的是ptrace来检测，一个进程同时只能被另外一个进程调试，所以这里开了ptrace后，其它调试工具xcode，lldb就没法对其进行调试<br>没打开ptrace是可以调试上的<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/08.webp"                                     ><br>打开后调试则报错了<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/09.webp"                                     ><br>ptrace 是系统函数，那直接hook</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ptrace</span><span class="params">(<span class="type">int</span> _request, pid _pid, <span class="type">caddr_t</span> _addr, <span class="type">int</span> _data)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_ptrace</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> ptraceAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&#x27;ptrace&#x27;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(ptraceAddr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">i1, i2, i3, i4</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ptrace flag is =&gt; &quot;</span>, i1);   </span><br><span class="line">    &#125;, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不让ptrace函数执行就行了，直接置空不做任何操作<br>再次打开ptrace用xcode附加调试则没有报错现象了</p><h5 id="ptrace-svc"><a href="#ptrace-svc" class="headerlink" title="ptrace+svc"></a>ptrace+svc</h5><p>在 iOS 反动态调试中,常用 svc #0x80 汇编指令来实现对 ptrace 和 syscall 系统调用的直接调用。通过这种方式,可以规避标准库提供的 ptrace() 函数,直接触发系统调用,增加反调试的难度,使得 lldb 无法正常附加到 app 进程。<br>svc #0x80 指令等同于 syscall() 函数在 C 语言中的使用,都是直接触发系统调用,而不会走标准库函数的包装。<br>当开启ptrace+svc后上面的hook函数没触发，查看它的源码也可以看到</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)ori_ptrace &#123;</span><br><span class="line">    ptrace(PT_DENY_ATTACH, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">- (<span class="type">void</span>)svc_ptrace &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __arm64__</span></span><br><span class="line">    __asm__(<span class="string">&quot;mov X0, #31\n&quot;</span></span><br><span class="line">            <span class="string">&quot;mov X1, #0\n&quot;</span></span><br><span class="line">            <span class="string">&quot;mov X2, #0\n&quot;</span></span><br><span class="line">            <span class="string">&quot;mov X3, #0\n&quot;</span></span><br><span class="line">            <span class="string">&quot;mov w16, #26\n&quot;</span></span><br><span class="line">            <span class="string">&quot;svc #0x80&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用直接ida打开搜索 SVC<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/10.webp"                                     ><br>搜索结果<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/11.webp"                                     ><br>跟进查看</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006028</span>                               <span class="comment">; void __cdecl -[DebugDetection svc_ptrace](DebugDetection *self, SEL)</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006028</span>                               __DebugDetection_svc_ptrace_            <span class="comment">; DATA XREF: __objc_methlist:0000000100067FEC↓o</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006028</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006028</span>                               var_10= -<span class="number">0x10</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006028</span>                               var_8= -<span class="number">8</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006028</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006028</span> FF <span class="number">43</span> <span class="number">00</span> <span class="built_in">D1</span>                   <span class="keyword">SUB</span>             <span class="built_in">SP</span>, <span class="built_in">SP</span>, <span class="number">#0x10</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">000000010000602</span>C E0 <span class="number">07</span> <span class="number">00</span> F9                   <span class="keyword">STR</span>             X0, [<span class="built_in">SP</span>,<span class="number">#0x10</span>+var_8]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006030</span> E1 <span class="number">03</span> <span class="number">00</span> F9                   <span class="keyword">STR</span>             X1, [<span class="built_in">SP</span>,<span class="number">#0x10</span>+var_10]</span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006034</span> E0 <span class="number">03</span> <span class="number">80</span> <span class="built_in">D2</span>                   <span class="keyword">MOV</span>             X0, <span class="number">#0x1F</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006038</span> <span class="number">01</span> <span class="number">00</span> <span class="number">80</span> <span class="built_in">D2</span>                   <span class="keyword">MOV</span>             X1, <span class="number">#0</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">000000010000603</span>C <span class="number">02</span> <span class="number">00</span> <span class="number">80</span> <span class="built_in">D2</span>                   <span class="keyword">MOV</span>             X2, <span class="number">#0</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006040</span> <span class="number">03</span> <span class="number">00</span> <span class="number">80</span> <span class="built_in">D2</span>                   <span class="keyword">MOV</span>             X3, <span class="number">#0</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006044</span> <span class="number">50</span> <span class="number">03</span> <span class="number">80</span> <span class="number">52</span>                   <span class="keyword">MOV</span>             W16, <span class="number">#0x1A</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006048</span> <span class="number">01</span> <span class="number">10</span> <span class="number">00</span> <span class="built_in">D4</span>                   <span class="keyword">SVC</span>             <span class="number">0x80</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">000000010000604</span>C FF <span class="number">43</span> <span class="number">00</span> <span class="number">91</span>                   <span class="keyword">ADD</span>             <span class="built_in">SP</span>, <span class="built_in">SP</span>, <span class="number">#0x10</span></span><br><span class="line"><span class="symbol">__text:</span><span class="number">0000000100006050</span> <span class="built_in">C0</span> <span class="number">03</span> <span class="number">5</span>F <span class="built_in">D6</span>                   RET</span><br></pre></td></tr></table></figure><p>汇编指令跟源码差不多<br>方式一可以使用patch的方式，修改 svc #0x80，在IDA View-A界面中选中svc那一行，点击工具栏Edit–&gt;Patch program–&gt;Change Bytes，弹出修改框，将01 10 00 D4修改为nop的byte码 1F 20 03 D5(如何知道nop的byte码，寻找一个nop，change byte就可以了)<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240201/12.webp"                                     ><br>将patch修改保存到程序里去，点击工具栏Edit–&gt;Patch program–&gt;Apply patches to input file<br>然后重签名打包安装就可以了<br>方式二直接用frida对 -[DebugDetection svc_ptrace]这个函数置空不执行，这是ObjC的函数，写法跟上面的不一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_svc_ptrace</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">DebugDetection</span> = <span class="title class_">ObjC</span>.<span class="property">classes</span>.<span class="property">DebugDetection</span>;</span><br><span class="line">    <span class="keyword">const</span> svc_ptrace = <span class="title class_">DebugDetection</span>[<span class="string">&#x27;- svc_ptrace&#x27;</span>]</span><br><span class="line">    <span class="keyword">const</span> oldImpl = svc_ptrace.<span class="property">implementation</span>;</span><br><span class="line">    svc_ptrace.<span class="property">implementation</span> = <span class="title class_">ObjC</span>.<span class="title function_">implement</span>(svc_ptrace, <span class="function">(<span class="params">handle, selector</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(handle, selector);</span><br><span class="line">        <span class="comment">// oldImpl(handle, selector);  // 旧函数运行</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只要不执行原函数就行了<br>到这里其实都是要找函数位置去hook返回值或者置空达到的反调试效果，那当代码混淆以及代码膨，使得想要快速定位svc 0x80调用并将其patch掉就变得难以实现。<br>可以查看大佬的文章：<a class="link"   href="https://bbs.kanxue.com/thread-273796.htm" >https://bbs.kanxue.com/thread-273796.htm<i class="fas fa-external-link-alt"></i></a></p><h5 id="ptrace-xor"><a href="#ptrace-xor" class="headerlink" title="ptrace+xor"></a>ptrace+xor</h5><p>通过ida查找到对应函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl -[DebugDetection xor_ptrace](DebugDetection *self, SEL a2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v2; <span class="comment">// w8</span></span><br><span class="line">  <span class="type">void</span> *__handle; <span class="comment">// [xsp+10h] [xbp-30h]</span></span><br><span class="line">  <span class="type">void</span> *v4; <span class="comment">// [xsp+18h] [xbp-28h]</span></span><br><span class="line">  _BYTE *i; <span class="comment">// [xsp+20h] [xbp-20h]</span></span><br><span class="line">  _DWORD __symbol[<span class="number">2</span>]; <span class="comment">// [xsp+28h] [xbp-18h] BYREF</span></span><br><span class="line">  SEL v7; <span class="comment">// [xsp+30h] [xbp-10h]</span></span><br><span class="line">  DebugDetection *v8; <span class="comment">// [xsp+38h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v8 = self;</span><br><span class="line">  v7 = a2;</span><br><span class="line">  __symbol[<span class="number">0</span>] = <span class="number">268633345</span>;</span><br><span class="line">  *(_DWORD *)((<span class="type">char</span> *)__symbol + <span class="number">3</span>) = <span class="number">1897140752</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = __symbol; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v2 = *i ^ <span class="number">0x71</span>;</span><br><span class="line">    *i = v2;</span><br><span class="line">    <span class="keyword">if</span> ( !v2 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  __handle = dlopen(<span class="number">0LL</span>, <span class="number">10</span>);</span><br><span class="line">  v4 = dlsym(__handle, (<span class="type">const</span> <span class="type">char</span> *)__symbol);</span><br><span class="line">  ((<span class="type">void</span> (__fastcall *)(__int64, _QWORD, _QWORD))v4)(<span class="number">31LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  dlclose(__handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了 dlsym() 函数从动态链接库中查找 ptrace 函数的符号地址，进行调用，用上面的hook就可以了<br>查看了它的源码</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="type">void</span>)xor_ptrace &#123;</span><br><span class="line">    <span class="comment">//A 异或 B 等到 C,C 再异或 A 得到 B,隐藏 ptrace</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> str[] = &#123;</span><br><span class="line">        (<span class="string">&#x27;q&#x27;</span> ^ <span class="string">&#x27;p&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;q&#x27;</span> ^ <span class="string">&#x27;t&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;q&#x27;</span> ^ <span class="string">&#x27;r&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;q&#x27;</span> ^ <span class="string">&#x27;a&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;q&#x27;</span> ^ <span class="string">&#x27;c&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;q&#x27;</span> ^ <span class="string">&#x27;e&#x27;</span>),</span><br><span class="line">        (<span class="string">&#x27;q&#x27;</span> ^ <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *p = str;</span><br><span class="line">    <span class="keyword">while</span> (((*p) ^= <span class="string">&#x27;q&#x27;</span>) != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">        p++;</span><br><span class="line">    <span class="type">int</span> (*ptrace_ptr)(<span class="type">int</span> _request, pid_t _pid, caddr_t _addr, <span class="type">int</span> _data);</span><br><span class="line">    <span class="type">void</span> *handle = dlopen(<span class="number">0</span>, RTLD_GLOBAL | RTLD_NOW);   <span class="comment">// 获得句柄</span></span><br><span class="line">    ptrace_ptr = dlsym(handle, (<span class="keyword">const</span> <span class="type">char</span> *)str);      <span class="comment">// 动态查找 ptrace 符号</span></span><br><span class="line">    ptrace_ptr(PT_DENY_ATTACH, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    dlclose(handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个 str 数组, 拼接成ptrace字符串，最终会对 ptrace 函数进行调用</p><h5 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h5><p>ida查看代码后去调用了系统函数syscall</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __cdecl -[DebugDetection ori_syscall](DebugDetection *self, SEL a2)</span><br><span class="line">&#123;</span><br><span class="line">  syscall(<span class="number">26</span>, <span class="number">31LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, a2, self);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>syscall的定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">syscall</span><span class="params">(<span class="type">long</span> number, ...)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_syscall</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> syscallAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&#x27;syscall&#x27;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(syscallAddr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">i1</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;syscall flag is =&gt; &quot;</span>, i1);   </span><br><span class="line">    &#125;, <span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="syscall-svc"><a href="#syscall-svc" class="headerlink" title="syscall+svc"></a>syscall+svc</h5><p>ptrace+svc 的hook改一下就可以</p><h5 id="syscall-xor"><a href="#syscall-xor" class="headerlink" title="syscall+xor"></a>syscall+xor</h5><p>同syscall</p><h5 id="sysctl"><a href="#sysctl" class="headerlink" title="sysctl"></a>sysctl</h5><p>同样找到代码位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl -[DebugDetection ori_sysctl](DebugDetection *self, SEL a2)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3[<span class="number">3</span>]; <span class="comment">// [xsp+18h] [xbp-2C8h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v4[<span class="number">32</span>]; <span class="comment">// [xsp+30h] [xbp-2B0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [xsp+50h] [xbp-290h]</span></span><br><span class="line">  <span class="type">int</span> v6[<span class="number">4</span>]; <span class="comment">// [xsp+2B8h] [xbp-28h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v3[<span class="number">2</span>] = (<span class="type">size_t</span>)self;</span><br><span class="line">  v3[<span class="number">1</span>] = (<span class="type">size_t</span>)a2;</span><br><span class="line">  v6[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">  v6[<span class="number">1</span>] = <span class="number">14</span>;</span><br><span class="line">  v6[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">  v6[<span class="number">3</span>] = getpid();</span><br><span class="line">  v3[<span class="number">0</span>] = <span class="number">648LL</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  sysctl(v6, <span class="number">4u</span>, v4, v3, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">return</span> (v5 &amp; <span class="number">0x800</span>) != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sysctl</span><span class="params">(<span class="type">int</span> *name, <span class="type">int</span> namelen, <span class="type">void</span> *oldval, <span class="type">size_t</span> *oldlenp, <span class="type">void</span> *newval, <span class="type">size_t</span> newlen)</span>;</span><br></pre></td></tr></table></figure><p>hook代码同上面的差不多<br>sysctl+svc和sysctl+xor都跟上面的也差不多</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目地址：&lt;a class=&quot;link&quot;   href=&quot;https://github.com/cherubstar/iOSEnvDetection&quot; &gt;https://github.com/cherubstar/iOSEnvDetection&lt;i class=&quot;fas f</summary>
      
    
    
    
    
    <category term="iOS" scheme="https://www.zskkk.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>绕过libsscronet.so app sslpinning</title>
    <link href="https://www.zskkk.cn/posts/34757/"/>
    <id>https://www.zskkk.cn/posts/34757/</id>
    <published>2024-01-01T16:00:00.000Z</published>
    <updated>2024-01-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>下了一个app，抓包后发现有ssl校验<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240102/01.webp"                                     ></p><p><a class="link"   href="https://github.com/WooyunDota/DroidSSLUnpinning/blob/master/ObjectionUnpinningPlus/hooks.js" >https://github.com/WooyunDota/DroidSSLUnpinning/blob/master/ObjectionUnpinningPlus/hooks.js<i class="fas fa-external-link-alt"></i></a><br>试了这个unsslpinning脚本，把常用的网络框架都给hook上了也是没用,dump证书也是一样失败<br>既然都抓不到那试试r0capture从上一层ssl抓包看看, hook了更深层次点的函数SSL_write也发现没有调用<br>这种既没走标准的http框架和系统ssl的请求，再深入一层就到libc的网络库了，SSL_write函数内部会调用libc提供的send、sendmsg或sendto函数来实际完成数据的网络传输，直接hook这三个函数，查看其调用栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> sendaddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;send&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendaddr: &quot;</span> + sendaddr);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sendaddr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n\t&quot;</span>))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;send called: &quot;</span> + args[<span class="number">1</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;send return: &quot;</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sendmsgaddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;sendmsg&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendmsgaddr: &quot;</span> + sendmsgaddr);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sendmsgaddr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n\t&quot;</span>))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendmsg called: &quot;</span> + <span class="title function_">hexdump</span>(args[<span class="number">1</span>]), args[<span class="number">2</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendmsg return: &quot;</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sendtoaddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;sendto&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendtoaddr: &quot;</span> + sendtoaddr);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sendtoaddr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n\t&quot;</span>))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendto called: &quot;</span> + args[<span class="number">1</span>], args[<span class="number">2</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sendto return: &quot;</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">sendmsg <span class="attr">called</span>:              <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7b488320b8  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ................</span><br><span class="line">7b488320c8  <span class="number">08</span> <span class="number">21</span> <span class="number">83</span> <span class="number">48</span> 7b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">02</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  .!.<span class="property">H</span>&#123;...........</span><br><span class="line">7b488320d8  f0 <span class="number">20</span> <span class="number">83</span> <span class="number">48</span> 7b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">18</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  . .<span class="property">H</span>&#123;...........</span><br><span class="line">7b488320e8  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">14</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ................</span><br><span class="line">7b488320f8  <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">45</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ........<span class="property">E</span>.......</span><br><span class="line">7b48832108  a0 <span class="number">21</span> <span class="number">83</span> <span class="number">48</span> 7b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 0c <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  .!.<span class="property">H</span>&#123;...........</span><br><span class="line">7b48832118  <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ................</span><br><span class="line">7b48832128  <span class="number">56</span> <span class="number">32</span> 7d 8d a4 6c <span class="number">62</span> 5f <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="variable constant_">V2</span>&#125;..<span class="property">lb_</span>........</span><br><span class="line">7b48832138  <span class="number">80</span> c9 dd 4d 7b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">88</span> <span class="number">35</span> <span class="number">83</span> <span class="number">48</span> 7b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  ...M&#123;...<span class="number">.5</span>.<span class="property">H</span>&#123;...</span><br><span class="line">7b48832148  <span class="number">88</span> <span class="number">35</span> <span class="number">83</span> <span class="number">48</span> 7b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">68</span> <span class="number">24</span> <span class="number">83</span> <span class="number">48</span> 7b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  <span class="number">.5</span>.<span class="property">H</span>&#123;...h$.H&#123;...</span><br><span class="line">7b48832158  <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> 7b <span class="number">27</span> 6c 7b <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>  .........&#123;<span class="string">&#x27;l&#123;...</span></span><br><span class="line"><span class="string">7b48832168  45 01 00 00 00 00 00 00 10 22 83 48 7b 00 00 00  E........&quot;.H&#123;...</span></span><br><span class="line"><span class="string">7b48832178  30 a3 6a f8 7b 00 00 00 88 35 83 48 7b 00 00 00  0.j.&#123;....5.H&#123;...</span></span><br><span class="line"><span class="string">7b48832188  88 35 83 48 7b 00 00 00 46 01 00 00 7b 00 00 00  .5.H&#123;...F...&#123;...</span></span><br><span class="line"><span class="string">7b48832198  60 c8 8e 50 7b 00 00 00 01 00 00 00 00 00 00 00  `..P&#123;...........</span></span><br><span class="line"><span class="string">7b488321a8  00 00 00 00 7b 00 00 00 c0 21 83 48 7b 00 00 00  ....&#123;....!.H&#123;... 0x0</span></span><br><span class="line"><span class="string">sendmsg return: 0xc</span></span><br><span class="line"><span class="string">0x7bf86aa0a0 libnetd_client.so!_ZN12FwmarkClient4sendEP13FwmarkCommandiP17FwmarkConnectInfo+0x128</span></span><br><span class="line"><span class="string">        0x7bf86aa0a0 libnetd_client.so!_ZN12FwmarkClient4sendEP13FwmarkCommandiP17FwmarkConnectInfo+0x128</span></span><br><span class="line"><span class="string">        0x7bf86aa42c libnetd_client.so!0x142c</span></span><br><span class="line"><span class="string">        0x7b4afcbd18 libsscronet.so!0x305d18</span></span><br><span class="line"><span class="string">        0x7b4afcbd18 libsscronet.so!0x305d18</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>其中libnetd_client.so是系统库，就只能怀疑请求是从 libsscronet.so 出来的了，好奇既然没用系统的ssl库，那是用了哪里的ssl库？尝试搜了以下app已加载的so库</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">marlin</span>:<span class="regexp">/ # cat /</span>proc/<span class="number">12902</span>/maps |grep ssl                                                                                                                                                                                                    </span><br><span class="line">7b23df5000-7b23e49000 r--p <span class="number">00000000</span> <span class="number">103</span>:<span class="number">13</span> <span class="number">134190</span>                        /data/app/com.<span class="property">f100</span>.<span class="property">android</span>-<span class="title class_">Hq36</span>t_d8nNvaQKbyqrIsXA==<span class="regexp">/lib/</span>arm64/libttboringssl.<span class="property">so</span></span><br><span class="line">7b28180000-7b281c8000 r--p <span class="number">00000000</span> <span class="number">103</span>:<span class="number">12</span> <span class="number">210</span>                           /system/lib64/libssl.<span class="property">so</span></span><br><span class="line">7b4b795000-7b4b7e6000 r-xp <span class="number">00000000</span> <span class="number">103</span>:<span class="number">13</span> <span class="number">134190</span>                        /data/app/com.<span class="property">f100</span>.<span class="property">android</span>-<span class="title class_">Hq36</span>t_d8nNvaQKbyqrIsXA==<span class="regexp">/lib/</span>arm64/libttboringssl.<span class="property">so</span></span><br><span class="line">7b4b7e6000-7b4b7e9000 r--p <span class="number">00050000</span> <span class="number">103</span>:<span class="number">13</span> <span class="number">134190</span>                        /data/app/com.<span class="property">f100</span>.<span class="property">android</span>-<span class="title class_">Hq36</span>t_d8nNvaQKbyqrIsXA==<span class="regexp">/lib/</span>arm64/libttboringssl.<span class="property">so</span></span><br><span class="line">7b4b7e9000-7b4b7ea000 rw-p <span class="number">00053000</span> <span class="number">103</span>:<span class="number">13</span> <span class="number">134190</span>                        /data/app/com.<span class="property">f100</span>.<span class="property">android</span>-<span class="title class_">Hq36</span>t_d8nNvaQKbyqrIsXA==<span class="regexp">/lib/</span>arm64/libttboringssl.<span class="property">so</span></span><br><span class="line">7b6d255000-7b6d298000 r-xp <span class="number">00000000</span> <span class="number">103</span>:<span class="number">12</span> <span class="number">210</span>                           /system/lib64/libssl.<span class="property">so</span></span><br><span class="line">7b6d298000-7b6d29b000 r--p <span class="number">00042000</span> <span class="number">103</span>:<span class="number">12</span> <span class="number">210</span>                           /system/lib64/libssl.<span class="property">so</span></span><br><span class="line">7b6d29b000-7b6d29c000 rw-p <span class="number">00045000</span> <span class="number">103</span>:<span class="number">12</span> <span class="number">210</span>                           /system/lib64/libssl.<span class="property">so</span></span><br></pre></td></tr></table></figure><p>查了下这个boringssl是由 Google 开发和维护的 BoringSSL 项目的动态链接库文件，尝试hook boringssl中的SSL_write函数打印调用栈</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hook_ssl</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> boringssl = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libttboringssl.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> SSL_write = boringssl.<span class="title function_">findExportByName</span>(<span class="string">&quot;SSL_write&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(SSL_write, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Calling SSL_write&quot;</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Thread</span>.<span class="title function_">backtrace</span>(<span class="variable language_">this</span>.<span class="property">context</span>, <span class="title class_">Backtracer</span>.<span class="property">ACCURATE</span>).<span class="title function_">map</span>(<span class="title class_">DebugSymbol</span>.<span class="property">fromAddress</span>).<span class="title function_">join</span>(<span class="string">&quot;\n\t&quot;</span>))</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;  ssl:&quot;</span>, <span class="title function_">ptr</span>(args[<span class="number">0</span>]));</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ssl</span> = args[<span class="number">0</span>].<span class="title function_">toString</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">buf</span> = <span class="title function_">ptr</span>(args[<span class="number">1</span>]);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SSL_write returned:&quot;</span>, retval.<span class="title function_">toInt32</span>());</span><br><span class="line">            <span class="comment">// const len = retval.toInt32();</span></span><br><span class="line">            <span class="comment">// if (len &gt; 0) &#123;</span></span><br><span class="line">            <span class="comment">//     console.log(&#x27;SSL_write\n&#x27;, this.buf.readByteArray(len), &#x27;\n&#x27;, &#x27;*&#x27;.repeat(120));</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(hook_ssl)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="title class_">Calling</span> SSL_write</span><br><span class="line"><span class="number">0x7b4af25308</span> libsscronet.<span class="property">so</span>!<span class="number">0x25f308</span></span><br><span class="line">        <span class="number">0x7b4af25308</span> libsscronet.<span class="property">so</span>!<span class="number">0x25f308</span></span><br><span class="line">        <span class="number">0x7b4af25308</span> libsscronet.<span class="property">so</span>!<span class="number">0x25f308</span></span><br><span class="line">  <span class="attr">ssl</span>: <span class="number">0x7b476c9f08</span></span><br><span class="line">SSL_write <span class="attr">returned</span>: <span class="number">2861</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>可以看到 libsscronet.so 调用了 libttboringssl.so 的 SSL_write，到这里证实了上面请求从 libsscronet.so 发出的猜想<br>在cronet库中搜索判断是否有调用boringssl中涉及证书验证的函数<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240102/02.webp"                                     ><br>有两个函数比较可疑 SSL_CTX_set_custom_verify和SSL_CTX_set_reverify_on_resume<br>定位到了调用的地方</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_25FF94</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 v0; <span class="comment">// x19</span></span><br><span class="line">  __int64 v1; <span class="comment">// x0</span></span><br><span class="line">  __int64 v2; <span class="comment">// x0</span></span><br><span class="line">  __int64 v3; <span class="comment">// x0</span></span><br><span class="line">  __int64 v4; <span class="comment">// x21</span></span><br><span class="line">  __int64 v5; <span class="comment">// x0</span></span><br><span class="line"></span><br><span class="line">  v0 = <span class="type">atomic_load</span>(&amp;qword_3C07F8);</span><br><span class="line">  <span class="keyword">if</span> ( v0 &lt;= <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (sub_1ED810(&amp;qword_3C07F8) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v0 = sub_22BC9C(<span class="number">24LL</span>);</span><br><span class="line">      *(_QWORD *)(v0 + <span class="number">8</span>) = <span class="number">0LL</span>;</span><br><span class="line">      *(_QWORD *)(v0 + <span class="number">16</span>) = <span class="number">0LL</span>;</span><br><span class="line">      CRYPTO_library_init();</span><br><span class="line">      *(_DWORD *)v0 = SSL_get_ex_new_index(<span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">      v1 = TLS_with_buffers_method();</span><br><span class="line">      v2 = SSL_CTX_new(v1);</span><br><span class="line">      sub_149BDC(v0 + <span class="number">8</span>, v2);</span><br><span class="line">      SSL_CTX_set_cert_cb(*(_QWORD *)(v0 + <span class="number">8</span>), sub_260114, <span class="number">0LL</span>);</span><br><span class="line">      SSL_CTX_set_reverify_on_resume();</span><br><span class="line">      SSL_CTX_set_custom_verify(*(_QWORD *)(v0 + <span class="number">8</span>), <span class="number">1LL</span>, sub_25F7E4);</span><br><span class="line">      SSL_CTX_set_session_cache_mode(*(_QWORD *)(v0 + <span class="number">8</span>), <span class="number">769LL</span>);</span><br><span class="line">      SSL_CTX_sess_set_new_cb(*(_QWORD *)(v0 + <span class="number">8</span>), sub_2602E4);</span><br><span class="line">      SSL_CTX_set_timeout(*(_QWORD *)(v0 + <span class="number">8</span>), <span class="number">3600LL</span>);</span><br><span class="line">      v3 = SSL_CTX_set_grease_enabled(*(_QWORD *)(v0 + <span class="number">8</span>), <span class="number">1LL</span>);</span><br><span class="line">      v4 = *(_QWORD *)(v0 + <span class="number">8</span>);</span><br><span class="line">      v5 = sub_2516C4(v3);</span><br><span class="line">      SSL_CTX_set0_buffer_pool(v4, v5);</span><br><span class="line">      SSL_CTX_set_msg_callback(*(_QWORD *)(v0 + <span class="number">8</span>), sub_2604B4);</span><br><span class="line">      SSL_CTX_add_cert_compression_alg(*(_QWORD *)(v0 + <span class="number">8</span>), <span class="number">2LL</span>, <span class="number">0LL</span>, sub_2605F4);</span><br><span class="line">      <span class="keyword">if</span> ( (sub_1E60D4(&amp;off_3B7840) &amp; <span class="number">1</span>) != <span class="number">0</span> )</span><br><span class="line">        SSL_CTX_set1_curves(*(_QWORD *)(v0 + <span class="number">8</span>), &amp;unk_B49B4, <span class="number">4LL</span>);</span><br><span class="line">      sub_1ED89C(&amp;qword_3C07F8, v0, <span class="number">0LL</span>, <span class="number">0LL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="type">atomic_load</span>(&amp;qword_3C07F8);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> v0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也去Chrome Code Search搜索（在线的Chrome源码浏览网页，提供了强大的交叉引用和全文搜索功能）<a class="link"   href="https://source.chromium.org/chromium" >https://source.chromium.org/chromium<i class="fas fa-external-link-alt"></i></a><br>看了SSL_CTX_set_reverify_on_resume源码也没什么</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SSL_CTX_set_reverify_on_resume</span><span class="params">(SSL_CTX *ctx, <span class="type">int</span> enabled)</span> &#123;</span><br><span class="line">  ctx-&gt;reverify_on_resume = !!enabled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且下一行就调用了SSL_CTX_set_custom_verify，所以重点放在SSL_CTX_set_custom_verify上<br>搜索函数名SSL_CTX_set_custom_verify，定位到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SSL_CTX_set_custom_verify</span><span class="params">(</span></span><br><span class="line"><span class="params">    SSL_CTX *ctx, <span class="type">int</span> mode,</span></span><br><span class="line"><span class="params">    <span class="keyword">enum</span> <span class="type">ssl_verify_result_t</span> (*callback)(SSL *ssl, <span class="type">uint8_t</span> *out_alert))</span> &#123;</span><br><span class="line">  ctx-&gt;verify_mode = mode;</span><br><span class="line">  ctx-&gt;custom_verify_callback = callback;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一个参数应该是上下文管理SSL&#x2F;TLS的会话指针，<br>第二个参数可以随便找调用 SSL_CTX_set_custom_verify 函数的地方，查看参数<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240102/03.webp"                                     ></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SSL_VERIFY_NONE, on a client, verifies the server certificate but does not</span></span><br><span class="line"><span class="comment">// make errors fatal. The result may be checked with |SSL_get_verify_result|. On</span></span><br><span class="line"><span class="comment">// a server it does not request a client certificate. This is the default.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SSL_VERIFY_NONE 0x00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SSL_VERIFY_PEER, on a client, makes server certificate errors fatal. On a</span></span><br><span class="line"><span class="comment">// server it requests a client certificate and makes errors fatal. However,</span></span><br><span class="line"><span class="comment">// anonymous clients are still allowed. See</span></span><br><span class="line"><span class="comment">// |SSL_VERIFY_FAIL_IF_NO_PEER_CERT|.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SSL_VERIFY_PEER 0x01</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SSL_VERIFY_FAIL_IF_NO_PEER_CERT configures a server to reject connections if</span></span><br><span class="line"><span class="comment">// the client declines to send a certificate. This flag must be used together</span></span><br><span class="line"><span class="comment">// with |SSL_VERIFY_PEER|, otherwise it won&#x27;t work.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// SSL_VERIFY_PEER_IF_NO_OBC configures a server to request a client certificate</span></span><br><span class="line"><span class="comment">// if and only if Channel ID is not negotiated.</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SSL_VERIFY_PEER_IF_NO_OBC 0x04</span></span><br></pre></td></tr></table></figure><p>值为0x0时不校验证书，hook修改参数为0即可<br>第三个参数是回调函数，就是上面的 SSL_CTX_set_custom_verify(*(_QWORD *)(v0 + 8), 1LL, sub_25F7E4);<br>跟进刚才的源码enum ssl_verify_result_t，第三个参数回调函数的返回值就只有以下三种类型，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">ssl_verify_result_t</span> <span class="title">BORINGSSL_ENUM_INT</span> &#123;</span></span><br><span class="line">  ssl_verify_ok,</span><br><span class="line">  ssl_verify_invalid,</span><br><span class="line">  ssl_verify_retry,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看了一些调用的地方，ssl_verify_ok的值是0，所以可以hook回调函数修改返回值为0即可，就不用管函数内部在做什么了<br>这个so会在加载后立即进行证书绑定的判断，只执行一次，所以需要在so加载的时候找到它，并且在so执行第一次的时候进行hook<br>frida hook代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> android_dlopen_ext = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&#x27;android_dlopen_ext&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;android_dlopen_ext: &quot;</span>, android_dlopen_ext)</span><br><span class="line">    <span class="keyword">if</span> (android_dlopen_ext != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(android_dlopen_ext, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="keyword">var</span> soName = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="comment">// console.log(soName)</span></span><br><span class="line">                <span class="keyword">if</span> (soName.<span class="title function_">indexOf</span>(<span class="string">&quot;libsscronet.so&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">hook</span> = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">hook</span>) &#123;</span><br><span class="line">                    <span class="title function_">hook_cronetssl</span>()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_callback</span>(<span class="params">p</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> fun = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(p, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">    <span class="keyword">var</span> new_fun = <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">arg1, arg2</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cononono&quot;</span>, <span class="title function_">fun</span>(arg1, arg2));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>])</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(fun, new_fun)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_cronetssl</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> cronet = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libsscronet.so&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cronet: &quot;</span>, cronet)</span><br><span class="line">    <span class="keyword">var</span> verify = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libsscronet.so&quot;</span>, <span class="string">&quot;SSL_CTX_set_custom_verify&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;verify: &quot;</span>, verify)</span><br><span class="line">    <span class="keyword">var</span> custom_verify = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(verify, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">    <span class="keyword">var</span> new_fun = <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">arg1, arg2, arg3</span>) &#123;</span><br><span class="line">        <span class="title function_">hook_callback</span>(arg3)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;SSL_CTX_set_custom_verify called: &quot;</span> + arg1 + <span class="string">&quot; &quot;</span> + arg2 + <span class="string">&quot; &quot;</span> + arg3)</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">custom_verify</span>(arg1, <span class="number">0</span>, arg3)</span><br><span class="line">    &#125;, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(verify, new_fun)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main)</span><br></pre></td></tr></table></figure><p>验证抓包<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20240102/04.webp"                                     ><br>后面通过调用栈和查询发现这是byteDance下的产品，脚本应该是通用的，也有大佬给出了其它方法<br><a class="link"   href="https://github.com/LanBaiCode/FridaScripts/blob/main/byteDance.js" >https://github.com/LanBaiCode/FridaScripts/blob/main/byteDance.js<i class="fas fa-external-link-alt"></i></a><br></br><br></br><br>大佬文章：<a class="link"   href="https://bbs.kanxue.com/thread-277996-1.htm" >[原创] 更高更妙的抓包——从Chrome源码学习使用Cronet 通讯组件的app的通用抓包方法<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;下了一个app，抓包后发现有ssl校验&lt;br&gt;&lt;img  
                     lazyload
                     alt=&quot;image&quot;
                     data-src=&quot;https://jsd.c</summary>
      
    
    
    
    
    <category term="抓包" scheme="https://www.zskkk.cn/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>修改源码定制ART</title>
    <link href="https://www.zskkk.cn/posts/17659/"/>
    <id>https://www.zskkk.cn/posts/17659/</id>
    <published>2023-11-14T16:00:00.000Z</published>
    <updated>2023-11-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ART定制方案比较"><a href="#ART定制方案比较" class="headerlink" title="ART定制方案比较"></a>ART定制方案比较</h3><ol><li>源码修改编译，定制rom<br> 优点：开发简单，可以直接访问ART中的海量的丰富api<br> 缺点：较笨重，首先需要一台性能足够强大的pc，其次，每次修改完代码都需要重新编译，刷机，测试。</li><li>基于frida，xposed等hook框架定制<br> 优点：轻量，快捷，不需要性能强大的pc，也无需经历耗时的编译和刷机测试阶段，往往只需要重启app即可<br> 缺点：往往无法直接复用ART源码中已有的api，只能后使用有限的api</li><li>将修改源码定制rom和frida等hook框架相结合，比如FART和frida相结合，脱壳功能更强大。<br> 优点：结合了frida的轻量，快捷以及修改源码的简单。</li></ol><p>工具使用：<br>    1. 可以使用AndroidStudio导入aosp源码，对framework层相关的java类进行源码阅读和修改定制<br>    2. 可以使用clion等ide利用aosp编译过程中生成的Cmakelists文件，导入ART部分的源码进行阅读和修改定制。</p><p>针对ART进行定制时，对于整个AOSP源码，Java层代码只关心Framework、libcore，因此没有必要全部作为源码导入<br>以下教程用的机型是pixel xl，源码是android 8.1</p><h4 id="第一种：源码修改编译，定制rom"><a href="#第一种：源码修改编译，定制rom" class="headerlink" title="第一种：源码修改编译，定制rom"></a>第一种：源码修改编译，定制rom</h4><h5 id="编译生成AndroidStudio项目配置文件并导入源码"><a href="#编译生成AndroidStudio项目配置文件并导入源码" class="headerlink" title="编译生成AndroidStudio项目配置文件并导入源码"></a>编译生成AndroidStudio项目配置文件并导入源码</h5><ol><li>编译生成idegen.jar在AOSP源码目录下输入以下命令，生成idegen.jar<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch aosp_marlin-userdebug</span><br><span class="line">mmm development/tools/idegen/</span><br></pre></td></tr></table></figure></li><li>生成android.ipr和android.iml<br>执行idegen.sh脚本，生成即可<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure>运行完毕上面的命令之后，就在根目录生成了2个文件：android.ipr和android.iml</li><li>排除不必要的模块，提高加载速度<br>打开android.iml，找到excludeFolder属性，我们可以看到默认有一些模块是被排除了，不会被导入的。</br>但实际上，整个AOSP代码中，我们只关心framework模块和libcore模块，因此可以根据自己的需求去掉其它所有模块，只保留framework和libcore，比如将exclude修改为如下内容：</br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/art&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/bionic&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/bootable&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/build&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/cts&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/dalvik&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/developers&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/development&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/device&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/docs&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/external&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/hardware&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/kernel&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/libcore&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/libnativehelper&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/out&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/pdk&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/platform_testing&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/prebuilts&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/sdk&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/system&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/test&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/toolchain&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/tools&quot; /&gt;</span><br><span class="line">&lt;excludeFolder url=&quot;file://$MODULE_DIR$/.repo&quot; /&gt;</span><br></pre></td></tr></table></figure>这样修改之后，打开速度会快很多。接下来使用AndroidStudio直接打开android.ipr文件。 &gt; File-Open…，找到android.ipr即可。</br>导入完成之后，就能看到整个AOSP源码了：橘红色的是在上一步exclude排除掉的模块。</br>剩余配置参考以下文章：</br><a class="link"   href="https://juejin.cn/post/6969508324618272782" >https://juejin.cn/post/6969508324618272782<i class="fas fa-external-link-alt"></i></a></br><a class="link"   href="https://blog.csdn.net/yanbober/article/details/48846331" >https://blog.csdn.net/yanbober/article/details/48846331<i class="fas fa-external-link-alt"></i></a></br></li></ol><h5 id="Clion导入ART"><a href="#Clion导入ART" class="headerlink" title="Clion导入ART"></a>Clion导入ART</h5><ol><li>编译生成cmakelists文件<br>打开以下两个开关，CMakeLists.txt就会根据编译环境自动生成</br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br><span class="line">lunch aosp_marlin-userdebug</span><br><span class="line">export SOONG_GEN_CMAKEFILES=1</span><br><span class="line">export SOONG_GEN_CMAKEFILES_DEBUG=1</span><br></pre></td></tr></table></figure>下面开始编译</br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure>生成的相关项目的cmakelists文件存放在out目录，不如我们需要导入ART的源码部分对应的路径为：out&#x2F;development&#x2F;ide&#x2F;clion&#x2F;art，可以看到下面还有很多模块，我们选择使用arm32或者arm64的runtime模块即可，对应的cmakelists文件在</br>out&#x2F;development&#x2F;ide&#x2F;clion&#x2F;art&#x2F;runtime&#x2F;libart-arm-android&#x2F;CMakeLists.txt</br>以及</br>out&#x2F;development&#x2F;ide&#x2F;clion&#x2F;art&#x2F;runtime&#x2F;libart-arm64-android&#x2F;CMakeLists.txt</br>然后修改根目录为源码的根目录 Tools &gt; CMake &gt; Change Project Root:</br></li></ol><h5 id="APP运行过程中so加载流程源码分析"><a href="#APP运行过程中so加载流程源码分析" class="headerlink" title="APP运行过程中so加载流程源码分析"></a>APP运行过程中so加载流程源码分析</h5><p>接下来对so的加载流程进行分析，加载so有两种方式</br>System.loadLibrary(“so文件名”);</br>System.load(“so文件相对路径”);</br>loadLibrary通过loader.findLibrary(libraryName)函数找到库文件的绝对路径，后续跟load一样调用doLoad(String name, ClassLoader loader)，最后去调用art下的nativeLoad native函数</br>&#x2F;libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;java&#x2F;java&#x2F;lang&#x2F;Runtime.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String <span class="title function_">doLoad</span><span class="params">(String name, ClassLoader loader)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">librarySearchPath</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (loader != <span class="literal">null</span> &amp;&amp; loader <span class="keyword">instanceof</span> BaseDexClassLoader) &#123;</span><br><span class="line">        <span class="type">BaseDexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> (BaseDexClassLoader) loader;</span><br><span class="line">        librarySearchPath = dexClassLoader.getLdLibraryPath();</span><br><span class="line">    &#125;</span><br><span class="line">    java.lang.System.logE(<span class="string">&quot;Runtime doLoad -&gt; &quot;</span> + name + <span class="string">&quot;, classLoader -&gt; &quot;</span> + loader.toString());</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> nativeLoad(name, loader, librarySearchPath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说doLoad和nativeLoad是所有加载so文件都会调用的函数，那可以在这个函数下添加log信息，这样就可以在Java下监控所有的so</br></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.System.logE(<span class="string">&quot;Runtime doLoad -&gt; &quot;</span> + name + <span class="string">&quot;, classLoader -&gt; &quot;</span> + loader.toString());</span><br></pre></td></tr></table></figure><p>通过查找源码知道nativeLoad是在xref: &#x2F;libcore&#x2F;ojluni&#x2F;src&#x2F;main&#x2F;native&#x2F;Runtime.c下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Runtime_nativeLoad</span><span class="params">(JNIEnv* env, jclass ignored, jstring javaFilename,</span></span><br><span class="line"><span class="params">                   jobject javaLoader, jstring javaLibrarySearchPath)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> JVM_NativeLoad(env, javaFilename, javaLoader, javaLibrarySearchPath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后通过调用链找到 nativeLoad -&gt;Runtime_nativeLoad(Runtime.c) -&gt; JVM_NativeLoad(Openjdk_Jvm.cc) -&gt; LoadNativeLibrary(java_vm_ext.cc)</br>最后是LoadNativeLibrary函数，查看函数流程，</br>在函数刚进来的时候添加日志</br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LOG(ERROR) &lt;&lt; <span class="string">&quot;[java_vm_ext.cc]JavaVMExt::LoadNativeLibrary -&gt; &quot;</span> &lt;&lt; path.c_str();</span><br></pre></td></tr></table></figure><p>在加载本地库的前后添加日志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//add</span></span><br><span class="line">LOG(ERROR) &lt;&lt; <span class="string">&quot;[java_vm_ext.cc]before call LoadNativeLibrary -&gt; &quot;</span> &lt;&lt; path_str;</span><br><span class="line"><span class="type">void</span>* handle = android::OpenNativeLibrary(env,</span><br><span class="line">                                        runtime_-&gt;GetTargetSdkVersion(),</span><br><span class="line">                                        path_str,</span><br><span class="line">                                        class_loader,</span><br><span class="line">                                        library_path,</span><br><span class="line">                                        &amp;needs_native_bridge,</span><br><span class="line">                                        error_msg); </span><br><span class="line"><span class="comment">//add</span></span><br><span class="line">LOG(ERROR) &lt;&lt; <span class="string">&quot;[java_vm_ext.cc]after call LoadNativeLibrary -&gt; &quot;</span> &lt;&lt; path_str;</span><br></pre></td></tr></table></figure><p>接下来判断是否有JNI_OnLoad，没有则结束函数，有就加载JNI_OnLoad，在加载JNI_OnLoad前后添加日志</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> was_successful = <span class="literal">false</span>;</span><br><span class="line"><span class="type">void</span>* sym = library-&gt;FindSymbol(<span class="string">&quot;JNI_OnLoad&quot;</span>, nullptr);</span><br><span class="line"><span class="keyword">if</span> (sym == nullptr) &#123;</span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">&quot;[No JNI_OnLoad found in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">    was_successful = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Call JNI_OnLoad.  We have to override the current class</span></span><br><span class="line">    <span class="comment">// loader, which will always be &quot;null&quot; since the stuff at the</span></span><br><span class="line">    <span class="comment">// top of the stack is around Runtime.loadLibrary().  (See</span></span><br><span class="line">    <span class="comment">// the comments in the JNI FindClass function.)</span></span><br><span class="line">    ScopedLocalRef&lt;jobject&gt; old_class_loader(env, env-&gt;NewLocalRef(self-&gt;GetClassLoaderOverride()));</span><br><span class="line">    self-&gt;SetClassLoaderOverride(class_loader);</span><br><span class="line"></span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">&quot;[Calling JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="title function_">int</span> <span class="params">(*JNI_OnLoadFn)</span><span class="params">(JavaVM*, <span class="type">void</span>*)</span>;</span><br><span class="line">    JNI_OnLoadFn jni_on_load = reinterpret_cast&lt;JNI_OnLoadFn&gt;(sym);</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    LOG(ERROR) &lt;&lt; <span class="string">&quot;[java_vm_ext.cc]before call &quot;</span> &lt;&lt; path_str &lt;&lt; <span class="string">&quot;.JNI_Onload&quot;</span>;</span><br><span class="line">    <span class="type">int</span> version = (*jni_on_load)(this, nullptr);</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    LOG(ERROR) &lt;&lt; <span class="string">&quot;[java_vm_ext.cc]after call &quot;</span> &lt;&lt; path_str &lt;&lt; <span class="string">&quot;.JNI_Onload&quot;</span> &lt;&lt; <span class="string">&quot;, returm: &quot;</span> &lt;&lt; version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (runtime_-&gt;GetTargetSdkVersion() != <span class="number">0</span> &amp;&amp; runtime_-&gt;GetTargetSdkVersion() &lt;= <span class="number">21</span>) &#123;</span><br><span class="line">        <span class="comment">// Make sure that sigchain owns SIGSEGV.</span></span><br><span class="line">        EnsureFrontOfChain(SIGSEGV);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    self-&gt;SetClassLoaderOverride(old_class_loader.get());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (version == JNI_ERR) &#123;</span><br><span class="line">        StringAppendF(error_msg, <span class="string">&quot;JNI_ERR returned from JNI_OnLoad in \&quot;%s\&quot;&quot;</span>, path.c_str());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (JavaVMExt::IsBadJniVersion(version)) &#123;</span><br><span class="line">        StringAppendF(error_msg, <span class="string">&quot;Bad JNI version returned from JNI_OnLoad in \&quot;%s\&quot;: %d&quot;</span>,</span><br><span class="line">                      path.c_str(), version);</span><br><span class="line">        <span class="comment">// It&#x27;s unwise to call dlclose() here, but we can mark it</span></span><br><span class="line">        <span class="comment">// as bad and ensure that future load attempts will fail.</span></span><br><span class="line">        <span class="comment">// We don&#x27;t know how far JNI_OnLoad got, so there could</span></span><br><span class="line">        <span class="comment">// be some partially-initialized stuff accessible through</span></span><br><span class="line">        <span class="comment">// newly-registered native method calls.  We could try to</span></span><br><span class="line">        <span class="comment">// unregister them, but that doesn&#x27;t seem worthwhile.</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        was_successful = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    VLOG(jni) &lt;&lt; <span class="string">&quot;[Returned &quot;</span> &lt;&lt; (was_successful ? <span class="string">&quot;successfully&quot;</span> : <span class="string">&quot;failure&quot;</span>)</span><br><span class="line">    &lt;&lt; <span class="string">&quot; from JNI_OnLoad in \&quot;&quot;</span> &lt;&lt; path &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里也能看出来so中的JNI_Onload的函数名必须要c的形式进行编译，还要导出的原因就是这里它需要去查找符号名</br>重新编译，刷入手机</br>运行有加壳的app，查看log</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231115/01.webp"                                     ></p><h4 id="第二种：基于frida，xposed等hook框架定制"><a href="#第二种：基于frida，xposed等hook框架定制" class="headerlink" title="第二种：基于frida，xposed等hook框架定制"></a>第二种：基于frida，xposed等hook框架定制</h4><p>要实现对加载so监控的话，可以结合流程当中的api进行hook来监控so的加载流程，在hook中选择的api层级越底层越好，如果只通过System.load, loadLibrary进行监控的话，可能会遗漏掉通过runtime进行加载的so。</br>上面分析到加载so底层的api是libnativeloader.so下的OpenNativeLibrary和libart.so下的LoadNativeLibrary</br>可以使用frida进行hook，在hook前可以先把libnativeloader.so和libart.so脱出来用ida查看导出表OpenNativeLibrary和LoadNativeLibrary的导出符号</br>&#x2F;system&#x2F;lib&#x2F;libart.so或者&#x2F;system&#x2F;lib64&#x2F;libart.so</br>&#x2F;system&#x2F;lib&#x2F;libnativeloader.so或者&#x2F;system&#x2F;lib64&#x2F;libnativeloader.so</br>OpenNativeLibrary的导出符号：_ZN7android17OpenNativeLibraryEP7_JNIEnviPKcP8_jobjectP8_jstringPbPNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEE</p><h5 id="使用frida进行hook"><a href="#使用frida进行hook" class="headerlink" title="使用frida进行hook"></a>使用frida进行hook</h5><p>下面就监控OpenNativeLibrary</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// libart.so</span></span><br><span class="line"><span class="comment">// bool JavaVMExt::LoadNativeLibrary(JNIEnv* env,</span></span><br><span class="line"><span class="comment">//     const std::string&amp; path,</span></span><br><span class="line"><span class="comment">//     jobject class_loader,</span></span><br><span class="line"><span class="comment">//     jstring library_path,</span></span><br><span class="line"><span class="comment">//     std::string* error_msg) </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// libnativeloader.so</span></span><br><span class="line"><span class="comment">// void* handle = android::OpenNativeLibrary(env,</span></span><br><span class="line"><span class="comment">//     runtime_-&gt;GetTargetSdkVersion(),</span></span><br><span class="line"><span class="comment">//     path_str,</span></span><br><span class="line"><span class="comment">//     class_loader,</span></span><br><span class="line"><span class="comment">//     library_path,</span></span><br><span class="line"><span class="comment">//     &amp;needs_native_bridge,</span></span><br><span class="line"><span class="comment">//     error_msg);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tracesoload</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Process</span>.<span class="property">arch</span>);</span><br><span class="line">    <span class="keyword">var</span> libnativeloaderModule = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libnativeloader.so&quot;</span>);</span><br><span class="line">    <span class="comment">// OpenNativeLibrary</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">OpenNativeLibraryAddr</span> = libnativeloaderModule.<span class="title function_">getExportByName</span>(<span class="string">&quot;_ZN7android17OpenNativeLibraryEP7_JNIEnviPKcP8_jobjectP8_jstringPbPNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEE&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">OpenNativeLibraryAddr</span>, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sopath</span> = <span class="title function_">ptr</span>(args[<span class="number">2</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go into OpenNativeLibrary -&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">sopath</span>);</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave OpenNativeLibrary -&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">sopath</span>, <span class="string">&quot;, return: &quot;</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">tracesoload</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p>输出打印</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[AOSP on msm8996::com.iCitySuzhou.suzhou001]-&gt; arm64</span><br><span class="line">go into OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001--s3SCRYsyaFmNLfEq3Pj3g==/lib/arm64/libshell-super.com.iCitySuzhou.suzhou001.so</span><br><span class="line">leave OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001--s3SCRYsyaFmNLfEq3Pj3g==/lib/arm64/libshell-super.com.iCitySuzhou.suzhou001.so</span><br><span class="line">go into OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001--s3SCRYsyaFmNLfEq3Pj3g==/lib/arm64/libjcore230.so</span><br><span class="line">leave OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001--s3SCRYsyaFmNLfEq3Pj3g==/lib/arm64/libjcore230.so</span><br><span class="line">go into OpenNativeLibrary -&gt; /system/app/webview/webview.apk!/lib/arm64-v8a/libwebviewchromium.so</span><br><span class="line">leave OpenNativeLibrary -&gt; /system/app/webview/webview.apk!/lib/arm64-v8a/libwebviewchromium.so</span><br><span class="line">go into OpenNativeLibrary -&gt; /system/lib64/libwebviewchromium_plat_support.so</span><br><span class="line">leave OpenNativeLibrary -&gt; /system/lib64/libwebviewchromium_plat_support.so</span><br></pre></td></tr></table></figure><p>加载so后还会对这个so进行查找是否含有 JNI_OnLoad</br>void* sym &#x3D; library-&gt;FindSymbol(“JNI_OnLoad”, nullptr);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">FindSymbol</span><span class="params">(<span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; symbol_name, <span class="type">const</span> <span class="type">char</span>* shorty = nullptr)</span></span><br><span class="line">    <span class="title function_">REQUIRES</span><span class="params">(!Locks::mutator_lock_)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> NeedsNativeBridge()</span><br><span class="line">        ? FindSymbolWithNativeBridge(symbol_name.c_str(), shorty)</span><br><span class="line">        : FindSymbolWithoutNativeBridge(symbol_name.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NeedsNativeBridge()判断如果设备的架构与应用的架构不同返回true，所以这里是走FindSymbolWithoutNativeBridge()</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">FindSymbolWithoutNativeBridge</span><span class="params">(<span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; symbol_name)</span></span><br><span class="line">    <span class="title function_">REQUIRES</span><span class="params">(!Locks::mutator_lock_)</span> &#123;</span><br><span class="line">    CHECK(!NeedsNativeBridge());</span><br><span class="line">    <span class="keyword">return</span> dlsym(handle_, symbol_name.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span>* <span class="title function_">dlsym</span><span class="params">(<span class="type">void</span>* handle, <span class="type">const</span> <span class="type">char</span>* _Nonnull symbol)</span>;</span><br></pre></td></tr></table></figure><p>这里对dlsym进行监控的话，就可以监视接下来对 JNI_OnLoad 的查询的过程</br>dlsym位于libc.so，也使用freida进行hook</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tracesoload</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Process</span>.<span class="property">arch</span>);</span><br><span class="line">    <span class="keyword">var</span> libnativeloaderModule = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libnativeloader.so&quot;</span>);</span><br><span class="line">    <span class="comment">// OpenNativeLibrary</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">OpenNativeLibraryAddr</span> = libnativeloaderModule.<span class="title function_">getExportByName</span>(<span class="string">&quot;_ZN7android17OpenNativeLibraryEP7_JNIEnviPKcP8_jobjectP8_jstringPbPNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEE&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">OpenNativeLibraryAddr</span>, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sopath</span> = <span class="title function_">ptr</span>(args[<span class="number">2</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go into OpenNativeLibrary -&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">sopath</span>);</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave OpenNativeLibrary -&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">sopath</span>, <span class="string">&quot;, return: &quot;</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">var</span> dlsymAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;dlsym&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlsymAddr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">handle</span> = args[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">symbol</span> = <span class="title function_">ptr</span>(args[<span class="number">1</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;leave dlsym: handle: &quot;</span> + <span class="variable language_">this</span>.<span class="property">handle</span> + <span class="string">&quot;, symbol: &quot;</span> + <span class="variable language_">this</span>.<span class="property">symbol</span>, <span class="string">&quot;, return: &quot;</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">tracesoload</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p>已经看到查找JNI_OnLoad的流程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">leave OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001--s3SCRYsyaFmNLfEq3Pj3g==/lib/arm64/libshell-super.com.iCitySuzhou.suzhou001.so , return: 0x49668d9309b699ed</span><br><span class="line">leave dlsym: handle: 0x49668d9309b699ed, symbol: JNI_OnLoad , return: 0x730a123a5c</span><br><span class="line">leave dlsym: handle: 0xde2d62226fd8b40d, symbol: InitEsxProfile , return: 0x7314e10620</span><br><span class="line">go into OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001--s3SCRYsyaFmNLfEq3Pj3g==/lib/arm64/libjcore230.so</span><br><span class="line">leave OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001--s3SCRYsyaFmNLfEq3Pj3g==/lib/arm64/libjcore230.so , return: 0x513c62ce705a71c5</span><br><span class="line">leave dlsym: handle: 0x513c62ce705a71c5, symbol: JNI_OnLoad , return: 0x7308e5c5bc</span><br><span class="line">leave OpenNativeLibrary -&gt; /system/lib64/libwebviewchromium_plat_support.so , return: 0xef0d55dae65a7f63</span><br><span class="line">leave dlsym: handle: 0xef0d55dae65a7f63, symbol: JNI_OnLoad , return: 0x731ca1e740</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_base_library_1loader_LibraryLoader_nativeLibraryLoaded , return: 0x730ce0dc34</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_base_library_1loader_LibraryLoader_nativeGetVersionNumber , return: 0x730ce0dee0</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_base_TraceEvent_nativeRegisterEnabledObserver , return: 0x730ce10300</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_base_PathService_nativeOverride , return: 0x730ce0ed00</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_android_1webview_AwContentsStatics_nativeGetProductVersion , return: 0x730cdca980</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_android_1webview_AwGLFunctor_nativeGetAwDrawGLFunction , return: 0x730cdcc4e4</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_android_1webview_AwContents_nativeSetAwDrawSWFunctionTable , return: 0x730cdbfcc4</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_android_1webview_AwContents_nativeSetAwDrawGLFunctionTable , return: 0x730cdb714c</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_android_1webview_AwContentsStatics_nativeSetCheckClearTextPermitted , return: 0x730cdcaad4</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_base_CommandLine_nativeHasSwitch , return: 0x730ce08b70</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_android_1webview_AwContentsStatics_nativeSetSafeBrowsingEnabledByManifest , return: 0x730cdcaa24</span><br><span class="line">leave dlsym: handle: 0xe5b5bf72a8b510e7, symbol: Java_org_chromium_base_CommandLine_nativeAppendSwitch , return: 0x730ce08cd8</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h4 id="第三种：定制rom和frida等hook框架相结合"><a href="#第三种：定制rom和frida等hook框架相结合" class="headerlink" title="第三种：定制rom和frida等hook框架相结合"></a>第三种：定制rom和frida等hook框架相结合</h4><p>在art中一些关键地方可以预留api给frida hook, 以下面跟踪jni函数绑定为例。</p><h3 id="ART定制跟中jni函数绑定"><a href="#ART定制跟中jni函数绑定" class="headerlink" title="ART定制跟中jni函数绑定"></a>ART定制跟中jni函数绑定</h3><p>在上面的日志看到很多symbol的值类似静态注册的JNI函数</br>jni函数的绑定：每一个java层函数在native层都对应一个ArtMethod对象，jni函数在执行前必须完成对jni函数所在类的加载和初始化、以及该jni函数的ArtMethod对象当中属性和so中具体函数地址的绑定</br></p><ol><li>静态注册的jni函数</li><li>动态注册的jni函数</li></ol><h4 id="静态注册的jni函数"><a href="#静态注册的jni函数" class="headerlink" title="静态注册的jni函数"></a>静态注册的jni函数</h4><p>通过源码追踪jni注册流程，首先当一个类中的 JNI 函数被调用的时候，ART 会首先确保该类已经被加载和初始化。这一过程通常通过 class_linker.cc 文件中的 ClassLinker::LoadClass 方法完成。在加载过程中，类的属性和成员函数也会被加载和初始化，这一步由 LoadClassMembers 方法处理。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载类</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClassLinker::LoadClass</span><span class="params">(Thread* self,</span></span><br><span class="line"><span class="params">                            <span class="type">const</span> DexFile&amp; dex_file,</span></span><br><span class="line"><span class="params">                            <span class="type">const</span> DexFile::ClassDef&amp; dex_class_def,</span></span><br><span class="line"><span class="params">                            Handle&lt;mirror::Class&gt; klass)</span> &#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">uint8_t</span>* class_data = dex_file.GetClassData(dex_class_def);</span><br><span class="line">  <span class="keyword">if</span> (class_data == nullptr) &#123;</span><br><span class="line">    <span class="keyword">return</span>;  <span class="comment">// no fields or methods - for example a marker interface</span></span><br><span class="line">  &#125;</span><br><span class="line">  LoadClassMembers(self, dex_file, class_data, klass);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加载类成员和函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ClassLinker::LoadClassMembers</span><span class="params">(Thread* self,</span></span><br><span class="line"><span class="params">                                   <span class="type">const</span> DexFile&amp; dex_file,</span></span><br><span class="line"><span class="params">                                   <span class="type">const</span> <span class="type">uint8_t</span>* class_data,</span></span><br><span class="line"><span class="params">                                   Handle&lt;mirror::Class&gt; klass)</span> &#123;</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// .....部分代码省略.....</span></span><br><span class="line">    <span class="comment">// TODO These should really use the iterators.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; it.HasNextDirectMethod(); i++, it.Next()) &#123;</span><br><span class="line">      ArtMethod* method = klass-&gt;GetDirectMethodUnchecked(i, image_pointer_size_);</span><br><span class="line">      <span class="comment">// 加载函数</span></span><br><span class="line">      LoadMethod(dex_file, it, klass, method);</span><br><span class="line">      <span class="comment">// 将方法与其实现的代码进行链接</span></span><br><span class="line">      LinkCode(this, method, oat_class_ptr, class_def_method_index);</span><br><span class="line">      <span class="type">uint32_t</span> it_method_index = it.GetMemberIndex();</span><br><span class="line">      <span class="keyword">if</span> (last_dex_method_index == it_method_index) &#123;</span><br><span class="line">        <span class="comment">// duplicate case</span></span><br><span class="line">        method-&gt;SetMethodIndex(last_class_def_method_index);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        method-&gt;SetMethodIndex(class_def_method_index);</span><br><span class="line">        last_dex_method_index = it_method_index;</span><br><span class="line">        last_class_def_method_index = class_def_method_index;</span><br><span class="line">      &#125;</span><br><span class="line">      class_def_method_index++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// .........</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法与其实际实现的代码进行链接</span></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> <span class="title function_">LinkCode</span><span class="params">(ClassLinker* class_linker,</span></span><br><span class="line"><span class="params">                     ArtMethod* method,</span></span><br><span class="line"><span class="params">                     <span class="type">const</span> OatFile::OatClass* oat_class,</span></span><br><span class="line"><span class="params">                     <span class="type">uint32_t</span> class_def_method_index)</span> <span class="title function_">REQUIRES_SHARED</span><span class="params">(Locks::mutator_lock_)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  <span class="comment">// 检查一个方法是否具有 native 属性，返回true则该方法是一个JNI函数</span></span><br><span class="line">  <span class="keyword">if</span> (method-&gt;IsNative()) &#123;</span><br><span class="line">    <span class="comment">// Unregistering restores the dlsym lookup stub.</span></span><br><span class="line">    <span class="comment">// 解除方法的本地链接, 该方法在调用时不再直接执行本地代码，而是通过解释器来处理</span></span><br><span class="line">    method-&gt;UnregisterNative();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (enter_interpreter || quick_code == nullptr) &#123;</span><br><span class="line">      <span class="comment">// We have a native method here without code. Then it should have either the generic JNI</span></span><br><span class="line">      <span class="comment">// trampoline as entrypoint (non-static), or the resolution trampoline (static).</span></span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> this doesn&#x27;t handle all the cases where trampolines may be installed.</span></span><br><span class="line">      <span class="type">const</span> <span class="type">void</span>* entry_point = method-&gt;GetEntryPointFromQuickCompiledCode();</span><br><span class="line">      DCHECK(class_linker-&gt;IsQuickGenericJniStub(entry_point) ||</span><br><span class="line">             class_linker-&gt;IsQuickResolutionStub(entry_point));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 解除方法的本地链接</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">ArtMethod::UnregisterNative</span><span class="params">()</span> &#123;</span><br><span class="line">  CHECK(IsNative() &amp;&amp; !IsFastNative()) &lt;&lt; PrettyMethod();</span><br><span class="line">  <span class="comment">// restore stub to lookup native pointer via dlsym</span></span><br><span class="line">  SetEntryPointFromJni(GetJniDlsymLookupStub());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用于设置 JNI 方法的入口点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">SetEntryPointFromJni</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* entrypoint)</span> &#123;</span><br><span class="line">    DCHECK(IsNative());</span><br><span class="line">    SetEntryPointFromJniPtrSize(entrypoint, kRuntimePointerSize);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在需要 JNI 方法解析时，可以方便地获取特定的查找函数指针</span></span><br><span class="line"><span class="type">static</span> <span class="keyword">inline</span> <span class="type">const</span> <span class="type">void</span>* <span class="title function_">GetJniDlsymLookupStub</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> reinterpret_cast&lt;<span class="type">const</span> <span class="type">void</span>*&gt;(art_jni_dlsym_lookup_stub);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不管是静态注册还是动态注册的jni函数， 当函数所在的类被加载进到 LinkCode 的时候，会进行函数第一次的地址绑定，当这个函数是静态注册的话，在第一次的时候会去调用dlsym查找符号进行绑定，当第二次调用的时候，由于入口的已经被绑定到真正的地址，就不在执行查找的过程，直接发起调用。</br>实际上 art_jni_dlsym_lookup_stub 是汇编代码，通过源码查找 art_jni_dlsym_lookup_stub</br>xref: &#x2F;art&#x2F;runtime&#x2F;arch&#x2F;arm&#x2F;jni_entrypoints_arm.S</p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &quot;asm_support_arm.S&quot;</span></span><br><span class="line">    <span class="meta">.extern</span> artFindNativeMethod</span><br><span class="line"><span class="symbol">ENTRY</span> art_jni_dlsym_lookup_stub</span><br><span class="line">    <span class="keyword">push</span>   &#123;<span class="built_in">r0</span>, <span class="built_in">r1</span>, <span class="built_in">r2</span>, <span class="built_in">r3</span>, <span class="built_in">lr</span>&#125;           <span class="comment">@ spill regs</span></span><br><span class="line">    .cfi_adjust_cfa_offset <span class="number">20</span></span><br><span class="line">    .cfi_rel_offset <span class="built_in">r0</span>, <span class="number">0</span></span><br><span class="line">    .cfi_rel_offset <span class="built_in">r1</span>, <span class="number">4</span></span><br><span class="line">    .cfi_rel_offset <span class="built_in">r2</span>, <span class="number">8</span></span><br><span class="line">    .cfi_rel_offset <span class="built_in">r3</span>, <span class="number">12</span></span><br><span class="line">    .cfi_rel_offset <span class="built_in">lr</span>, <span class="number">16</span></span><br><span class="line">    <span class="keyword">sub</span>    <span class="built_in">sp</span>, <span class="number">#12</span>                        <span class="comment">@ pad stack pointer to align frame</span></span><br><span class="line">    .cfi_adjust_cfa_offset <span class="number">12</span></span><br><span class="line">    <span class="keyword">blx</span>    artFindNativeMethod</span><br><span class="line">    <span class="keyword">mov</span>    <span class="built_in">r12</span>, <span class="built_in">r0</span>                        <span class="comment">@ save result in r12</span></span><br><span class="line">    <span class="keyword">add</span>    <span class="built_in">sp</span>, <span class="number">#12</span>                        <span class="comment">@ restore stack pointer</span></span><br><span class="line">    .cfi_adjust_cfa_offset -<span class="number">12</span></span><br><span class="line">    <span class="keyword">cbz</span>    <span class="built_in">r0</span>, <span class="number">1</span>f                         <span class="comment">@ is method code null?</span></span><br><span class="line">    <span class="keyword">pop</span>    &#123;<span class="built_in">r0</span>, <span class="built_in">r1</span>, <span class="built_in">r2</span>, <span class="built_in">r3</span>, <span class="built_in">lr</span>&#125;           <span class="comment">@ restore regs</span></span><br><span class="line">    .cfi_adjust_cfa_offset -<span class="number">20</span></span><br><span class="line">    .cfi_restore <span class="built_in">r0</span></span><br><span class="line">    .cfi_restore <span class="built_in">r1</span></span><br><span class="line">    .cfi_restore <span class="built_in">r2</span></span><br><span class="line">    .cfi_restore <span class="built_in">r3</span></span><br><span class="line">    .cfi_restore <span class="built_in">lr</span></span><br><span class="line">    <span class="keyword">bx</span>     <span class="built_in">r12</span>                            <span class="comment">@ if non-null, tail call to method&#x27;s code</span></span><br></pre></td></tr></table></figure><p>无论静态注册还是动态注册，当类加载完就被绑定到art_jni_dlsym_lookup_stub这个桥函数中，会执行这段汇编调用artFindNativeMethod去so查符号地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Used by the JNI dlsym stub to find the native method to invoke if none is registered.</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__arm__) || defined(__aarch64__)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">const</span> <span class="type">void</span>* <span class="title function_">artFindNativeMethod</span><span class="params">()</span> &#123;</span><br><span class="line">  Thread* self = Thread::Current();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">const</span> <span class="type">void</span>* <span class="title function_">artFindNativeMethod</span><span class="params">(Thread* self)</span> &#123;</span><br><span class="line">  DCHECK_EQ(self, Thread::Current());</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  Locks::mutator_lock_-&gt;AssertNotHeld(self);  <span class="comment">// We come here as Native.</span></span><br><span class="line">  ScopedObjectAccess <span class="title function_">soa</span><span class="params">(self)</span>;</span><br><span class="line"></span><br><span class="line">  ArtMethod* method = self-&gt;GetCurrentMethod(nullptr);</span><br><span class="line">  DCHECK(method != nullptr);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Lookup symbol address for method, on failure we&#x27;ll return null with an exception set,</span></span><br><span class="line">  <span class="comment">// otherwise we return the address of the method we found.</span></span><br><span class="line">  <span class="comment">// FindCodeForNativeMethod 查找函数地址</span></span><br><span class="line">  <span class="type">void</span>* native_code = soa.Vm()-&gt;FindCodeForNativeMethod(method);</span><br><span class="line">  <span class="keyword">if</span> (native_code == nullptr) &#123;</span><br><span class="line">    self-&gt;AssertPendingException();</span><br><span class="line">    <span class="keyword">return</span> nullptr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Register so that future calls don&#x27;t come here</span></span><br><span class="line">  <span class="keyword">return</span> method-&gt;RegisterNative(native_code, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">JavaVMExt::FindCodeForNativeMethod</span><span class="params">(ArtMethod* m)</span> &#123;</span><br><span class="line">   ......</span><br><span class="line">  Thread* <span class="type">const</span> self = Thread::Current();</span><br><span class="line">  <span class="type">void</span>* native_method = libraries_-&gt;FindNativeMethod(self, m, detail);</span><br><span class="line">   ......</span><br><span class="line">  <span class="keyword">return</span> native_method;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span>* <span class="title function_">FindNativeMethodInternal</span><span class="params">(Thread* self,</span></span><br><span class="line"><span class="params">                                 <span class="type">void</span>* declaring_class_loader_allocator,</span></span><br><span class="line"><span class="params">                                 <span class="type">const</span> <span class="type">char</span>* shorty,</span></span><br><span class="line"><span class="params">                                 <span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; jni_short_name,</span></span><br><span class="line"><span class="params">                                 <span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; jni_long_name)</span></span><br><span class="line">      <span class="title function_">REQUIRES</span><span class="params">(!Locks::jni_libraries_lock_)</span></span><br><span class="line">      <span class="title function_">REQUIRES</span><span class="params">(!Locks::mutator_lock_)</span> &#123;</span><br><span class="line">    MutexLock <span class="title function_">mu</span><span class="params">(self, *Locks::jni_libraries_lock_)</span>;</span><br><span class="line">    <span class="comment">// 遍历加载的so去查找函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; lib : libraries_) &#123;</span><br><span class="line">      SharedLibrary* <span class="type">const</span> library = lib.second;</span><br><span class="line">      <span class="comment">// Use the allocator address for class loader equality to avoid unnecessary weak root decode.</span></span><br><span class="line">      <span class="keyword">if</span> (library-&gt;GetClassLoaderAllocator() != declaring_class_loader_allocator) &#123;</span><br><span class="line">        <span class="comment">// We only search libraries loaded by the appropriate ClassLoader.</span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// Try the short name then the long name...</span></span><br><span class="line">      <span class="type">const</span> <span class="type">char</span>* arg_shorty = library-&gt;NeedsNativeBridge() ? shorty : nullptr;</span><br><span class="line">      <span class="type">void</span>* fn = library-&gt;FindSymbol(jni_short_name, arg_shorty);</span><br><span class="line">      <span class="keyword">if</span> (fn == nullptr) &#123;</span><br><span class="line">        fn = library-&gt;FindSymbol(jni_long_name, arg_shorty);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (fn != nullptr) &#123;</span><br><span class="line">        VLOG(jni) &lt;&lt; <span class="string">&quot;[Found native code for &quot;</span> &lt;&lt; jni_long_name</span><br><span class="line">                  &lt;&lt; <span class="string">&quot; in \&quot;&quot;</span> &lt;&lt; library-&gt;GetPath() &lt;&lt; <span class="string">&quot;\&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> fn;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nullptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">void</span>* <span class="title function_">FindSymbol</span><span class="params">(<span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; symbol_name, <span class="type">const</span> <span class="type">char</span>* shorty = nullptr)</span></span><br><span class="line">      <span class="title function_">REQUIRES</span><span class="params">(!Locks::mutator_lock_)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> NeedsNativeBridge()</span><br><span class="line">        ? FindSymbolWithNativeBridge(symbol_name.c_str(), shorty)</span><br><span class="line">        : FindSymbolWithoutNativeBridge(symbol_name.c_str());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">void</span>* <span class="title function_">FindSymbolWithoutNativeBridge</span><span class="params">(<span class="type">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; symbol_name)</span></span><br><span class="line">      <span class="title function_">REQUIRES</span><span class="params">(!Locks::mutator_lock_)</span> &#123;</span><br><span class="line">    CHECK(!NeedsNativeBridge());</span><br><span class="line">    <span class="keyword">return</span> dlsym(handle_, symbol_name.c_str());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>jni_short_name：是本地方法的短名，它的格式通常是 Java_&lt;类的完全限定名&gt;<em>&lt;方法名&gt;，其中类名和方法名中的每个字符（除了字母和数字）都被替换为 <em>。  例如： Java_com_example_MyClass_myMethod<br>jni_long_name：是本地方法的长名，它的格式通常是 Java</em>&lt;类的完全限定名&gt;</em>&lt;方法名&gt;__&lt;参数签名&gt;，其中参数签名部分用 _ 分隔每个参数类型的描述符。  例如： Java_com_example_MyClass_myMethod__ILjava_lang_String_2 </br><br>通过FindCodeForNativeMethod找到的函数地址后，会调用 RegisterNative 才把它的地址绑定到artmethod里面，method-&gt;RegisterNative(native_code, false);</br>回到上面的汇编代码</br></p><figure class="highlight arm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">blx</span>    artFindNativeMethod</span><br><span class="line"><span class="keyword">mov</span>    <span class="built_in">r12</span>, <span class="built_in">r0</span></span><br><span class="line"><span class="keyword">bx</span>     <span class="built_in">r12</span>          </span><br></pre></td></tr></table></figure><p>经过artFindNativeMethod查到绑定后的artmethod地址返回</br>接下来就可以对上面的一些流程添加log打印，在artFindNativeMethod下可以监控静态注册jni函数绑定的流程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__arm__) || defined(__aarch64__)</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">const</span> <span class="type">void</span>* <span class="title function_">artFindNativeMethod</span><span class="params">()</span> &#123;</span><br><span class="line">  Thread* self = Thread::Current();</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">const</span> <span class="type">void</span>* <span class="title function_">artFindNativeMethod</span><span class="params">(Thread* self)</span> &#123;</span><br><span class="line">  DCHECK_EQ(self, Thread::Current());</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  Locks::mutator_lock_-&gt;AssertNotHeld(self);  <span class="comment">// We come here as Native.</span></span><br><span class="line">  ScopedObjectAccess <span class="title function_">soa</span><span class="params">(self)</span>;</span><br><span class="line"></span><br><span class="line">  ArtMethod* method = self-&gt;GetCurrentMethod(nullptr);</span><br><span class="line">  DCHECK(method != nullptr);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Lookup symbol address for method, on failure we&#x27;ll return null with an exception set,</span></span><br><span class="line">  <span class="comment">// otherwise we return the address of the method we found.</span></span><br><span class="line">  <span class="type">void</span>* native_code = soa.Vm()-&gt;FindCodeForNativeMethod(method);</span><br><span class="line">  <span class="keyword">if</span> (native_code == nullptr) &#123;</span><br><span class="line">    self-&gt;AssertPendingException();</span><br><span class="line">    <span class="keyword">return</span> nullptr;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">stringstream</span> oss;</span><br><span class="line">    oss &lt;&lt; <span class="string">&quot;[artFindNativeMethod]StaticRegisterJniMethod-&gt;&quot;</span> &lt;&lt; method-&gt;PrettyMethod() &lt;&lt; <span class="string">&quot;, add: &quot;</span> &lt;&lt; native_code;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *content = oss.str().c_str();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strstr</span>(content, <span class="string">&quot;zsklog&quot;</span>) != nullptr) &#123;</span><br><span class="line">      LOG(ERROR) &lt;&lt; content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//add</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Register so that future calls don&#x27;t come here</span></span><br><span class="line">  <span class="keyword">return</span> method-&gt;RegisterNative(native_code, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面添加了标识 strstr(content, “zsklog”) 用来让frida可以控制日志打印开关</p><h4 id="动态注册的jni函数"><a href="#动态注册的jni函数" class="headerlink" title="动态注册的jni函数"></a>动态注册的jni函数</h4><p>动态注册的jni函数都是通过 RegisterNatives 去注册绑定地址，定位到源码的位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> jint <span class="title function_">RegisterNatives</span><span class="params">(JNIEnv* env,</span></span><br><span class="line"><span class="params">                            jclass java_class,</span></span><br><span class="line"><span class="params">                            <span class="type">const</span> JNINativeMethod* methods,</span></span><br><span class="line"><span class="params">                            jint method_count)</span> &#123;</span><br><span class="line">  ......</span><br><span class="line">  CHECK_NON_NULL_ARGUMENT_FN_NAME(<span class="string">&quot;RegisterNatives&quot;</span>, methods, JNI_ERR);</span><br><span class="line">  <span class="keyword">for</span> (jint i = <span class="number">0</span>; i &lt; method_count; ++i) &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* name = methods[i].name;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* sig = methods[i].signature;</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>* fnPtr = methods[i].fnPtr;</span><br><span class="line">    <span class="type">bool</span> is_fast = <span class="literal">false</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="type">const</span> <span class="type">void</span>* final_function_ptr = m-&gt;RegisterNative(fnPtr, is_fast);</span><br><span class="line">    UNUSED(final_function_ptr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> JNI_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历methods，最后跟静态注册jni函数的流程一样去调用 RegisterNative ，静态注册的log已经添加，那在 RegisterNative 里添加log不就能跟踪到动态注册的函数，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">void</span>* <span class="title function_">ArtMethod::RegisterNative</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* native_method, <span class="type">bool</span> is_fast)</span> &#123;</span><br><span class="line">  CHECK(IsNative()) &lt;&lt; PrettyMethod();</span><br><span class="line">  CHECK(!IsFastNative()) &lt;&lt; PrettyMethod();</span><br><span class="line">  CHECK(native_method != nullptr) &lt;&lt; PrettyMethod();</span><br><span class="line">  <span class="keyword">if</span> (is_fast) &#123;</span><br><span class="line">    AddAccessFlags(kAccFastNative);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">void</span>* new_native_method = nullptr;</span><br><span class="line">  Runtime::Current()-&gt;GetRuntimeCallbacks()-&gt;RegisterNativeMethod(this,</span><br><span class="line">                                                                  native_method,</span><br><span class="line">                                                                  <span class="comment">/*out*/</span>&amp;new_native_method);</span><br><span class="line">  <span class="comment">//add</span></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">stringstream</span> oss;</span><br><span class="line">  oss &lt;&lt; <span class="string">&quot;[ArtMethod::RegisterNative]JniMethod-&gt;&quot;</span> &lt;&lt; this-&gt;PrettyMethod() &lt;&lt; <span class="string">&quot;, add: &quot;</span> &lt;&lt; native_method;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *content = oss.str().c_str();</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">strstr</span>(content, <span class="string">&quot;zsklog&quot;</span>) != nullptr) &#123;</span><br><span class="line">    LOG(ERROR) &lt;&lt; content;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//add</span></span><br><span class="line">  SetEntryPointFromJni(new_native_method);</span><br><span class="line">  <span class="keyword">return</span> new_native_method;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="jni函数的绑定分类总结"><a href="#jni函数的绑定分类总结" class="headerlink" title="jni函数的绑定分类总结"></a>jni函数的绑定分类总结</h5><ol><li>静态函数的jni函数：有两次绑定，第一次是在类加载时，会绑定到ART中的“桥函数”(art_jni_dlsym_lookup_stub) ，第二次绑定是在该jni函数第一次被真正调用时，ART 会通过桥函数查找该函数在本地库中的实际地址，并进行绑定。后续调用将直接使用该地址，避免重复查找。<br> LoadClass -&gt; LoadClassMembers -&gt; SetEntryPointFromJni(GetJniDlsymLookupStub() -&gt;art_jni_dlsym_lookup_stub -&gt; artFindNativeMethod -&gt; FindCodeForNativeMethod(method)</br></li><li>动态注册的jni函数：也是有两次绑定，只不过和静态注册的jni函数的第二次绑定不同之处在于是由开发人员编写的代码主动调用RegeisterNatives进行绑定，而不是由ART“帮助”完成绑定。</br>重新编写后刷入，frida代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">traceJniRegiseter</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libc_module = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libc.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> strstr = libc_module.<span class="title function_">getExportByName</span>(<span class="string">&quot;strstr&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(strstr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">thread_id</span> = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg0</span> = <span class="title function_">ptr</span>(args[<span class="number">0</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arg1</span> = <span class="title function_">ptr</span>(args[<span class="number">1</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">arg1</span> == <span class="string">&quot;zsklog&quot;</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="variable language_">this</span>.<span class="property">thread_id</span> + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;go into OpenNativeLibrary -&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">arg0</span>);</span><br><span class="line">                retval.<span class="title function_">replace</span>(<span class="number">0x100</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tracesoload</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Process</span>.<span class="property">arch</span>);</span><br><span class="line">    <span class="keyword">var</span> libnativeloaderModule = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libnativeloader.so&quot;</span>);</span><br><span class="line">    <span class="comment">// OpenNativeLibrary</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">OpenNativeLibraryAddr</span> = libnativeloaderModule.<span class="title function_">getExportByName</span>(<span class="string">&quot;_ZN7android17OpenNativeLibraryEP7_JNIEnviPKcP8_jobjectP8_jstringPbPNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEE&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">OpenNativeLibraryAddr</span>, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">sopath</span> = <span class="title function_">ptr</span>(args[<span class="number">2</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">thread_id</span> = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="variable language_">this</span>.<span class="property">thread_id</span> + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;go into OpenNativeLibrary -&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">sopath</span>);</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="variable language_">this</span>.<span class="property">thread_id</span> + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;leave OpenNativeLibrary -&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">sopath</span>, <span class="string">&quot;, return: &quot;</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dlsymAddr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;dlsym&quot;</span>);</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(dlsymAddr, &#123;</span><br><span class="line">        <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">handle</span> = args[<span class="number">0</span>];</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">symbol</span> = <span class="title function_">ptr</span>(args[<span class="number">1</span>]).<span class="title function_">readUtf8String</span>();</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">thread_id</span> = <span class="title class_">Process</span>.<span class="title function_">getCurrentThreadId</span>();</span><br><span class="line">        &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[&quot;</span> + <span class="variable language_">this</span>.<span class="property">thread_id</span> + <span class="string">&quot;]&quot;</span> + <span class="string">&quot;leave dlsym: handle: &quot;</span> + <span class="variable language_">this</span>.<span class="property">handle</span> + <span class="string">&quot;, symbol: &quot;</span> + <span class="variable language_">this</span>.<span class="property">symbol</span>, <span class="string">&quot;, return: &quot;</span> + retval);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">tracesoload</span>();</span><br><span class="line">    <span class="title function_">traceJniRegiseter</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">arm64</span><br><span class="line">[8007]leave dlsym: handle: 0x2adcc85529763b0b, symbol: oatdata , return: 0x7d1659d000</span><br><span class="line">[8007]leave dlsym: handle: 0x2adcc85529763b0b, symbol: oatlastword , return: 0x7d1659e224</span><br><span class="line">[8007]leave dlsym: handle: 0x2adcc85529763b0b, symbol: oatbss , return: 0x7d1659f000</span><br><span class="line">[8007]leave dlsym: handle: 0x2adcc85529763b0b, symbol: oatbsslastword , return: 0x7d165a2acc</span><br><span class="line">[8007]leave dlsym: handle: 0x2adcc85529763b0b, symbol: oatbssmethods , return: 0x0</span><br><span class="line">[8007]leave dlsym: handle: 0x2adcc85529763b0b, symbol: oatbssroots , return: 0x0</span><br><span class="line">[8007]go into OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001-IqFG3pwpI6PxX176DYv1tw==/lib/arm64/libshell-super.com.iCitySuzhou.suzhou001.so</span><br><span class="line">[8007]leave dlsym: handle: 0xa5c5ee03e19145b9, symbol: mmap , return: 0x7db163acd4</span><br><span class="line">[8007]leave dlsym: handle: 0xa5c5ee03e19145b9, symbol: write , return: 0x7db163b4cc</span><br><span class="line">[8007]leave dlsym: handle: 0xa5c5ee03e19145b9, symbol: close , return: 0x7db15ed138</span><br><span class="line">[8007]leave dlsym: handle: 0xa5c5ee03e19145b9, symbol: fdatasync , return: 0x7db163a8b4</span><br><span class="line">[8007]leave OpenNativeLibrary -&gt; /data/app/com.iCitySuzhou.suzhou001-IqFG3pwpI6PxX176DYv1tw==/lib/arm64/libshell-super.com.iCitySuzhou.suzhou001.so , return: 0x5cd2a12d5c2fc103</span><br><span class="line">[8007]leave dlsym: handle: 0x5cd2a12d5c2fc103, symbol: JNI_OnLoad , return: 0x7d160c6a5c</span><br><span class="line">[8007]go into OpenNativeLibrary -&gt; [ArtMethod::RegisterNative]JniMethod-&gt;void com.wrapper.proxyapplication.WrapperProxyApplication.Ooo0ooO0oO(), add: 0x7d160c8418</span><br><span class="line">[8007]go into OpenNativeLibrary -&gt; [ArtMethod::RegisterNative]JniMethod-&gt;int com.wrapper.proxyapplication.CustomerClassLoader.ShowLogs(java.lang.String, int), add: 0x7d160c648c</span><br><span class="line">......</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;ART定制方案比较&quot;&gt;&lt;a href=&quot;#ART定制方案比较&quot; class=&quot;headerlink&quot; title=&quot;ART定制方案比较&quot;&gt;&lt;/a&gt;ART定制方案比较&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;源码修改编译，定制rom&lt;br&gt; 优点：开发简单，可以直接访问ART中的</summary>
      
    
    
    
    
    <category term="脱壳" scheme="https://www.zskkk.cn/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Art中的函数inline</title>
    <link href="https://www.zskkk.cn/posts/4035/"/>
    <id>https://www.zskkk.cn/posts/4035/</id>
    <published>2023-10-30T16:00:00.000Z</published>
    <updated>2023-10-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>在art中有大量的inline内联函数，就先来了解什么是inline</p><h3 id="什么是inline"><a href="#什么是inline" class="headerlink" title="什么是inline"></a>什么是inline</h3><p>inline： 内联函数是一种优化技术，可以减少函数调用的开销，渐少参数压栈时消耗空间，从而提高代码的执行效率。使用inline关键字声明的函数在编译时会被内联展开，即编译器会在每个调用该函数的地方插入该函数的实际代码，而不是生成函数调用。关键字inline必须与函数定于放在一起才能使函数成为内联函数，仅仅将inline放在函数声明前面是不起任何作用。inline对编译器来水只是一种建议，编译器可以选择忽略这个建议，因此有inline不一定就会被编译器内联编译。</br><br>ALWAYS_INLINE: 是强制内联，所有加 inline __attribute__((always_inline))   修饰的函数在被调用的时候不会被编译成函数调用，而是直接扩展到调用函数体内。当含有递归的函数在任何情况下都不会被编译器进行inline 编译。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">__attribute__((always_inline)) <span class="function"><span class="type">int</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        result = <span class="built_in">add</span>(result, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在加与不加__attribute__((always_inline))的情况下，编译后的内容如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sum</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [xsp+4h] [xbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [xsp+8h] [xbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a1; ++i )</span><br><span class="line">    v3 = <span class="built_in">add</span>(v3, i);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">add</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">int</span>)(a1 + a2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231031/01.webp"                                     ><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231031/02.webp"                                     ></p><p>加了__attribute__((always_inline)) 后的sum函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">sum</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [xsp+Ch] [xbp-14h]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v3; <span class="comment">// [xsp+10h] [xbp-10h]</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a1; ++i )</span><br><span class="line">        v3 += i;</span><br><span class="line">    <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231031/03.webp"                                     ></p><p>少了 BL add，相比于原来的，汇编指令减少了，也省去了函数调用时栈空间的花销。</br><br>总结：</br></p><ol><li>内联函数在编译器最终生成的代码中是没有定义的，这个函数是不存在的，也就无法实现对内联函数的hook。</br></li><li>内联函数没有普通函数调用时的额外开销（压栈，跳转，返回等）</br></li><li>内联函数是一种特殊的函数，在源码中具有普通函数的特征。</br></li><li>内联函数是对编译器的一种请求，因此编译器有可能拒绝这种请求。</br></li><li>内联函数由编译器处理，直接将编译后的函数插入调用的地方。</br></li><li>内联和宏的效果很像，但是宏代码是由预处理器处理，进行简单的文本替换，没有任何编译过程</li></ol><h3 id="基于frida版的art"><a href="#基于frida版的art" class="headerlink" title="基于frida版的art"></a>基于frida版的art</h3><p>上一篇写了<a href="https://www.zskkk.cn/posts/64557/4">art下DexFile的内存布局</a>，那如何拿到DexFile的对象呢？</br>通过查看源码发现在ART中获取dexfile对象的函数是个inline，那又要怎么去调用呢</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">const</span> DexFile* <span class="title">ArtMethod::GetDexFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">GetDexCache</span>()-&gt;<span class="built_in">GetDexFile</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当在源码中进行定制ART时，任何inline函数都可以直接访问，只需要注意访问权限即可，那如果是使用frida等hook技术进行ART的定制呢？自然inline函数无法被hook，那当需要这个inline函数的功能时，如何实现inline函数的主动调用呢？</br>两种解决方案：</br>1. 分析inline函数的源码逻辑，自行参考实现即可</br>2. 在源码中添加一个导出函数调用该inline函数，编译后直接参考ida反编译的该函数内容即可</br>实现第二种</br>接下来解决从一个artmethod对象得到一个该对象所属的dexfile对象。</br>在源码 &#x2F;art&#x2F;runtime&#x2F;art_method-inl.h 添加如下代码导出dexfile对象</br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function"><span class="type">const</span> DexFile* <span class="title">getDexFileByMethod</span><span class="params">(ArtMethod* artmethod)</span> <span class="title">SHARED_LOCKS_REQUIRED</span><span class="params">(Locks::mutator_lock_)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> artmethod-&gt;<span class="built_in">GetDexFile</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>重新编译，找到编译好后lib32，lib64下的libart.so，ida打开找到添加的函数片段，在nexus 5 android6和pixel android8下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nexus5 arm32</span></span><br><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">getDexFileByMethod</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a1 + <span class="number">16</span>) + <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pixel arm32</span></span><br><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">getDexFileByMethod</span><span class="params">(<span class="type">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// r0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(_DWORD *)(a1 + <span class="number">4</span>) &amp; <span class="number">0x40000</span> )</span><br><span class="line">    result = *((_DWORD *)art::ArtMethod::<span class="built_in">GetObsoleteDexCache</span>((<span class="type">char</span> *)a1) + <span class="number">4</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a1 + <span class="number">16</span>) + <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pixel arm64</span></span><br><span class="line"><span class="function">__int64 __fastcall <span class="title">getDexFileByMethod</span><span class="params">(art::ArtMethod *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 result; <span class="comment">// x0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *((_DWORD *)a1 + <span class="number">1</span>) &amp; <span class="number">0x40000</span> )</span><br><span class="line">    result = *(_QWORD *)(art::ArtMethod::<span class="built_in">GetObsoleteDexCache</span>(a1) + <span class="number">16LL</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    result = *(_QWORD *)(*(<span class="type">unsigned</span> <span class="type">int</span> *)(*(<span class="type">unsigned</span> <span class="type">int</span> *)a1 + <span class="number">0x10</span>LL) + <span class="number">0x10</span>LL);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际是artmethod对象获取dexfile对象inline函数的内联编译生成的片段，</br>现在参考ida反编译的该函数，根据自己的安卓系统版本做调整</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;android/log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _DWORD uint32_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __int64 long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _QWORD uint64_t</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #if defined(__arm__)</span></span><br><span class="line"><span class="comment">// typedef uint32_t (GetObsoleteDexCache)(void *a1);</span></span><br><span class="line"><span class="comment">// //arm32 a1=artmethod指针,a2是函数art::ArtMethod::GetObsoleteDexCache(art::ArtMethod *this)的地址</span></span><br><span class="line"><span class="comment">// extern &quot;C&quot; JNIEXPORT uint32_t GetDexFile(void *a1, GetObsoleteDexCache funcptr) &#123;</span></span><br><span class="line"><span class="comment">//     uint32_t result; // r0</span></span><br><span class="line"><span class="comment">//     if (*((_DWORD *) a1 + 1) &amp; 0x40000)</span></span><br><span class="line"><span class="comment">//         result = *(_DWORD *) (funcptr(a1) + 16);</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//         result = *(_DWORD *) (*(_DWORD *) (*(_DWORD *) a1 + 16) + 16);</span></span><br><span class="line"><span class="comment">//     return result;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// #else</span></span><br><span class="line"><span class="comment">// typedef uint64_t (GetObsoleteDexCache)(void *a1);</span></span><br><span class="line"><span class="comment">// //arm64 a1=artmethod指针,a2是函数art::ArtMethod::GetObsoleteDexCache(art::ArtMethod *this)的地址</span></span><br><span class="line"><span class="comment">// extern &quot;C&quot; JNIEXPORT __int64 GetDexFile(void*a1, GetObsoleteDexCache funcptr)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     __int64 result; // x0</span></span><br><span class="line"><span class="comment">//     if ( *((_DWORD *)a1 + 1) &amp; 0x40000 )</span></span><br><span class="line"><span class="comment">//         result = *(_QWORD *)(funcptr(a1) + 16LL);</span></span><br><span class="line"><span class="comment">//     else</span></span><br><span class="line"><span class="comment">//         result = *(_QWORD *)(*(unsigned int *)(*(unsigned int *)a1 + 0x10LL) + 0x10LL);</span></span><br><span class="line"><span class="comment">//     return result;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// #endif</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a1=artmethod指针</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">JNIEXPORT <span class="type">uint32_t</span> <span class="title">GetDexFile</span><span class="params">(<span class="type">void</span>* a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(_DWORD *)(*(_DWORD *)(*(_DWORD *)a1 + <span class="number">16</span>) + <span class="number">32</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_zsk_MainActivity_stringFromJNI</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobject <span class="comment">/* this */</span>)</span> </span>&#123;</span><br><span class="line">    std::string hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包解压，把lib目录下的so推送到手机上，修改777权限</br>编写frida脚本</br></p><ol><li>先加载导入的so，枚举该so的导出函数，找到编写的GetDexFile地址</br></li><li>如果是安卓8及以上，需要枚举libart.so的符号表，找到GetObsoleteDexCache的地址</br></li><li>声明GetDexFile函数</br></li><li>通过反射获取任意类的java层函数，通过$handle获取函数的引用，再由jni的函数</br>fromReflectedMethod转为artmethod对象</br></li><li>将参数传入声明的GetDexFile函数得到dexfile对象</br></li><li>根据art中的DexFile内存布局dump内容</br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getDexFileByMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go into init,&quot;</span> + <span class="string">&quot;Process.arch:&quot;</span> + <span class="title class_">Process</span>.<span class="property">arch</span>);</span><br><span class="line">        <span class="keyword">var</span> module_libext = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 加载导入的so</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Process</span>.<span class="property">arch</span> == <span class="string">&quot;arm64&quot;</span>) &#123;</span><br><span class="line">            module_libext = <span class="title class_">Module</span>.<span class="title function_">load</span>(<span class="string">&quot;/data/local/tmp/libmy_64.so&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Process</span>.<span class="property">arch</span> == <span class="string">&quot;arm&quot;</span>) &#123;</span><br><span class="line">            module_libext = <span class="title class_">Module</span>.<span class="title function_">load</span>(<span class="string">&quot;/data/local/tmp/libmy.so&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> getDexFileByMethodFunc = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> getDexFileByMethodAddr = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (module_libext != <span class="literal">null</span>) &#123;</span><br><span class="line">            module_libext.<span class="title function_">enumerateExports</span>().<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">symbol</span>)&#123;</span><br><span class="line">                <span class="comment">// 找到编写的GetDexFile函数</span></span><br><span class="line">                <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;GetDexFile&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(symbol))</span><br><span class="line">                    getDexFileByMethodAddr = symbol.<span class="property">address</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (getDexFileByMethodAddr != <span class="literal">null</span>) &#123;</span><br><span class="line">            getDexFileByMethodFunc = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(getDexFileByMethodAddr, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">            <span class="comment">// 第一个参数是artmethod，第二个参数是GetObsoleteDexCache</span></span><br><span class="line">            <span class="comment">// getDexFileByMethodFunc = new NativeFunction(getDexFileByMethodAddr, &quot;pointer&quot;, [&quot;pointer&quot;, &quot;pointer&quot;]);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 找到GetObsoleteDexCache,安卓8及以上才需要</span></span><br><span class="line">        <span class="comment">// var GetObsoleteDexCacheAddr = null;</span></span><br><span class="line">        <span class="comment">// var libartmodule = Process.getModuleByName(&quot;libart.so&quot;);</span></span><br><span class="line">        <span class="comment">// libartmodule.enumerateSymbols().forEach(function(symbol)&#123;</span></span><br><span class="line">        <span class="comment">//     if (symbol.name.indexOf(&quot;GetObsoleteDexCache&quot;) != -1) &#123;</span></span><br><span class="line">        <span class="comment">//         console.log(JSON.stringify(symbol))</span></span><br><span class="line">        <span class="comment">//         GetObsoleteDexCacheAddr = symbol.address;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过反射获取任意一个java层函数, 再将函数转为artmethod对象</span></span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.zsk.MainActivity&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> methods = <span class="title class_">MainActivity</span>.<span class="property">class</span>.<span class="title function_">getDeclaredMethods</span>(); <span class="comment">// 枚举所有函数</span></span><br><span class="line">        methods.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">method</span>) &#123;</span><br><span class="line">            <span class="comment">// console.log(method);</span></span><br><span class="line">            <span class="keyword">var</span> methodhandle = method.<span class="property">$handle</span>;  <span class="comment">// 获取函数引用</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(methodhandle)</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">ArtMethodPtr</span> = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">tryGetEnv</span>().<span class="title function_">fromReflectedMethod</span>(methodhandle)  <span class="comment">// 将java函数转为artmethod对象</span></span><br><span class="line">            <span class="keyword">if</span> (getDexFileByMethodFunc != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dexfilePtr = <span class="title function_">getDexFileByMethodFunc</span>(<span class="title class_">ArtMethodPtr</span>);</span><br><span class="line">                <span class="comment">// var dexfilePtr = getDexFileByMethodFunc(ArtMethodPtr, GetObsoleteDexCacheAddr);</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(method.<span class="title function_">toString</span>() + <span class="string">&quot;------&quot;</span> + <span class="title class_">ArtMethodPtr</span> + <span class="string">&quot;------&quot;</span> + dexfilePtr);</span><br><span class="line">                <span class="keyword">var</span> dexfileBegin = <span class="title function_">ptr</span>(dexfilePtr).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">1</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="keyword">var</span> dexfileSize = <span class="title function_">ptr</span>(dexfilePtr).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readU32</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;get a dex:size:&quot;</span> + dexfileSize + <span class="string">&quot;---&quot;</span> + <span class="title function_">hexdump</span>(dexfileBegin, &#123;</span><br><span class="line">                    <span class="attr">length</span>: <span class="number">16</span></span><br><span class="line">                &#125;))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go into LoadMethodaddr-&gt;&quot;</span> + <span class="title function_">hexdump</span>(dexfilePtr, &#123;</span><br><span class="line">                    <span class="attr">length</span>: <span class="number">32</span></span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">getDexFileByMethod</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure>打印内容如下<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">go into init,Process.arch:arm</span><br><span class="line">&#123;&quot;type&quot;:&quot;function&quot;,&quot;name&quot;:&quot;GetDexFile&quot;,&quot;address&quot;:&quot;0x9cb9d471&quot;&#125;</span><br><span class="line">0x1004c2</span><br><span class="line">protected void com.example.zsk.MainActivity.onCreate(android.os.Bundle)------0xb0697cf0------0xab0da3c0</span><br><span class="line">get a dex:size:2100---           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">9fc11078  64 65 78 0a 30 33 35 00 ee 74 d8 e6 95 2a 0a 65  dex.035..t...*.e</span><br><span class="line">go into LoadMethodaddr-&gt;           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">ab0da3c0  e8 3e c3 b4 78 10 c1 9f 34 08 00 00 41 00 00 00  .&gt;..x...4...A...</span><br><span class="line">ab0da3d0  32 00 00 00 40 b2 53 ab e5 9a 18 6c 00 00 00 00  2...@.S....l....</span><br><span class="line">0x1004de</span><br><span class="line">public native java.lang.String com.example.zsk.MainActivity.stringFromJNI()------0xb0697d18------0xab0da3c0</span><br><span class="line">get a dex:size:2100---           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">9fc11078  64 65 78 0a 30 33 35 00 ee 74 d8 e6 95 2a 0a 65  dex.035..t...*.e</span><br><span class="line">go into LoadMethodaddr-&gt;           0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">ab0da3c0  e8 3e c3 b4 78 10 c1 9f 34 08 00 00 41 00 00 00  .&gt;..x...4...A...</span><br><span class="line">ab0da3d0  32 00 00 00 40 b2 53 ab e5 9a 18 6c 00 00 00 00  2...@.S....l....</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在art中有大量的inline内联函数，就先来了解什么是inline&lt;/p&gt;
&lt;h3 id=&quot;什么是inline&quot;&gt;&lt;a href=&quot;#什么是inline&quot; class=&quot;headerlink&quot; title=&quot;什么是inline&quot;&gt;&lt;/a&gt;什么是inline&lt;/h3&gt;&lt;p&gt;</summary>
      
    
    
    
    
    <category term="脱壳" scheme="https://www.zskkk.cn/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Art中的c++对象内存布局</title>
    <link href="https://www.zskkk.cn/posts/64557/"/>
    <id>https://www.zskkk.cn/posts/64557/</id>
    <published>2023-10-23T16:00:00.000Z</published>
    <updated>2023-10-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>ART由C++11实现的，C++11中的类所占内存的大小主要是由成员变量（静态变量除外）决定的，成员函数（虚函数除外）是不计算在内的。</br>成员函数的存储是以一般函数的模式进行存储。a.fun()是通过fun(a.this)来调用的，这时候this指针会做为隐藏的第一个参数传入成员函数，this指针的地址就是对象的地址。所谓成员函数只是名义上是在类里的。而成员函数的大小并不在类的对象里面，即同一个类的多个对象共享函数代码，因此可以简单将C++中的类当成C中的结构体即可。对象和成员函数的联系是靠:this指针，也是连接对象与其成员函数的唯一桥梁。</p><p>简单总结：<br>空的类是会占用内存空间的，而且大小是1，原因是c++要求每个实例在内存中都有独一无二的地址。</p><ol><li>类内部的成员变量：<br>普通的变量：是要占用内存的，但是要注意对齐原则（这点和struct类型很相似）。<br>static修饰的静态变量：不占用内存，原因是编辑器将其放在全局变量区。</li><li>类内部的成员函数：<br>普通函数：不占用内存<br>虚函数：要占用4个以上字节，用来指定虚函数的虚函数表的入口地址。所以一个类的虚函数所占用的大小是不变的，和虚函数的个数是没有关系的。 32位下占4字节，64位占8字节。</li><li>多重继承，函数函数覆盖<br>考虑下面情况，三个父类虚函数表中的f()的位置被替换成子类的函数指针。这样就可以任一父类对象指针来指向子类，并调用子类的f()了。也会导致虚函数表的指针增加，继承几个就会增加几个。<br>假设，基类和派生类又如下关系：派生类i中覆盖了基类的虚函数f</li></ol><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231024/01.webp"                                     ></p><h3 id="art中的内存布局"><a href="#art中的内存布局" class="headerlink" title="art中的内存布局"></a>art中的内存布局</h3><p>将&#x2F;art&#x2F;runtime&#x2F;dex_file.h下的DexFile类拷贝出来，除去属性外其余都删掉<br>在脱壳过程中拿到DexFile对象后，只需要知道它的begin和size的偏移<br>删除后的DexFile精简代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DexFile</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// First Dex format version supporting default methods.</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> kDefaultMethodsVersion = <span class="number">37</span>;</span><br><span class="line">    <span class="comment">// First Dex format version enforcing class definition ordering rules.</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> kClassDefinitionOrderEnforcedVersion = <span class="number">37</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> kDexMagic[];</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">size_t</span> kNumDexVersions = <span class="number">2</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">size_t</span> kDexVersionLen = <span class="number">4</span>;</span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint8_t</span> kDexMagicVersions[kNumDexVersions][kDexVersionLen];</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">size_t</span> kSha1DigestSize = <span class="number">20</span>;</span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">uint32_t</span> kDexEndianConstant = <span class="number">0x12345678</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// name of the DexFile entry within a zip archive</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">char</span>* kClassesDex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The value of an invalid index.</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint32_t</span> kDexNoIndex = <span class="number">0xFFFFFFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The value of an invalid index.</span></span><br><span class="line">    <span class="type">static</span> <span class="type">const</span> <span class="type">uint16_t</span> kDexNoIndex16 = <span class="number">0xFFFF</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The separator character in MultiDex locations.</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">constexpr</span> <span class="type">char</span> kMultiDexSeparator = <span class="string">&#x27;:&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Closes a .dex file.</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">DexFile</span>() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// The base address of the memory mapping.</span></span><br><span class="line">    <span class="type">uint8_t</span>* begin_;</span><br><span class="line">    <span class="comment">// The size of the underlying memory allocation in bytes.</span></span><br><span class="line">    <span class="type">size_t</span> size_;</span><br><span class="line">    std::string location_;</span><br><span class="line">    <span class="type">uint32_t</span> location_checksum_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>进行调用，分别以32和64位运行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">JNIEXPORT jstring JNICALL</span></span><br><span class="line"><span class="function"><span class="title">Java_com_example_cpp6_MainActivity_stringFromJNI</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        JNIEnv* env,</span></span></span><br><span class="line"><span class="params"><span class="function">        jobject <span class="comment">/* this */</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    DexFile dexFile;</span><br><span class="line">    <span class="type">void</span> * beginAddress = (<span class="type">void</span> *) &amp;(dexFile.begin_);</span><br><span class="line">    <span class="type">void</span> * sizeAddress = (<span class="type">void</span> *) &amp;(dexFile.size_);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> dexFileAddress = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span>&gt; (&amp;dexFile);  <span class="comment">// 拿到DexFile对象的地址</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> beginOffset = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span>&gt; (beginAddress)-dexFileAddress;  <span class="comment">// 拿到begin_的偏移量</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> sizeOffset = <span class="built_in">reinterpret_cast</span>&lt;<span class="type">unsigned</span> <span class="type">long</span>&gt; (sizeAddress)-dexFileAddress;  <span class="comment">// 拿到size_的偏移量</span></span><br><span class="line">    __android_log_print(<span class="number">4</span>, <span class="string">&quot;cpp11&quot;</span>, <span class="string">&quot;beginOffset: %lu, sizeOffset: %lu&quot;</span>, beginOffset, sizeOffset);</span><br><span class="line"></span><br><span class="line">    std::string hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;<span class="built_in">NewStringUTF</span>(hello.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出日志：</br>arm32 com.example.cpp6 I&#x2F;cpp11: beginOffset: 4, sizeOffset: 8</br>arm64 com.example.cpp6 I&#x2F;cpp11: beginOffset: 8, sizeOffset: 16</br>去不去掉前面的static属性，都对内存布局没影响，对于脱壳而言，内存布局从前完后，而我们之关注begin_，size_。可以再把上面的DexFile类精简为结构体</br></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">DexFileStruct</span>&#123;</span><br><span class="line">    <span class="type">void</span>* vptr;  <span class="comment">// 虚函数表指针</span></span><br><span class="line">    <span class="type">void</span>* begin_;</span><br><span class="line">    <span class="type">uint32_t</span> size_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>先测试一下，在libart.so中随便找一个函数参数有DexFile的，</br>以 art::ClassLinker::LoadMethod(art::DexFile const&amp;, </br>art::ClassDataItemIterator const&amp;, art::Handle<a class="link"   href="art::mirror::Class" >art::mirror::Class<i class="fas fa-external-link-alt"></i></a>, art::ArtMethod *) 为例，使用frida进行hook</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">hookart</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> libart_module = <span class="title class_">Process</span>.<span class="title function_">getModuleByName</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">LoadMethodaddr</span> = <span class="literal">null</span>;</span><br><span class="line">    libart_module.<span class="title function_">enumerateExports</span>().<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">symbol</span>)&#123;</span><br><span class="line">        <span class="comment">// _ZN3art11ClassLinker10LoadMethodERKNS_7DexFileERKNS_21ClassDataItemIteratorENS_6HandleINS_6mirror5ClassEEEPNS_9ArtMethodE</span></span><br><span class="line">        <span class="comment">// 在安卓7和8中LoadMethod的参数发生了变化，所以这里直接找函数的特征</span></span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;ClassLinker&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;LoadMethod&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">            symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;DexFile&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; </span><br><span class="line">            symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;1ClassDataItemIterator&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">            symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;ArtMethod&quot;</span>) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(symbol.<span class="property">name</span>, symbol.<span class="property">address</span>);</span><br><span class="line">            <span class="title class_">LoadMethodaddr</span> = symbol.<span class="property">address</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在安卓8.1下 art::ClassLinker::LoadMethod(art::DexFile const&amp;, art::ClassDataItemIterator const&amp;, art::Handle&lt;art::mirror::Class&gt;, art::ArtMethod *)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">LoadMethodaddr</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start hook LoadMethodaddr&quot;</span>);</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">LoadMethodaddr</span>, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dexfileptr = args[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">var</span> dexfilebegin = <span class="title function_">ptr</span>(dexfileptr).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">1</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="keyword">var</span> dexfilesize = <span class="title function_">ptr</span>(dexfileptr).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readU32</span>();</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;get a dex:size:&quot;</span> + dexfilesize + <span class="string">&quot;---&quot;</span> + <span class="title function_">hexdump</span>(dexfilebegin, &#123;</span><br><span class="line">                    <span class="attr">length</span>: <span class="number">16</span></span><br><span class="line">                &#125;))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;go into LoadMethodaddr-&gt;&quot;</span> + <span class="title function_">hexdump</span>(dexfileptr, &#123;</span><br><span class="line">                    <span class="attr">length</span>: <span class="number">32</span></span><br><span class="line">                &#125;));</span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">hookart</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">get a dex:size:730868---             0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">7893d1a01c  64 65 78 0a 30 33 35 00 7f 66 c3 d6 bb 9f a5 71  dex.035..f.....q</span><br><span class="line">go into LoadMethodaddr-&gt;             0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">78c4c40060  20 5e 11 cd 78 00 00 00 1c a0 d1 93 78 00 00 00   ^..x.......x...</span><br><span class="line">78c4c40070  f4 26 0b 00 00 00 00 00 81 00 00 00 00 00 00 00  .&amp;..............</span><br></pre></td></tr></table></figure><p>可以看到dex的模值dex 037，也验证了dex的内存布局<br>在函数粒度的修复与脱壳中，还需要关注ArtMethod<br>将&#x2F;art&#x2F;runtime&#x2F;art_method.h下的ArtMethod类拷贝出来，除去属性外其余都删掉<br>删除后的ArtMethod精简代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArtMethod</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//    GcRoot &lt;mirror::Class&gt; declaring_class_; ==&gt; uint32_t reference_;</span></span><br><span class="line">    uint32_t reference_;</span><br><span class="line">    uint32_t access_flags_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Offset to the CodeItem.</span></span><br><span class="line">    uint32_t dex_code_item_offset_;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Index into method_ids of the dex file associated with this method.</span></span><br><span class="line">    uint32_t dex_method_index_;</span><br><span class="line"></span><br><span class="line">    uint16_t method_index_;</span><br><span class="line">    uint16_t hotness_count_;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>抽取壳的过程主要关注两个字段，dex_code_item_offset_和dex_method_index_<br>脱壳过程中的应用在脱壳过程中，重点是从内存中提取出被保护或加密的DEX文件，或从已经加载到内存中的DEX文件中提取出方法字节码。这时，dex_code_item_offset_和dex_method_index_就起到了关键作用：</p><ol><li>使用dex_code_item_offset_加上DEX文件基址，可以计算出方法字节码在内存中的实际地址。</li><li>通过dex_method_index_，可以找到该方法在DEX文件中的定义，从而获得方法的名称、所属类及其签名等信息。</br><br>ArtMethod是没有虚函数的，所以在32位或64位下dex_code_item_offset_和dex_method_index_的偏移都是8， 12<br>修改frida代码</br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">LoadMethodaddr</span> != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start hook LoadMethodaddr&quot;</span>);</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">LoadMethodaddr</span>, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dexfileptr = args[<span class="number">1</span>];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">artmethodptr</span> = args[<span class="number">4</span>];</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">dexfilebegin</span> = <span class="title function_">ptr</span>(dexfileptr).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">1</span>).<span class="title function_">readPointer</span>();</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">dexfilesize</span> = <span class="title function_">ptr</span>(dexfileptr).<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>).<span class="title function_">readU32</span>();</span><br><span class="line">                <span class="comment">// console.warn(&quot;get a dex:size:&quot; + dexfilesize + &quot;---&quot; + hexdump(dexfilebegin, &#123;</span></span><br><span class="line">                <span class="comment">//     length: 16</span></span><br><span class="line">                <span class="comment">// &#125;))</span></span><br><span class="line">                <span class="comment">// console.log(&quot;go into LoadMethodaddr-&gt;&quot; + hexdump(dexfileptr, &#123;</span></span><br><span class="line">                <span class="comment">//     length: 32</span></span><br><span class="line">                <span class="comment">// &#125;));</span></span><br><span class="line">            &#125;, <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> dex_code_item_offset = <span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">artmethodptr</span>).<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readU32</span>();  <span class="comment">// 在dex文件中函数的偏移， dexfilebegin+偏移就是函数的绝对地址</span></span><br><span class="line">                <span class="keyword">var</span> dex_method_index = <span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">artmethodptr</span>).<span class="title function_">add</span>(<span class="number">12</span>).<span class="title function_">readU32</span>();  <span class="comment">// 在dex文件中的方法索引</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">dexfilesize</span> + <span class="string">&quot;--&gt;LoadMethodaddr index:&quot;</span> + dex_method_index, <span class="string">&quot;--&gt;&quot;</span> + <span class="variable language_">this</span>.<span class="property">dexfilebegin</span>.<span class="title function_">add</span>(dex_code_item_offset));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>日志：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">_ZN3art11ClassLinker10LoadMethodERKNS_7DexFileERKNS_21ClassDataItemIteratorENS_6HandleINS_6mirror5ClassEEEPNS_9ArtMethodE 0x78ccc2868c</span><br><span class="line">start hook LoadMethodaddr</span><br><span class="line">3926232--&gt;LoadMethodaddr index:29945 --&gt;0x78984d1264</span><br><span class="line">3926232--&gt;LoadMethodaddr index:29946 --&gt;0x7898686a3c</span><br><span class="line">3926232--&gt;LoadMethodaddr index:29949 --&gt;0x7898686a54</span><br><span class="line">3926232--&gt;LoadMethodaddr index:29950 --&gt;0x7898686bd0</span><br><span class="line">3926232--&gt;LoadMethodaddr index:29952 --&gt;0x7898686e10</span><br><span class="line">3926232--&gt;LoadMethodaddr index:29947 --&gt;0x7898687000</span><br><span class="line">3926232--&gt;LoadMethodaddr index:29948 --&gt;0x789868711c</span><br><span class="line">...</span><br></pre></td></tr></table></figure>对app解压，也能看到dex的大小也是3926232，把dex放进010editor查看函数的执行顺序<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct method_id_item method_id[29945]void s.h.e.l.l.S.&lt;clinit&gt;()8A5E0h8hFg: Bg:0x008080Method ID</span><br><span class="line">struct method_id_item method_id[29946]void s.h.e.l.l.S.&lt;init&gt;()8A5E8h8hFg: Bg:0x008080Method ID</span><br><span class="line">struct method_id_item method_id[29949]void s.h.e.l.l.S.c(java.util.zip.ZipFile, java.util.zip.ZipEntry, java.io.File)8A600h8hFg: Bg:0x008080Method ID</span><br><span class="line">struct method_id_item method_id[29950]long s.h.e.l.l.S.g(java.io.File)8A608h8hFg: Bg:0x008080Method ID</span><br></pre></td></tr></table></figure></li></ol><p>打开apk的AndroidManifest.xml，跟artmethod打印的顺序是一致的，”s.h.e.l.l.S”是程序的入口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;application android:theme=&quot;0x7f090002&quot; android:label=&quot;0x7f080000&quot; android:icon=&quot;0x7f020029&quot; android:name=&quot;s.h.e.l.l.S&quot; android:debuggable=&quot;true&quot; android:allowBackup=&quot;true&quot; android:largeHeap=&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure><p>最先执行的两个函数分别是初始化类和对象，</br><br>当类加载时，JVM会解析类的字节码，并为每个方法生成对应的 ArtMethod 实例。这个过程确保了Java函数和 ArtMethod 是一一对应的关系。每个Java方法都有一个与之对应的 ArtMethod 对象，它负责存储和管理该方法的信息。</br><br>可以说Java函数和 ArtMethod 是一一对应的关系，它们之间的对应关系是固定的，且在类加载和初始化过程中被建立</br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;ART由C++11实现的，C++11中的类所占内存的大小主要是由成员变量（静态变量除外）决定的，成员函数（虚函数除外）是不计算在内的。&lt;/br&gt;成员函数的存储是以一般函数的模式进行存储。a.fun()是通过fun(a.this)来调用的，这时候this指针会做为隐藏的第一个</summary>
      
    
    
    
    
    <category term="脱壳" scheme="https://www.zskkk.cn/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Android加壳与脱壳（二）加壳和运行时的机制</title>
    <link href="https://www.zskkk.cn/posts/7260/"/>
    <id>https://www.zskkk.cn/posts/7260/</id>
    <published>2023-10-16T18:40:03.000Z</published>
    <updated>2023-10-16T18:40:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Android-App启动流程"><a href="#Android-App启动流程" class="headerlink" title="Android App启动流程"></a>Android App启动流程</h3><p>这里就先以一张图来说明这个过程<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/01.webp"                                     ></p><blockquote><p>(1)点击桌面APP图标时，Launcher的startActivity()方法，通过Binder通信，调用system_server进程中AMS服务的startActivity方法，发起启动请求<br>(2)system_server进程接收到请求后，向Zygote进程发送创建进程的请求<br>(3)Zygote进程fork出App进程，并执行ActivityThread的main方法，创建ActivityThread线程，初始化MainLooper，主线程Handler，同时初始化ApplicationThread用于和AMS通信交互<br>(4)App进程，通过Binder向sytem_server进程发起attachApplication请求，这里实际上就是APP进程通过Binder调用sytem_server进程中AMS的attachApplication方法,AMS的attachApplication方法的作用是将ApplicationThread对象与AMS绑定<br>(5)system_server进程在收到attachApplication的请求，进行一些准备工作后，再通过binder IPC向App进程发送handleBindApplication请求（初始化Application并调用onCreate方法）和scheduleLaunchActivity请求（创建启动Activity）<br>(6)App进程的binder线程（ApplicationThread）在收到请求后，通过handler向主线程发送BIND_APPLICATION和LAUNCH_ACTIVITY消息，这里注意的是AMS和主线程并不直接通信，而是AMS和主线程的内部类ApplicationThread通过Binder通信，ApplicationThread再和主线程通过Handler消息交互。<br>(7)主线程在收到Message后，创建Application并调用onCreate方法，再通过反射机制创建目标Activity，并回调Activity.onCreate()等方法<br>(8)到此，App便正式启动，开始进入Activity生命周期，执行完onCreate&#x2F;onStart&#x2F;onResume方法，UI渲染后显示APP主界面</p></blockquote><p>寒冰大佬在<a class="link"   href="https://bbs.pediy.com/thread-252630.htm" >FART：ART环境下基于主动调用的自动化脱壳方案<i class="fas fa-external-link-alt"></i></a>一文中讲述了ActivityThread.main()是进入App世界的大门，并由此展开了对加壳原理的讲述<br>开始进行ActivityThread源码分析，了解ActivityThread的具体操作：<br>以下代码均出自安卓8.1，链接：<a class="link"   href="http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/app/ActivityThread.java" >http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/app/ActivityThread.java<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6459</span>    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="number">6460</span>        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;ActivityThreadMain&quot;</span>);</span><br><span class="line"><span class="number">6461</span></span><br><span class="line"><span class="number">6462</span>        <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></span><br><span class="line"><span class="number">6463</span>        <span class="comment">// disable it here, but selectively enable it later (via</span></span><br><span class="line"><span class="number">6464</span>        <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></span><br><span class="line"><span class="number">6465</span>        CloseGuard.setEnabled(<span class="literal">false</span>);</span><br><span class="line"><span class="number">6466</span></span><br><span class="line"><span class="number">6467</span>        Environment.initForCurrentUser();</span><br><span class="line"><span class="number">6468</span></span><br><span class="line"><span class="number">6469</span>        <span class="comment">// Set the reporter for event logging in libcore</span></span><br><span class="line"><span class="number">6470</span>        EventLogger.setReporter(<span class="keyword">new</span> <span class="title class_">EventLoggingReporter</span>());</span><br><span class="line"><span class="number">6471</span></span><br><span class="line"><span class="number">6472</span>        <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></span><br><span class="line"><span class="number">6473</span>        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">configDir</span> <span class="operator">=</span> Environment.getUserConfigDirectory(UserHandle.myUserId());</span><br><span class="line"><span class="number">6474</span>        TrustedCertificateStore.setDefaultUserDirectory(configDir);</span><br><span class="line"><span class="number">6475</span></span><br><span class="line"><span class="number">6476</span>        Process.setArgV0(<span class="string">&quot;&lt;pre-initialized&gt;&quot;</span>);</span><br><span class="line"><span class="number">6477</span></span><br><span class="line"><span class="number">6478</span>        Looper.prepareMainLooper();</span><br><span class="line"><span class="number">6479</span></span><br><span class="line"><span class="number">6480</span>        <span class="type">ActivityThread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ActivityThread</span>();</span><br><span class="line"><span class="number">6481</span>        thread.attach(<span class="literal">false</span>);</span><br><span class="line"><span class="number">6482</span></span><br><span class="line"><span class="number">6483</span>        <span class="keyword">if</span> (sMainThreadHandler == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="number">6484</span>            sMainThreadHandler = thread.getHandler();</span><br><span class="line"><span class="number">6485</span>        &#125;</span><br><span class="line"><span class="number">6486</span></span><br><span class="line"><span class="number">6487</span>        <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line"><span class="number">6488</span>            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line"><span class="number">6489</span>                    LogPrinter(Log.DEBUG, <span class="string">&quot;ActivityThread&quot;</span>));</span><br><span class="line"><span class="number">6490</span>        &#125;</span><br><span class="line"><span class="number">6491</span></span><br><span class="line"><span class="number">6492</span>        <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line"><span class="number">6493</span>        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line"><span class="number">6494</span>        Looper.loop();</span><br><span class="line"><span class="number">6495</span></span><br><span class="line"><span class="number">6496</span>        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Main thread loop unexpectedly exited&quot;</span>);</span><br><span class="line"><span class="number">6497</span>    &#125;</span><br></pre></td></tr></table></figure><p>根据寒冰大佬描述，在ActivityThread完成实例化操作，调用thread.attach(false)完成一系列初始化准备工作，最后主线程进入消息循环，等待接收来自系统的消息。当收到系统发送来的bindapplication的进程间调用时，调用函数handlebindapplication来处理该请求。<br>可以查看handleMessage方法，查看参数为BIND_APPLICATION，即上面步骤第五步通过binder IPC向App进程发送handleBindApplication请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1580</span>        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line"><span class="number">1581</span>            <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">&quot;&gt;&gt;&gt; handling: &quot;</span> + codeToString(msg.what));</span><br><span class="line"><span class="number">1582</span>            <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                    ......</span><br><span class="line"><span class="number">1653</span>                <span class="keyword">case</span> BIND_APPLICATION:</span><br><span class="line"><span class="number">1654</span>                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">&quot;bindApplication&quot;</span>);</span><br><span class="line"><span class="number">1655</span>                    <span class="type">AppBindData</span> <span class="variable">data</span> <span class="operator">=</span> (AppBindData)msg.obj;</span><br><span class="line"><span class="number">1656</span>                    handleBindApplication(data);</span><br><span class="line"><span class="number">1657</span>                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line"><span class="number">1658</span>                    <span class="keyword">break</span>;</span><br><span class="line">                    ......</span><br><span class="line"><span class="number">1846</span>            &#125;</span><br><span class="line"><span class="number">1847</span>            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> msg.obj;</span><br><span class="line"><span class="number">1848</span>            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> SomeArgs) &#123;</span><br><span class="line"><span class="number">1849</span>                ((SomeArgs) obj).recycle();</span><br><span class="line"><span class="number">1850</span>            &#125;</span><br><span class="line"><span class="number">1851</span>            <span class="keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="string">&quot;&lt;&lt;&lt; done: &quot;</span> + codeToString(msg.what));</span><br><span class="line"><span class="number">1852</span>        &#125;</span><br><span class="line"><span class="number">1853</span>    &#125;</span><br></pre></td></tr></table></figure><p>在处理消息过程，就进入了handlebindapplication函数<br>这里源代码有点长，我再用寒冰大佬文章的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private void handleBindApplication(AppBindData data) &#123;</span><br><span class="line">    //step 1: 创建LoadedApk对象</span><br><span class="line">    data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);</span><br><span class="line">    ...</span><br><span class="line">    //step 2: 创建ContextImpl对象;</span><br><span class="line">    final ContextImpl appContext = ContextImpl.createAppContext(this, data.info);</span><br><span class="line"> </span><br><span class="line">    //step 3: 创建Instrumentation</span><br><span class="line">    mInstrumentation = new Instrumentation();</span><br><span class="line"> </span><br><span class="line">    //step 4: 创建Application对象;在makeApplication函数中调用了newApplication，</span><br><span class="line">    //在该函数中又调用了app.attach(context)，在attach函数中调用了Application.attachBaseContext函数</span><br><span class="line">    Application app = data.info.makeApplication(data.restrictedBackupMode, null);</span><br><span class="line">    mInitialApplication = app;</span><br><span class="line"> </span><br><span class="line">    //step 5: 安装providers</span><br><span class="line">    List&lt;ProviderInfo&gt; providers = data.providers;</span><br><span class="line">    installContentProviders(app, providers);</span><br><span class="line"> </span><br><span class="line">    //step 6: 执行Application.Create回调</span><br><span class="line">    mInstrumentation.callApplicationOnCreate(app);</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定位第四步，Application进行实例化，然后进入makeApplication</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/02.webp"                                     ><br>进入983行newApplication函数</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/03.webp"                                     ></p><p>这里调用的时1084行的newApplication，但它又调用了1099行的newApplication<br>这里可以看到做了两件事：<br>（1）完成了Application的实例化<br>（2）并调用Application.attach()函数<br>继续进入Application.attach()函数</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/04.webp"                                     ></p><p>调用了Application.attachBaseContext函数，回到handleBindApplication，这里就执行完第四步<br>跟进第六步，进入callApplicationOnCreate函数<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/05.webp"                                     ></p><p>执行了Application.onCreate()方法<br>从上面可以看到大概的流程：<br>初始化—&gt;Application的构造函数—&gt;Application.attachBaseContext()—&gt;Application.onCreate()<br>最后才会进入MainActivity中的attachBaseContext函数、onCreate函数<br /><br /><br>可以得出结论，app最先获得执行权限的是app中声明的Application类中的attachBaseContext和onCreate函数。因此，壳要想完成应用中加固代码的解密以及应用执行权的交付就都是在这两个函数上做文章。<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/06.webp"                                     ></p><p>下面这张图大致讲了加壳应用的运行流程。<br> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/07.webp"                                     ></p><p>当壳在函数attachBaseContext和onCreate中执行完加密的dex文件的解密后，通过自定义的Classloader在内存中加载解密后的dex文件。为了解决后续应用在加载执行解密后的dex文件中的Class和Method的问题，接下来就是通过利用java的反射修复一系列的变量。其中最为重要的一个变量就是应用运行中的Classloader，只有Classloader被修正后，应用才能够正常的加载并调用dex中的类和方法，否则的话由于Classloader的双亲委派机制，最终会报ClassNotFound异常，应用崩溃退出，这是加固厂商不愿意看到的。由此可见Classloader是一个至关重要的变量，所有的应用中加载的dex文件最终都在应用的Classloader中。</p><h4 id="整体加壳原理"><a href="#整体加壳原理" class="headerlink" title="整体加壳原理"></a>整体加壳原理</h4><p>Dex整体加壳可以理解为在加密的源Apk程序外面有套上了一层外壳，简单过程为：<br> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/08.webp"                                     ></p><p>简要概括：壳dex读取源dex文件，通过加密后写进一个新的dex文件，就成为新的APK</p><p>如何对App进行加一层外壳呢，这里就需要应用动态加载的原理，关于动态加载和类加载器，可以看下上一篇文章<a href="https://www.zskkk.cn/posts/23195/">Android加壳与脱壳（一）ClassLoader和动态加载</a><br>大概的流程就是</p><blockquote><p>（1）BootClassLoader加载系统核心库<br>（2）PathClassLoader加载APP自身dex<br>（3）进入APP自身组件，解析AndroidManifest.xml，然后查找Application代理<br>（4）调用声明Application的attachBaseContext()对源程序进行动态加载或解密<br>（5）调用声明Application的onCreate()对源程序进行动态加载或解密<br>（6）进入MainActivity中的attachBaseContext()，然后进入onCreate()函数，执行源程序代码</p></blockquote><p>上面文章也说到：</p><blockquote><p>Android中的ClassLoader类型分为系统ClassLoader和自定义ClassLoader。其中系统ClassLoader包括3种是BootClassLoader、DexClassLoader、PathClassLoader<br>(1)BootClassLoader:Android平台上所有Android系统启动时会使用BootClassLoader来预加载常用的类<br>(2)BaseDexClassLoader:实际应用层类文件的加载，而真正的加载委托给pathList来完成<br>(3)DexClassLoader:可以加载dex文件以及包含dex的压缩文件(apk,dex,jar,zip),可以安装一个未安装的apk文件，一般为自定义类加载器<br>(4)PathClassLoader:可以加载系统类和应用程序的类，通常用来加载已安装的apk的dex文件<br>补充：<br>Android 提供的原生加载器叫做基础类加载器，包括：BootClassLoader，PathClassLoader，DexClassLoader，InMemoryDexClassLoader（Android 8.0 引入），DelegateLastClassLoader（Android 8.1 引入）</p></blockquote><p>DexClassLoader加载的类是没有组件生命周期的，例如Activity。Android 生命周期中的方法（如 onCreate(), onStart(), onResume(), 等）由系统在特定情况下自动调用。直接通过类加载器加载这些类并调用这些方法不会触发正确的生命周期行为，也不会被系统管理。<br>两种解决方法：</p><ol><li>替换系统组件类加载器为我们的DexClassLoader，同时设置DexClassLoader的parent为系统组件类加载器。</li><li>打破原有的双亲关系，在系统组件类加载器和BootClassLoader的中间插入我们自己的DexClassLoader即可。</li></ol><h4 id="第一种：类加载器替换"><a href="#第一种：类加载器替换" class="headerlink" title="第一种：类加载器替换"></a>第一种：类加载器替换</h4><p>怎么去替换系统的类加载器，这就和上面分析的ActivityThread中LoadedApk有关了，LoadedApk主要负责加载一个Apk程序，我们进一步分析源码<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/09.webp"                                     ></p><p>在LoadedApk里面就定义了ClassLoader即mClassLoader，可以通过反射获取mclassLoader，然后使用我们的DexClassLoader进行替换。</p><blockquote><p>总结：<br>（1）获取ActivityThread实例<br>（2）通过反射获取类加载器<br>（3）获取LoadedApk<br>（4）获取mClassLoader系统类加载器<br>（5）替换自定义类加载器为系统类加载器</p></blockquote><p>大概的图如下，Android 应用的组件mclassLoader是由PathClassLoader加载的，要把mclassLoader替换成DexClassLoader就可以加载自定义的dex文件<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/10.webp"                                     ></p><p>先新建项目loaddextest编写一个activity类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.loaddextest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.i(<span class="string">&quot;zskkk&quot;</span>, <span class="string">&quot;i am from com.example.loaddextest.TestActivity.onCreate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置让apk解压后只生成一个class.dex文件，在proguard-rules.pro中，可以添加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-forceprocessing</span><br><span class="line">-dontshrink</span><br><span class="line">-dontoptimize</span><br></pre></td></tr></table></figure><p>在 build.gradle 中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        multiDexEnabled false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包解压推送dex到sdcard下命名为2.dex</p><p>在新项目下AndroidMainfest.xml添加读写sdcard的权限，并在application下添加TestActivity</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">&lt;<span class="attr">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.loaddextest.TestActivity&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在MainActivity下编写如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.loaddex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.ArrayMap;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">appContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationContext();</span><br><span class="line"><span class="comment">//        testDesClassLoader(appContext, &quot;/sdcard/1.dex&quot;);  // 加载普通类</span></span><br><span class="line">        staticTestActivityFirstMethod(appContext, <span class="string">&quot;/sdcard/2.dex&quot;</span>);   <span class="comment">// 加载组件类</span></span><br><span class="line">        Log.i(<span class="string">&quot;zskkk&quot;</span>, String.valueOf(MainActivity.class.getClassLoader()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDesClassLoader</span><span class="params">(Context context, String dexFilePath)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">optFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;opt_path&quot;</span>, <span class="number">0</span>);  <span class="comment">// 用于存放优化的dex文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">libFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;lib_path&quot;</span>, <span class="number">0</span>);  <span class="comment">// 用于存放优化的dex文件</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parentClassLoader</span> <span class="operator">=</span> MainActivity.class.getClassLoader();  <span class="comment">// 获取当前的类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">tmpClassLoader</span> <span class="operator">=</span> context.getClassLoader();  <span class="comment">// 获取当前的类加载器</span></span><br><span class="line">        <span class="comment">// 指定了它的双亲为mainactivety的classloader,这样就可以访问到mainactivety的类</span></span><br><span class="line">        <span class="type">DexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), MainActivity.class.getClassLoader());  <span class="comment">// 创建类加载器</span></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = dexClassLoader.loadClass(<span class="string">&quot;com.example.loaddextest.TestClass&quot;</span>);  <span class="comment">// 加载类</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">testFuncMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;testFunc&quot;</span>);  <span class="comment">// 获取方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();  <span class="comment">// 创建对象</span></span><br><span class="line">                testFuncMethod.invoke(obj);  <span class="comment">// 调用方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceClassLoader</span><span class="params">(Context context, ClassLoader dexClassLoader)</span> &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> MainActivity.class.getClassLoader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 获取ActivityThread的实例对象</span></span><br><span class="line">            Class&lt;?&gt; ActivityThreadClazz = classLoader.loadClass(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line">            <span class="type">Method</span> <span class="variable">currentActivityThread</span> <span class="operator">=</span> ActivityThreadClazz.getDeclaredMethod(<span class="string">&quot;currentActivityThread&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">activityThreadObj</span> <span class="operator">=</span> currentActivityThread.invoke(<span class="literal">null</span>);</span><br><span class="line">            <span class="comment">// 2. 通过反射获得类加载器</span></span><br><span class="line">            <span class="comment">// final ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt; mPackages = new ArrayMap&lt;&gt;();</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">mPackagesField</span> <span class="operator">=</span> ActivityThreadClazz.getDeclaredField(<span class="string">&quot;mPackages&quot;</span>);</span><br><span class="line">            mPackagesField.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置可访问</span></span><br><span class="line">            <span class="comment">// 3. 拿到LoaderApk</span></span><br><span class="line">            <span class="type">ArrayMap</span> <span class="variable">mPackagesObj</span> <span class="operator">=</span> (ArrayMap) mPackagesField.get(activityThreadObj); <span class="comment">// 获取了 ActivityThread 类中名为 mPackages 的字段的值，该字段是一个 ArrayMap 类型的对象，用于存储应用程序包名与 LoadedApk 对象的映射关系</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">packageName</span> <span class="operator">=</span> context.getPackageName();  <span class="comment">// 获取当前应用的包名。</span></span><br><span class="line">            <span class="type">WeakReference</span> <span class="variable">wr</span> <span class="operator">=</span> (WeakReference) mPackagesObj.get(packageName);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">LoadApkObj</span> <span class="operator">=</span> wr.get();</span><br><span class="line">            <span class="comment">// 4.拿到mclassLoader</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">LoadedApkClass</span> <span class="operator">=</span> classLoader.loadClass(<span class="string">&quot;android.app.LoadedApk&quot;</span>);</span><br><span class="line">            <span class="comment">// private ClassLoader mClassLoader;</span></span><br><span class="line">            <span class="type">Field</span> <span class="variable">mClassLoaderField</span> <span class="operator">=</span> LoadedApkClass.getDeclaredField(<span class="string">&quot;mClassLoader&quot;</span>);</span><br><span class="line">            mClassLoaderField.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//            Object mClassLoader = mClassLoaderField.get(LoadApkObj);  // 获取 LoadedApk 对象 LoadApkObj 中的 mClassLoader 字段值：</span></span><br><span class="line"><span class="comment">//            Log.e(&quot;mClassLoader&quot;,mClassLoader.toString());</span></span><br><span class="line">            <span class="comment">// 5.将系统组件ClassLoader给替换</span></span><br><span class="line">            mClassLoaderField.set(LoadApkObj, dexClassLoader);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">staticTestActivityFirstMethod</span><span class="params">(Context context, String dexFilePath)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">optFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;opt_dex&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">libFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;lib_path&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">DexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), MainActivity.class.getClassLoader());  <span class="comment">// 创建类加载器</span></span><br><span class="line">        replaceClassLoader(context, dexClassLoader);</span><br><span class="line">        Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = dexClassLoader.loadClass(<span class="string">&quot;com.example.loaddextest.TestActivity&quot;</span>);  <span class="comment">// 加载类</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        context.startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(context, clazz));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// com.example.loaddex I/zskkk: dalvik.system.PathClassLoader</span></span><br><span class="line"><span class="comment">// com.example.loaddex I/zskkk: i am from com.example.loaddextest.TestActivity.onCreate</span></span><br></pre></td></tr></table></figure><h4 id="第二种：类加载器插入"><a href="#第二种：类加载器插入" class="headerlink" title="第二种：类加载器插入"></a>第二种：类加载器插入</h4><p>还有一种方案，动态加载中我们讲述了类加载器的双亲委派机制，就是说我们的类加载器刚拿到类，并不会直接进行加载，而是先判断自己是否加载，如果没有加载则给自己的父类，父类再给父类，所以我们让DexClassLoader成为PathClassLoader的父类，这样就可以解决DexClassLoader生命周期的问题<br>大概的图如下：<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/11.webp"                                     ></p><p>总结：<br>（1）将DexClassloader父节点设置为BootClassLoader<br>（2）将PathClassLoader父节点设置为DexClassloader</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">staticTestActivitySecondMethod</span><span class="params">(Context context, String dexFilePath)</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">optFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;opt_dex&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">libFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;lib_path&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">pathClassLoader</span> <span class="operator">=</span> MainActivity.class.getClassLoader();</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">bootClassLoader</span> <span class="operator">=</span> MainActivity.class.getClassLoader().getParent();</span><br><span class="line">    <span class="type">DexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), bootClassLoader);  <span class="comment">// 创建类加载器</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">parentField</span> <span class="operator">=</span> ClassLoader.class.getDeclaredField(<span class="string">&quot;parent&quot;</span>);</span><br><span class="line">        parentField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        parentField.set(pathClassLoader, dexClassLoader);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clazz = dexClassLoader.loadClass(<span class="string">&quot;com.example.loaddextest.TestActivity&quot;</span>);  <span class="comment">// 加载类</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    context.startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(context, clazz));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加壳案例实现"><a href="#加壳案例实现" class="headerlink" title="加壳案例实现"></a>加壳案例实现</h4><h5 id="1-编写源程序"><a href="#1-编写源程序" class="headerlink" title="1. 编写源程序"></a>1. 编写源程序</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.loaddextest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Log.i(<span class="string">&quot;zskkk&quot;</span>, <span class="string">&quot;i am a source dex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是我们的源程序，源程序运行，我们会在日志中看见我们打印的信息，然后我们生成dex文件 。<br>先打包成apk解压得到dex文件，push到sdcard。</p><h5 id="2-编写壳程序"><a href="#2-编写壳程序" class="headerlink" title="2. 编写壳程序"></a>2. 编写壳程序</h5><p>编写代理类模仿上面的加壳，在attachBaseContext或onCreate中对我们的dex进行动态加载和类加载器修正即可，因为这里我们源dex并未进行加密，所以也无需解密的过程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.loaddex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Application;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.util.ArrayMap;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StubApplication</span> <span class="keyword">extends</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">attachBaseContext</span><span class="params">(Context base)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.attachBaseContext(base);</span><br><span class="line">        <span class="type">String</span> <span class="variable">dexFilePath</span> <span class="operator">=</span> <span class="string">&quot;/sdcard/3.dex&quot;</span>;</span><br><span class="line">        <span class="type">File</span> <span class="variable">optFile</span> <span class="operator">=</span> base.getDir(<span class="string">&quot;opt_dex&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">libFile</span> <span class="operator">=</span> base.getDir(<span class="string">&quot;lib_path&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parentClassLoader</span> <span class="operator">=</span> StubApplication.class.getClassLoader();</span><br><span class="line">        <span class="type">DexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), StubApplication.class.getClassLoader());  <span class="comment">// 创建类加载器</span></span><br><span class="line">        <span class="comment">// 使用上面的一种方法进行类加载器修正</span></span><br><span class="line">        replaceClassLoader(<span class="built_in">this</span>, dexClassLoader);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; activityClass = dexClassLoader.loadClass(<span class="string">&quot;com.example.loaddextest.MainActivity&quot;</span>);</span><br><span class="line">            startActivity(<span class="keyword">new</span> <span class="title class_">Intent</span>(StubApplication.<span class="built_in">this</span>, activityClass));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">replaceClassLoader</span><span class="params">(Context context, ClassLoader dexClassLoader)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在新建项目的AndroidMainfest.xml添加读写sdcard的权限，还有在application下代理类别，加入导入类的Activity</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">&quot;.StubApplication&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">...</span></span></span><br><span class="line"><span class="tag">  &lt;<span class="attr">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;com.example.loaddextest.MainActivity&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231017/12.webp"                                     ></p><p>运行成功，说明我们的整体加壳成功</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Android-App启动流程&quot;&gt;&lt;a href=&quot;#Android-App启动流程&quot; class=&quot;headerlink&quot; title=&quot;Android App启动流程&quot;&gt;&lt;/a&gt;Android App启动流程&lt;/h3&gt;&lt;p&gt;这里就先以一张图来说明这个过程&lt;br</summary>
      
    
    
    
    
    <category term="脱壳" scheme="https://www.zskkk.cn/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向系列(一) 环境配置</title>
    <link href="https://www.zskkk.cn/posts/12801/"/>
    <id>https://www.zskkk.cn/posts/12801/</id>
    <published>2023-10-09T16:00:00.000Z</published>
    <updated>2023-10-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><p>有mac设备可以直接下载checker1n，下载链接：<a class="link"   href="https://checkra.in/" >https://checkra.in/<i class="fas fa-external-link-alt"></i></a><br>下载后安装打开如果提示身份不明的开发者（如下图），则在 设置-隐私与安全性 进行设置</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/01.webp"                                     ></p><p>打开后点击 Options，记得先连接手机</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/02.webp"                                     ></p><p>勾选第一个和第三个，然后点 Back 返回</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/03.webp"                                     ></p><p>点击 Start，再点击Next，这时候手机就自动进入恢复模式</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/04.webp"                                     ></p><p>等待结束就会到这一步</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/05.webp"                                     ></p><p>意思就是，1.先点击Start，2. 点击Start后要按住提示的按键，即侧边键，比如我的是iphone6就是同时按住电源键和home键（机型不同按键稍有差距），同时按住看着那个4秒倒计时完放开电源键，一直按住home键10秒，直到3.上面的倒计时结束放开，然后就会有进度条跑代码开机，显示All Done为成功</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/06.webp"                                     ></p><p>越狱成功的话，打开手机桌面上的checkra1n，安装cydia记可成功的越狱。<br /><br>注意：手机重启的话越狱会失效，需要重新越狱。</p><p>win可以使用u盘越狱，教程：<a class="link"   href="https://mp.weixin.qq.com/s/oTm4xlO1b-v3f4y3x_koUA" >https://mp.weixin.qq.com/s/oTm4xlO1b-v3f4y3x_koUA<i class="fas fa-external-link-alt"></i></a><br>工具下载链接：<br>链接：<a class="link"   href="https://pan.baidu.com/s/1_Rw810In2L9eR0Xsc2WEDA" >https://pan.baidu.com/s/1_Rw810In2L9eR0Xsc2WEDA<i class="fas fa-external-link-alt"></i></a><br>提取码：4511</p><p>越狱后root密码 alpine，输入 passwd 命令后按照提示连续两次输入新密码即可<br>越狱后下载的几个插件&#x2F;工具<br>Vi IMproved<br>htop<br>Filza File Manage<br>Apple File Conduit<br>AppSync Unified (需要添加软件源 cydia.angelxwind.net)<br>MTerminal<br>nano<br>OpenSSH</p><p>frida安装，选择16.0.19，deb后缀的，推到ios上<br>使用命令安装 dpkg -i frida_xxxxxx.deb<br>安装成功可以在cydia看到</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/07.webp"                                     ></p><h3 id="ios脱壳"><a href="#ios脱壳" class="headerlink" title="ios脱壳"></a>ios脱壳</h3><p>脱壳脚本 <a class="link"   href="https://github.com/AloneMonkey/frida-ios-dump" >https://github.com/AloneMonkey/frida-ios-dump<i class="fas fa-external-link-alt"></i></a><br /><br>拉取下来后安装README里的要求，下载requirements.txt里的库，端口转发 iproxy 2222 22，ssh链接端口2222，<br><code>ssh root@127.0.0.1 -p 2222</code><br>加壳软件：高考蜂背（爱思助手下载）<br>使用方式：dump.py xxx -uroot -P123456<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/08.webp"                                     ></p><p>不行就多试几次<br>结束后会得到ipa安装包，使用 7z x xxx.ipa进行解压<br>找到最大可执行文件<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231010/09.webp"                                     ></p><p>可以使用ida打开，ida64 Gkfb</p><h3 id="通过命令行获取设备信息，类似adb"><a href="#通过命令行获取设备信息，类似adb" class="headerlink" title="通过命令行获取设备信息，类似adb"></a>通过命令行获取设备信息，类似adb</h3><p>安装地址：<a class="link"   href="https://libimobiledevice.org/#get-started" >https://libimobiledevice.org/#get-started<i class="fas fa-external-link-alt"></i></a><br>遇到安装失败，更新一下 apt-get update<br>使用命令查看 <a class="link"   href="https://github.com/libimobiledevice/libimobiledevice" >https://github.com/libimobiledevice/libimobiledevice<i class="fas fa-external-link-alt"></i></a></p><p>apt install ideviceinstaller<br><a class="link"   href="https://github.com/libimobiledevice/ideviceinstaller" >https://github.com/libimobiledevice/ideviceinstaller<i class="fas fa-external-link-alt"></i></a><br>其他功能可以查看他的其他项目<br /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h3&gt;&lt;p&gt;有mac设备可以直接下载checker1n，下载链接：&lt;a class=&quot;link&quot;   href=&quot;https://che</summary>
      
    
    
    
    
    <category term="iOS" scheme="https://www.zskkk.cn/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Android加壳与脱壳（一）ClassLoader和动态加载</title>
    <link href="https://www.zskkk.cn/posts/23195/"/>
    <id>https://www.zskkk.cn/posts/23195/</id>
    <published>2023-10-03T18:49:07.000Z</published>
    <updated>2023-10-03T18:49:07.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="三层类加载器"><a href="#三层类加载器" class="headerlink" title="三层类加载器"></a>三层类加载器</h3><h4 id="1-启动类加载器-Bootstrap-ClassLoader"><a href="#1-启动类加载器-Bootstrap-ClassLoader" class="headerlink" title="1. 启动类加载器  Bootstrap ClassLoader"></a>1. 启动类加载器  Bootstrap ClassLoader</h4><p>负责加载存在放&lt;JAVA_HOME&gt;\lib目录或者-Xbootclasspath指定的路径中存放的类库。比如java.lang、java.uti等这些系统类。<br>启动类加载器无法被java程序直接引用，但可以通过在自定义类加载器时将getClassLoader的返回值设为null  将加载请求委派给启动类加载器处理。</p><h4 id="2-扩展类加载器-Extensions-ClassLoader"><a href="#2-扩展类加载器-Extensions-ClassLoader" class="headerlink" title="2. 扩展类加载器  Extensions ClassLoader"></a>2. 扩展类加载器  Extensions ClassLoader</h4><p>它负责加载&lt;JAVA_HOME&gt;\lib\ext目录中或者java.ext.dirs指定的路径下的类库。Java中实现类为ExtClassLoader，提供了除了系统类之外的额外功能，可以在java里获取。</p><h4 id="3-应用程序类加载器-Application-ClassLoader"><a href="#3-应用程序类加载器-Application-ClassLoader" class="headerlink" title="3.应用程序类加载器  Application ClassLoader"></a>3.应用程序类加载器  Application ClassLoader</h4><p>负责加载用户类路径上的所有类库。该加载器可以通过ClassLoader的静态方法getSystemLoader获得。java中的实现类为AppClassLoader，与我们接触最多的类加载器，也可以通过ClassLoader.getSystemClassLoader返回。<br /></p><h4 id="自定义类加载器"><a href="#自定义类加载器" class="headerlink" title="自定义类加载器"></a>自定义类加载器</h4><p>需要通过继承java.lang.ClassLoader类的方式来实现自己的类加载器即可。<br>加载顺序Bootstrap ClassLoader、Extention ClassLoader、AppClassLoader。</p><h3 id="双亲委派模式"><a href="#双亲委派模式" class="headerlink" title="双亲委派模式"></a>双亲委派模式</h3><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231004/01.webp"                                     ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">       <span class="comment">//1.先检查是否已经加载过--findLoaded</span></span><br><span class="line">       Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">       <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">//2.如果自己没加载过,存在父类,则委托父类</span></span><br><span class="line">               <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                   c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   c = findBootstrapClassOrNull(name);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="comment">//3.如果父类也没加载过,则尝试本级classLoader加载</span></span><br><span class="line">               c = findClass(name);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双亲委派模式的工作原理是如果一个类加载器收到了累加器的请求，他并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。<br /></p><blockquote><p>我们要加载一个class文件，我们定义了一个CustomerClassLoader类加载器:<br>(1)首先会判断自己的CustomerClassLoader否加载过,如果加载过直接返回,<br>(2)如果没有加载过则会调用父类PathClassLoader去加载,该父类同样会判断自己是否加载过,如果没有加载过则委托给父类BootClassLoader去加载,<br>(3)这个BootClassLoader是顶级classLoader,同样会去判断自己有没有加载过,如果也没有加载过则会调用自己的findClass(name)去加载,<br>(4)如果顶级BootClassLoader加载失败了,则会把加载这个动作向下交还给PathClassLoader,<br>(5)这个PathClassLoader也会尝试去调用findClass(name);去加载,如果加载失败了,则会继续向下交还给CustomClassLoader来完成加载,这整个过程感觉是一个递归的过程,逐渐往上然后有逐渐往下,直到加载成功<br>其实这个String.class在系统启动的时候已经被加载了,我们自己定义一个CustomerClassLoader去加载,其实也是父类加载的</p></blockquote><p>好处：<br>1.避免重复加载，如果已经加载过一次class，可以直接读取已经加载的class。<br>2.更加安全，无法自定义类来替代系统的类，可以防止核心api库被随意篡改。</p><p>这种机制天生就给java类划分了带优先级的层次关系，bootstrap classloader优先级最高。假设用户自己写了一个java.lang.object类，在加载时会加载请求会委派给bootstrap classloader，它会去<JAVA_HOME>\lib目录下加载jdk自带的java.lang.object类，这样不管用哪个类加载器去加载java.lang.object都会是同一个类。如果没有双亲委派的话，出现不同的java.lang.object类型，那么java类型体系中最基础的行为都无法保证。</p><h3 id="Android系统中的ClassLoader的继承关系"><a href="#Android系统中的ClassLoader的继承关系" class="headerlink" title="Android系统中的ClassLoader的继承关系"></a>Android系统中的ClassLoader的继承关系</h3><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231004/02.webp"                                     ></p><p>Android系统中与ClassLoader相关的一共有8个：<br><strong>ClassLoader</strong>为抽象类。<br><strong>BootClassLoader</strong>预加载常用类继承自<strong>ClassLoader</strong>，单例模式。与Java中的<strong>BootClassLoader</strong>不同，并不是由C&#x2F;C++代码实现，而是由Java实现的。<br><strong>BaseDexClassLoader</strong>是<strong>PathCLassLoader</strong>、<strong>DexCLassLoader</strong>、<strong>InMemoryCLassLoader</strong>的父类，类加载器的主要逻辑都是在<strong>BaseDexClassLoader</strong>完成的。<br><strong>SecureClassLoader</strong>继承了抽象类<strong>CLassLoader</strong>，扩展了<strong>ClassLoader</strong>类加入了权限方面的功能，加强了安全性，其子类<strong>URLClassLOader</strong>是用URl路径和jar文件中加载类和资源。<br>其中重点关注<strong>PathCLassLoader</strong>、<strong>DexCLassLoader</strong><br><strong>PathClassLoader</strong>是Android默认使用的类加载器，一个apk中的Activity等类便是在其中加载。<br><strong>DexCLassLoader</strong>可以加载任意目录下的dex&#x2F;jar&#x2F;apl&#x2F;zip文件，比<strong>PathClassLoader</strong>更灵活，是实现插件化，热修复，以及dex加壳的重点。<br>Android8.0新引入<strong>InMemoryDexClassloader</strong>，从名字看出是直接从内存中加载dex<br /><br /></p><p>通过查看Android8.0的源码，ClassLoader是一个抽象类，里面还有个parent变量，这是实现双亲委派机制的关键。对于每个继承的ClassLoader的类，都有parent来表示父节点。还定义了final，只能进行一次赋值。对于实现插件化，热修复parent是一个关键的变量。<br>不带参的默认ClassLoader构造函数会将parent指定为systemClassLoader,也就是说在不指定 &lt;父&gt;classloader的情况下，而是每个加载器内部都有一个parent，代表它的父classloader。只有bootstrap classloader的parent为null。</p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20231004/03.webp"                                     ></p><p>看下面PathCLassLoader、DexCLassLoader、InMemoryCLassLoader的源码都很少，主要逻辑都是在父类BaseDexClassLoader里。<br><strong>DexClassLoader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DexClassLoader</span> <span class="keyword">extends</span> <span class="title class_">BaseDexClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> DexClassLoader&#125; that finds interpreted and native</span></span><br><span class="line"><span class="comment">     * code.  Interpreted classes are found in a set of DEX files contained</span></span><br><span class="line"><span class="comment">     * in Jar or APK files.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;The path lists are separated using the character specified by the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> path.separator&#125; system property, which defaults to &#123;<span class="doctag">@code</span> :&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath the list of jar/apk files containing classes and</span></span><br><span class="line"><span class="comment">     *     resources, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;, which</span></span><br><span class="line"><span class="comment">     *     defaults to &#123;<span class="doctag">@code</span> &quot;:&quot;&#125; on Android</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> optimizedDirectory directory where optimized dex files</span></span><br><span class="line"><span class="comment">     *     should be written; must not be &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> librarySearchPath the list of directories containing native</span></span><br><span class="line"><span class="comment">     *     libraries, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;; may be</span></span><br><span class="line"><span class="comment">     *     &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DexClassLoader</span><span class="params">(String dexPath, String optimizedDirectory,</span></span><br><span class="line"><span class="params">                          String librarySearchPath, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(dexPath, <span class="keyword">new</span> <span class="title class_">File</span>(optimizedDirectory), librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PathClassLoader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PathClassLoader</span> <span class="keyword">extends</span> <span class="title class_">BaseDexClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> PathClassLoader&#125; that operates on a given list of files</span></span><br><span class="line"><span class="comment">     * and directories. This method is equivalent to calling</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #PathClassLoader(String, String, ClassLoader)&#125; with a</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125; value for the second argument (see description there).</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath the list of jar/apk files containing classes and</span></span><br><span class="line"><span class="comment">     * resources, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;, which</span></span><br><span class="line"><span class="comment">     * defaults to &#123;<span class="doctag">@code</span> &quot;:&quot;&#125; on Android</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PathClassLoader</span><span class="params">(String dexPath, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(dexPath, <span class="literal">null</span>, <span class="literal">null</span>, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a &#123;<span class="doctag">@code</span> PathClassLoader&#125; that operates on two given</span></span><br><span class="line"><span class="comment">     * lists of files and directories. The entries of the first list</span></span><br><span class="line"><span class="comment">     * should be one of the following:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;ul&gt;</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;JAR/ZIP/APK files, possibly containing a &quot;classes.dex&quot; file as</span></span><br><span class="line"><span class="comment">     * well as arbitrary resources.</span></span><br><span class="line"><span class="comment">     * &lt;li&gt;Raw &quot;.dex&quot; files (not inside a zip file).</span></span><br><span class="line"><span class="comment">     * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * The entries of the second list should be directories containing</span></span><br><span class="line"><span class="comment">     * native library files.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexPath the list of jar/apk files containing classes and</span></span><br><span class="line"><span class="comment">     * resources, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;, which</span></span><br><span class="line"><span class="comment">     * defaults to &#123;<span class="doctag">@code</span> &quot;:&quot;&#125; on Android</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> librarySearchPath the list of directories containing native</span></span><br><span class="line"><span class="comment">     * libraries, delimited by &#123;<span class="doctag">@code</span> File.pathSeparator&#125;; may be</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> null&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PathClassLoader</span><span class="params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(dexPath, <span class="literal">null</span>, librarySearchPath, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>InMemoryDexClassLoader</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">InMemoryDexClassLoader</span> <span class="keyword">extends</span> <span class="title class_">BaseDexClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create an in-memory DEX class loader with the given dex buffers.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexBuffers array of buffers containing DEX files between</span></span><br><span class="line"><span class="comment">     *                       &lt;tt&gt;buffer.position()&lt;/tt&gt; and &lt;tt&gt;buffer.limit()&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader for delegation.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InMemoryDexClassLoader</span><span class="params">(ByteBuffer[] dexBuffers, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(dexBuffers, parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new in-memory DEX class loader.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dexBuffer buffer containing DEX file contents between</span></span><br><span class="line"><span class="comment">     *                       &lt;tt&gt;buffer.position()&lt;/tt&gt; and &lt;tt&gt;buffer.limit()&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parent the parent class loader for delegation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InMemoryDexClassLoader</span><span class="params">(ByteBuffer dexBuffer, ClassLoader parent)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">ByteBuffer</span>[] &#123; dexBuffer &#125;, parent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClassLoader</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">thisClassloader</span> <span class="operator">=</span> MainActivity.class.getClassLoader();</span><br><span class="line">    Log.i(<span class="string">&quot;ClassLoaderTag&quot;</span>, <span class="string">&quot;thisClassLoader: &quot;</span> + thisClassloader);</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">tmpClassloader</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">parentClassloader</span> <span class="operator">=</span> thisClassloader.getParent();</span><br><span class="line">    <span class="keyword">while</span> (parentClassloader != <span class="literal">null</span>) &#123;</span><br><span class="line">        Log.i(<span class="string">&quot;ClassLoaderTag&quot;</span>, <span class="string">&quot;this:&quot;</span> + thisClassloader + <span class="string">&quot;---&quot;</span> + parentClassloader);</span><br><span class="line">        tmpClassloader = parentClassloader.getParent();</span><br><span class="line">        thisClassloader = parentClassloader;</span><br><span class="line">        parentClassloader = tmpClassloader;</span><br><span class="line">    &#125;</span><br><span class="line">    Log.i(<span class="string">&quot;ClassLoaderTag&quot;</span>, <span class="string">&quot;root:&quot;</span> + thisClassloader);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// thisClassLoader: dalvik.system.PathClassLoader</span></span><br><span class="line"><span class="comment">// this:dalvik.system.PathClassLoader---java.lang.BootClassLoader@e2f9b5c</span></span><br><span class="line"><span class="comment">// root:java.lang.BootClassLoader@e2f9b5c</span></span><br></pre></td></tr></table></figure><h4 id="动态加载dex，调用dex的函数"><a href="#动态加载dex，调用dex的函数" class="headerlink" title="动态加载dex，调用dex的函数"></a>动态加载dex，调用dex的函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFunc</span><span class="params">()</span>&#123;</span><br><span class="line">        Log.i(<span class="string">&quot;DexTestTag&quot;</span>, <span class="string">&quot;i am from com.example.test01.TestClass.testFunc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置让apk解压后只生成一个class.dex文件，在proguard-rules.pro中，可以添加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-forceprocessing</span><br><span class="line">-dontshrink</span><br><span class="line">-dontoptimize</span><br></pre></td></tr></table></figure><p>在 build.gradle 中添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        ...</span><br><span class="line">        multiDexEnabled false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打包解压推送dex到sdcard下命名为1.dex</p><p>再新建个项目用于加载上面dex文件里面的testFunc函数，用DexClassLoader类去加载dex文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// DexClassLoader方法参数：</span><br><span class="line">// dexPath：目标所在的apk或者jar文件的路径，装载器将从路径中寻找指定的目标类。</span><br><span class="line">// dexOutputDir：由于dex文件在apk或者jar文件中，所以在装载前面前先要从里面解压出dex文件，这个路径就是dex存放的路径，在android系统中，一个应用程序对应一个linux用户id，应用程序只对自己的数据目录有写的权限，所以存放在这个路径。</span><br><span class="line">// libPath：目标类中使用的C/C++库。</span><br><span class="line">// 最后一个参数是该装载器的父装载器，一般为当前类执行的装载器。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">Context</span> <span class="variable">appContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationContext();</span><br><span class="line">        testDesClassLoader(appContext,  <span class="string">&quot;/sdcard/1.dex&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDesClassLoader</span><span class="params">(Context context, String dexFilePath)</span>&#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">optFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;opt_path&quot;</span>, <span class="number">0</span>);  <span class="comment">// 用于存放优化的dex文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">libFile</span> <span class="operator">=</span> context.getDir(<span class="string">&quot;lib_path&quot;</span>, <span class="number">0</span>);  <span class="comment">// 用于存放优化的dex文件</span></span><br><span class="line">        <span class="comment">// ClassLoader parentClassLoader = MainActivity.class.getClassLoader();  // 获取当前的类加载器</span></span><br><span class="line">        <span class="comment">// ClassLoader tmpClassLoader = context.getClassLoader();  // 获取当前的类加载器</span></span><br><span class="line">        <span class="comment">// 指定了它的双亲为mainactivety的classloader,这样就可以访问到mainactivety的类</span></span><br><span class="line">        <span class="type">DexClassLoader</span> <span class="variable">dexClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), MainActivity.class.getClassLoader());  <span class="comment">// 创建类加载器</span></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = dexClassLoader.loadClass(<span class="string">&quot;com.example.test01.TestClass&quot;</span>);  <span class="comment">// 加载类</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (clazz != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Method</span> <span class="variable">testFuncMethod</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;testFunc&quot;</span>);  <span class="comment">// 通过反射获取方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> clazz.newInstance();  <span class="comment">// 创建对象</span></span><br><span class="line">                testFuncMethod.invoke(obj);  <span class="comment">// 调用方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// I/DexTestTag: i am from com.example.test01.TestClass.testFunc</span></span><br></pre></td></tr></table></figure><p>还要在AndroidMainfest.xml文件里添加读写sd卡的权限,并在手机设置给应用增加读取文件权限</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样就实现了dex通过ClassLoader加载进行调用，并指定了MainActivity.class.getClassLoader()，也就是PathClassLoader作为父节点。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;三层类加载器&quot;&gt;&lt;a href=&quot;#三层类加载器&quot; class=&quot;headerlink&quot; title=&quot;三层类加载器&quot;&gt;&lt;/a&gt;三层类加载器&lt;/h3&gt;&lt;h4 id=&quot;1-启动类加载器-Bootstrap-ClassLoader&quot;&gt;&lt;a href=&quot;#1-启动类加载</summary>
      
    
    
    
    
    <category term="脱壳" scheme="https://www.zskkk.cn/tags/%E8%84%B1%E5%A3%B3/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu18.04 编译安卓6.0刷入Nexus 5</title>
    <link href="https://www.zskkk.cn/posts/4118/"/>
    <id>https://www.zskkk.cn/posts/4118/</id>
    <published>2023-09-27T16:00:00.000Z</published>
    <updated>2023-09-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>有台闲置的nexus 5，想着刷机，之前都是刷入编译好的系统包，就琢磨着自己编译安卓源码刷入。<br>一开始用ubuntu22.04，各种踩坑，放弃了改为用ubuntu18.04<br>资料链接：<br><a class="link"   href="https://source.android.com/docs/setup/about/build-numbers?hl=zh-cn#platform-code-names-versions-api-levels-and-ndk-releases" >https://source.android.com/docs/setup/about/build-numbers?hl=zh-cn#platform-code-names-versions-api-levels-and-ndk-releases<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://source.android.com/docs/setup/build/running?hl=zh-cn#selecting-device-build" >https://source.android.com/docs/setup/build/running?hl=zh-cn#selecting-device-build<i class="fas fa-external-link-alt"></i></a></p><h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><p><strong>安装和配置git</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install git</span><br><span class="line">$ git config --global user.name &quot;Your Name&quot;</span><br><span class="line">$ git config --global user.email &quot;you@example.com&quot;</span><br></pre></td></tr></table></figure><p><strong>更换软件源为清华</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>在文件最前面加入下面代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br></pre></td></tr></table></figure><p>修改完成后，保存文件，执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><p><strong>安装依赖：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y git flex bison gperf build-essential libncurses5-dev:i386</span><br><span class="line">sudo apt-get install libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib</span><br><span class="line">sudo apt-get install tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386</span><br><span class="line">sudo apt-get install dpkg-dev libsdl1.2-dev libesd0-dev</span><br><span class="line">sudo apt-get install git-core gnupg flex bison gperf build-essential </span><br><span class="line">sudo apt-get install zip curl zlib1g-dev gcc-multilib g++-multilib</span><br><span class="line">sudo apt-get install libc6-dev-i386</span><br><span class="line">sudo apt-get install lib32ncurses5-dev x11proto-core-dev libx11-dev</span><br><span class="line">sudo apt-get install lib32z-dev ccache</span><br><span class="line">sudo apt-get install libgl1-mesa-dev libxml2-utils xsltproc unzip m4</span><br><span class="line">sudo apt-get install lib32stdc++6</span><br></pre></td></tr></table></figure><p><strong>所需JDK：</strong><br><a class="link"   href="https://source.android.com/docs/setup/start/older-versions?hl=zh-cn" >https://source.android.com/docs/setup/start/older-versions?hl=zh-cn<i class="fas fa-external-link-alt"></i></a></br><br>JDK</p><ul><li>Android 7.0 - Android 8.0：<ul><li>Ubuntu：OpenJDK 8</li><li>Mac OS X：JDK 8u45 或更高版本</li></ul></li><li>Android 5.x (Lollipop) - Android 6.0 (Marshmallow)：<ul><li>Ubuntu：OpenJDK 7</li><li>Mac OS X：jdk-7u71-macosx-x64.dmg</li></ul></li></ul><p>nexus 5官方只支持到 android-6.0.1_r77，这里用openJDK7，我给找好了</br>链接：<a class="link"   href="https://pan.baidu.com/s/1YMCsApMD_jeI5S7wmpJgTg" >https://pan.baidu.com/s/1YMCsApMD_jeI5S7wmpJgTg<i class="fas fa-external-link-alt"></i></a> </br>提取码：aupw</br>将openJDK7解压到&#x2F;usr&#x2F;lib&#x2F;jvm这个目录下面，比如我的目录&#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;openjdk-1.7.0_121</br>打开&#x2F;etc&#x2F;profile文件:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/profile</span><br></pre></td></tr></table></figure><p></br>在末尾追加下面代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/lib/jvm/openjdk-1.7.0_121</span><br><span class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre </span><br><span class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib </span><br><span class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure><p>修改了&#x2F;etc&#x2F;profile文件需要 重启 才能生效，但使用下面命令可以在不重启的情况下在 当前 bash环境生效：<br>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p> <strong>配置python</strong><br>Ubuntu 18.04.6已内置python3，安装位置在&#x2F;usr&#x2F;bin&#x2F;python3.6</br>AOSP 12及以上用python3，只需要建立一个python的链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3 /usr/bin/python</span><br></pre></td></tr></table></figure><p>AOSP 12以下，需要安装python2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python-minimal</span><br><span class="line">python2 --version</span><br></pre></td></tr></table></figure><p>python2的安装路径为&#x2F;usr&#x2F;bin&#x2F;python2.7。因为系统中安装了多个python版本，需要使用update-alternatives来切换版本，update-alternatives是Linux上的一个版本管理工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.6 0</span><br></pre></td></tr></table></figure><p>update-alternatives后面按顺序共5个参数，其中：</br>第一个参数–install表示向update-alternatives注册服务名。</br>第二个参数&#x2F;usr&#x2F;bin&#x2F;python是注册的最终地址，以后管理就是管理这个软链</br>第三个参数python为服务名</br>第四个参数为被管理命令的绝对路径</br>第五个参数为优先级，数字越大优先级越高</br>配置完毕后，可以使用python –version查看当前使用的python版本</br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">zsk@ubuntu:~$ update-alternatives --display python</span><br><span class="line">python - 自动模式</span><br><span class="line">  最佳链接版本为 /usr/bin/python2.7</span><br><span class="line"> 链接目前指向 /usr/bin/python2.7</span><br><span class="line">  链接 python 指向 /usr/bin/python</span><br><span class="line">/usr/bin/python2.7 - 优先级 1</span><br><span class="line">/usr/bin/python3.6 - 优先级 0</span><br></pre></td></tr></table></figure><p>后面如果需要切换python版本，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">zsk@ubuntu:~$ sudo update-alternatives --config python</span><br><span class="line">有 2 个候选项可用于替换 python (提供 /usr/bin/python)。</span><br><span class="line"></span><br><span class="line">  选择       路径              优先级  状态</span><br><span class="line">------------------------------------------------------------</span><br><span class="line">* 0            /usr/bin/python2.7   1         自动模式</span><br><span class="line">  1            /usr/bin/python2.7   1         手动模式</span><br><span class="line">  2            /usr/bin/python3.6   0         手动模式</span><br><span class="line"></span><br><span class="line">要维持当前值[*]请按&lt;回车键&gt;，或者键入选择的编号：</span><br></pre></td></tr></table></figure><p>如果需要安装对应版本的pip<br>python3安装pip（先切换到python3下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure><p>python2安装pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install curl  #安装curl下载工具</span><br><span class="line">sudo curl https://bootstrap.pypa.io/pip/2.7/get-pip.py -o get-pip.py  #下载安装脚本</span><br><span class="line">sudo python get-pip.py  #运行安装脚本</span><br></pre></td></tr></table></figure><h3 id="安装repo"><a href="#安装repo" class="headerlink" title="安装repo"></a>安装repo</h3><p>上面是谷歌官方的地址，如果下载不了，可以使用下面清华镜像地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://mirrors.tuna.tsinghua.edu.cn/git/git-repo &gt; ~/bin/repo</span><br></pre></td></tr></table></figure><p><strong>初始化repo和manifest仓库</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.0_r1 --depth=1</span><br></pre></td></tr></table></figure><p>后面记得加–depth&#x3D;1，这样就会只拉最新的git版本。而不是把所有版本都拉下来。不然会有几百G大</br>如果提示无法连接到 gerrit.googlesource.com，repo的运行过程中会尝试访问官方的git源更新自己，如果想使用tuna的镜像源进行更新，可以将如下内容复制到你的~&#x2F;.bashrc里 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export REPO_URL=&#x27;https://mirrors.tuna.tsinghua.edu.cn/git/git-repo/&#x27;</span><br></pre></td></tr></table></figure><p>同步</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repo sync</span><br></pre></td></tr></table></figure><h3 id="下载驱动"><a href="#下载驱动" class="headerlink" title="下载驱动"></a>下载驱动</h3><p>需要下载对应的驱动<br><a class="link"   href="https://developers.google.com/android/drivers#hammerheadm4b30z" >https://developers.google.com/android/drivers#hammerheadm4b30z<i class="fas fa-external-link-alt"></i></a><br><strong>适用于 Android 6.0.0 (MRA58K) 的 Nexus 5 (GSM&#x2F;LTE) 二进制文件</strong></p><table><thead><tr><th>硬件组件</th><th>公司</th><th>下载</th><th>SHA-256 校验和</th></tr></thead><tbody><tr><td>NFC、蓝牙、Wi-Fi</td><td>Broadcom</td><td><a class="link"   href="https://dl.google.com/dl/android/aosp/broadcom-hammerhead-mra58k-bed5b700.tgz" >Link<i class="fas fa-external-link-alt"></i></a></td><td>4009c98b916f679a96cc9d9459b811498e198c478b656652537fd7d705d28acc</td></tr><tr><td>摄像头、传感器、音频</td><td>LG</td><td><a class="link"   href="https://dl.google.com/dl/android/aosp/lge-hammerhead-mra58k-25d00e3d.tgz" >Link<i class="fas fa-external-link-alt"></i></a></td><td>42bca1a416903020f7e90bf1cc8651fa6b045b6137291dc21bfe5cf3626424ea</td></tr><tr><td>图形、GSM、摄像头、GPS、传感器、媒体、DSP、USB</td><td>Qualcomm</td><td><a class="link"   href="https://dl.google.com/dl/android/aosp/qcom-hammerhead-mra58k-ff98ab07.tgz" >Link<i class="fas fa-external-link-alt"></i></a></td><td>489df79f864abdc4947f39f45923b7999589db49a40dcd3c180d8cd924b73ae3</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.google.com/dl/android/aosp/broadcom-hammerhead-mra58k-bed5b700.tgz</span><br><span class="line">wget https://dl.google.com/dl/android/aosp/lge-hammerhead-mra58k-25d00e3d.tgz</span><br><span class="line">wget https://dl.google.com/dl/android/aosp/qcom-hammerhead-mra58k-ff98ab07.tgz</span><br></pre></td></tr></table></figure><p>下载后解压得到三个shell脚本文件，放到源码的根目录中</br>依次执行这三个脚本文件，这里要注意，三个脚本文件的作用是生成驱动文件，但是在执行操作前，它会让你阅读相关协议，你必须一直按enter键一行一行往下读，更不能一键摁到底，因为程序在最后会让你输入“I ACCEPT”，如果你一键摁到底，也就是说最后一步也摁enter键的话它就会执行默认操作，即不接受此协议，那生成驱动文件的操作就不会执行。</br></p><h3 id="开始编译"><a href="#开始编译" class="headerlink" title="开始编译"></a>开始编译</h3><p>修改 源码目录&#x2F;art&#x2F;build&#x2F;Android.common_build.mk 文件，定位到75行，将下面的代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifneq ($(WITHOUT_HOST_CLANG),true)改为ifeq ($(WITHOUT_HOST_CLANG),false) //对应问题3</span><br></pre></td></tr></table></figure><p>如果之前编译过，删除所有以前编译操作的已有输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make clobber</span><br><span class="line">make clean</span><br></pre></td></tr></table></figure><ol><li>在 .bashrc文件末尾添加：export USE_CCACHE &#x3D; 1， 只要编译过aosp，执行过这一句代码，以后再编译aosp，就不用再执行了<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo export USE_CCACHE=1 &gt;&gt; ~/.bashrc </span><br></pre></td></tr></table></figure></li><li>为了提高编译效率，设置编译器高速缓存<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">prebuilts/misc/linux-x86/ccache/ccache -M 100G</span><br></pre></td></tr></table></figure></li><li>初始化编译环境 source<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source build/envsetup.sh</span><br></pre></td></tr></table></figure></li><li>运行lunch命令选择编译目标</li></ol><table><thead><tr><th>变体</th><th>说明</th></tr></thead><tbody><tr><td>eng</td><td><ul>这是默认变种<li>安装带有 eng 或 debug 标记的模块。</li><li>除了带有标记的模块之外，还会根据产品定义文件安装相应模块。</li><li>ro.secure&#x3D;0</li><li>ro.debuggable&#x3D;1</li><li>ro.kernel.android.checkjni&#x3D;1</li><li>adb 默认处于启用状态。</li></ul></td></tr><tr><td>user</td><td><ul>打算作为最终发布版本的变体。<li>安装带有 user 标记的模块。</li><li>除了带有标记的模块之外，还会根据产品定义文件安装相应模块。</li><li>ro.secure&#x3D;1</li><li>ro.debuggable&#x3D;0</li><li>adb 默认处于停用状态。</li></ul></td></tr><tr><td>userdebug</td><td><ul>与 user 相同，但以下几点除外：<li>还会安装带有 debug 标记的模块。</li><li>ro.debuggable&#x3D;1</li><li>adb 默认处于启用状态。</li></ul></td></tr></tbody></table><p><a class="link"   href="https://source.android.com/docs/setup/build/running#selecting-device-build" >https://source.android.com/docs/setup/build/running#selecting-device-build<i class="fas fa-external-link-alt"></i></a></p><table><thead><tr><th>-</th><th>-</th><th>-</th></tr></thead><tbody><tr><td>Nexus 6P</td><td>angler</td><td>aosp_angler-userdebug</td></tr><tr><td>Nexus 5X</td><td>bullhead</td><td>aosp_bullhead-userdebug</td></tr><tr><td>Nexus 6</td><td>shamu</td><td>aosp_shamu-userdebug</td></tr><tr><td>Nexus Player</td><td>fugu</td><td>aosp_fugu-userdebug</td></tr><tr><td>Nexus 9</td><td>volantis (flounder)</td><td>aosp_flounder-userdebug</td></tr><tr><td>Nexus 5 (GSM&#x2F;LTE)</td><td>hammerhead</td><td>aosp_hammerhead-userdebug</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lunch</span><br><span class="line">// 1. aosp_arm-eng不会生成我们需要的5个文件，17. aosp_hammerhead-userdebug可以</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LC_ALL=C //对应问题2</span><br></pre></td></tr></table></figure><p>查看CPU核心数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/cpuinfo | grep processor</span><br></pre></td></tr></table></figure><p>花了两个半小时编译完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">make_ext4fs -s -T -1 -S out/target/product/hammerhead/root/file_contexts -L system -l 1073741824 -a system out/target/product/hammerhead/obj/PACKAGING/systemimage_intermediates/system.img out/target/product/hammerhead/system out/target/product/hammerhead/system</span><br><span class="line">Creating filesystem with parameters:</span><br><span class="line">    Size: 1073741824</span><br><span class="line">    Block size: 4096</span><br><span class="line">    Blocks per group: 32768</span><br><span class="line">    Inodes per group: 8192</span><br><span class="line">    Inode size: 256</span><br><span class="line">    Journal blocks: 4096</span><br><span class="line">    Label: system</span><br><span class="line">    Blocks: 262144</span><br><span class="line">    Block groups: 8</span><br><span class="line">    Reserved block group size: 63</span><br><span class="line">Created filesystem with 1718/65536 inodes and 105291/262144 blocks</span><br><span class="line">Install system fs image: out/target/product/hammerhead/system.img</span><br><span class="line">out/target/product/hammerhead/system.img+out/target/product/hammerhead/obj/PACKAGING/recovery_patch_intermediates/recovery_from_boot.p maxsize=1096212480 blocksize=135168 total=416118221 reserve=11083776</span><br><span class="line"></span><br><span class="line">#### make completed successfully (02:27:25 (hh:mm:ss)) ####</span><br></pre></td></tr></table></figure><p>编译后输出的文件都放在了源码根目录下的 &#x2F;out&#x2F;target&#x2F;product&#x2F;hammerhead&#x2F;</br>可以在该目录下面找到boot.img、system.img、recovery.img、cache.img、userdata.img五个镜像文件，这表示编译成功，这也是刷机需要的文件。</p><h4 id="问题1："><a href="#问题1：" class="headerlink" title="问题1："></a>问题1：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Export includes file: frameworks/base/tools/aidl/Android.mk -- out/host/linux-x86/obj/EXECUTABLES/aidl_intermediates/export_includes</span><br><span class="line">build/core/binary.mk:609: recipe for target &#x27;out/host/linux-x86/obj/EXECUTABLES/aidl_intermediates/aidl_language_y.cpp&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj/EXECUTABLES/aidl_intermediates/aidl_language_y.cpp] Error 127</span><br><span class="line">make: *** 正在等待未完成的任务....</span><br><span class="line">Lex: aidl &lt;= frameworks/base/tools/aidl/aidl_language_l.l</span><br><span class="line">Notice file: frameworks/base/tools/aidl/NOTICE -- out/host/linux-x86/obj/NOTICE_FILES/src//bin/aidl.txt</span><br><span class="line">flex-2.5.39: loadlocale.c:130:_nl_intern_locale_data: ?? &#x27;cnt &lt; (sizeof (_nl_value_type_LC_TIME) / sizeof (_nl_value_type_LC_TIME[0]))&#x27; ???</span><br><span class="line">build/core/binary.mk:646: recipe for target &#x27;out/host/linux-x86/obj/EXECUTABLES/aidl_intermediates/aidl_language_l.cpp&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj/EXECUTABLES/aidl_intermediates/aidl_language_l.cpp] 已放弃 (core dumped)</span><br><span class="line">注: 某些输入文件使用了未经检查或不安全的操作。</span><br><span class="line">注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。</span><br><span class="line">注: 某些输入文件使用了未经检查或不安全的操作。</span><br><span class="line">注: 有关详细信息, 请使用 -Xlint:unchecked 重新编译。</span><br><span class="line"></span><br><span class="line">make failed to build some targets (02:10 (mm:ss))</span><br></pre></td></tr></table></figure><p>执行: make -j8 update-api</p><h4 id="问题2："><a href="#问题2：" class="headerlink" title="问题2："></a>问题2：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Lex: aidl &lt;= frameworks/base/tools/aidl/aidl_language_l.l</span><br><span class="line">flex-2.5.39: loadlocale.c:130:_nl_intern_locale_data: ?? &#x27;cnt &lt; (sizeof (_nl_value_type_LC_TIME) / sizeof (_nl_value_type_LC_TIME[0]))&#x27; ???</span><br><span class="line">build/core/binary.mk:646: recipe for target &#x27;out/host/linux-x86/obj/EXECUTABLES/aidl_intermediates/aidl_language_l.cpp&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj/EXECUTABLES/aidl_intermediates/aidl_language_l.cpp] 已放弃 (core dumped)</span><br></pre></td></tr></table></figure><p>编译前：export LC_ALL&#x3D;C</p><h4 id="问题3："><a href="#问题3：" class="headerlink" title="问题3："></a>问题3：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</span><br><span class="line">build/core/host_shared_library_internal.mk:51: recipe for target &#x27;out/host/linux-x86/obj/lib/libart.so&#x27; failed</span><br><span class="line">make: *** [out/host/linux-x86/obj/lib/libart.so] Error 1</span><br></pre></td></tr></table></figure><p>修改 源码目录&#x2F;art&#x2F;build&#x2F;Android.common_build.mk 文件，定位到75行，将下面的代码：</br>ifneq ($(WITHOUT_HOST_CLANG),true)改为ifeq ($(WITHOUT_HOST_CLANG),false)</p><h3 id="将镜像刷入Nexus5"><a href="#将镜像刷入Nexus5" class="headerlink" title="将镜像刷入Nexus5"></a>将镜像刷入Nexus5</h3><p>在源码根目录下输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reboot bootloader</span><br></pre></td></tr></table></figure><p>随后手机就会进入recovery模式。</br>执行 fastboot oem unlock 解锁bootloader，如果已经解锁，启动界面的google图标下有一把打开的锁。</br>开始刷机：</br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo fastboot -w flashall</span><br></pre></td></tr></table></figure><p>如果遇到 error: ANDROID_PRODUCT_OUT not set</br>执行 $ export ANDROID_PRODUCT_OUT&#x3D;&#x2F;home&#x2F;zsk&#x2F;bin&#x2F;out&#x2F;target&#x2F;product&#x2F;hammerhead</br>或者进到 &#x2F;home&#x2F;zsk&#x2F;bin&#x2F;out&#x2F;target&#x2F;product&#x2F;hammerhead 目录下，执行刷入5个镜像文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo fastboot flash recovery recovery.img</span><br><span class="line">sudo fastboot flash boot boot.img</span><br><span class="line">sudo fastboot flash system system.img</span><br><span class="line">sudo fastboot flash cache cache.img</span><br><span class="line">sudo fastboot flash userdata userdata.img</span><br><span class="line">sudo fastboot reboot</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有台闲置的nexus 5，想着刷机，之前都是刷入编译好的系统包，就琢磨着自己编译安卓源码刷入。&lt;br&gt;一开始用ubuntu22.04，各种踩坑，放弃了改为用ubuntu18.04&lt;br&gt;资料链接：&lt;br&gt;&lt;a class=&quot;link&quot;   href=&quot;https://sou</summary>
      
    
    
    
    
    <category term="刷机" scheme="https://www.zskkk.cn/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Arm汇编</title>
    <link href="https://www.zskkk.cn/posts/22788/"/>
    <id>https://www.zskkk.cn/posts/22788/</id>
    <published>2023-08-31T16:00:00.000Z</published>
    <updated>2023-08-31T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>以下ARM笔记我基于 <a class="link"   href="https://space.bilibili.com/37877654" >_周壑<i class="fas fa-external-link-alt"></i></a> 大佬在b站的视频教程整理来的，推荐配合视频使用</strong></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>arm文档下载链接：<a class="link"   href="https://documentation-service.arm.com/static/644a406baa78c007af74e6fd?token=" >https://documentation-service.arm.com/static/644a406baa78c007af74e6fd?token=<i class="fas fa-external-link-alt"></i></a></br>其中指令集在目录 F5.1 Alphabetical list of T32 and A32 base instruction set instructions。</br>在android studio中创建设备，选择api17的，armeabi-v7a架构。</br>创建后的设备默认路径在 C:\Users\zsk.android\avd，snapshots保存的是快照</br>快捷方式启动设备：</br>    创建bat文件，输入D:\Android\Sdk\emulator\emulator.exe -avd Pixel_XL_API_17_2，运行启动设备</br>将ida的android-server push到设备上，android-server文件在ida目录下的dbgsrv</br>push后修改文件权限为777，运行，端口转发：adb forward tcp:23946 tcp:23946</br>运行后就可以在ida选择设备调试，Debugger -&gt; Attach -&gt; Remote ARMLinux&#x2F;Android debugger</br>hostname填localhost，没有进行端口转发则需要填手机ip，能看到进程列表则成功</br></p><h2 id="c文件编译成arm运行"><a href="#c文件编译成arm运行" class="headerlink" title="c文件编译成arm运行"></a>c文件编译成arm运行</h2><p>在window下把c文件编译为arm的前置准备</br>hello.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在同级目录下新建Application.mk，Android.mk文件</br><a class="link"   href="https://developer.android.google.cn/ndk/guides/android_mk?hl=zh-cn" >https://developer.android.google.cn/ndk/guides/android_mk?hl&#x3D;zh-cn<i class="fas fa-external-link-alt"></i></a></br><br>Application.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">APP_ABI := armeabi-v7a</span><br><span class="line">APP_BUILD_SCRIPT := Android.mk</span><br><span class="line">APP_PLATFORM := android-16</span><br></pre></td></tr></table></figure><p>Android.mk</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := <span class="variable">$(<span class="built_in">call</span> my-<span class="built_in">dir</span>)</span></span><br><span class="line"><span class="comment">#include $(CLEAR_VARS)</span></span><br><span class="line">LOCAL_ARM_MODE := arm</span><br><span class="line">LOCAL_MODULE := <span class="string">&quot;hello&quot;</span></span><br><span class="line">LOCAL_SRC_FILES := hello.c</span><br><span class="line"><span class="keyword">include</span> <span class="variable">$(BUILD_EXECUTABLE)</span></span><br></pre></td></tr></table></figure><p>编译，可以弄成bat方便执行</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ndk-build NDK_PROJECT_PATH=. NDK_APPLICATION_MK=Application.mk</span><br></pre></td></tr></table></figure><p>需要在Android studio中下载ndk工具，下载好后会在sdk下有ndk文件，进入选择随便一个版本路径配置环境变量</br>运行显示过程</br>[armeabi-v7a] Compile thumb  : hello &lt;&#x3D; hello.c</br>[armeabi-v7a] Executable     : hello</br>[armeabi-v7a] Install        : hello &#x3D;&gt; libs&#x2F;armeabi-v7a&#x2F;hello</br>结束后会在目录生成obj和libs文件，在libs下是hello可执行文件，obj下是debugger版的可执行文件，调试的话就用obj下的。</br>将文件push到手机，修改777权限，执行运行</br></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">root@android:/data/local/tmp # chmod 777 hello</span></span><br><span class="line"><span class="section">root@android:/data/local/tmp # ./hello</span></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>这样一下子就运行玩完了，没法调试，修改代码让它一直运行</br></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello\n&quot;</span>);</span><br><span class="line">        getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译并推送执行</br></p><h2 id="ida调试"><a href="#ida调试" class="headerlink" title="ida调试"></a>ida调试</h2><p>回到ida，调试运行中的hello程序</br><br>避免每次都要执行多行命令，可以整合成一个bat</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb push D:\Android\arm_test\obj\local\armeabi-v7a\hello /data/local/tmp/</span><br><span class="line">adb shell &quot;chmod 777 /data/local/tmp/hello&quot;</span><br><span class="line">adb shell &quot;/data/local/tmp/hello&quot;</span><br></pre></td></tr></table></figure><h2 id="寄存器和指令基本格式"><a href="#寄存器和指令基本格式" class="headerlink" title="寄存器和指令基本格式"></a>寄存器和指令基本格式</h2><p>没有隐式内存操作指令，</br><br>一条ARM汇编指令可以包含0到3个操作数。操作数是指执行指令时所涉及的数据或寄存器。内存操作数和里脊操作数不能同时存在，意味着在一条指令中，不能同时存在既是内存操作数又是寄存器操作数。你要么使用内存地址作为操作数，要么使用寄存器。内存操作数至多出现一次，寄存器操作数总在最前面</br></p><ul><li><p>特殊情况：</br></p><ul><li>读PC寄存器，arm读PC加8，thumb读PC加4</br></li><li>C标志位使用</br></li></ul></li><li><p>寄存器： </br></p><ul><li>寄存器是计算机中一种高速的、临时的、可用于存储和操作数据的存储单元。在ARM架构中，通常使用 R0、R1、R2 等寄存器来表示通用寄存器。这些寄存器可以用来存储临时数据、地址或执行算术和逻辑运算。</br></li></ul></li><li><p>立即数： </br></p><ul><li>立即数是在指令中直接提供的常数值，而不是从内存中加载。在汇编语言中，可以使用 # 符号表示立即数。例如，在 MOV R0, #10 中，#10 就是一个立即数，表示将值 10 直接存储到寄存器 R0 中。</br></li></ul></li><li><p>操作数： </br></p><ul><li>操作数是参与运算的数据或者指令中的一个参数。在指令中，你可能会看到源操作数和目标操作数。在 MOV R0, #10 中，#10 是源操作数，表示移动的数据；而 R0 是目标操作数，表示数据要移动到的位置。</br></li></ul></li><li><p>MOV：</br></p><ul><li>用于将一个数值（立即数或寄存器中的值）移动到目标寄存器。</br>    MOV R0, #10       ; 将立即数 10 移动到寄存器 </br>    R0 MOV R1, R2        ; 将寄存器 R2 中的值移动到寄存器 R1</br></li></ul></li><li><p>基本运算：</br></p><ul><li>ADD：加法指令。</br></li><li>ADR：将地址加载到寄存器的伪指令。</br></li><li>SUB：减法指令。</br></li><li>RSB：反向减法指令。</br></li><li>AND：按位与运算指令。</br></li><li>BIC：按位与非运算指令。</br></li><li>ORR：按位或运算指令。</br></li><li>EOR：按位异或运算指令。</br></li><li>LSL：逻辑左移指令。</br></li><li>LSR：逻辑右移指令。</br></li><li>ASR：算术右移指令。</br></li></ul></li><li><p>访存：</br></p><ul><li>LDR：从内存中加载数据到寄存器。</br></li><li>STR：将寄存器中的数据存储到内存。</br></li></ul></li><li><p>块访存：</br></p><ul><li>LDMFD：从内存中加载多个寄存器，然后递减栈指针。</br></li><li>LDMIA：从内存中加载多个寄存器，然后递增基址寄存器。</br></li><li>STMFD：将多个寄存器的值存储到内存，然后递减栈指针。</br></li><li>STMIA：将多个寄存器的值存储到内存，然后递增基址寄存器。</br></li></ul></li><li><p>分支：</br></p><ul><li>B：无条件分支。</br></li><li>BL：带链接的无条件分支，用于函数调用。</br></li><li>BX：无条件分支并切换指令集（ARM&#x2F;Thumb）。</br></li><li>BLX：带链接的无条件分支并切换指令集。</br></li></ul></li></ul><p>在ida中按ctrl+alt+k可以修改指令</p><h2 id="条件和标志位响应"><a href="#条件和标志位响应" class="headerlink" title="条件和标志位响应"></a>条件和标志位响应</h2><h3 id="条件指令"><a href="#条件指令" class="headerlink" title="条件指令"></a>条件指令</h3><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/1.webp"                                     ></br>条件指令是加在运算符后面的，如何看懂？</br>例如机器码为：</br>03 00 10 E3TST</br>小端序排序的，前高4位是条件，看最高位也就是E，E的对应的bit为1110，也就是None，无条件，可以说E是出现最多的</br>06 00 00 0ABEQ</br>最高位0，0就是EQ，</br>03 00 52 21CMPCS</br>最高位为2，2就是0010，CS</br>指令后缀带S的，表示执行完标志位会改变</br>01 00 80 E0ADDR0, R0, R1</br>01 00 90 E0ADDSR0, R0, R1</br>01 00 40 E0SUBR0, R0, R1</br>01 00 50 E0SUBSR0, R0, R1</br>S是由第20个bit控制，也就是上面的8，9</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/2.webp"                                     ></br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/3.webp"                                     ></br></p><p>S位为0就是不带S，为就是S</br>大部分算术指令都可以加S，CMP不行，CMP的20位固定为1</br></p><ul><li>运算指令可以分为以下三种：</br><ul><li>第一种既要结果又要标志寄存器，subs，adds</br></li><li>第二种只要结果，sub，add</br></li><li>第三种只要标志寄存器，cmp，cmn</br></li></ul></li></ul><h2 id="MOV指令"><a href="#MOV指令" class="headerlink" title="MOV指令"></a>MOV指令</h2><h3 id="立即数"><a href="#立即数" class="headerlink" title="立即数"></a>立即数</h3><p><strong>Move（immediate）将立即数值写入目标寄存器。</strong><br>mov是不访问内存，没有写内存的功能。那就只有寄存器操作数或者立即操作数</br>mov是把第二个操作数（可能是寄存器也可能是立即数）写到第一个操作数，那第一个操作数只能是寄存器操作数</br>arm指令是定长32位的，也就是立即数长度肯定不会超过32位</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/4.webp"                                     ><br>这里立即数的位数是imm4+imm12，也就是16位</br>例如：</br>34 82 01 E3                   MOVW            R8, #0x1234</br>如果是超过16位，则写不进。</br>第15-12位4位二进制的长度刚好16对应着r0-r15</br>还有一种A1格式，立即数是可以超过16-32位的</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/5.webp"                                     ></br><br>02 81 A0 E3                   MOV             R8, #0x80000000</br>虽然这里长度比16位大，但是它的有效位只有最高位的8，这里是把2向右移动1*2位， 0010 -&gt;右移2位-&gt; 1000 -&gt; 8(十进制)</br>01 81 A0 E3                   MOV             R8, #0x40000000</br>把1向右移动1*2位，0001 -&gt;右移2位-&gt; 0100 -&gt; 4(十进制)</br>02 82 A0 E3                   MOV             R8, #0x20000000</br>把2向右移动4位，0010 -&gt;右移4位-&gt; 0010 -&gt; 2(十进制)</br>立即数的有效位数比较密集，可以集中在8位范围内还是偶数</br>如果真要写入32位有效数如何做？</br>先写一条指令 mov r0, 0x5678 </br>再写 movt r0, 0x1234 写到高16位，ida会两句合成一句伪指令</br>78 06 05 E3 34 02 41 E3       MOV             R0, #0x12345678</br></p><h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><p><strong>Move（register）将值从寄存器复制到目标寄存器。</strong></br></p><p>上面说的是立即数到寄存器，这个是寄存器到寄存器</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/6.webp"                                     ></br></p><p>除了： 01 00 A0 E1                   MOV             R0, R1</br>还能： 01 02 A0 E1                   MOV             R0, R1,LSL#4 （R0是一个操作数，R1,LSL#4整体是一个操作数）R1向左移动4位写到r0里</br>看第7-11位，5位的长度也就是2的32次方来表示偏移</br>第5-6位，stype2位的长度有4种情况，逻辑左移，逻辑右移，算术右移 ，循环移位（算术左移的逻辑和逻辑左移是一样的，循环移位不区分左右移，比如循环左移1位和循环右移32位是一样的）</br>此指令由别名 ASRS (immediate), ASR (immediate), LSLS (immediate), LSL (immediate), LSRS (immediate), LSR (immediate), RORS (immediate), ROR (immediate), RRXS, and RRX使用.</br> 指令lsl r0, r1,4 的效果跟 R0, R1,LSL#4 是一样的</br>所以 ASRS, ASR, LSLS, LSL, LSRS, LSR, RORS, ROR, RRXS, RRX 实际上都可以认为是mov指令的一个宏，另一种写法，在ida中都会翻译成mov指令</br>常用的也就是逻辑左移，逻辑右移，算术右移，都是一些数组，结构体偏移寻址的</br></p><h3 id="寄存器移位寄存器"><a href="#寄存器移位寄存器" class="headerlink" title="寄存器移位寄存器"></a>寄存器移位寄存器</h3><p>Move（寄存器移位寄存器）将寄存器移位后的寄存器值复制到目标寄存器。</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/7.webp"                                     ></br></p><p>例如：11 02 A0 E1                   MOV             R0, R1,LSL R2</br></p><h2 id="基本整型运算"><a href="#基本整型运算" class="headerlink" title="基本整型运算"></a>基本整型运算</h2><p>指令基本都是3个操作数，第一个是写入，第二三个是做运算。（寄存器，寄存器，立即数）  或者是 （寄存器，寄存器，寄存器）。</br><br><strong>下面指令都有多种格式，立即数，寄存器，移位寄存器等等。只列举立即数的情况</strong></br></p><h3 id="ADD-ADDS-immediate"><a href="#ADD-ADDS-immediate" class="headerlink" title="ADD, ADDS (immediate)"></a>ADD, ADDS (immediate)</h3><p>加法指令。</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/8.webp"                                     ></br></p><p>立即数长度12，分为有效数字低8位，高4位做位移循环。这种叫A32ExpandImm，把imm12扩展成32位</br></p><h3 id="ADD-ADDS-register"><a href="#ADD-ADDS-register" class="headerlink" title="ADD, ADDS (register)"></a>ADD, ADDS (register)</h3><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/9.webp"                                     ></br></p><h3 id="ADR"><a href="#ADR" class="headerlink" title="ADR"></a>ADR</h3><p>将地址加载到寄存器的伪指令。</br>从PC相对地址将立即值添加到PC值以形成PC相对地址，并写入结果发送到目标寄存器。</br>该指令由伪指令ADD（立即，到PC）和SUB（立即，从PC）使用。这个伪指令从来都不是首选的反汇编。</br>例如指令 add, r0, pc, 4（把pc+4赋给r0）会在ida变成</br>04 00 8F E2                   ADR             R0, loc_16FD4</br>从pc+4会涉及到读pc，读pc  要+8，加上4就是12</br>00016FD0 04 00 8F E2                   ADR             R0, loc_16FDC</br>00016FDC                               loc_16FDC</br></p><h3 id="SUB"><a href="#SUB" class="headerlink" title="SUB"></a>SUB</h3><p>减法指令。</br>从PC中减去从对齐（PC，4）值减去立即值以形成一个PC相关地址，并将结果写入目标寄存器。</br>02 00 41 E0                   SUB             R0, R1, R2（r0&#x3D;r1-r2）</br></p><h3 id="RSB"><a href="#RSB" class="headerlink" title="RSB"></a>RSB</h3><p>反向减法指令。</br>反向减法指令，反向减法（立即数）从立即数中减去寄存器值，并将结果写入目的地寄存器。</br>08 00 61 E2                   RSB             R0, R1, #8（8-r1的值写入r0）</br>08 00 61 E2                   RSB             R0, R1, R2（r2-r1的值写入r0）</br></p><h3 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h3><p>按位与运算指令。</br>按位与(立即数)对寄存器值和立即数执行位与，并将结果写入到目标寄存器。</br>02 00 01 E0                   AND             R0, R1, R2（r0 &#x3D; r1 &amp; r2）</br></p><h3 id="BIC"><a href="#BIC" class="headerlink" title="BIC"></a>BIC</h3><p>按位与非运算指令。</br>逐位清除（立即数）对寄存器值和立即数的补码执行逐位“与”运算，并将结果写入目标寄存器。</br>相当于第二个操作数和第三个操作数取反之后取and</br>02 00 C1 E1                   BIC             R0, R1, R2（r0 &#x3D; r1 &amp; ~r2）</br></p><h3 id="ORR"><a href="#ORR" class="headerlink" title="ORR"></a>ORR</h3><p>按位或运算指令。</br>逐位OR（立即数）执行寄存器值和立即数的逐位（包括）OR，并将结果写入目标寄存器。</br>02 00 81 E1                   ORR             R0, R1, R2 （r0 &#x3D; r1 | r2）</br></p><h3 id="EOR"><a href="#EOR" class="headerlink" title="EOR"></a>EOR</h3><p>按位异或运算指令。</br>逐位异或（立即数）对寄存器值和立即数执行逐位异运算，并将结果写入目标寄存器。</br>02 00 21 E0                   EOR             R0, R1, R2（r0 &#x3D; r1 ^ r2）</br></p><h3 id="LSL"><a href="#LSL" class="headerlink" title="LSL"></a>LSL</h3><p>逻辑左移指令。</br>逻辑左移（立即数）将寄存器值左移立即数位，移位为零，并将结果写入目标寄存器。</br><br>lsl r0, r1, r2 </br>11 02 A0 E1                   MOV             R0, R1,LSL R2（r0 &#x3D; r1 &lt;&lt; r2）</br></p><h3 id="LSR"><a href="#LSR" class="headerlink" title="LSR"></a>LSR</h3><p>逻辑右移指令。</br>逻辑右移（立即数）将寄存器值右移一个立即数位数，移位为零，并将结果写入目标寄存器。</br><br>lsr r0, r1, r2</br>31 02 A0 E1                   MOV             R0, R1,LSR R2（r0 &#x3D; r1 &gt;&gt; r2）</br></p><h3 id="ASR"><a href="#ASR" class="headerlink" title="ASR"></a>ASR</h3><p>算术右移指令。</br>算术右移(立即数)将寄存器值右移立即位数，将其符号位的副本移位，并将结果写入目标寄存器。</br><br>asr r0, r1, r2</br>51 02 A0 E1                   MOV             R0, R1,ASR R2（r0 &#x3D; r1 &gt;&gt; r2）</br></p><h3 id="asr-r0-r1-r2和lsr-r0-r1-r2是一致的吗"><a href="#asr-r0-r1-r2和lsr-r0-r1-r2是一致的吗" class="headerlink" title="asr r0, r1, r2和lsr r0, r1, r2是一致的吗"></a>asr r0, r1, r2和lsr r0, r1, r2是一致的吗</h3><p>在一般情况下，asr r0, r1, r2 和 lsr r0, r1, r2 是不一致的。</br>asr r0, r1, r2 执行算术右移，将 r1 的所有位向右算术移动 r2 位，并将结果存储到 r0 中。算术右移在移位过程中用符号位填充左侧空出的位，即最高位（符号位）保持不变。</br>lsr r0, r1, r2 执行逻辑右移，将 r1 的所有位向右移动 r2 位，并将结果存储到 r0 中。逻辑右移在移位过程中用0填充左侧空出的位。</br>因此，在 asr 中，符号位会影响右移时左侧空出位的填充值，而在 lsr 中，左侧空出位总是用0填充。如果 r1 是一个带符号整数，asr 和 lsr 通常会得到不同的结果。</br></p><ul><li>举例：</br><ul><li>当考虑一个假设的8位寄存器的情况，其中最高位（MSB）表示符号（0表示正数，1表示负数）时，我们可以通过一个例子来说明 asr 和 lsr 的区别。</br></li></ul></li></ul><p>假设 r1 是二进制表示为 11011010，这是一个用二进制补码表示的负数。现在，让我们使用 asr 和 lsr 进行右移操作。</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">; 假设 r1 是 11011010（二进制表示），是一个负数</span><br><span class="line"></span><br><span class="line">asr r0, r1, #1  ; 算术右移 1 位</span><br><span class="line">; 经过 asr，r0 将变为 11110110（二进制表示），仍然是一个负数</span><br><span class="line"></span><br><span class="line">lsr r0, r1, #1  ; 逻辑右移 1 位</span><br><span class="line">; 经过 lsr，r0 将变为 01110101（二进制表示），是一个正数</span><br></pre></td></tr></table></figure><p>在这个例子中，asr 在右移过程中保留了符号位，导致结果仍然是负数。而 lsr 在填充左侧空出位时使用了 0，导致结果变为正数。这展示了算术右移和逻辑右移在处理符号位上的差异。</br></p><h2 id="访存指令"><a href="#访存指令" class="headerlink" title="访存指令"></a>访存指令</h2><p>访存：</br>LDR：从内存中加载数据到寄存器。</br>STR：将寄存器中的数据存储到内存。</br></p><p>1.数据流向</br>2.操作的寄存器和内存地址</br>3.后续附加行为 </br>块访存指令的语法是 {寄存器列表}，其中寄存器列表中的寄存器按照从右到左的顺序依次被处理。这意味着在执行块访存指令时，先处理列表中的最右边的寄存器，然后依次向左处理。</br></p><h3 id="LDR"><a href="#LDR" class="headerlink" title="LDR"></a>LDR</h3><p>加载寄存器（立即）从基本寄存器值和立即偏移中计算一个地址，从内存中加载单词，然后将其写入寄存器。 它可以使用偏移，索引或预先指定的地址。</br>04 00 91 E5                   LDR             R0, [R1,#4]</br>r1是一个基址寄存器，4是偏移量，表示从基址开始往后移动4个字节的位置。</br>也可以使用负偏移</br>04 00 11 E5                   LDR             R0, [R1,#-4]</br>02 00 91 E7                   LDR             R0, [R1,R2]</br>02 02 91 E7                   LDR             R0, [R1,R2,LSL#4]</br>上面指令都是没有后续附加行为的</br>04 00 B1 E5                   LDR             R0, [R1,#4]!  （加了!后除了把值写进r0，还会更新r1的地址，地址+4）</br><br>上述的指令都可以算是内偏移，还有外偏移的</br>04 00 91 E4                   LDR             R0, [R1],#4（从r1读出来的内存给r0后，后续行为把r1+4）</br></p><h3 id="STR"><a href="#STR" class="headerlink" title="STR"></a>STR</h3><p>存储寄存器(立即寄存器)根据基址寄存器值和立即偏移量计算地址，并将寄存器中的值存储到内存。它可以使用偏移量、后索引或前索引寻址。</br>0404 00 81 E4                  STR             R0, [R1],#4（将寄存器 R0 中的值存储到内存地址 R1 指向的位置，然后将 R1 的值递增 4（即地址加上 4））</br><br>可以使用LDR，STR来操作sp栈指针寄存器，达到pop和push的效果</br>当需要从sp取值到寄存器的时候，也就是pop，要用ldr，因为pop取值释放了空间，所以取值后sp栈指针要加4</br>而向sp放入值的时候，也就是push，要用str，因为push要分配空间，所以放值后sp栈指针要减4。</br>对于典型的栈操作，递减栈指针意味着在栈上分配一段新的空间，而递增栈指针则表示释放栈上的空间。在常见的体系结构中，栈是向低地址方向增长的，因此递减栈指针实际上是在向栈的底部分配空间。</br></p><ul><li><p>pop：</br></p><ul><li>LDR             R0, [SP], #4</br>    等同于下面两条</br>    ldr r1, [sp]         &#x2F;&#x2F; 从栈中加载值到寄存器 </br>    r1 add sp, sp, #4       &#x2F;&#x2F; 栈指针递增4个字节</br></li></ul></li><li><p>push:</br></p><ul><li>STR             R0, [SP, #-4]!</br>等同于下面两条</br>sub sp, sp, #4       &#x2F;&#x2F; 栈指针递减4个字节 </br>str r0, [sp]         &#x2F;&#x2F; 将寄存器 r0 中的值存储到栈中</br></li></ul></li></ul><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/10.webp"                                     ></br><br>ldr的12位立即数是0扩展的，只支持12位，第23位U是表示正负的，第24位P是表示内外偏移的。str也是同理</br></p><h2 id="块访存指令"><a href="#块访存指令" class="headerlink" title="块访存指令"></a>块访存指令</h2><p>块访存也是访存，读内存就是LDM开头，写内存STM开头，M表示多个数据或多个寄存器</br>当我们在使用LDM或STM指令时，是想加载或存储寄存器值之前还是之后增加或减少基址寄存器的值，这影响了加载或存储完成后基址寄存器的最终值。</br>LDM和STM指令可以跟随以下后缀：</br>IA，IB，DA，DB。第一个操作数后续还能加 ! ：表示在加载或存储完成后更新寄存器。</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/11.webp"                                     ></br><br>简单归纳就是</br>IA：访问这块指针后，再向后加4。</br>IB：还没访问这块指针，先向后加4，再访问。</br>DA：反向读4字节，然后减4</br>DB：先减4，然后再访问</br>  !表示最后指针的地址是否更新</br>常用只有LDMIA!，STMDB!，当第一个操作数为sp，等价于pop和push</br>再ida中指令为 stmdb sp!,{r0-r3} 会自动替换为</br>0F 00 2D E9                   PUSH            {R0-R3}</br>或</br>0F 00 2D E9                   STMFD           SP!, {R0-R3} </br>这两个是一样，在不同ida版本会显示不同</br>当第一个操作数是sp!时，ida会翻译成STMFD。第二个操作数无论是写 {R2,R1,R4,R3} 也会翻译成 {R1-R4}，寄存器标号小的放在低地址，寄存器标号大的放在高地址。</br>FD是用来操作栈的，当第一个操作数是sp时候，LDMFD等价于LDMIA，STMFD等价于STMDB。ida也会优先翻译为LDMFD，STMFD。当sp加了!后，则会优先翻译为POP和PUSH。</br></p><ul><li>例子：</br><ul><li>LDMIA SP, {R1-R4} &#x3D;&#x3D;&gt; LDMFD SP, {R1-R4}</br>    STMDB SP, {R1-R4} &#x3D;&#x3D;&#x3D;&gt; STMFD SP, {R1-R4}</br>    LDMIA SP!, {R1-R4} &#x3D;&#x3D;&gt; POP {R1-R4}</br>    STMDB SP!, {R1-R4} &#x3D;&#x3D;&gt; PUSH {R1-R4}</br></li></ul></li></ul><p>对于初学者先简单理解掌握下面三种</br>STMFD &#x3D;&#x3D; PUSH</br>LDMFD &#x3D;&#x3D; POP</br>***IA: 快速复制内存，根据前缀看是读还是写</br></p><h2 id="分支和模式切换"><a href="#分支和模式切换" class="headerlink" title="分支和模式切换"></a>分支和模式切换</h2><p>分支：B，BL，BX，BLX</br></p><ol><li>跳转目标</br>2. 模式切换，thumb和arm的切换</br>3. 写入LR的值</br></li></ol><p>后续是加立即数还是寄存器，分为以下几种情况：</br>Bimm</br>BLimm</br>BXreg</br>BLXimm</br>BLXreg</br></p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/12.webp"                                     ></br><br>B指令是无条件跳转，不带模式切换，T标志位不变。如果是从arm跳转thumb，或者thumb跳转到arm，需要保证跳转前后的模式统一。把指令机器码改为 00 00 00 EA，会发现要跳转的地址是当前地址+8，01 00 00 EA 则要跳转的地址是8+立即数<em>4（当前立即数为1）。如果是thumb模式下，则是8+立即数</em>2。</br>当00 00 00 EA会加8，那么FE FF FF EA 则是8+(-2*4)，即一直跳转到自己当前地址，进入死循环。</br>FE FF FF EA 需要记住，当一个进程很快执行结束的时候，又需要进行调试的时候。</br>用ida找到文件_start的地方，elf文件加载到内存中，_start是程序的入口点。可以同010 Editor对这个入口位置的指令修改为 FE FF FF EA。push到设备重新运行就断住了，再把指令改回来，就可以调试。</br>B指令的立即数可以寻址的范围是从当前指令的地址向前或向后移动的距离。由于立即数是相对偏移量，因此它可以覆盖的地址范围是从PC - 32MB到PC + 32MB。thumb模式下立即数只会更短</br></p><ul><li><p>例如：</br></p><ol><li>假设当前指令的地址是0x80000000（32位地址），并且B指令的立即数字段（imm24）的值为0x001234。将imm24与两个零（’00’）连接起来，得到一个32位的立即数：imm32 &#x3D; 0x00123400。</br></li><li>如果imm24是一个正数（无符号值），那么imm32的最高有效位将为零，扩展后的结果仍然是正数。例如，如果imm24的值为0x001234，那么imm32 &#x3D; 0x00123400。</br></li><li>如果imm24是一个负数（有符号值），那么imm32的最高有效位将为1，扩展后的结果仍然是负数。例如，如果imm24的值为0xFF1234，那么imm32 &#x3D; 0xFF123400。</br></li><li>将PC的当前值（0x80000000）与imm32进行相加，即PC + imm32，就可以得到B指令跳转的目标地址。目标地址为0x80000000 + 0x00123400 &#x3D; 0x80123400，根据前面提到的寻址范围，PC - 32MB到PC + 32MB是从0x7F800000到0x80000000+0x02000000的范围。在这个例子中，PC的当前值为0x80000000，而且目标地址0x80123400是在这个范围之内，因此B指令是可以正确寻址和跳转的。</br></li></ol></li></ul><h3 id="BL"><a href="#BL" class="headerlink" title="BL"></a>BL</h3><p>BL指令后面加立即数，也是无条件跳转，但是会写入LR的值。执行完会把bl指令的下一条指令的地址写入到LR。如果是在thumb下，会把bl下一条指令的地址异或T位，也就是1，地址会变成奇数写入LR。当程序需要返回的时候通过LR的最低位来返回arm模式还是thumb模式，0就是arm，1就是thumb。</br></p><h3 id="BX"><a href="#BX" class="headerlink" title="BX"></a>BX</h3><p>BX指令后面加寄存器，BX会把寄存器的值拆成两部分，最低位会写入T标志位，用于指示跳转的目标指令集，剩余的部分写入pc寄存器，作为跳转的目标地址。通俗点就是如果地址是奇数，最低位就是1，偶数则是0。T标志位用于指示跳转目标的指令集，0表示ARM指令集，1表示Thumb指令集。</br></p><h3 id="BLX"><a href="#BLX" class="headerlink" title="BLX"></a>BLX</h3><p>有两种情况，立即数和寄存器。</br>BLX+立即数是一定会带有模式切换的，并会把执行完会把blx指令的下一条指令的地址写入到LR，把当前T标志位写入LR值的最低位后再更新T标志的值。</br>BLX+寄存器跟BX+寄存器一样，会把执行完会把blx指令的下一条指令的地址写入到LR，是否模式切换以及T标志的值看寄存器地址的最低位。</br></p><h3 id="使用mov跳转"><a href="#使用mov跳转" class="headerlink" title="使用mov跳转"></a>使用mov跳转</h3><p>跟BX reg做对比， mov pc, r0 指令将会直接将寄存器 R0 的值复制到程序计数器 PC，这意味着它是一个非条件的直接分支，不会进行任何模式切换，而且不会修改 T 标志位。</br></p><h3 id="使用ldr跳转"><a href="#使用ldr跳转" class="headerlink" title="使用ldr跳转"></a>使用ldr跳转</h3><p>直接从内存加载地址到pc， ldr pc, [r0]，把r0寄存器指向的值给pc，这种也会根据寄存器的值奇偶数来切换模式，并更新T标志位。</br>有三种跳转指令 B系列指令，mov，ldr。其中mov最弱，不带有模式切换，一般也很少用。</br>ldr指令调用一个导入表的方法</br></p><h3 id="判断导出表函数的模式"><a href="#判断导出表函数的模式" class="headerlink" title="判断导出表函数的模式"></a>判断导出表函数的模式</h3><p>怎么判断导出表的函数时arm模式还是thumb模式？</br>再ida中查看libc的导出表函数时，address都是偶数，难道全都是arm模式吗？比如printf函数，地址是偶数，点击进去又是thumb指令。那在其它文件调用这个导出表函数时，如何正确知道函数是哪种模式？</br>readelf -s libc.so &gt; a.txt</br>可以显示库的所有导出符号表，</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   657: 0001e775    36 FUNC    GLOBAL DEFAULT    7 printf</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>下面是在ida中的地址<br>!<img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/13.webp"                                     ></br><br>在ida中的地址是1e774，通过readelf的地址是1e775，所以就能判断出printf是thumb模式的，在调用printf的时候，会把拆成两部分，最低位写入T标志位，跳转的时候自动模式切换了。</br>这也就解释了在使用frida在hook thumb函数地址的时候为什么要加1了。</br></p><h2 id="Thumb模式"><a href="#Thumb模式" class="headerlink" title="Thumb模式"></a>Thumb模式</h2><p>在thumb下短指令也就是2字节的指令一般不使用r8-r12寄存器，如果使用了就会编译为长指令。</br>一般也没有条件码和标志响应位，运算指令优先对第一，第二操作数相同情况下用短指令编码，以提高代码密度。这种优化可以减少指令数量和代码大小。</br>比如：add r0, r0, r1 会自动转为 add r0, r1</br>还有一些情况当短指令编码编译不过的时候编译器会在指令后缀+.w进行4字节指令编码。</br>add.w r0, r0, r1</br></p><h3 id="IT指令块"><a href="#IT指令块" class="headerlink" title="IT指令块"></a>IT指令块</h3><p>IT 指令是 Thumb 指令集中的一种条件执行指令，用于在紧接着的多条指令中根据条件选择性地执行。IT 指令块由一个条件码和最多四条紧接着的指令组成，它们构成了一个条件执行块。在条件执行块中，只有在满足条件时才会执行相应的指令。</br>IT 指令的格式如下：</br>IT{&lt;x&gt;{&lt;y&gt;{&lt;z&gt;}}}{&lt;q&gt;} &lt;cond&gt;</br><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230901/14.webp"                                     ></br><br>IT 指令块由可选的后缀（x, y, z）和一个可选的条件码（q）组成。 </br>后缀 x, y, z 分别指示条件执行块中的第一条、第二条和第三条指令。</br> &lt;q&gt; 是可选的条件码，用于指定条件执行块的执行条件。 如果条件码 &lt;q&gt; 不存在，则默认情况下，IT 指令块中的所有指令都受到相同的条件码 <cond> 控制。</br>T表示if，E表示else</br>05 BFITTET EQ</br>01 20MOVEQ R0, #1</br>02 21MOVEQ R1, #2</br>03 22MOVS R2, #3</br>04 23MOVSEQ R3, #4</br>在ida中比如指令 movs r0, #1 如果处于IT指令块里面，会自动给加上条件码。</br>假如这段指令当前的Z标志位是0，那EQ条件就不成立</br>it指令块下的第一条指令跟条件码EQ的条件一样的，不执行</br>it指令块下的第二条指令是看IT后面第一位是T，那也就是跟EQ的条件一样，不执行</br>it指令块下的第三条指令是看IT后面第二位是E，跟EQ的条件相反，执行</br>第四条是T，不执行</br></p><h2 id="调用约定和栈帧分析"><a href="#调用约定和栈帧分析" class="headerlink" title="调用约定和栈帧分析"></a>调用约定和栈帧分析</h2><h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><p>前4个参数：r0-r3，其他参数栈传递</br>非易变寄存器：r4-r11</br><br>r11: 栈帧指针</br>r12: 导入表寻址</br>测试代码，使用ndk build后用ida打开</br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">fun</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d, <span class="type">int</span> e, <span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> n = d + e;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, n);</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">fun</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h3 id="前4个参数"><a href="#前4个参数" class="headerlink" title="前4个参数"></a>前4个参数</h3><p>前4个参数通常会被依次传递到寄存器 R0 到 R3 中。这样设计的原因是为了尽可能地利用寄存器，以提高函数调用的效率。如果函数需要的参数超过4个，那么额外的参数就会被放置在栈上。</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">.text:00000628                               ; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">.text:00000628                               EXPORT main</span><br><span class="line">.text:00000628                               main                                    ; DATA XREF: .text:0000057C↑o</span><br><span class="line">.text:00000628                               ; __unwind &#123;</span><br><span class="line">.text:00000628 00 48 2D E9                   PUSH            &#123;R11,LR&#125;</span><br><span class="line">.text:0000062C 0D B0 A0 E1                   MOV             R11, SP</span><br><span class="line">.text:00000630 10 D0 4D E2                   SUB             SP, SP, #0x10</span><br><span class="line">.text:00000634 00 00 00 E3                   MOVW            R0, #0</span><br><span class="line">.text:00000638 04 00 0B E5                   STR             R0, [R11,#-4]</span><br><span class="line">.text:0000063C 01 00 00 E3                   MOVW            R0, #1                  ; a 参数1放到寄存器r0</span><br><span class="line">.text:00000640 02 10 00 E3                   MOVW            R1, #2                  ; b 参数2放到寄存器r1</span><br><span class="line">.text:00000644 03 20 00 E3                   MOVW            R2, #3                  ; c 参数3放到寄存器r2</span><br><span class="line">.text:00000648 04 30 00 E3                   MOVW            R3, #4                  ; d 参数4放到寄存器r3</span><br><span class="line">.text:0000064C 05 C0 00 E3                   MOVW            R12, #5</span><br><span class="line">.text:00000650 00 C0 8D E5                   STR             R12, [SP]               ; e 参数5先放在r12，在从r12读取放到sp上</span><br><span class="line">.text:00000654 06 C0 00 E3                   MOVW            R12, #6</span><br><span class="line">.text:00000658 04 C0 8D E5                   STR             R12, [SP,#4]            ; f 参数6先放在r12，在从r12读取放在sp+4上</span><br><span class="line">.text:0000065C D7 FF FF EB                   BL              fun</span><br><span class="line">.text:0000065C</span><br><span class="line">.text:00000660 00 10 00 E3                   MOVW            R1, #0</span><br><span class="line">.text:00000664 08 00 8D E5                   STR             R0, [SP,#8]</span><br><span class="line">.text:00000668 01 00 A0 E1                   MOV             R0, R1</span><br><span class="line">.text:0000066C 0B D0 A0 E1                   MOV             SP, R11</span><br><span class="line">.text:00000670 00 88 BD E8                   POP             &#123;R11,PC&#125;</span><br><span class="line">.text:00000670                               ; &#125; // starts at 628</span><br><span class="line">.text:00000670</span><br><span class="line">.text:00000670                               ; End of function main</span><br></pre></td></tr></table></figure><h3 id="非易变寄存器"><a href="#非易变寄存器" class="headerlink" title="非易变寄存器"></a>非易变寄存器</h3><p>在 ARM 架构中，寄存器 R4 到 R11 被称为非易失性寄存器，通常用于存储在函数调用期间需要被保留的临时数据，因此，如果一个函数在调用期间修改了这些寄存器的值，它必须在返回之前恢复这些寄存器的原始值，以确保调用者的寄存器值不会被破坏。</br></p><h3 id="栈帧指针"><a href="#栈帧指针" class="headerlink" title="栈帧指针"></a>栈帧指针</h3><p>在 ARM 架构中，寄存器 R11 通常被用作栈帧指针，栈帧指针是一个指向当前函数栈帧的指针，栈帧是在函数调用期间分配的一块内存区域，用于存储局部变量、函数参数、返回地址等信息。 通常情况下，当一个函数被调用时，它会在栈上创建一个新的栈帧，并将栈帧指针指向这个新的栈帧。在函数内部，通过栈帧指针可以方便地访问栈帧中的局部变量和参数。而当函数返回时，栈帧指针会被恢复到上一个函数的栈帧，以便正确地返回到调用函数。</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.text:000005C0                               ; int fun(int a, int b, int c, int d, int e, int f)</span><br><span class="line">.text:000005C0                               EXPORT fun</span><br><span class="line">.text:000005C0                               fun                                     ; CODE XREF: main+34↓p</span><br><span class="line">.text:000005C0                               ; __unwind &#123;</span><br><span class="line">.text:000005C0 10 4C 2D E9                   PUSH            &#123;R4,R10,R11,LR&#125;</span><br><span class="line">.text:000005C4 08 B0 8D E2                   ADD             R11, SP, #8</span><br><span class="line">.text:000005C8 20 D0 4D E2                   SUB             SP, SP, #0x20</span><br><span class="line">.text:000005CC 0C C0 9B E5                   LDR             R12, [R11,#f]</span><br><span class="line">.text:000005D0 08 E0 9B E5                   LDR             LR, [R11,#e]</span><br><span class="line">.text:000005D4 48 40 9F E5                   LDR             R4, =0x1B0</span><br><span class="line">.text:000005D8 04 40 8F E0                   ADD             R4, PC, R4              ; &quot;%d\n&quot;</span><br><span class="line">.text:000005DC 0C 00 0B E5                   STR             R0, [R11,#-0xC]</span><br><span class="line">.text:000005E0 10 10 0B E5                   STR             R1, [R11,#-0x10]</span><br><span class="line">.text:000005E4 14 20 8D E5                   STR             R2, [SP,#0x14]</span><br><span class="line">.text:000005E8 10 30 8D E5                   STR             R3, [SP,#0x10]</span><br><span class="line">.text:000005EC 10 00 9D E5                   LDR             R0, [SP,#0x10]</span><br><span class="line">.text:000005F0 08 10 9B E5                   LDR             R1, [R11,#e]</span><br><span class="line">.text:000005F4 01 00 80 E0                   ADD             R0, R0, R1</span><br><span class="line">.text:000005F8 0C 00 8D E5                   STR             R0, [SP,#0xC]</span><br><span class="line">.text:000005FC 0C 10 9D E5                   LDR             R1, [SP,#0xC]</span><br><span class="line">.text:00000600 04 00 A0 E1                   MOV             R0, R4                  ; format</span><br><span class="line">.text:00000604 08 C0 8D E5                   STR             R12, [SP,#8]</span><br><span class="line">.text:00000608 04 E0 8D E5                   STR             LR, [SP,#4]</span><br><span class="line">.text:0000060C C3 FF FF EB                   BL              printf</span><br><span class="line">.text:0000060C</span><br><span class="line">.text:00000610 0C 10 9D E5                   LDR             R1, [SP,#0xC]</span><br><span class="line">.text:00000614 00 00 8D E5                   STR             R0, [SP]</span><br><span class="line">.text:00000618 01 00 A0 E1                   MOV             R0, R1</span><br><span class="line">.text:0000061C 08 D0 4B E2                   SUB             SP, R11, #8</span><br><span class="line">.text:00000620 10 8C BD E8                   POP             &#123;R4,R10,R11,PC&#125;</span><br><span class="line">.text:00000620</span><br><span class="line">.text:00000620                               ; End of function fun</span><br></pre></td></tr></table></figure><p>函数开头</br>PUSH            {R11,LR}</br>MOV             R11, SP</br>这两条指令是函数开头的典型指令序列，通常用于建立函数的栈帧。这里的操作可以理解为：</br>PUSH {R11, LR}：将当前函数的栈帧指针 R11 和返回地址 LR 压入栈中。这是为了保存这两个寄存器的值，以便函数执行完毕后能够正确地恢复到函数调用前的状态。 </br>MOV R11, SP：将当前栈指针 SP 的值复制到 R11 中。这样做是为了在函数中能够方便地访问栈帧中的局部变量和其他信息。通常情况下，函数的局部变量和参数会相对于栈帧指针来进行访问。 通过这两条指令的组合，函数建立了自己的栈帧，并将栈帧指针存储在 R11 中，以便在函数内部能够轻松地访问栈上的数据。</br>函数结尾</br>MOV             SP, R11  将栈帧指针 R11 的值赋给栈指针 SP，恢复栈指针到函数调用前的状态。</br>POP             {R11,PC} 从栈中依次弹出 R11 和 PC 寄存器的值。</br></p><h3 id="导入表寻址"><a href="#导入表寻址" class="headerlink" title="导入表寻址"></a>导入表寻址</h3><p>R12 寄存器用于进行导入表寻址。导入表是一个数据结构，存储了函数的地址或函数指针。在动态链接库（DLL）或共享库中，当程序调用一个外部函数时，需要在运行时动态解析函数的地址，这就需要导入表。</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.plt:00000520                               ; int printf(const char *format, ...)</span><br><span class="line">.plt:00000520                               printf                                  ; CODE XREF: fun+4C↓p</span><br><span class="line">.plt:00000520 00 C6 8F E2                   ADR             R12, 0x528</span><br><span class="line">.plt:00000524 01 CA 8C E2                   ADD             R12, R12, #0x1000</span><br><span class="line">.plt:00000528 D0 FA BC E5                   LDR             PC, [R12,#(printf_ptr - 0x1528)]! ; __imp_printf</span><br><span class="line">.plt:00000528</span><br><span class="line">.plt:00000528                               ; End of function printf</span><br></pre></td></tr></table></figure><p>注意：函数的返回值是放在R0里的</br>下面是根据上面反汇编模拟执行的栈指针，根据执行main和fun函数的栈地址偏移表示如下：</br></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$-30 |ret_printf&lt;-- sp fun</span><br><span class="line">$-2C |5   (LDR LR, [R11,#8]，STR LR, [SP,#4]，将R11+0x8的值放到这)</span><br><span class="line">$-28 |6(LDR R12, [R11,#0xC], STR R12, [SP,#8]，将R11+0xC的值放到这)</span><br><span class="line">$-24 |9（n）   (LDR R0, [SP,#0x10], LDR R1, [R11,#8], ADD R0, R0, R1，将$-20和$的值4+5放到这)</span><br><span class="line">$-20 |R3</span><br><span class="line">$-1C |R2</span><br><span class="line">$-18 |R1</span><br><span class="line">$-14 |R0</span><br><span class="line">$-10 |R4</span><br><span class="line">$-C  |R10</span><br><span class="line">$-8  |R11&lt;-- R11, 前一个函数main函数R11的位置</span><br><span class="line">$-4  |LR</span><br><span class="line">$==&gt; |5&lt;-- sp main / fun in</span><br><span class="line">$+4  |6</span><br><span class="line">$+8  |ret_fun</span><br><span class="line">$+C  |0</span><br><span class="line">$+10 |R11&lt;-- R11,前一个函数R11的位置</span><br><span class="line">$+14 |LR</span><br><span class="line">$+18 |&lt;-- main函数里栈指针稳定时候的位置，main in 0x4+0x4+0x10</span><br><span class="line">$+1C |</span><br><span class="line">$+20 |</span><br><span class="line">$+24 |</span><br><span class="line">$+28 |</span><br><span class="line">$+2C |</span><br><span class="line">$+30 |</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;以下ARM笔记我基于 &lt;a class=&quot;link&quot;   href=&quot;https://space.bilibili.com/37877654&quot; &gt;_周壑&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt; 大佬在b站的视频</summary>
      
    
    
    
    
    <category term="ARM" scheme="https://www.zskkk.cn/tags/ARM/"/>
    
  </entry>
  
  <entry>
    <title>某音web端X-Bogus 逆向分析算法</title>
    <link href="https://www.zskkk.cn/posts/16537/"/>
    <id>https://www.zskkk.cn/posts/16537/</id>
    <published>2023-03-07T18:09:25.000Z</published>
    <updated>2023-03-07T18:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>目标：视频评论接口X-Bogus参数<br />接口地址：’aHR0cHM6Ly93d3cuZG91eWluLmNvbS9hd2VtZS92MS93ZWIvY29tbWVudC9saXN0Lw&#x3D;&#x3D;’</p><h3 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h3><p>该接口是xhr请求，使用xhr下断点，当url中包含X-Bogus时就断下<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/01.png"                      alt="image.png"                ><br />看调用栈上一层是在webmssdk.es5.js文件里，其实这个文件就是生成参数的，通过查阅知道这就是jsvmp，而且整体上也做了混淆。<br /></p><p>这里使用v_jstools插件进行变量的压缩计算。<br />还原后使用浏览器的 Overrides 替换功能将 webmssdk.es5.js替换掉。<br />往上跟栈也就是跟到上图的堆栈b那里，X-Bogus参数是在this.openArgs[1]里面，直接打一个条件断点在b那<br /><code>this.openArgs[1].indexOf(&quot;X-Bogus&quot;) != -1</code><br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/02.png"                      alt="image.png"                ><br />翻页评论重新触发请求，如图所示，到这里就已经生成了X-Bogus<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/03.png"                      alt="image.png"                ><br />如图所示，$函数这里就已经生成了X-Bogus，this.openArgs[1]就是携带了xb的完整url<br />仔细观察这段代码，有很多三元表达式，当 M 的值为 15 时，就会走到这段逻辑，执行完函数后赋值给K，K 的值生成之后，有一个 O[S] &#x3D; K 的操作。<br />再往上看代码，O初始化的地方<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/04.png"                      alt="image.png"                ><br />O 是一个数组，单步调试的话会发现代码会一直走这个 if-else 的逻辑，几乎每一步都有 O 数组的参与，不断往里面增删改查值，for 循环里面的 j 值，决定着后续 if 语句的走向，这里也就是插桩的关键所在。</p><h3 id="插桩分析"><a href="#插桩分析" class="headerlink" title="插桩分析"></a>插桩分析</h3><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/05.png"                      alt="image.png"                ><br />大的 for 循环和 if-else 逻辑有两个地方，为了保证最后的日志更加详细完整，在这两个地方都下个日志断点（右键 Add logpoint），断点内容为：<br />“位置 1”, “索引j”, j, “索引A”, A, “值O: “, JSON.stringify(O, function(key, value) {if (value &#x3D;&#x3D; window) {return undefined} return value})<br />“位置 2”, “索引j”, j, “索引A”, A, “值O: “, JSON.stringify(O, function(key, value) {if (value &#x3D;&#x3D; window) {return undefined} return value})<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/06.png"                      alt="image.png"                ></p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/07.png"                      alt="image.png"                ><br />插桩输出 O 的时候为什么要写这么长一串呢？首先 JSON.stringify() 方法的作用是将 JavaScript 值转换为 JSON 字符串，基础语法是 JSON.stringify(value[, replacer [, space]])，如果不将其转换成 JSON，那么 O 的值，输出可能是这样的：[empty, Array(26), 1, Array(0)]，你看不到 Array 数组里面具体的值，该方法有个可选参数 replacer，如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值，在函数中可以对成员进行处理，最后返回处理后的值，如果此函数返回 undefined，则排除该成员。<br />下好日志断点后，注意前面我们下的 XHR 断点不要取消，然后进行翻页出发请求，控制台就开始打印日志了，如果 XHR 断点取消了，日志就会一直打印直到卡死。日志输出完毕后，右键Save as保存下来到本地进行分析<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/08.png"                      alt="image.png"                ><br />顺便记录下当前已经生成的xb，<code>DFSzswVupV0ANJPItap8URXAIQ5f</code><br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/09.png"                      alt="image.png"                ><br />xb由DFSzswVupV0ANJPItap8URXAIQ5f这28位字符组成的，现在看是怎么来的，打开刚才的日志，在里面搜索，找到第一次出现的地方。<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/10.png"                      alt="image.png"                ><br />可以看到是逐个生成的，在9047行，xb后面的元素是null，到了下一行9048就生了下一个字符f，那么在这两步之间就是f的生成逻辑，这个时候我们看第9047行的日志断点是 位置 2 索引j 16 索引A 716，那么我们回到原网页，在位置2，下一个条件断点（右键 Add conditional breakpoint），当 j&#x3D;&#x3D;16 &amp;&amp; A&#x3D;&#x3D;716 &amp;&amp; O[7] &#x3D;&#x3D; 21 时就断下。之所以要加 O[7] 是因为 索引j 16 索引A 716 的位置有很多，多加个限制条件就可以缩小范围，当然有可能加了多个条件仍然有多个位置都满足，就需要自己筛选了，通过断点断下的时候看看控制台前面输出的日志来判断是不是我们想要的位置。<br />继续翻页，断下之后开始单步跟，来到下图所示的地方：<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/11.png"                      alt="image.png"                ><br />到这里之后，就不要下一步了，再下一步有可能整个语句就执行完毕了，其中的细节你看不到，所以这里我们在控制台挨个输入看看：<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/12.png"                      alt="image.png"                ><br />可以看到实际上的逻辑就是返回指定位置的字符，w 的值就是 O[5]，m 的值就是 O[4]，经过多次调试发现 m 的值是固定的，P 就是 charAt() 方法。我们再看看我们本地的日志，O[5] 的值为 [16]，charAt() 取值出来就是f，逻辑完全正确。<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/13.png"                      alt="image.png"                ><br />现在我们还需要知道这个16是怎么来的，继续往上看，找到16第一次出现的地方，在第9046行，那么我们就要使其在上一步断下，也就是第9045行，如下图所示：<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/14.png"                      alt="image.png"                ><br />第9045行的索引信息为 位置 2 索引j 47 索引A 708，同样的下条件断点观察怎么生成的：<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/15.png"                      alt="image.png"                ><br />可以看到逻辑是 O[5] &amp; O[6]，再把值赋给O[5]，再看我们之前本地的日志<br />O[5] &#x3D; 5809808<br />O[6] &#x3D; 63<br />5809808 &amp; 63 &#x3D; 16，逻辑正确，16就是这么来的。接下来又开始找 5809808 和 63 是怎么生成的，先看看63是怎么来的，同样在生成的上一步，也就是第9044行下个条件断点，这行的索引为 位置 2 索引j 72 索引A 704。<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/16.png"                      alt="image.png"                ><br /> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/17.png"                      alt="image.png"                ><br />可以看到 63 是直接 F[A] 生成的，F 是一个大数组，A 就是索引为 704，F 这个大数组怎么来的先不用管，经过几次测试发现是固定的。<br />5809808后面再说，再逐个找倒数的字符串的生成，记录下来<br />xb &#x3D; “DFSzswVupV0ANJPItap8URXAIQ5f”<br />m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”<br />第28字符串 &#x3D;&#x3D;&gt; f&#x3D;m[16]，16&#x3D;5809808&amp;63，63&#x3D;F[704]<br />第27字符串 &#x3D;&#x3D;&gt; 5&#x3D;m[26]，26&#x3D;1664&gt;&gt;6，6&#x3D;F[646]<br />第26字符串 &#x3D;&#x3D;&gt; Q&#x3D;m[10]，10&#x3D;40960&gt;&gt;12，12&#x3D;F[580]<br />第25字符串 &#x3D;&#x3D;&gt; I&#x3D;m[22]，22&#x3D;5767168&gt;&gt;18，18&#x3D;F[510]<br />第24字符串 &#x3D;&#x3D;&gt; A&#x3D;m[30]，30&#x3D;7701854&amp;63，63&#x3D;F[704]<br />第23字符串 &#x3D;&#x3D;&gt; X&#x3D;m[21]，21&#x3D;1344&gt;&gt;6，6&#x3D;F[646]<br />第22字符串 &#x3D;&#x3D;&gt; R&#x3D;m[24]，24&#x3D;98304&gt;&gt;12，12&#x3D;F[580]<br />第21字符串 &#x3D;&#x3D;&gt; U&#x3D;m[29]，29&#x3D;7602176&gt;&gt;18，18&#x3D;F[510]<br />第20字符串 &#x3D;&#x3D;&gt; 8&#x3D;m[12]，12&#x3D;16232652&amp;63，63&#x3D;F[704]</p><p>把xb &#x3D; DFSz swVu pV0A NJPI tap8 URXA IQ5f，将其看成每四个为一组，从上面的规律可以得到，每4个字符串为一组，每组的字符生成流程都是一样的</p><p>就差大数字是怎么来的，搜本地日志5809808第一次出现的位置，x直接定位到第一次出现的地方第8979行的上一行第8978行，位置 2 索引j 48 索引A 454<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/18.png"                      alt="image.png"                ><br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/19.png"                      alt="image.png"                ><br />可以看出大数字是O[2]|O[3]计算而来，那我们本地5809808就是5809664|144</p><p>找到144第一次出现的地方，同样的操作<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/20.png"                      alt="image.png"                ><br />114是由O[4].charCodeAt(O[5])生成，O[4]&#x3D;’\x02ÿ-%.,2\x10^\x8F\x1AÖ÷°cÛ\x85^X¦?’，O[5]&#x3D;20<br />经过几次测试知道乱码字符串是跟url有关，生成过程后面说。用我们本地的O[4]试一下<br />“\u0002ÿ-%.,\u000F^\u001AÖ÷°Ìu^X¦”.charCodeAt(20)<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/25.png"                      alt="image.png"                ><br />经过后面8位字符的跟进后，记录了一下规则<br />xb &#x3D; “DFSzswVupV0ANJPItap8URXAIQ5f”<br />m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”<br /></p><ul><li><p>第28字符串f：<br>  f&#x3D;m[16]<br>  16&#x3D;5809808&amp;63<br /> 63&#x3D;F[704]<br />5809808&#x3D;5809664|144<br />144&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(20)<br />5809664&#x3D;5767168|42496<br /> 42496&#x3D;166&lt;&lt;8<br />8&#x3D;F[386]<br />166&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(19)<br />5767168&#x3D;88&lt;&lt;16<br />16&#x3D;F[320]<br />88&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(18)<br /></p></li><li><p>第27字符串5：<br />5&#x3D;m[26]<br />26&#x3D;1664&gt;&gt;6<br />6&#x3D;F[646]<br />1664&#x3D;5809808&amp;4032<br />4032&#x3D;F[638]<br /></p></li><li><p>第26字符串Q：<br />Q&#x3D;m[10]<br />10&#x3D;40960&gt;&gt;12<br />12&#x3D;F[580]<br />40960&#x3D;5809808&amp;258048<br />258048&#x3D;F[568]<br /></p></li><li><p>第25字符串I：<br />I&#x3D;m[22]<br />22&#x3D;5767168&gt;&gt;18<br />18&#x3D;F[510]<br />5767168&#x3D;5809808&amp;16515072<br />16515072&#x3D;F[498]</p></li><li><p>第24字符串A:<br />A&#x3D;m[30]<br />30&#x3D;7701854&amp;63<br />63&#x3D;F[704]<br />7701854&#x3D;7701760|94<br />94&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(17)<br />7701760&#x3D;7667712|34048<br />34048&#x3D;133&lt;&lt;8<br />8&#x3D;F[386]<br />133&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(16)<br />7667712&#x3D;117&lt;&lt;16<br />16&#x3D;F[320]<br />117&#x3D;”\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(15)<br /></p></li><li><p>第23字符串X：<br />X&#x3D;m[21]<br />21&#x3D;1344&gt;&gt;6<br />6&#x3D;F[646]<br />1344&#x3D;7701854&amp;4032<br />4032&#x3D;F[638]<br /></p></li><li><p>第22字符串R：<br />R&#x3D;m[24]<br />24&#x3D;98304&gt;&gt;12<br />12&#x3D;F[580]<br />98304&#x3D;7701854&amp;258048<br />258048&#x3D;F[568]<br /></p></li><li><p>第21字符串U：<br />U&#x3D;m[29]<br />29&#x3D;7602176&gt;&gt;18<br />18&#x3D;F[510]<br />7602176&#x3D;7701854&amp;16515072<br />16515072&#x3D;F[498]</p></li></ul><p>正序整理了一下，大致的流程就是<br />m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”<br />xb &#x3D; “DFSz swVu pV0A NJPI tap8 URXA IQ5f”<br /><strong>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;第6组 URXA &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong><br />“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(15) &#x3D; 117<br />F[320] &#x3D; 16<br />117 &lt;&lt; 16 &#x3D; 7667712</p><p>“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(16) &#x3D; 133<br />F[386] &#x3D; 8<br />133 &lt;&lt; 8 &#x3D; 34048<br />7667712|34048 &#x3D; 7701760</p><p>“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(17) &#x3D; 94<br />7701760 | 94 &#x3D; 7701854</p><p>F[498] &#x3D; 16515072<br />7701854 &amp; 16515072 &#x3D; 7602176<br />F[510] &#x3D; 18<br />7602176 &gt;&gt; 18 &#x3D; 29<br />m.charAt(29) &#x3D; ‘U’</p><p>F[568] &#x3D; 258048<br />7701854 &amp; 258048 &#x3D; 98304<br />F[580] &#x3D; 12<br />98304 &gt;&gt; 12 &#x3D; 24<br />m.charAt(24) &#x3D; ‘R’<br /><br />F[638] &#x3D; 4032<br />7701854 &amp; 4032 &#x3D; 1344<br />F[646] &#x3D; 6<br />1344 &gt;&gt; 6 &#x3D; 21<br />m.charAt(21) &#x3D; ‘X’</p><p>F[704] &#x3D; 63<br />7701854 &amp; 63 &#x3D; 30<br />m.charAt(30) &#x3D; ‘A’<br /><br /><strong>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;第7组 IQ5f &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</strong><br />“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(18) &#x3D; 88<br />F[320] &#x3D; 16<br />88 &lt;&lt; 16 &#x3D; 5767168</p><p>“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(19) &#x3D; 166<br />F[386] &#x3D; 8<br />166 &lt;&lt; 8 &#x3D; 42496<br />5767168 | 42496 &#x3D; 5809664</p><p>“\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu^X¦”.charCodeAt(20) &#x3D; 144<br />5809664 | 144 &#x3D; 5809808</p><p>F[498] &#x3D; 16515072<br />5809808 &amp; 16515072 &#x3D; 5767168<br />F[510] &#x3D; 18<br />5767168 &gt;&gt; 18 &#x3D; 22<br />m.charAt(22) &#x3D; ‘I’</p><p>F[568] &#x3D; 258048<br />5809808 &amp; 258048 &#x3D; 40960<br />F[580] &#x3D; 12<br />40960 &gt;&gt; 12 &#x3D; 10<br />m.charAt(10) &#x3D; ‘Q’</p><p>F[638] &#x3D; 4032<br />5809808 &amp; 4032 &#x3D; 1664<br />F[646] &#x3D; 6<br />1664 &gt;&gt; 6 &#x3D; 26<br />m.charAt(26) &#x3D; ‘5’</p><p>F[704] &#x3D; 63<br />5809808 &amp; 63 &#x3D; 16<br />m.charAt(16) &#x3D; ‘f’</p><p>将流程对比一下就可以发现，每个步骤 F 里面的取值都是一样的，这个可以直接写死，不同之处就在于最开始的 charCodeAt() 操作，也就是返回乱码字符串指定位置字符的 Unicode 编码，第7组依次是 18、19、20，第6组依次是15、16、17，以此类推，第1组刚好是0、1、2，如下图所示：<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/21.png"                      alt="image.png"                ><br />每一组的逻辑都是一样的，依次生成七组字符串，最后拼接成完整的 X-Bogus。</p><h3 id="乱码字符串生成逻辑"><a href="#乱码字符串生成逻辑" class="headerlink" title="乱码字符串生成逻辑"></a>乱码字符串生成逻辑</h3><p>该样本对应的param_url &#x3D; “device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;aweme_id&#x3D;7071984856741186853&amp;cursor&#x3D;0&amp;count&#x3D;20&amp;item_type&#x3D;0&amp;insert_ids&#x3D;&amp;rcFT&#x3D;&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;2048&amp;screen_height&#x3D;1152&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Chrome&amp;browser_version&#x3D;110.0.0.0&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;110.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;20&amp;device_memory&#x3D;8&amp;platform&#x3D;PC&amp;downlink&#x3D;3.85&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100&amp;webid&#x3D;7206219799877142077&amp;msToken&#x3D;Z9-0y9elP0-Obz51QiLXg2qpd-dyJHammHH_0hNY48UFC3RxAx8bjxf2Hpmxmm52cmDQVfBP0lf1UwzvAtbOcW6RGQuSY_1W-plCkw-lP-OkNH00Ion2DohnZlsySAc&#x3D;”<br />在进行下一步之前，我们要注意两点：</p><ul><li>文章演示有些变量前后不对应，因为每次插桩的值都是会变的，看流程就行了，流程是正确的；</li><li>我们日志输出是经过 JSON.stringify 处理了的，有些步骤是向某个函数传入乱码字符串进行处理，你会发现处理后的结果和日志不一致，这是正常的。</li></ul><p>乱码字符串的生成相对来说稍微复杂一点，但思路仍然一样，这里就不一一截图展示了，直接用日志描述一下关键步骤，注意以下日志是正向的步骤，就不逆着推了，建议自己先逆着把流程走一走，再来看这个步骤就看得懂了。<br /></p><p><strong>Step1</strong>：首先对 URL 后面的参数，也就是 Query String Parameters 进行两次 MD5、两次转 Uint8Array 处理，最后得到的 Uint8Array 对象在后面的步骤中用得到，步骤如下：<br />位置 1 索引j 4 索引A 134：将 URL 后面的参数进行 MD5 加密得到字符串<br />位置 1 索引j 16 索引A 494：将上一步的字符串转换为 Uint8Array 对象<br />位置 1 索引j 4 索引A 134：将上一步的 Uint8Array 对象进行 MD5 加密，得到字符串<br />位置 1 索引j 16 索引A 504：将上一步的字符串转换为 Uint8Array 对象</p><p>上述步骤中，我们将最终得到的结果命名为 uint8Array，md5字符串转uint8Array，跟进到相应位置把函数抠出来即可<br /></p><p><strong>Step2</strong>：生成两个大数，一个是时间戳，我们称之为 fixedString1，另一个调用某个方法生成，我们称之为 fixedString2。<br />fixedString1<br />位置 1 索引j 43 索引A 1032：1677985818608 &#x2F; 1000 &#x3D; 1677985818.608<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/22.png"                      alt="image.png"                ><br />fixedString2<br />位置 1 索引j 16 索引A 1060：P.apply(null, []) &#x3D; 1489154074<br />上述步骤中，P 对应以下方法，缺失的方法自行补齐：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x17dd8c</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _0x2fc47d || (_0xeb6638.<span class="property">perf</span> ? -<span class="number">1</span> : _0x2fc47d = <span class="title function_">_0x5bc542</span>(<span class="number">3735928559</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (a) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_0x5bc542</span>(<span class="params">a</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> b, c = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;canvas&quot;</span>);</span><br><span class="line">    c.<span class="property">width</span> = <span class="number">48</span>, c.<span class="property">height</span> = <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">var</span> e = c.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">    e.<span class="property">font</span> = <span class="string">&quot;14px serif&quot;</span>, e.<span class="title function_">fillText</span>(<span class="string">&quot;龘ฑภ경&quot;</span>, <span class="number">2</span>, <span class="number">12</span>), e.<span class="property">shadowBlur</span> = <span class="number">2</span>, e.<span class="property">showOffsetX</span> = <span class="number">1</span>, </span><br><span class="line">    e.<span class="property">showColor</span> = <span class="string">&quot;lime&quot;</span>, e.<span class="title function_">arc</span>(<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">0</span>, <span class="number">2</span>), e.<span class="title function_">stroke</span>(), b = c.<span class="title function_">toDataURL</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> d = <span class="number">0</span>; d &lt; <span class="number">32</span>; d++) &#123;</span><br><span class="line">        a = <span class="number">65599</span> * a + b.<span class="title function_">charCodeAt</span>(a % b.<span class="property">length</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Step3</strong>：先后生成两个数组，我们称之为 array1、array2，array2 就是由 array1 的元素位置变换后得来的，严格来讲，array1 不是一个完整的数组，而是一个个数字，这一点可以在日志中体现出来，为了方便我们就直接将其视为一个数组，两个数组都有19个元素，步骤如下：<br />array1[0] 至 array1[3] 为定值  [64,0.00390625,1,8]<br />array1[4]<br />位置 1 索引j 25 索引A 1172：uint8Array[14] &#x3D; 127<br />array1[5]<br />位置 1 索引j 25 索引A 1196：uint8Array[15] &#x3D; 208</p><p>array1[6]、array1[7] 可以直接写死<br /></p><p>array1[8]、array1[9]  与 ua 有关, 可以直接写死<br /></p><p>array1[10]<br />位置 1 索引j 52 索引A 1316：fixedString1 &gt;&gt; 24 &#x3D; 100<br />位置 1 索引j 47 索引A 1324：100 &amp; 255 &#x3D; 100</p><p>array1[11]<br />位置 1 索引j 52 索引A 1348：fixedString1 &gt;&gt; 16 &#x3D; 25604<br />位置 1 索引j 47 索引A 1356：25604 &amp; 255 &#x3D; 4</p><p>array1[12]<br />位置 1 索引j 52 索引A 1380：fixedString1 &gt;&gt; 8 &#x3D; 6554632<br />位置 1 索引j 47 索引A 1388：6554632 &amp; 255 &#x3D; 8</p><p>array1[13]<br />位置 1 索引j 52 索引A 1412：fixedString1 &gt;&gt; 0 &#x3D; 1677985818<br />位置 1 索引j 47 索引A 1420：1677985818 &amp; 255 &#x3D; 26</p><p>array1[14]<br />位置 1 索引j 52 索引A 1444：fixedString2 &gt;&gt; 24 &#x3D; 88<br />位置 1 索引j 47 索引A 1452 ：88 &amp; 255 &#x3D; 88</p><p>array1[15]<br />位置 1 索引j 52 索引A 1476：fixedString2 &gt;&gt; 16 &#x3D; 22722<br />位置 1 索引j 47 索引A 1484：22722 &amp; 255 &#x3D; 194</p><p>array1[16]<br />位置 1 索引j 52 索引A 1508：fixedString2 &gt;&gt; 8 &#x3D; 5817008<br />位置 1 索引j 47 索引A 1516：5817008 &amp; 255 &#x3D; 176</p><p>array1[17]<br />位置 1 索引j 52 索引A 1540：fixedString2 &gt;&gt; 0 &#x3D; 1489154074<br />位置 1 索引j 47 索引A 1548：1489154074 &amp; 255 &#x3D; 26</p><p>array1[18]<br />前面18个字符全部进行亦或<br />位置 1 索引j 49 索引A 1736：array1.reduce(function(a, b) { return a ^ b; }); &#x3D; 96</p><p>array1 完整值如下<br />位置 1 索引j 16 索引A 1932：<br />array1 &#x3D; [64,0.00390625,1,8,127,208,69,63,35,157,100,4,8,26,88,194,176,26,96]<br />array2 由 array1 元素交换位置而来：<br />array2 &#x3D; [array1[0], array1[2], array1[4], array1[6], array1[8], array1[10], array1[12], array1[14], array1[16], array1[18], array1[1], array1[3], array1[5], array1[7], array1[9], array1[11], array1[13], array1[15], array1[17]]<br />array2 完整值如下<br />array2 &#x3D; [64, 1, 127, 69, 35, 100, 8, 88, 176, 96, 0.00390625, 8, 208, 63, 157, 4, 26, 194, 26]</p><p><strong>Step4</strong>：将 Step3 得到的 array2 经过转换得到乱码字符串，步骤如下：<br />位置 1 索引j 16 索引A 1932：<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/23.png"                      alt="image.png"                ><br />_0x398111.apply(null, array2) &#x3D; ‘@\u0000\u0001\bÐE?#d\u0004\b\u001aXÂ°\u001a&#96;’</p><!-- ```javascriptfunction _0x398111(a, b, c, e, d, t, f, r, n, o, i, _, x, u, s, l, v, h, p) {    var y = new Uint8Array(19);    return y[0] = a, y[1] = i, y[2] = b, y[3] = _, y[4] = c, y[5] = x, y[6] = e, y[7] = u,     y[8] = d, y[9] = s, y[10] = t, y[11] = l, y[12] = f, y[13] = v, y[14] = r, y[15] = h,     y[16] = n, y[17] = p, y[18] = o, String.fromCharCode.apply(null, y);}``` --><p>位置 1 索引j 16 索引A 1986：<br />_0x25788b.apply(null, [‘ÿ’,‘@\x00\x01\bïwE?#\x9Dd\x074\x89XÂ°\x1Aû’]) &#x3D; ‘-%.,\u000f^\u001aÖ÷°Ìu�^X¦’</p><!-- ```javascriptfunction _0x25788b(a, b) {    for (var c, e = [], d = 0, t = "", f = 0; f < 256; f++) {        e[f] = f;    }    for (var r = 0; r < 256; r++) {        d = (d + e[r] + a.charCodeAt(r % a.length)) % 256, c = e[r], e[r] = e[d], e[d] = c;    }    var n = 0;    d = 0;    for (var o = 0; o < b.length; o++) {        d = (d + e[n = (n + 1) % 256]) % 256, c = e[n], e[n] = e[d], e[d] = c, t += String.fromCharCode(b.charCodeAt(o) ^ e[(e[n] + e[d]) % 256]);    }    return t;}``` --><p> <br />位置 1 索引j 16 索引A 2038：<br />_0x94582.apply(null, [2,255,’-%.,\u000f^\u001aÖ÷°Ìu�^X¦’]) &#x3D; “\u0002ÿ-%.,\u000f^\u001aÖ÷°Ìu�^X¦”</p><!-- ```javascriptfunction _0x86cb82(a) {    return String.fromCharCode(a);}function _0x94582(a, b, c) {    return _0x86cb82(a) + _0x86cb82(b) + c;}``` --><p>至此乱码字符串的流程就结束了。<br>以上缺的函数根据相应的索引根据到代码位置抠出来即可</p><p>测试成功，我这里把生成方式封装成api接口<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230308/24.png"                      alt="image.png"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目标：视频评论接口X-Bogus参数&lt;br /&gt;接口地址：’aHR0cHM6Ly93d3cuZG91eWluLmNvbS9hd2VtZS92MS93ZWIvY29tbWVudC9saXN0Lw&amp;#x3D;&amp;#x3D;’&lt;/p&gt;
&lt;h3 id=&quot;抓包&quot;&gt;&lt;a href=&quot;#抓</summary>
      
    
    
    
    
    <category term="js" scheme="https://www.zskkk.cn/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>谷歌Pixel3刷机以及magisk的安装</title>
    <link href="https://www.zskkk.cn/posts/36296/"/>
    <id>https://www.zskkk.cn/posts/36296/</id>
    <published>2023-02-11T08:41:01.000Z</published>
    <updated>2023-02-11T08:41:01.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、刷机"><a href="#一、刷机" class="headerlink" title="一、刷机"></a>一、刷机</h3><p>1、首先找到对应自己手机的镜像版本，进行下载，<a class="link"   href="https://developers.google.cn/android/images#blueline" >https://developers.google.cn/android/images#blueline<i class="fas fa-external-link-alt"></i></a><br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/01.webp"                      alt="image.png"                ><br />新建个文件夹shuaji，下载完解压到刷机里面<br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/02.webp"                      alt="image.png"                ><br />2、下载刷机工具platform-tools.zip，<a class="link"   href="https://developer.android.com/studio/releases/platform-tools?hl=zh-cn" >https://developer.android.com/studio/releases/platform-tools?hl=zh-cn<i class="fas fa-external-link-alt"></i></a>，根据操作系统下载，链接需要翻墙才能打开，我也把下载链接放出来，可以直接下载<br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/03.webp"                      alt="image.png"                ></p><ul><li><a class="link"   href="https://dl.google.com/android/repository/platform-tools_r33.0.3-windows.zip" >下载适用于 Windows 的 SDK Platform-Tools<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://dl.google.com/android/repository/platform-tools_r33.0.3-darwin.zip" >下载适用于 Mac 的 SDK Platform-Tools<i class="fas fa-external-link-alt"></i></a></li><li><a class="link"   href="https://dl.google.com/android/repository/platform-tools_r33.0.3-linux.zip" >下载适用于 Linux 的 SDK Platform-Tools<i class="fas fa-external-link-alt"></i></a></li></ul><p>下载完，同样解压到shuaji目录下<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/04.webp"                      alt="image.png"                ><br />3、手机关机，关机后 长按住 关键键+音量减键（或者开机界面执行adb reboot bootloader），手机进入bootloader<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/05.webp"                                     ><br />4、winfows运行shuaji目录下flash-all.bat，mac则需要运行flash-all.sh文件，整个过程会自动处理完成，伴随着重启几次。<br /> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/06.webp"                      alt="image.png"                ><br />过了几分钟后，到这里就刷机成功了<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/07.webp"                                     ><br />5.修改手机配置<br />（1）点击English，换成简体中文，然后点击开始，能跳过的则跳过。<br />（2）点击设置，点击关于手机，多次点击版本号，开启开发者模式，在开发者模式开启USB调式。<br />（3）在设置修改手机日期时间为当前日期时间（不弄可能没网）</p><h3 id="二、解锁root"><a href="#二、解锁root" class="headerlink" title="二、解锁root"></a>二、解锁root</h3><p>下载Magisk，<a class="link"   href="https://github.com/topjohnwu/Magisk/tags" >https://github.com/topjohnwu/Magisk/tags<i class="fas fa-external-link-alt"></i></a>，我这下载的是v24.0的<br /><br>1.usb连接电脑后，使用命令 adb install Magisk-v24.0.apk 进行安装。<br /><br>2.解压上面shuaji文件目录下的image-xxxx.zip，把boot.img 通过adb push到手机&#x2F;sdcard&#x2F;download&#x2F;<br />命令：adb push boot.img &#x2F;sdcard&#x2F;download&#x2F;<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/08.webp"                      alt="image.png"                ><br /><br>3.手机上如下操作magisk，生成 magisk_patched-24000_xxxxx.img 文件<img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/09.webp"                      alt="image.png"                ><br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/10.webp"                      alt="image.png"                ><br />选择刚才上传的boot.img 然后点击开始，接着会在目录下生成带magisk的文件<img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230211/11.webp"                      alt="image.png"                ><br />4.把生成的magisk_patched-24000_xxxxx.img 通过 adb pull 到电脑fastboot.exe所在的目录，也就是shuaji目录，命令如下 adb pull &#x2F;sdcard&#x2F;Download&#x2F;magisk_patched-24000_qJQvu.img .<br />5. 执行 adb reboot bootloader 手机进入bootloader<br />6. 执行命令 fastboot flash boot magisk_patched-24000_qJQvu.img 刷magisk fastboot reboot<br />7. 手机点击电源键让手机正常启动，magisk安装成功，root完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、刷机&quot;&gt;&lt;a href=&quot;#一、刷机&quot; class=&quot;headerlink&quot; title=&quot;一、刷机&quot;&gt;&lt;/a&gt;一、刷机&lt;/h3&gt;&lt;p&gt;1、首先找到对应自己手机的镜像版本，进行下载，&lt;a class=&quot;link&quot;   href=&quot;https://develop</summary>
      
    
    
    
    
    <category term="刷机" scheme="https://www.zskkk.cn/tags/%E5%88%B7%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ProtoBuf逆向之某公交app</title>
    <link href="https://www.zskkk.cn/posts/14763/"/>
    <id>https://www.zskkk.cn/posts/14763/</id>
    <published>2023-02-07T08:27:40.000Z</published>
    <updated>2023-02-07T08:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇是web端的ProtoBuf逆向，这篇就找了个app的ProtoBuf看看练练手<br />目标app：aHR0cHM6Ly93d3cud2FuZG91amlhLmNvbS9hcHBzLzc0NTAxNjM&#x3D;</p><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p>随便搜索一个线路点进去，看到请求头和响应都是加密的<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/01.webp"                                     ><br /><br>用jadx分析下请求头的加密参数request<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/02.webp"                                     ><br />记住这里其他两个函数，有”&#x2F;protoc.Request.Sequence”，还引用了proto的包<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/03.webp"                                     ><br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/04.webp"                                     ><br />到这可以知道request的值是经过native函数加密后再由base64得到的。<br />用ida打开native so文件，定位encode2函数<br />!<img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/05.webp"                                     ><br />可以看到是用了aes_cbc_128加密，那就是需要拿到密钥和iv<br />直接frida hook这两个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">ByteString</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.android.okhttp.okio.ByteString&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">UtilsClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.shjt.map.tool.Native&quot;</span>);</span><br><span class="line">        <span class="title class_">UtilsClass</span>.<span class="property">encode2</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">a</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;入参: &quot;</span>, <span class="title class_">ByteString</span>.<span class="title function_">of</span>(a).<span class="title function_">hex</span>());</span><br><span class="line">          <span class="keyword">var</span> value = <span class="variable language_">this</span>.<span class="title function_">encode2</span>(a);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;结果: &#x27;</span>, <span class="title class_">ByteString</span>.<span class="title function_">of</span>(value).<span class="title function_">hex</span>());</span><br><span class="line">          <span class="keyword">return</span> value;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">inline_hook</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inline_hook</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> libnative_lib_addr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;libnative.so&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (libnative_lib_addr) &#123;</span><br><span class="line">        <span class="keyword">var</span> aes_decrypt_cbc  = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libnative.so&quot;</span>, <span class="string">&quot;_Z15aes_encrypt_cbcPKhjPhPKjiS0_&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> aes_key_setup = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libnative.so&#x27;</span>, <span class="string">&#x27;_Z13aes_key_setupPKhPji&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Native</span>_encode2 = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libnative.so&#x27;</span>, <span class="string">&#x27;Java_com_shjt_map_tool_Native_encode2&#x27;</span>);</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(aes_key_setup, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>:<span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;================aes_key_setup=================&quot;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg1:&#x27;</span>,args[<span class="number">0</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg2:&#x27;</span>,args[<span class="number">1</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg3:&#x27;</span>,args[<span class="number">2</span>].<span class="title function_">toInt32</span>())</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>:<span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(aes_decrypt_cbc, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;================aes_decrypt_cbc=================&quot;</span>)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg1:&#x27;</span>,args[<span class="number">0</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg2:&#x27;</span>,args[<span class="number">1</span>].<span class="title function_">toInt32</span>())</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg3:&#x27;</span>,args[<span class="number">2</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg4:&#x27;</span>,args[<span class="number">3</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg5:&#x27;</span>,args[<span class="number">4</span>].<span class="title function_">toInt32</span>())</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;arg6:&#x27;</span>,args[<span class="number">5</span>].<span class="title function_">readByteArray</span>(<span class="number">16</span>))</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line">                 <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retval is :&quot;</span>, retval) </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">setImmediate</span>(main);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">入参:  0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801</span><br><span class="line">================aes_key_setup=================</span><br><span class="line">arg1:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  2f d3 02 8e 14 a4 5d 1f 8b 6e b0 b2 ad b7 ca af  /.....]..n......</span><br><span class="line">arg2:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  39 39 37 34 20 49 ed f1 ff ff ff ff 00 00 00 00  9974 I..........</span><br><span class="line">arg3: 128</span><br><span class="line">================aes_decrypt_cbc=================</span><br><span class="line">arg1:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  0a 27 0a 18 2f 70 72 6f 74 6f 63 2e 52 65 71 75  .&#x27;../protoc.Requ</span><br><span class="line">arg2: 48</span><br><span class="line">arg3:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  00 6f 6d 2f 61 6e 64 72 6f 69 64 2f 6f 6b 68 74  .om/android/okht</span><br><span class="line">arg4:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  8e 02 d3 2f 1f 5d a4 14 b2 b0 6e 8b af ca b7 ad  .../.]....n.....</span><br><span class="line">arg5: 128</span><br><span class="line">arg6:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF</span><br><span class="line">00000000  75 4c 8f d5 84 fa cf 62 10 37 6b 2b 72 b0 63 e4  uL.....b.7k+r.c.</span><br><span class="line">retval is : 0x1</span><br><span class="line">结果:  8d456e87c6801a2e18920732f80a1127e7a9548fd9f2f8b45edab8fd629e60bd804287b6fa4bb05fbc8b284ab0eb9783</span><br></pre></td></tr></table></figure><p>明文，密文有了<br />iv和密钥就在这几个之间，两两组合试一试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2f d3 02 8e 14 a4 5d 1f 8b 6e b0 b2 ad b7 ca af</span><br><span class="line">39 39 37 34 20 49 ed f1 ff ff ff ff 00 00 00 00</span><br><span class="line">0a 27 0a 18 2f 70 72 6f 74 6f 63 2e 52 65 71 75</span><br><span class="line">00 6f 6d 2f 61 6e 64 72 6f 69 64 2f 6f 6b 68 74</span><br><span class="line">8e 02 d3 2f 1f 5d a4 14 b2 b0 6e 8b af ca b7 ad</span><br><span class="line">75 4c 8f d5 84 fa cf 62 10 37 6b 2b 72 b0 63 e4</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/06.webp"                                     ><br />所以这个aes是标准的算法，没经过魔改的，再把加密后的结果base64一下就是请求的参数了，过程算法知道了，那参数来源呢，是怎么得到的</p><h3 id="使用proto"><a href="#使用proto" class="headerlink" title="使用proto"></a>使用proto</h3><p>上面说了用了proto的包，看里面的函数过程，明文是经过了proto协议的才到aes加密<br />那就0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801转成二进制写进文件，再用proto解码器解码看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="comment"># hex字符串转二进制</span></span><br><span class="line">d = binascii.a2b_hex(<span class="string">&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;req.bin&quot;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(d)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --decode_raw &lt; req.<span class="built_in">bin</span></span><br></pre></td></tr></table></figure><p>解码后得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1 &#123;</span><br><span class="line">  1: &quot;/protoc.Request.Sequence&quot;</span><br><span class="line">  2 &#123;</span><br><span class="line">    1: 1</span><br><span class="line">    2: &quot;90\350\267\257&quot;</span><br><span class="line">    3: 1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果不其然，那接下来如何模拟发请求呢<br />经过上一篇后，现在很快就能编写proto文件了</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg22</span> &#123;</span><br><span class="line">  <span class="type">int32</span> field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> field2 = <span class="number">2</span>;</span><br><span class="line">  <span class="type">int32</span> field3 = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg11</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  Msg22 msg22 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchService</span>&#123;</span><br><span class="line">  Msg11 msg11 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成python版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --python_out=. ./req.proto</span><br></pre></td></tr></table></figure><p>目录下生成了req_pb2.py 拖入项目中，需要使用时就调用即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> req_pb2 <span class="keyword">as</span> pb</span><br><span class="line"></span><br><span class="line"><span class="comment"># hex字符串转二进制</span></span><br><span class="line"><span class="comment"># d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)</span></span><br><span class="line"><span class="comment"># with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(d)</span></span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService.SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line">search_request.msg11.field1 = <span class="string">&#x27;/protoc.Request.Sequence&#x27;</span></span><br><span class="line">search_request.msg11.msg22.field1 = <span class="number">1</span></span><br><span class="line">search_request.msg11.msg22.field2 = <span class="string">&#x27;90路&#x27;</span></span><br><span class="line">search_request.msg11.msg22.field3 = <span class="number">1</span></span><br><span class="line"><span class="comment"># 序列化请求数据</span></span><br><span class="line">serialize_data = search_request.SerializeToString()</span><br><span class="line"><span class="comment"># print(serialize_data)</span></span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;my_req.bin&#x27;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(serialize_data)</span><br></pre></td></tr></table></figure><p>运行后生成my_req.bin文件，跟原来的对比一下<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/07.webp"                                     ><br />发送请求</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">import</span> req_pb2 <span class="keyword">as</span> pb</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(pad(ori, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> unpad(aes.decrypt(ori), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hex字符串转二进制</span></span><br><span class="line"><span class="comment"># d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)</span></span><br><span class="line"><span class="comment"># with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(d)</span></span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService.SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line">search_request.msg1.field1 = <span class="string">&#x27;/protoc.Request.Sequence&#x27;</span></span><br><span class="line">search_request.msg1.msg2.field1 = <span class="number">1</span></span><br><span class="line">search_request.msg1.msg2.field2 = <span class="string">&#x27;90路&#x27;</span></span><br><span class="line">search_request.msg1.msg2.field3 = <span class="number">1</span></span><br><span class="line"><span class="comment"># 序列化请求数据</span></span><br><span class="line">serialize_data = search_request.SerializeToString()</span><br><span class="line"><span class="comment"># print(serialize_data)</span></span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="comment"># with open(&#x27;my_req.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(serialize_data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对序列化后的数据aes加密</span></span><br><span class="line">aes_data = aes_encry(serialize_data)</span><br><span class="line"><span class="comment"># b64 aes加密数据</span></span><br><span class="line">b64_aes_data = base64.b64encode(aes_data)</span><br><span class="line"><span class="comment"># 请求体</span></span><br><span class="line">post_data = <span class="string">&#x27;request=&#x27;</span> + quote(b64_aes_data.decode(), safe=<span class="string">&#x27;&#x27;</span>)+<span class="string">&#x27;%0A&#x27;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;lbs.jt.sh.cn:8082&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://lbs.jt.sh.cn:8082/app/rls/monitor&quot;</span></span><br><span class="line">response = requests.post(url, headers=header, data=post_data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>运行后响应内容跟抓包的一样是加密的，用aes尝试解密<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/08.webp"                                     ><br />解完后很像protobuf格式，写进bin文件，再用proto解码看看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">decry_data = aes_decry(response.content)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;resp.bin&#x27;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(decry_data)</span><br></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">D:\pythonProject\xxxx&gt;protoc --decode_raw &lt; resp.bin</span><br><span class="line"><span class="number">1</span> &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;/protoc.Response.Dispatch&quot;</span></span><br><span class="line">  <span class="number">2</span> &#123;</span><br><span class="line">    <span class="number">1</span> &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="string">&quot;90\350\267\257&quot;</span></span><br><span class="line">      <span class="number">2</span> &#123;</span><br><span class="line">        <span class="number">1</span> &#123;</span><br><span class="line">          <span class="number">1</span>: <span class="string">&quot;05:00&quot;</span></span><br><span class="line">          <span class="number">2</span>: <span class="string">&quot;23:41&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\235\226\345\256\207\345\215\227\350\267\257\346\216\247\346\261\237\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\216\247\346\261\237\346\226\260\346\235\221&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\273\204\345\205\264\350\267\257\345\233\275\346\235\203\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\273\204\345\205\264\350\267\257\345\233\275\351\241\272\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\272\224\350\247\222\345\234\272(\347\277\224\346\256\267\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\233\275\345\222\214\350\267\257\346\224\277\347\253\213\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\201\222\344\273\201\350\267\257\346\270\205\346\272\220\347\216\257\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\270\226\347\225\214\350\267\257\345\233\275\345\222\214\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\270\226\347\225\214\350\267\257\346\260\221\344\272\254\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\227\270\346\256\267\350\267\257\346\256\267\350\241\214\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\227\270\346\256\267\350\267\257\345\206\233\345\267\245\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\206\233\345\267\245\350\267\257\351\227\270\345\214\227\347\224\265\345\216\202&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\225\277\350\210\252\351\224\232\345\234\260&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\206\233\345\267\245\350\267\257\351\231\210\345\256\266\345\256\205&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\215\227\345\274\240\345\215\216\346\265\234(\351\200\270\344\273\231\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\214\227\345\274\240\345\215\216\346\265\234(\351\200\270\344\273\231\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\346\273\250\350\267\257\345\220\214\346\265\216\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\346\267\236\345\256\235\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\346\260\264\344\272\247\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\217\214\345\237\216\350\267\257\346\260\270\346\270\205\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\345\256\235\350\267\257\345\217\214\345\237\216\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\345\256\235\350\267\257\346\267\236\351\235\222\350\267\257&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="number">2</span> &#123;</span><br><span class="line">        <span class="number">1</span> &#123;</span><br><span class="line">          <span class="number">1</span>: <span class="string">&quot;05:00&quot;</span></span><br><span class="line">          <span class="number">2</span>: <span class="string">&quot;23:10&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\345\256\235\350\267\257\346\267\236\351\235\222\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\217\214\345\237\216\350\267\257\346\267\236\345\256\235\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\345\217\214\345\237\216\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\346\260\264\344\272\247\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\260\270\346\270\205\350\267\257\346\267\236\345\256\235\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\346\273\250\350\267\257\345\220\214\346\263\260\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\225\277\345\276\201\346\226\260\346\235\221&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\267\236\346\273\250\350\267\257\346\267\236\346\273\250\346\224\257\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\214\227\345\274\240\345\215\216\346\265\234(\351\200\270\344\273\231\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\215\227\345\274\240\345\215\216\346\265\234(\351\200\270\344\273\231\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\206\233\345\267\245\350\267\257\351\231\210\345\256\266\345\256\205&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\225\277\350\210\252\351\224\232\345\234\260&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\206\233\345\267\245\350\267\257\351\227\270\345\214\227\347\224\265\345\216\202&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\227\270\346\256\267\350\267\257\345\206\233\345\267\245\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\227\270\346\256\267\350\267\257\346\256\267\350\241\214\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\270\226\347\225\214\350\267\257\346\260\221\344\272\254\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\270\226\347\225\214\350\267\257\345\233\275\345\222\214\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\201\222\344\273\201\350\267\257\346\270\205\346\272\220\347\216\257\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\225\277\346\265\267\350\267\257\351\273\221\345\261\261\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\345\233\275\345\222\214\350\267\257\346\224\277\351\200\232\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\272\224\350\247\222\345\234\272(\347\277\224\346\256\267\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\344\272\224\350\247\222\345\234\272(\351\273\204\345\205\264\350\267\257)&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\273\204\345\205\264\350\267\257\345\233\275\351\241\272\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\273\204\345\205\264\350\267\257\345\233\275\346\235\203\350\267\257&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\346\216\247\346\261\237\346\226\260\346\235\221&quot;</span></span><br><span class="line">        <span class="number">2</span>: <span class="string">&quot;\351\235\226\345\256\207\345\215\227\350\267\257\346\216\247\346\261\237\350\267\257&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">2</span> &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="string">&quot;\346\262\252A-30515D&quot;</span></span><br><span class="line">      <span class="number">2</span>: <span class="string">&quot;15:26&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">2</span> &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="string">&quot;\346\262\252A-07660D&quot;</span></span><br><span class="line">      <span class="number">2</span>: <span class="string">&quot;15:33&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">2</span> &#123;</span><br><span class="line">      <span class="number">1</span>: <span class="string">&quot;\346\262\252A-33990D&quot;</span></span><br><span class="line">      <span class="number">2</span>: <span class="string">&quot;15:41&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写proto文件并编译</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义proto的版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg1</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  Msg2 msg2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg2</span> &#123;</span><br><span class="line">  <span class="keyword">repeated</span> Msg3 msg3 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Msg4 msg4 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg3</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> Msg5 msg5 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg4</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> field2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg5</span> &#123;</span><br><span class="line">  Msg6 msg6 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">repeated</span> <span class="type">string</span> field1 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">Msg6</span> &#123;</span><br><span class="line">  <span class="type">string</span> field1 = <span class="number">1</span>;</span><br><span class="line">  <span class="type">string</span> field2 = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchResponse</span> &#123;</span><br><span class="line">  Msg1 msg1 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/09.webp"                                     ><br />完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> google.protobuf.json_format <span class="keyword">import</span> MessageToJson</span><br><span class="line"><span class="keyword">import</span> req_pb2 <span class="keyword">as</span> pb</span><br><span class="line"><span class="keyword">import</span> resp_pb2 <span class="keyword">as</span> pb2</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(pad(ori, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> unpad(aes.decrypt(ori), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hex字符串转二进制</span></span><br><span class="line"><span class="comment"># d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)</span></span><br><span class="line"><span class="comment"># with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(d)</span></span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService()  <span class="comment"># 实例化对象</span></span><br><span class="line">search_request.msg11.field1 = <span class="string">&#x27;/protoc.Request.Sequence&#x27;</span></span><br><span class="line">search_request.msg11.msg22.field1 = <span class="number">1</span></span><br><span class="line">search_request.msg11.msg22.field2 = <span class="string">&#x27;90路&#x27;</span></span><br><span class="line">search_request.msg11.msg22.field3 = <span class="number">1</span></span><br><span class="line"><span class="comment"># 序列化请求数据</span></span><br><span class="line">serialize_data = search_request.SerializeToString()</span><br><span class="line"><span class="comment"># print(serialize_data)</span></span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="comment"># with open(&#x27;my_req.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(serialize_data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对序列化后的数据aes加密</span></span><br><span class="line">aes_data = aes_encry(serialize_data)</span><br><span class="line"><span class="comment"># b64 aes加密数据</span></span><br><span class="line">b64_aes_data = base64.b64encode(aes_data)</span><br><span class="line"><span class="comment"># 请求体</span></span><br><span class="line">post_data = <span class="string">&#x27;request=&#x27;</span> + quote(b64_aes_data.decode(), safe=<span class="string">&#x27;&#x27;</span>)+<span class="string">&#x27;%0A&#x27;</span></span><br><span class="line"></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;lbs.jt.sh.cn:8082&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;http://lbs.jt.sh.cn:8082/app/rls/monitor&quot;</span></span><br><span class="line">response = requests.post(url, headers=header, data=post_data)</span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line">decry_data = aes_decry(response.content)</span><br><span class="line"><span class="comment"># with open(&#x27;resp.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(decry_data)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用proto编写文件</span></span><br><span class="line">root = pb2.SearchResponse()</span><br><span class="line">root.ParseFromString(decry_data)</span><br><span class="line">data = json.loads(MessageToJson(root))</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="使用blackboxprotobuf"><a href="#使用blackboxprotobuf" class="headerlink" title="使用blackboxprotobuf"></a>使用blackboxprotobuf</h3><p>还有一种更快的方式，使用blackboxprotobuf<br />读取请求的二进制文件，通过blackboxprotobuf转为json，直接把关键词修改掉再转回去<br />像响应内容的key只是一个符号，可以通过value大概知道它的含义就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> blackboxprotobuf</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_encry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> aes.encrypt(pad(ori, <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_decry</span>(<span class="params">ori</span>):</span><br><span class="line">    key = <span class="string">&#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;</span></span><br><span class="line">    iv = <span class="string">&#x27;754c8fd584facf6210376b2b72b063e4&#x27;</span></span><br><span class="line">    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))</span><br><span class="line">    <span class="keyword">return</span> unpad(aes.decrypt(ori), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">r&quot;req.bin&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    data = fp.read()</span><br><span class="line">    message, typedef = blackboxprotobuf.protobuf_to_json(data, message_type=<span class="literal">None</span>)</span><br><span class="line">    bus_data = blackboxprotobuf.decode_message(data, message_type=<span class="literal">None</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="built_in">print</span>(bus_data)</span><br><span class="line">    <span class="built_in">print</span>(typedef)</span><br><span class="line">    bus_data[<span class="string">&#x27;1&#x27;</span>][<span class="string">&#x27;2&#x27;</span>][<span class="string">&#x27;2&#x27;</span>] = <span class="built_in">bytes</span>(<span class="string">&#x27;90路&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">serializedata = blackboxprotobuf.encode_message(bus_data, message_type=typedef)</span><br><span class="line"><span class="built_in">print</span>(serializedata)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对序列化后的数据aes加密</span></span><br><span class="line">aesdata = aes_encry(serializedata)</span><br><span class="line"><span class="comment"># b64 aes加密数据</span></span><br><span class="line">b64_aes_data = base64.b64encode(aesdata)</span><br><span class="line"><span class="comment"># 抓取</span></span><br><span class="line">postdata = <span class="string">&#x27;request=&#x27;</span> + quote(b64_aes_data.decode(), safe=<span class="string">&#x27;&#x27;</span>) + <span class="string">&#x27;%0A&#x27;</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;keep-alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;lbs.jt.sh.cn:8082&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url=<span class="string">&#x27;http://lbs.jt.sh.cn:8082/app/rls/monitor&#x27;</span>, data=postdata, headers=header)</span><br><span class="line">decry_data = aes_decry(response.content)</span><br><span class="line"></span><br><span class="line">json_data, type_data = blackboxprotobuf.protobuf_to_json(decry_data, message_type=<span class="literal">None</span>)</span><br><span class="line"><span class="built_in">print</span>(json_data)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230207/10.webp"                                     ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;上一篇是web端的ProtoBuf逆向，这篇就找了个app的ProtoBuf看看练练手&lt;br /&gt;目标app：aHR0cHM6Ly93d3cud2FuZG91amlhLmNvbS9hcHBzLzc0NTAxNjM&amp;#x3D;&lt;/p&gt;
&lt;h3 id=&quot;抓包分析&quot;&gt;&lt;a hre</summary>
      
    
    
    
    
    <category term="protobuf" scheme="https://www.zskkk.cn/tags/protobuf/"/>
    
    <category term="安卓逆向" scheme="https://www.zskkk.cn/tags/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>ProtoBuf分析以及某方数据逆向</title>
    <link href="https://www.zskkk.cn/posts/13480/"/>
    <id>https://www.zskkk.cn/posts/13480/</id>
    <published>2023-01-31T17:26:14.000Z</published>
    <updated>2023-01-31T17:26:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是protobuf"><a href="#什么是protobuf" class="headerlink" title="什么是protobuf"></a>什么是protobuf</h3><p>一拿到网站，F12查看是否有相关数据的请求接口<br />请求体是这样的<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/01.webp"                                     ><br /><br>请求头的类型也非常见的<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/02.webp"                                     ></p><ul><li>application&#x2F;json： JSON数据格式</li><li>application&#x2F;octet-stream ： 二进制流数据</li><li>application&#x2F;x-www-form-urlencoded ： 中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）</li><li>multipart&#x2F;form-data ： 需要在表单中进行文件上传时，就需要使用该格式</li></ul><p>通过查询知道这是protobuf<br />参考文章：<a class="link"   href="https://blog.csdn.net/dideng7039/article/details/101869819" >https://blog.csdn.net/dideng7039/article/details/101869819<i class="fas fa-external-link-alt"></i></a><br />总结在图下了<br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/03.webp"                                     ></p><h3 id="那如何使用protobuf？"><a href="#那如何使用protobuf？" class="headerlink" title="那如何使用protobuf？"></a>那如何使用protobuf？</h3><p>开发者需要先编写proto文件，在proto文件中编写预期的数据类型、数据字段、默认值等<br />然后，通过编译器生成，编程语言对应的开发包！开发时调开发包中的对应方法进行序列化和反序列化。<br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/04.webp"                                     ><br /><br>所以请求的时候需要参数是序列化的字节序列，对接收到的返回值进行反序列化<br />而要实现序列化，就必须要有开发包，可是开发包是js版本的。而开发包是由proto编译而来，只要能拿到proto文件，就可以编译成任意编程的语言版本。<br />那就是需要通过编译好的包反编译出proto，再编译为python版本的</p><p>这里先写一个简单proto，在编译成js版本，看看里面大概的结构长什么样<br />下载编译器：<a class="link"   href="https://github.com/protocolbuffers/protobuf/releases/" >https://github.com/protocolbuffers/protobuf/releases/<i class="fas fa-external-link-alt"></i></a><br />解压后把bin目录路径添加到环境变量，就可以全局使用<br />注意，下载低于3.21.0 的proto版本，因为原项目已将它独立出来，下载最新版本的protoc，运行js_out会缺少插件<br />proto除了一些基础字段，还有一些特殊字段</p><table><thead><tr><th><strong>英文</strong></th><th><strong>中文</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>enum</td><td>枚举(数字从零开始) 作用是为字段指定某”预定义值序列”</td><td>enum Type {DEFAULT &#x3D; 0;success &#x3D; 1; fail&#x3D; -1;}</td></tr><tr><td>message</td><td>消息体</td><td>message Student{}</td></tr><tr><td>repeated</td><td>数组&#x2F;集合</td><td>repeated Student student &#x3D; 1</td></tr><tr><td>import</td><td>导入定义</td><td>import “protos&#x2F;other_protos.proto”</td></tr><tr><td>&#x2F;&#x2F;</td><td>注释</td><td>&#x2F;&#x2F;用于注释</td></tr><tr><td>extend</td><td>扩展</td><td>extend Student {}</td></tr><tr><td>package</td><td>包名</td><td>相当于命名空间，用来防止不同消息类型的明明冲突</td></tr></tbody></table><p>现在写一个简单的proto文件</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义proto的版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Gender</span>&#123;</span><br><span class="line">  boy=<span class="number">0</span>;</span><br><span class="line">  girl=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum </span><span class="title class_">Score</span>&#123;</span><br><span class="line">  DEFAULT = <span class="number">0</span>;</span><br><span class="line">  success = <span class="number">1</span>; <span class="comment">// 及格</span></span><br><span class="line">  fail = -<span class="number">1</span>; <span class="comment">// 不及格</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">message </span><span class="title class_">Student</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>; <span class="comment">// 姓名</span></span><br><span class="line">  <span class="type">int32</span> age = <span class="number">2</span>; <span class="comment">// 年龄</span></span><br><span class="line">  Gender gender = <span class="number">3</span>; <span class="comment">//性别</span></span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="type">string</span> name = <span class="number">1</span>; <span class="comment">// 学科名称</span></span><br><span class="line">    Score score = <span class="number">2</span>; <span class="comment">// 分数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">repeated</span> Subject subject = <span class="number">4</span>; <span class="comment">// 学科</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译为JS包</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">protoc --js_out=. .\test.proto3</span><br><span class="line">protoc --js_out=import_style=commonjs,binary:. test.proto</span><br></pre></td></tr></table></figure><p>两条语句都可以，第一条会拆分成多个文件，第二条是合并成一个，推荐使用第二条<br />头部就能看到定义好的几个大的对象<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/05.webp"                                     ><br />可以大概看下代码，截一段比较重要的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Serializes the given message to binary data (in protobuf wire</span></span><br><span class="line"><span class="comment"> * format), writing to the given BinaryWriter.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">!proto.Student</span>&#125; <span class="variable">message</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">!jspb.BinaryWriter</span>&#125; <span class="variable">writer</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@suppress</span> &#123;<span class="type">unusedLocalVariables</span>&#125; f is only used for nested messages</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">proto.<span class="property">Student</span>.<span class="property">serializeBinaryToWriter</span> = <span class="keyword">function</span>(<span class="params">message, writer</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> f = <span class="literal">undefined</span>;</span><br><span class="line">  f = message.<span class="title function_">getName</span>();</span><br><span class="line">  <span class="keyword">if</span> (f.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    writer.<span class="title function_">writeString</span>(</span><br><span class="line">      <span class="number">1</span>,</span><br><span class="line">      f</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  f = message.<span class="title function_">getAge</span>();</span><br><span class="line">  <span class="keyword">if</span> (f !== <span class="number">0</span>) &#123;</span><br><span class="line">    writer.<span class="title function_">writeInt32</span>(</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      f</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  f = message.<span class="title function_">getGender</span>();</span><br><span class="line">  <span class="keyword">if</span> (f !== <span class="number">0.0</span>) &#123;</span><br><span class="line">    writer.<span class="title function_">writeEnum</span>(</span><br><span class="line">      <span class="number">3</span>,</span><br><span class="line">      f</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  f = message.<span class="title function_">getSubjectList</span>();</span><br><span class="line">  <span class="keyword">if</span> (f.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    writer.<span class="title function_">writeRepeatedMessage</span>(</span><br><span class="line">      <span class="number">4</span>,</span><br><span class="line">      f,</span><br><span class="line">      proto.<span class="property">Student</span>.<span class="property">Subject</span>.<span class="property">serializeBinaryToWriter</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这一段序列化的代码中出现了如下的方法名：</p><blockquote><p>getName, writeString<br>getAge, writeInt32<br>getGender, writeEnum<br>getSubjectList, writeRepeatedMessage</p></blockquote><p>这一整个判断，这意味 Student中定义了四个数据变量， 序号为1， 2，3，4，而数据类型和变量名可以根据其调用的方法推出</p><blockquote><p>序号为1的数据类型为String，变量名为name<br>序号为2的数据类型为Int32，变量名为age<br>序号为3的数据类型为Enum， 变量名为gender<br>序号为4的数据类型为Message，变量名为subject，Repeated下面讲</p></blockquote><p>字符串和整数型一看就明了，不做过多解释，下面了解<font color="red">Message</font>和<font color="red">Enum</font><br /><strong>Message是什么数据类型？</strong><br />简单的理解，可以把message看作是一个类，在其中定义的变量就是类属性<br />在序号为4的subject判断中有这样一行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proto.Student.Subject.serializeBinaryToWriter</span><br></pre></td></tr></table></figure><p>再来看看Student的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proto.Student.serializeBinaryToWriter</span><br></pre></td></tr></table></figure><p>到这里可知，Subject定义在Student里面且类型是Message<br />在定义序号为4的数据时，数据类型就是Subject，并且是可重复的！<br />所以才会出现这样一个方法writeRepeatedMessage，并且严格来说，序号为4的数据是自定义的Message数据类型，且是可重复的<br /><font color="red">Message</font>类型的Subject被<font color="red">repeated</font>修饰，即Subject是一个包含多个Subject实例的数组<br /><strong>Enum是什么数据类型？</strong><br />枚举类型，在值为限定的情况下，比如性别除了男就是女。可以理解为单选框，这里还有个注意的，枚举类型。<font color="red">必须要有为0的默认选项</font><br />总而言之呢，看见<font color="red">writeEnum</font>就知道这个数据为<font color="red">Enum类型</font><br /><font color="red">repeated</font>也可以修饰<font color="red">Enum</font>，其对应的JS写操作的方法为<font color="red">writePackedEnum</font><br />被repeated修饰的enum类型，<font color="red">则好似的多选框，至少选择一个，可选择多个</font><br /><strong>小结一下：</strong><br /><font color="red">被repeated修饰的message类型的数据，看作是一个包含任意个某message类型数据的数组</font><br /><font color="red">被repeated修饰的enum类型的数据，看作是一个包含任意个整数类型数据的整型数组</font></p><h3 id="调试JS反写proto"><a href="#调试JS反写proto" class="headerlink" title="调试JS反写proto"></a>调试JS反写proto</h3><p>目标网站：aHR0cHM6Ly9zLndhbmZhbmdkYXRhLmNvbS5jbi9wYXBlcj9xPXB5dGhvbg&#x3D;&#x3D;<br />将接口的请求地址复制 &#x2F;SearchService.SearchService&#x2F;search ，打 XHR&#x2F;fetch 断点<br />断住后查看堆栈，有SearchService跟进去打断点看看<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/06.webp"                                     ><br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/07.webp"                                     ><br />看下这些方法的命名，序列化（serialize）、反序列化（deserialize），基本断定就在这个js文件里，但是这个js有几万行代码，不可能仔细去看也没必要。<br />看到明显的prototype字样，直接搜proto的特征</p><blockquote><p><strong><font color="red">toObject 将获取到的数据转成结构化数据</font></strong><br><strong><font color="red">deserializeBinary 二进制数据转换成数组结构（反序列化 | 获取到的数据需要Uint8Array转成二进制）</font></strong><br><strong><font color="red">deserializeBinaryFromReader 根据规则，将二进制数据转换成数组结构</font></strong><br><strong><font color="red">serializeBinary 将数据转成二进制（序列化）</font></strong><br><strong><font color="red">serializeBinaryToWriter 根据规则，将数据转换成二进制数据（序列化）</font></strong></p></blockquote><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/08.webp"                                     ><br />可以肯定就是proto了<br />一步步跟进后，到序列化发包的位置<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/09.webp"                                     ><br />在这里，直接就可以看出其基本结构</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">message </span><span class="title class_">SearchService</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续调试。<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/10.webp"                                     ><br />这里可以看出SearchRequest定义了两个变量，分别是序号为1的message类型的CommonRequest和序号为2的enum类型的InterfaceType。<br />根据SearchService.CommonRequest可知，CommonRequest定义在SearchService中<br />所以，proto文件现在是这样的：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义proto的版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchService</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">    CommonRequest commonRequest = <span class="number">1</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">    InterfaceType interfaceType = <span class="number">2</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">CommonRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">InterfaceType</span>&#123;</span><br><span class="line">    DEFAULT = <span class="number">0</span>;  <span class="comment">// 定义了什么不知道，但是enum必须有一个值就是0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">关于变量名是什么，这个其实不重要</font><br />继续往下调试，进入到了CommonRequest<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/11.webp"                                     ><br />根据方法名，直接就可以反写出CommonRequest</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">    CommonRequest commonRequest = <span class="number">1</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">    InterfaceType interfaceType = <span class="number">2</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">CommonRequest</span> &#123;</span><br><span class="line">    <span class="type">string</span> searchType = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> searchWord = <span class="number">2</span>;</span><br><span class="line">    SearchSort searchSort = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">repeated</span> Second second = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int32</span> currentPage = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int32</span> pageSize = <span class="number">6</span>;</span><br><span class="line">    SearchScope searchScope = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">repeated</span> SearchFilter searchFilter = <span class="number">8</span>;</span><br><span class="line">    <span class="type">bool</span> languageExpand = <span class="number">9</span>;</span><br><span class="line">    <span class="type">bool</span> topicExpand = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchSort</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Second</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">InterfaceType</span>&#123;</span><br><span class="line">    TypeDefault = <span class="number">0</span>;  <span class="comment">// 定义了什么不知道，但是enum必须有一个值就是0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">SearchScope</span>&#123;</span><br><span class="line">    ScopeDefault = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">SearchFilter</span> &#123;</span><br><span class="line">      FilterDefault = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SearchSort和Second都是在SearchService定义的，Ctrl + F搜索<br />SearchService.SearchSort.serializeBinaryToWriter<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/12.webp"                                     ><br />SearchService.Second.serializeBinaryToWriter<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/13.webp"                                     ><br />补齐字段，请求接口的proto文件就算写完了</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>; <span class="comment">// 定义proto的版本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">SearchService</span> &#123;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchRequest</span> &#123;</span><br><span class="line">    CommonRequest commonRequest = <span class="number">1</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">    InterfaceType interfaceType = <span class="number">2</span>; <span class="comment">// 任意变量名</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">CommonRequest</span> &#123;</span><br><span class="line">    <span class="type">string</span> searchType = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> searchWord = <span class="number">2</span>;</span><br><span class="line">    SearchSort searchSort = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">repeated</span> Second second = <span class="number">4</span>;</span><br><span class="line">    <span class="type">int32</span> currentPage = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int32</span> pageSize = <span class="number">6</span>;</span><br><span class="line">    SearchScope searchScope = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">repeated</span> SearchFilter searchFilter = <span class="number">8</span>;</span><br><span class="line">    <span class="type">bool</span> languageExpand = <span class="number">9</span>;</span><br><span class="line">    <span class="type">bool</span> topicExpand = <span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">SearchSort</span> &#123;</span><br><span class="line">    <span class="type">string</span> field = <span class="number">1</span>;</span><br><span class="line">    Order order = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">enum </span><span class="title class_">Order</span> &#123;</span><br><span class="line">      OrderDefault = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">message </span><span class="title class_">Second</span> &#123;</span><br><span class="line">    <span class="type">string</span> field = <span class="number">1</span>;</span><br><span class="line">    <span class="type">string</span> value = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">InterfaceType</span>&#123;</span><br><span class="line">    TypeDefault = <span class="number">0</span>;  <span class="comment">// 定义了什么不知道，但是enum必须有一个值就是0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">SearchScope</span>&#123;</span><br><span class="line">    ScopeDefault = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum </span><span class="title class_">SearchFilter</span> &#123;</span><br><span class="line">    FilterDefault = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">对于所有的enum枚举类，至少填充一个默认值0，且变量名唯一</font><br />有的情况，枚举类含有哪些字段，可以在代码中直接看到，就照抄写进去。<br />看不到的，给个唯一变量名，默认值为0即可<br />现在还差一个源数据，即我们需要知道待编译的源数据是什么样子的？<br />使用fiddler进行抓包查看请求参数<br />抓到包后查看HexView，黑色部分就是请求体，里面也可以看到我们搜素的关键词python<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/14.webp"                                     ><br />选中，右键保存为字节文件也就是bin后缀，这里要注意，前5个字节表示请求体的长度，从第6个字节开始到结束刚好就是0x1A<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/15.webp"                                     ><br /><font color="red">字节数据是可以通过protoc编译器解码出来的</font></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;protoc --decode_raw &lt; get_req.bin</span><br><span class="line">1 &#123;</span><br><span class="line">  1: &quot;paper&quot;</span><br><span class="line">  2: &quot;python&quot;</span><br><span class="line">  5: 2</span><br><span class="line">  6: 20</span><br><span class="line">  8: &quot;\000&quot;</span><br><span class="line">&#125;</span><br><span class="line">2: 1</span><br></pre></td></tr></table></figure><p>与上面编写好的proto文件进行对比<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/16.webp"                                     ><br />像有些没包含到的字段，是请求的时候页面没做一些条件筛选，就没触发到某些字段<br />实际传输时，简单的看，键就是proto中定义的序号，这就是之前提到的 变量名是什么根本不重要，变量名只是方便开发者开发时便于理解与调用。（传输一个数字远比传输一个字符串更有效率）<br />完全还原proto文件是不需要的，构造出这个请求参数，获取这个接口的响应内容就可以了</p><h3 id="实现请求"><a href="#实现请求" class="headerlink" title="实现请求"></a>实现请求</h3><p>编译proto为python包，构建参数，序列化参数，发送请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --python_out=. ./search.proto</span><br></pre></td></tr></table></figure><p>目录下生成了search_pb2.py 拖入项目中，需要使用时就调用即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> search_pb2 <span class="keyword">as</span> pb  <span class="comment"># 导入包</span></span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService.SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line"><span class="comment"># 按上面解析数据，按照对应的属性设置值</span></span><br><span class="line"><span class="comment"># 字符串，数字型的都是直接赋值</span></span><br><span class="line">search_request.commonRequest.searchType = <span class="string">&#x27;paper&#x27;</span></span><br><span class="line">search_request.commonRequest.searchWord = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">search_request.commonRequest.currentPage = <span class="number">2</span></span><br><span class="line">search_request.commonRequest.pageSize = <span class="number">20</span></span><br><span class="line"><span class="comment"># repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤</span></span><br><span class="line">search_request.commonRequest.searchFilter.append(<span class="number">0</span>)</span><br><span class="line">search_request.interfaceType = <span class="number">1</span></span><br><span class="line">form_data = search_request.SerializeToString()</span><br><span class="line"><span class="built_in">print</span>(form_data)</span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;me.bin&#x27;</span>, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(form_data)</span><br><span class="line"><span class="built_in">print</span>(search_request.SerializeToString().decode())</span><br></pre></td></tr></table></figure><p>至此，请求参数的序列化已经是完成了<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/17.webp"                                     ><br />发送请求完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> search_pb2 <span class="keyword">as</span> pb  <span class="comment"># 导入包</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService.SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line"><span class="comment"># 按上面解析数据，按照对应的属性设置值</span></span><br><span class="line"><span class="comment"># 字符串，数字型的都是直接赋值</span></span><br><span class="line">search_request.commonRequest.searchType = <span class="string">&#x27;paper&#x27;</span></span><br><span class="line">search_request.commonRequest.searchWord = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">search_request.commonRequest.currentPage = <span class="number">2</span></span><br><span class="line">search_request.commonRequest.pageSize = <span class="number">20</span></span><br><span class="line"><span class="comment"># repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤</span></span><br><span class="line">search_request.commonRequest.searchFilter.append(<span class="number">0</span>)</span><br><span class="line">search_request.interfaceType = <span class="number">1</span></span><br><span class="line">form_data = search_request.SerializeToString()</span><br><span class="line"><span class="built_in">print</span>(form_data)</span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="comment"># with open(&#x27;me.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(form_data)</span></span><br><span class="line"><span class="comment"># print(search_request.SerializeToString().decode())</span></span><br><span class="line"></span><br><span class="line">bytes_head = <span class="built_in">bytes</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(form_data)])</span><br><span class="line"><span class="built_in">print</span>(bytes_head+form_data)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,zh-TW;q=0.8&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/grpc-web+proto&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://*********/SearchService.SearchService/search&quot;</span></span><br><span class="line">response=requests.post(url,headers=headers,data=bytes_head+form_data)</span><br><span class="line"><span class="built_in">print</span>(response.content)</span><br></pre></td></tr></table></figure><h3 id="响应处理"><a href="#响应处理" class="headerlink" title="响应处理"></a>响应处理</h3><p>我们构造了请求的proto文件，并成功用python发包获得了数据，但是得到的数据和f12得到的数据是一样的乱码如下图<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/18.webp"                                     ><br />其实这个也是protobuf格式，发过去的是protobuf格式，收到的也是protobuf格式，只是它是以二进制序列化格式传输的，所以看上去像乱码.<br />接下来会带来两种方法：①直观但有点复杂，②便捷但不太直观</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p><strong>写对应的响应的proto文件，和发包一样。当然可以和发包写在一起。</strong><br />老规矩，还是打断点从堆栈进行分析，根据发包的堆栈主要看app开头的js，因为chunk开头的是基本库，很少在里面做手脚，一般都是在自写的js里面做加密或其他操作。<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/19.webp"                                     ><br />一步步调试后，<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/20.webp"                                     ><br />异步然后获得了值去.toObject,这个toObject就是proto文件转js的时候会产生的一个api函数接口，可以简单使用protoc去尝试转化成js看看。<br />这里不好跟进，直接全局搜索一下：proto.SearchService.SearchResponse<br />这里接受响应后需要把二进制数据进行反序列化，那么就会用到下面的api<br /><strong><font color="red">deserializeBinary——deserializeBinaryFromReader</font><strong>（</strong>重点核心</strong>）<br />完整的就是 proto.SearchService.SearchResponse.deserializeBinaryFromReader<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/21.webp"                                     ><br />一下子就定位到了，和请求的一样理解，只是他现在变成了case语句来表示序号位置，read后面的类型来表示类型。<br />序号4有个message，进去查看<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/22.webp"                                     ><br />这个返回的数据量太大了，标号也特别的多，有没有什么更好的方法得到proto文件呢？<br />那就是自写ast，然后用ast来处理这种switch语句。这里直接使用渔歌写好的ats插件，文末附上链接，网站js有些小更新，之前的可能有些小报错，小小的修改了一下<br />这里把整个js复制出来命名为test.js，先安装babel解析库在当前目录下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @babel/core --save-dev</span><br></pre></td></tr></table></figure><p>执行ast代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> parser = <span class="built_in">require</span>(<span class="string">&quot;@babel/parser&quot;</span>);</span><br><span class="line"><span class="comment">// 为parser提供模板引擎</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;@babel/template&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="comment">// 遍历AST</span></span><br><span class="line"><span class="keyword">const</span> traverse = <span class="built_in">require</span>(<span class="string">&quot;@babel/traverse&quot;</span>).<span class="property">default</span>;</span><br><span class="line"><span class="comment">// 操作节点，比如判断节点类型，生成新的节点等</span></span><br><span class="line"><span class="keyword">const</span> t = <span class="built_in">require</span>(<span class="string">&quot;@babel/types&quot;</span>);</span><br><span class="line"><span class="comment">// 将语法树转换为源代码</span></span><br><span class="line"><span class="keyword">const</span> generator = <span class="built_in">require</span>(<span class="string">&quot;@babel/generator&quot;</span>);</span><br><span class="line"><span class="comment">// 操作文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义公共函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">wtofile</span>(<span class="params">path, flags, code</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> fd = fs.<span class="title function_">openSync</span>(path,flags);</span><br><span class="line">    fs.<span class="title function_">writeSync</span>(fd, code);</span><br><span class="line">    fs.<span class="title function_">closeSync</span>(fd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dtofile</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">unlinkSync</span>(path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> file_path = <span class="string">&#x27;test.js&#x27;</span>; <span class="comment">//你要处理的文件</span></span><br><span class="line"><span class="keyword">var</span> jscode = fs.<span class="title function_">readFileSync</span>(file_path, &#123;</span><br><span class="line">    <span class="attr">encoding</span>: <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为AST语法树</span></span><br><span class="line"><span class="keyword">let</span> ast = parser.<span class="title function_">parse</span>(jscode);</span><br><span class="line"><span class="keyword">let</span> proto_text = <span class="string">`syntax = &quot;proto3&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// protoc --python_out=. app_proto2.proto</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">traverse</span>(ast, &#123;</span><br><span class="line">    <span class="title class_">MemberExpression</span>(path)&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.<span class="property">node</span>.<span class="property">property</span>.<span class="property">type</span> === <span class="string">&#x27;Identifier&#x27;</span> &amp;&amp; path.<span class="property">node</span>.<span class="property">property</span>.<span class="property">name</span> === <span class="string">&#x27;deserializeBinaryFromReader&#x27;</span> &amp;&amp; path.<span class="property">parentPath</span>.<span class="property">type</span> === <span class="string">&#x27;AssignmentExpression&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> id_name = path.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">            path.<span class="property">parentPath</span>.<span class="title function_">traverse</span>(&#123;</span><br><span class="line">                <span class="title class_">VariableDeclaration</span>(path_2)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(path_2.<span class="property">node</span>.<span class="property">declarations</span>.<span class="property">length</span> === <span class="number">1</span>)&#123;</span><br><span class="line">                        path_2.<span class="title function_">replaceWith</span>(t.<span class="title function_">expressionStatement</span>(</span><br><span class="line">                            t.<span class="title function_">assignmentExpression</span>(</span><br><span class="line">                                <span class="string">&quot;=&quot;</span>,</span><br><span class="line">                                path_2.<span class="property">node</span>.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">id</span>,</span><br><span class="line">                                path_2.<span class="property">node</span>.<span class="property">declarations</span>[<span class="number">0</span>].<span class="property">init</span></span><br><span class="line">                            )</span><br><span class="line">                        ))</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title class_">SwitchStatement</span>(path_2)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; path_2.<span class="property">node</span>.<span class="property">cases</span>.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">                        <span class="keyword">let</span> item = path_2.<span class="property">node</span>.<span class="property">cases</span>[i];</span><br><span class="line">                        <span class="keyword">let</span> item2 = path_2.<span class="property">node</span>.<span class="property">cases</span>[i + <span class="number">1</span>];</span><br><span class="line">                        <span class="keyword">if</span>(item.<span class="property">consequent</span>.<span class="property">length</span> === <span class="number">0</span> &amp;&amp; item2.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">type</span> === <span class="string">&#x27;SequenceExpression&#x27;</span>)&#123;</span><br><span class="line">                            item.<span class="property">consequent</span> = [</span><br><span class="line">                                item2.<span class="property">consequent</span>[<span class="number">0</span>],</span><br><span class="line">                                t.<span class="title function_">expressionStatement</span>(</span><br><span class="line">                                    item2.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">expressions</span>[<span class="number">0</span>]</span><br><span class="line">                                ),</span><br><span class="line">                                item2.<span class="property">consequent</span>[<span class="number">2</span>]</span><br><span class="line">                            ];</span><br><span class="line">                            item2.<span class="property">consequent</span>[<span class="number">1</span>] = t.<span class="title function_">expressionStatement</span>(</span><br><span class="line">                                item2.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">expressions</span>[<span class="number">1</span>]</span><br><span class="line">                            )</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="property">consequent</span>.<span class="property">length</span> === <span class="number">0</span>)&#123;</span><br><span class="line">                            item.<span class="property">consequent</span> = item2.<span class="property">consequent</span></span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">type</span> === <span class="string">&#x27;SequenceExpression&#x27;</span>)&#123;</span><br><span class="line">                            item.<span class="property">consequent</span>[<span class="number">1</span>] = t.<span class="title function_">expressionStatement</span>(</span><br><span class="line">                                item.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">expressions</span>[<span class="number">1</span>]</span><br><span class="line">                            )</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">let</span> id_text = <span class="string">&#x27;message &#x27;</span> + id_name + <span class="string">&#x27; &#123;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">            <span class="keyword">let</span> let_id_list = [];</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">// console.log(path.parentPath.node.right.body.body[0].body.body[0].cases.length);</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; path.<span class="property">parentPath</span>.<span class="property">node</span>.<span class="property">right</span>.<span class="property">body</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">body</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">cases</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">let</span> item = path.<span class="property">parentPath</span>.<span class="property">node</span>.<span class="property">right</span>.<span class="property">body</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">body</span>.<span class="property">body</span>[<span class="number">0</span>].<span class="property">cases</span>[i];</span><br><span class="line">                    <span class="keyword">if</span>(item.<span class="property">test</span>)&#123;</span><br><span class="line">                        <span class="keyword">let</span> id_number = item.<span class="property">test</span>.<span class="property">value</span>;</span><br><span class="line">                        <span class="keyword">let</span> key = item.<span class="property">consequent</span>[<span class="number">1</span>].<span class="property">expression</span>.<span class="property">callee</span>.<span class="property">property</span>.<span class="property">name</span>;</span><br><span class="line">                        <span class="keyword">let</span> id_st, id_type;</span><br><span class="line">                        <span class="keyword">if</span>(key.<span class="title function_">startsWith</span>(<span class="string">&quot;set&quot;</span>))&#123;</span><br><span class="line">                            id_st = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(key.<span class="title function_">startsWith</span>(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">                            id_st = <span class="string">&quot;repeated&quot;</span>;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="comment">// map类型，因为案例中用不到，所以这里省略</span></span><br><span class="line">                            <span class="keyword">continue</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        key = key.<span class="title function_">substring</span>(<span class="number">3</span>, key.<span class="property">length</span>);</span><br><span class="line">                        id_type = item.<span class="property">consequent</span>[<span class="number">0</span>];</span><br><span class="line">                        <span class="keyword">if</span>(id_type.<span class="property">expression</span>.<span class="property">right</span>.<span class="property">type</span> === <span class="string">&#x27;NewExpression&#x27;</span>)&#123;</span><br><span class="line">                            id_type = generator.<span class="title function_">default</span>(id_type.<span class="property">expression</span>.<span class="property">right</span>.<span class="property">callee</span>).<span class="property">code</span>.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>).<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">switch</span> (id_type.<span class="property">expression</span>.<span class="property">right</span>.<span class="property">callee</span>.<span class="property">property</span>.<span class="property">name</span>) &#123;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readString&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;string&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readDouble&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;double&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readInt32&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;int32&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readInt64&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;int64&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readFloat&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;float&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readBool&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;bool&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readPackedInt32&quot;</span>:</span><br><span class="line">                                    id_st = <span class="string">&quot;repeated&quot;</span>;</span><br><span class="line">                                    id_type = <span class="string">&quot;int32&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readBytes&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;bytes&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readEnum&quot;</span>:</span><br><span class="line">                                    id_type = <span class="string">&quot;readEnum&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                <span class="keyword">case</span> <span class="string">&quot;readPackedEnum&quot;</span>:</span><br><span class="line">                                    id_st = <span class="string">&quot;repeated&quot;</span>;</span><br><span class="line">                                    id_type = <span class="string">&quot;readEnum&quot;</span>;</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span>(id_type === <span class="string">&#x27;readEnum&#x27;</span>)&#123;</span><br><span class="line">                            id_type = id_name + <span class="string">&#x27;_&#x27;</span> + key + <span class="string">&#x27;Enum&#x27;</span>;</span><br><span class="line">                            <span class="keyword">if</span>(let_id_list.<span class="title function_">indexOf</span>(id_number) === -<span class="number">1</span>)&#123;</span><br><span class="line">                                id_text += <span class="string">&#x27;\tenum &#x27;</span> + id_type + <span class="string">&#x27; &#123;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                                    id_text += <span class="string">&#x27;\t\t&#x27;</span> + id_type + <span class="string">&#x27;TYPE_&#x27;</span> + j + <span class="string">&#x27; = &#x27;</span> + j + <span class="string">&#x27;;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                id_text += <span class="string">&#x27;\t&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                id_text += <span class="string">&#x27;\t&#x27;</span> + id_st + <span class="string">&#x27; &#x27;</span> + id_type + <span class="string">&#x27; &#x27;</span> + key + <span class="string">&#x27; = &#x27;</span> + id_number + <span class="string">&#x27;;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                let_id_list.<span class="title function_">push</span>(id_number)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>(let_id_list.<span class="title function_">indexOf</span>(id_number) === -<span class="number">1</span>)&#123;</span><br><span class="line">                                id_text += <span class="string">&#x27;\t&#x27;</span> + id_st + <span class="string">&#x27; &#x27;</span> + id_type + <span class="string">&#x27; &#x27;</span> + key + <span class="string">&#x27; = &#x27;</span> + id_number + <span class="string">&#x27;;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">                                let_id_list.<span class="title function_">push</span>(id_number)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            id_text += <span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">            proto_text += id_text</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">wtofile</span>(<span class="string">&#x27;app_proto3.proto&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, proto_text);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个ast代码单纯只是针对这个站点，其他站点也是类似分析。<br />运行后生成了app_proto3.proto文件，打开看一面有一些报错，如下图，渔歌文章也讲清楚了原因，因为对象调用deserializeBinaryFromReader方法的时候，ast代码处理对象无法确定，所以就没加载到。<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/23.webp"                                     ><br />我们在调试里面，搜索关键词ExportResponse.deserializeBinaryFromReader<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/24.webp"                                     ><br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/25.webp"                                     ><br />跟进去就能找到s对象是什么，补上就行，其他的报错也是这样的操作<br />得到了proto文件后进行编译成python </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --python_out=. ./app_proto3.<span class="property">proto</span></span><br></pre></td></tr></table></figure><p>然后发个请求试一试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> app_proto3_pb2 <span class="keyword">as</span> pb</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">search_request = pb.SearchService_SearchRequest()  <span class="comment"># 实例化对象</span></span><br><span class="line"><span class="comment"># 按上面解析数据，按照对应的属性设置值</span></span><br><span class="line"><span class="comment"># 字符串，数字型的都是直接赋值</span></span><br><span class="line">search_request.Commonrequest.SearchType = <span class="string">&#x27;paper&#x27;</span></span><br><span class="line">search_request.Commonrequest.SearchWord = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">search_request.Commonrequest.CurrentPage = <span class="number">2</span></span><br><span class="line">search_request.Commonrequest.PageSize = <span class="number">20</span></span><br><span class="line"><span class="comment"># repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤</span></span><br><span class="line">search_request.Commonrequest.SearchFilterList.append(<span class="number">0</span>)</span><br><span class="line">search_request.InterfaceType = <span class="number">1</span></span><br><span class="line">form_data = search_request.SerializeToString()</span><br><span class="line"><span class="built_in">print</span>(form_data)</span><br><span class="line"><span class="comment"># 保存数据玮bin文件供后续对比使用</span></span><br><span class="line"><span class="comment"># with open(&#x27;me.bin&#x27;, mode=&quot;wb&quot;) as f:</span></span><br><span class="line"><span class="comment">#     f.write(form_data)</span></span><br><span class="line"><span class="comment"># print(search_request.SerializeToString().decode())</span></span><br><span class="line"></span><br><span class="line">bytes_head = <span class="built_in">bytes</span>([<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">len</span>(form_data)])</span><br><span class="line"><span class="built_in">print</span>(bytes_head + form_data)</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;*/*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/grpc-web+proto&quot;</span>,</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://*********.com.cn/SearchService.SearchService/search&quot;</span></span><br><span class="line">response = requests.post(url, headers=headers, data=bytes_head + form_data)</span><br><span class="line"><span class="comment"># print(response.text)</span></span><br><span class="line"></span><br><span class="line">search_response = pb.SearchService_SearchResponse()</span><br><span class="line">search_response.ParseFromString(response.content[<span class="number">5</span>:])</span><br><span class="line"><span class="built_in">print</span>(search_response)</span><br></pre></td></tr></table></figure><p>可以看到很直观，取值也方便。<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/26.webp"                                     ><br />上面之所以从响应的第六位字节开启取，是跟上面发包一样的，前五个字节表示请求头的长度<br />下面是proto的核心，序列化和反序列化<br /><strong><font color="red">serializeBinary——serializeBinaryFromReader</font><strong>（</strong>重点核心</strong>）<br /><strong><font color="red">deserializeBinary——deserializeBinaryFromReader</font><strong>（</strong>重点核心</strong>）</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>使用python应对protobuf的第三方库：blackboxprotobuf<br />安装命令：pip install blackboxprotobuf<br />调用核心函数 ：blackboxprotobuf.decode_message(<strong>Byte类型数据</strong>)，进行解protobuf格式数据<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230201/27.webp"                                     ><br />上面是数据对应结构位置，下面是类型对应结构位置<br />虽然拿到了数据，只是位置序号加内容，我们其实要靠猜才能知道是什么，这种就不需要去写proto文件<br />两种方式都可以，喜欢哪种用哪种</p><h3 id="相关资料参考"><a href="#相关资料参考" class="headerlink" title="相关资料参考"></a>相关资料参考</h3><p><a class="link"   href="https://blog.csdn.net/dideng7039/article/details/101869819" >https://blog.csdn.net/dideng7039/article/details/101869819<i class="fas fa-external-link-alt"></i></a><br /><a class="link"   href="https://blog.csdn.net/qq_35491275/article/details/111721639" >https://blog.csdn.net/qq_35491275&#x2F;article&#x2F;details&#x2F;111721639<i class="fas fa-external-link-alt"></i></a><br /><a class="link"   href="https://mp.weixin.qq.com/s/DzCz66_Szc7vfG6bpl956w" >https://mp.weixin.qq.com/s/DzCz66_Szc7vfG6bpl956w<i class="fas fa-external-link-alt"></i></a><br /><a class="link"   href="https://blog.csdn.net/qq_56881388/article/details/128612717" >https://blog.csdn.net/qq_56881388&#x2F;article&#x2F;details&#x2F;128612717<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;什么是protobuf&quot;&gt;&lt;a href=&quot;#什么是protobuf&quot; class=&quot;headerlink&quot; title=&quot;什么是protobuf&quot;&gt;&lt;/a&gt;什么是protobuf&lt;/h3&gt;&lt;p&gt;一拿到网站，F12查看是否有相关数据的请求接口&lt;br /&gt;请求体是这</summary>
      
    
    
    
    
    <category term="js" scheme="https://www.zskkk.cn/tags/js/"/>
    
    <category term="protobuf" scheme="https://www.zskkk.cn/tags/protobuf/"/>
    
  </entry>
  
  <entry>
    <title>DFA还原白盒AES密钥</title>
    <link href="https://www.zskkk.cn/posts/15785/"/>
    <id>https://www.zskkk.cn/posts/15785/</id>
    <published>2023-01-31T14:00:00.000Z</published>
    <updated>2023-01-31T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>DFA攻击简单来说就是在倒数第一轮列混淆和倒数第二轮列混淆之间（在AES-128中也就是第8轮和第9轮之间，因为最后第10轮不做列混淆），修改此时中间结果的一个字节，会导致最终密文和正确密文有4个字节的不同。通过多次的修改，得到多组错误的密文，然后通过正确密文和这些错误密文能够推算出第10轮的密钥（加密模式下），继而能推算出原始密钥。<br>所以实际应用中，<strong>就需要先找准列混合的函数位置</strong>，然后在他之前去插入缺陷数据。</p><h3 id="起始处发生故障对密文的影响"><a href="#起始处发生故障对密文的影响" class="headerlink" title="起始处发生故障对密文的影响"></a>起始处发生故障对密文的影响</h3><p>首先是初始轮密钥加，错误限于这一个字节<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/1.webp">然后是第一轮的字节替换，错误限于这一个字节<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/2.webp">然后是第一轮的循环左移，因为是第一行，所以没动。<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/3.webp">然后是第一轮的列混淆步骤，结果的第m行第n列的值等于矩阵A的第m行的元素与矩阵B的第n列对应元素乘积之和，因此结果中第一列的每一个元素都受到矩阵B（即下图左边）第一列中每个元素的影响。因而，一个字节的错误被扩散到了一整列。或者说，正常情况和故障情况在第一轮列混淆结束后，有四个字节的值不同。<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/4.webp">然后是第一轮的轮密钥加，它只作用用当前字节，不会将差异扩散出去。<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/5.webp">可以看到，在一轮循环后，一个字节的故障，被扩散到了四个字节上。继续第二轮。<br>第二轮的字节替换<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/6.webp">第二轮的循环左移，需要注意到，虽然差异还是四个字节，但被扩散到不同的四列去了。<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/7.webp">第二轮的列混淆，每列存在的差异扩散到整列，这导致state的全部字节都与原先有差异。<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/8.webp">经过第二轮一个字节的差异就已经扩散到所有字节上了。<br>那么 state 中一个字节的差异，不论循环多少轮，也只会带来一个字节的差异。反过来说，每一次 MixColumns ，都会让一个字节的差异变成四个字节的差异。<br>因为第十轮没有列混淆所以在第九轮列混淆前做故障点</p><h3 id="通过故障密钥得到第十轮密钥"><a href="#通过故障密钥得到第十轮密钥" class="headerlink" title="通过故障密钥得到第十轮密钥"></a>通过故障密钥得到第十轮密钥</h3><p>标准的AES算法的python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">Sbox = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Rcon = (<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shiftRound</span>(<span class="params">array, num</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param array: 需要循环左移的数组</span></span><br><span class="line"><span class="string">    :param num: 循环左移的位数</span></span><br><span class="line"><span class="string">    :return: 使用Python切片，返回循环左移num个单位的array</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> array[num:] + array[:num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">array, index</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    g 函数</span></span><br><span class="line"><span class="string">    :param array: 待处理的四字节数组</span></span><br><span class="line"><span class="string">    :index:从1-10，每次使用Rcon中不同的数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 首先循环左移1位</span></span><br><span class="line">    array = shiftRound(array, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 字节替换</span></span><br><span class="line">    array = [Sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> array]</span><br><span class="line">    <span class="comment"># 首字节和rcon中对应元素异或</span></span><br><span class="line">    array = [(Rcon[index] ^ array[<span class="number">0</span>])] + array[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorTwoArray</span>(<span class="params">array1, array2</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    返回两个数组逐元素异或的新数组</span></span><br><span class="line"><span class="string">    :param array1: 一个array</span></span><br><span class="line"><span class="string">    :param array2: 另一个array</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(array1) == <span class="built_in">len</span>(array2)</span><br><span class="line">    <span class="keyword">return</span> [array1[i] ^ array2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array1))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showRoundKeys</span>(<span class="params">round_keys</span>):</span><br><span class="line">    <span class="comment"># 将轮密钥从44*4转成11*16</span></span><br><span class="line">    kList = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(round_keys)):</span><br><span class="line">        kList[i // <span class="number">4</span>] += round_keys[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(kList)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"K%02d:"</span> % i + <span class="string">""</span>.join(<span class="string">"%02x"</span> % k <span class="keyword">for</span> k <span class="keyword">in</span> kList[i]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keyExpand</span>(<span class="params">key</span>):</span><br><span class="line">    master_key = text2matrix(key)</span><br><span class="line">    round_keys = [[<span class="number">0</span>] * <span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">44</span>)]</span><br><span class="line">    <span class="comment"># 规则一(图中红色部分)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        round_keys[i] = master_key[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">4</span> * <span class="number">11</span>):</span><br><span class="line">        <span class="comment"># 规则二(图中红色部分)</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(g(round_keys[i - <span class="number">1</span>], i // <span class="number">4</span>), round_keys[i - <span class="number">4</span>])</span><br><span class="line">        <span class="comment"># 规则三(图中橙色部分)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(round_keys[i - <span class="number">1</span>], round_keys[i - <span class="number">4</span>])</span><br><span class="line">    showRoundKeys(round_keys)</span><br><span class="line">    <span class="keyword">return</span> round_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AddRoundKeys</span>(<span class="params">state, roundKey</span>):</span><br><span class="line">    result = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        result[i] = xorTwoArray(state[i], roundKey[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SubBytes</span>(<span class="params">state</span>):</span><br><span class="line">    result = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        result[i] = [Sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> state[i]]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ShiftRows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_02</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0x80</span>:</span><br><span class="line">        res = (num &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = (num &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span></span><br><span class="line">    <span class="keyword">return</span> res % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_03</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> mul_by_02(num) ^ num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MixColumns</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        s0 = mul_by_02(state[i][<span class="number">0</span>]) ^ mul_by_03(state[i][<span class="number">1</span>]) ^ state[i][<span class="number">2</span>] ^ state[i][<span class="number">3</span>]</span><br><span class="line">        s1 = state[i][<span class="number">0</span>] ^ mul_by_02(state[i][<span class="number">1</span>]) ^ mul_by_03(state[i][<span class="number">2</span>]) ^ state[i][<span class="number">3</span>]</span><br><span class="line">        s2 = state[i][<span class="number">0</span>] ^ state[i][<span class="number">1</span>] ^ mul_by_02(state[i][<span class="number">2</span>]) ^ mul_by_03(state[i][<span class="number">3</span>])</span><br><span class="line">        s3 = mul_by_03(state[i][<span class="number">0</span>]) ^ state[i][<span class="number">1</span>] ^ state[i][<span class="number">2</span>] ^ mul_by_02(state[i][<span class="number">3</span>])</span><br><span class="line">        state[i][<span class="number">0</span>] = s0</span><br><span class="line">        state[i][<span class="number">1</span>] = s1</span><br><span class="line">        state[i][<span class="number">2</span>] = s2</span><br><span class="line">        state[i][<span class="number">3</span>] = s3</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">state2Text</span>(<span class="params">state</span>):</span><br><span class="line">    text = <span class="built_in">sum</span>(state, [])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(<span class="string">"%02x"</span> % k <span class="keyword">for</span> k <span class="keyword">in</span> text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">input_bytes, kList</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param input_bytes: 输入的明文</span></span><br><span class="line"><span class="string">    :param kList: K0-K10</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    plainState = text2matrix(input_bytes)</span><br><span class="line">    <span class="comment"># 初始轮密钥加</span></span><br><span class="line">    state = AddRoundKeys(plainState, kList[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        state = SubBytes(state)</span><br><span class="line">        state = ShiftRows(state)</span><br><span class="line">        state = MixColumns(state)</span><br><span class="line">        state = AddRoundKeys(state, kList[<span class="number">4</span> * i:<span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">    state = SubBytes(state)</span><br><span class="line">    state = ShiftRows(state)</span><br><span class="line">    state = AddRoundKeys(state, kList[<span class="number">40</span>:<span class="number">44</span>])</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_bytes = <span class="number">0x00112233445566778899aabbccddeeff</span></span><br><span class="line">key = <span class="number">0x2b7e151628aed2a6abf7158809cf4f3c</span></span><br><span class="line">kList = keyExpand(key)</span><br><span class="line">cipherState = encrypt(input_bytes, kList)</span><br><span class="line">cipher = state2Text(cipherState)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br></pre></td></tr></table></figure><p>上述代码的执行结果为8df4e9aac5c7573a27d8d055d6e4d64b。<br>接下来我们就要去构造故障了，在第九轮加密的行移位和列混合之间修改一个中间结果的数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">input_bytes, kList</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    :param input_bytes: 输入的明文</span></span><br><span class="line"><span class="string">    :param kList: K0-K10</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    plainState = text2matrix(input_bytes)</span><br><span class="line">    <span class="comment"># 初始轮密钥加</span></span><br><span class="line">    state = AddRoundKeys(plainState, kList[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        state = SubBytes(state)</span><br><span class="line">        state = ShiftRows(state)</span><br><span class="line">        <span class="comment"># 在第9轮改一个字节</span></span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">9</span>:</span><br><span class="line">            j = <span class="number">0</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"修改第"</span> + <span class="built_in">str</span>(j) + <span class="string">"个"</span>)</span><br><span class="line">            state[j//<span class="number">4</span>][j%<span class="number">4</span>] = <span class="number">0x10</span></span><br><span class="line">        state = MixColumns(state)</span><br><span class="line">        state = AddRoundKeys(state, kList[<span class="number">4</span> * i:<span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">    state = SubBytes(state)</span><br><span class="line">    state = ShiftRows(state)</span><br><span class="line">    state = AddRoundKeys(state, kList[<span class="number">40</span>:<span class="number">44</span>])</span><br><span class="line">    <span class="keyword">return</span> state</span><br></pre></td></tr></table></figure><p>执行脚本，结果为daf4e9aac5c757c927d85355d637d64b，比对一下：<br><font color="red">8d</font> f4 e9 aa c5 c7 57 <font color="red">3a</font> 27 d8 <font color="red">d0</font> 55 d6 <font color="red">e4</font> d6 4b<br><font color="red">da</font> f4 e9 aa c5 c7 57 <font color="red">c9</font> 27 d8 <font color="red">53</font> 55 d6 <font color="red">37</font> d6 4b<br>确实有4个字节不一样。以此类推，将上述代码中j的值从0到15依次增加，会得到16个不一样的密文</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">daf4e9aac5c757c927d85355d637d64b</span><br><span class="line">47f4e9aac5c7577d27d8a655d61ed64b</span><br><span class="line">79f4e9aac5c7572a27d89855d62ad64b</span><br><span class="line">30f4e9aac5c7570b27d86555d6a5d64b</span><br><span class="line">8d7de9aac8c7573a27d8d09ed6e4be4b</span><br><span class="line">8d5ce9aa43c7573a27d8d04cd6e4054b</span><br><span class="line">8d0de9aaddc7573a27d8d060d6e4234b</span><br><span class="line">8dabe9aacac7573a27d8d009d6e4484b</span><br><span class="line">8df48caac598573a62d8d055d6e4d636</span><br><span class="line">8df4bbaac5f4573acdd8d055d6e4d693</span><br><span class="line">8df47aaac576573ac1d8d055d6e4d61c</span><br><span class="line">8df444aac5c8573a23d8d055d6e4d6fb</span><br><span class="line">8df4e9e0c5c7b73a2768d055ade4d64b</span><br><span class="line">8df4e9f2c5c7063a27a4d055dfe4d64b</span><br><span class="line">8df4e942c5c7793a275ed05535e4d64b</span><br><span class="line">8df4e98fc5c7fa3a2778d055b3e4d64b</span><br></pre></td></tr></table></figure><p>有了这个以后我们就可以还原得到第十轮的密钥了，这里使用<a class="link" href="https://github.com/SideChannelMarvels/JeanGrey/tree/master/phoenixAES">phoenixAES<i class="fas fa-external-link-alt"></i></a>工具，先安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install phoenixAES</span><br></pre></td></tr></table></figure><p>然后编写python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> phoenixAES</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'tracefile'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> t:</span><br><span class="line">    t.write(<span class="string">"""</span></span><br><span class="line"><span class="string">8df4e9aac5c7573a27d8d055d6e4d64b</span></span><br><span class="line"><span class="string">daf4e9aac5c757c927d85355d637d64b</span></span><br><span class="line"><span class="string">47f4e9aac5c7577d27d8a655d61ed64b</span></span><br><span class="line"><span class="string">79f4e9aac5c7572a27d89855d62ad64b</span></span><br><span class="line"><span class="string">30f4e9aac5c7570b27d86555d6a5d64b</span></span><br><span class="line"><span class="string">8d7de9aac8c7573a27d8d09ed6e4be4b</span></span><br><span class="line"><span class="string">8d5ce9aa43c7573a27d8d04cd6e4054b</span></span><br><span class="line"><span class="string">8d0de9aaddc7573a27d8d060d6e4234b</span></span><br><span class="line"><span class="string">8dabe9aacac7573a27d8d009d6e4484b</span></span><br><span class="line"><span class="string">8df48caac598573a62d8d055d6e4d636</span></span><br><span class="line"><span class="string">8df4bbaac5f4573acdd8d055d6e4d693</span></span><br><span class="line"><span class="string">8df47aaac576573ac1d8d055d6e4d61c</span></span><br><span class="line"><span class="string">8df444aac5c8573a23d8d055d6e4d6fb</span></span><br><span class="line"><span class="string">8df4e9e0c5c7b73a2768d055ade4d64b</span></span><br><span class="line"><span class="string">8df4e9f2c5c7063a27a4d055dfe4d64b</span></span><br><span class="line"><span class="string">8df4e942c5c7793a275ed05535e4d64b</span></span><br><span class="line"><span class="string">8df4e98fc5c7fa3a2778d055b3e4d64b</span></span><br><span class="line"><span class="string">"""</span>.encode(<span class="string">'utf8'</span>))</span><br><span class="line">phoenixAES.crack_file(<span class="string">'tracefile'</span>, [], <span class="literal">True</span>, <span class="literal">False</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>一共写入了17行数据到文件，其中第一行为正确的密文，剩余16行都是故障密文，最终通过crack_file即可得到第10轮密钥：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Last round key #N found:</span><br><span class="line">D014F9A8C9EE2589E13F0CC8B6630CA6</span><br></pre></td></tr></table></figure><h3 id="还原密文"><a href="#还原密文" class="headerlink" title="还原密文"></a>还原密文</h3><p>接下来还要根据这个密钥去还原原始密钥，这里还需要用到一个工具<a class="link" href="https://github.com/SideChannelMarvels/Stark">Stark<i class="fas fa-external-link-alt"></i></a>，它里面有一个aes_keyschedule.c文件，将其拷贝到本地并编译为可执行文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc aes_keyschedule.c -o aes_keyschedule</span><br></pre></td></tr></table></figure><p>然后将刚才得到的第10轮密钥喂进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./aes_keyschedule 5D432583B2AA833FC22D53130FDA904C 10</span><br></pre></td></tr></table></figure><p>执行上述命令后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">./aes_keyschedule D014F9A8C9EE2589E13F0CC8B6630CA6 10</span><br><span class="line">K00: 2B7E151628AED2A6ABF7158809CF4F3C</span><br><span class="line">K01: A0FAFE1788542CB123A339392A6C7605</span><br><span class="line">K02: F2C295F27A96B9435935807A7359F67F</span><br><span class="line">K03: 3D80477D4716FE3E1E237E446D7A883B</span><br><span class="line">K04: EF44A541A8525B7FB671253BDB0BAD00</span><br><span class="line">K05: D4D1C6F87C839D87CAF2B8BC11F915BC</span><br><span class="line">K06: 6D88A37A110B3EFDDBF98641CA0093FD</span><br><span class="line">K07: 4E54F70E5F5FC9F384A64FB24EA6DC4F</span><br><span class="line">K08: EAD27321B58DBAD2312BF5607F8D292F</span><br><span class="line">K09: AC7766F319FADC2128D12941575C006E</span><br><span class="line">K10: D014F9A8C9EE2589E13F0CC8B6630CA6</span><br></pre></td></tr></table></figure><p>即可得到密钥为2B7E151628AED2A6ABF7158809CF4F3C，同一开始的密钥一致</p><p><strong>更多关于加密算法的内容可以关注龙哥星球</strong><br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/000.webp"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;DFA攻击简单来说就是在倒数第一轮列混淆和倒数第二轮列混淆之间（在AES-128中也就是第8轮和第9轮之间，因为最后第10轮不做列混淆），修</summary>
      
    
    
    
    
    <category term="算法" scheme="https://www.zskkk.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>AES知道某一轮次密钥反推主密钥</title>
    <link href="https://www.zskkk.cn/posts/17732/"/>
    <id>https://www.zskkk.cn/posts/17732/</id>
    <published>2023-01-31T09:25:40.000Z</published>
    <updated>2023-01-31T09:25:40.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="从轮密钥逆推主密钥"><a href="#从轮密钥逆推主密钥" class="headerlink" title="从轮密钥逆推主密钥"></a>从轮密钥逆推主密钥</h4><p>首先讨论AES-128<br>这里用上上篇<a href="https://www.zskkk.cn/2022/12/27/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95AES%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%88%86%E6%9E%90/"><font color="blue">对称加密算法AES原理及分析</font></a>里面用到的密钥<strong>0123456789abcdef0123456789abcdef</strong>生成的10轮子密钥做分析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">K00:0123456789abcdef0123456789abcdef</span><br><span class="line">K01:629e9ac0eb35572fea16124863bddfa7</span><br><span class="line">K02:1a00c63bf13591141b23835c789e5cfb</span><br><span class="line">K03:154ac987e47f5893ff5cdbcf87c28734</span><br><span class="line">K04:385dd190dc228903237e52cca4bcd5f8</span><br><span class="line">K05:4d5e90d9917c19dab2024b1616be9eee</span><br><span class="line">K06:c355b89e5229a144e02bea52f69574bc</span><br><span class="line">K07:a9c7dddcfbee7c981bc596caed50e276</span><br><span class="line">K08:7a5fe58981b199119a740fdb7724edad</span><br><span class="line">K09:570a707cd6bbe96d4ccfe6b63beb0b1b</span><br><span class="line">K10:8821df9e5e9a36f31255d04529bedb5e</span><br></pre></td></tr></table></figure><p>假如获取到的是K0，那不用说。如果获取到的是K10呢？<br>8821df9e5e9a36f31255d04529bedb5e，首先我们会到W数组的视图，看W10密钥怎么编排出来的<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/01.webp"></p><p>K10是W40,W41,W42,W43拼起来的，我们已知K10，即已知W40,W41,W42,W43有没有办法求K9？如果可以，那么同理可以逆推到K0，即求得了主密钥<br><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.3ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10740.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(3858.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4247.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(5295.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6295.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(6684.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(6934.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(7506.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7991.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(8442.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(8692.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(9740.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></p><p><br>我们不妨先复习一下异或的基本性质，<strong>异或作用与比特位上，对应的比特位相同则为0，相异则为1</strong>。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.954ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4841.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1322,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2258,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2508,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4341.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.954ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4841.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1322,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2258,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2508,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4341.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.954ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4841.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1322,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2258,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2508,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4341.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="10.954ex" height="1.692ex" role="img" focusable="false" viewBox="0 -666 4841.6 748"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mtext" transform="translate(500,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1322,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(1807,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2258,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2508,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3285.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(4341.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></svg></mjx-container></p><p>因为相同为0，相异为1，那么一个数和自身异或时，因为每个比特位都相同，所以结果为0。<br><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.547ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 5545.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mtext" transform="translate(852,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(1102,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1674,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2159,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2610,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2860,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(3989.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5045.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container><br>而当某个数和0异或时，自身为0的比特0^0得0，自身为1的比特位1^0得1，这就导致结果和没异或前一样。<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="12.547ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 5545.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mtext" transform="translate(852,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(1102,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1674,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2159,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2610,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mn" transform="translate(2860,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(3637.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4693.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container> </p><p>除此之外，异或并不看谁先谁后，A ^ B 与 B ^ A 显然无区别，即具有交换律。<br></p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="19.411ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 8579.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mtext" transform="translate(852,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(1102,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(1674,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(2159,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(2610,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2860,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mo" transform="translate(3900.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(4956.6,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"></path></g><g data-mml-node="mtext" transform="translate(5719.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5969.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6541.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7026.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7477.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7727.6,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g></g></g></svg></mjx-container></p><p><br>看看异或的多角度理解：<a href="https://www.zhihu.com/question/31116687"><font color="blue">如何理解「异或」的含义</font></a>。<br>下面做变换，左右W42异或<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="39.813ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 17597.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(2048,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2298,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(2870,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3355,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(3806,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(4056,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(5104,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6381.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(9485.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(9735.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(10307.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(10792.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(11243.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(11493.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(12541.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(13541.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(13791.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(14363.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(14848.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(15299.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(15549.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(16597.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="27.135ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 11993.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(2048,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(2298,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(2870,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3355,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(3806,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(4056,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(5104,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6381.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(7437.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mtext" transform="translate(7937.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(8187.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(8759.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(9244.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(9695.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(9945.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(10993.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container></p><p>K10中涉及到的四个式子均可以做变化<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="24.3ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 10740.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(3858.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4247.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(5295.6,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(6295.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mtext" transform="translate(6684.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(6934.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(7506.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(7991.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(8442.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(8692.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(9740.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.461ex" height="1.731ex" role="img" focusable="false" viewBox="0 -683 9485.6 765"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(1048,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(500,0)"></path></g><g data-mml-node="mo" transform="translate(2325.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3381.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(4429.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g><g data-mml-node="mtext" transform="translate(5429.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(5679.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(6251.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6736.6,0)"><path data-c="1D45F" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mtext" transform="translate(7187.6,0)"><path data-c="A0" d=""></path></g><g data-mml-node="mi" transform="translate(7437.6,0)"><path data-c="1D44A" d="M436 683Q450 683 486 682T553 680Q604 680 638 681T677 682Q695 682 695 674Q695 670 692 659Q687 641 683 639T661 637Q636 636 621 632T600 624T597 615Q597 603 613 377T629 138L631 141Q633 144 637 151T649 170T666 200T690 241T720 295T759 362Q863 546 877 572T892 604Q892 619 873 628T831 637Q817 637 817 647Q817 650 819 660Q823 676 825 679T839 682Q842 682 856 682T895 682T949 681Q1015 681 1034 683Q1048 683 1048 672Q1048 666 1045 655T1038 640T1028 637Q1006 637 988 631T958 617T939 600T927 584L923 578L754 282Q586 -14 585 -15Q579 -22 561 -22Q546 -22 542 -17Q539 -14 523 229T506 480L494 462Q472 425 366 239Q222 -13 220 -15T215 -19Q210 -22 197 -22Q178 -22 176 -15Q176 -12 154 304T131 622Q129 631 121 633T82 637H58Q51 644 51 648Q52 671 64 683H76Q118 680 176 680Q301 680 313 683H323Q329 677 329 674T327 656Q322 641 318 637H297Q236 634 232 620Q262 160 266 136L501 550L499 587Q496 629 489 632Q483 636 447 637Q428 637 422 639T416 648Q416 650 418 660Q419 664 420 669T421 676T424 680T428 682T436 683Z"></path></g><g data-mml-node="mn" transform="translate(8485.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container> </p><p>K10 = 8821df9e5e9a36f31255d04529bedb5e，切成四块<br></p><center>W40 = 8821df9e</center><center>W41 = 5e9a36f3</center><center>W42 = 1255d045</center><center>W43 = 29bedb5e</center><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0x8821df9e</span>^<span class="number">0x5e9a36f3</span>)</span><br><span class="line"><span class="string">'0xd6bbe96d'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0x5e9a36f3</span>^<span class="number">0x1255d045</span>)</span><br><span class="line"><span class="string">'0x4ccfe6b6'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0x1255d045</span>^<span class="number">0x29bedb5e</span>)</span><br><span class="line"><span class="string">'0x3beb0b1b'</span></span><br></pre></td></tr></table></figure><p>所以<br>W37 = 0xd6bbe96d<br>W38 = 0x4ccfe6b6<br>W39 = 0x3beb0b1b<br>求出了W37,W38,W39，即K9的后大半部分，和真实情况比对后发现一致。<br>K09:570a707c<strong>d6bbe96d4ccfe6b63beb0b1b</strong><br>那么W36呢？再复习一下g函数吧<br>首先循环左移一字节，3beb0b1b 变成 eb0b1b3b<br>然后逐字节S盒替换，得e92bafe2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>SBox = [</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line"><span class="meta">... </span>    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line"><span class="meta">... </span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(SBox[<span class="number">0xeb</span>])</span><br><span class="line"><span class="string">'0xe9'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(SBox[<span class="number">0x0b</span>])</span><br><span class="line"><span class="string">'0x2b'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(SBox[<span class="number">0x1b</span>])</span><br><span class="line"><span class="string">'0xaf'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(SBox[<span class="number">0x3b</span>])</span><br><span class="line"><span class="string">'0xe2'</span></span><br></pre></td></tr></table></figure><p>最后是首字节和Rcon中的一个字节异或，这是最后一次变换，即用0x36</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rcon = [<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>]</span><br></pre></td></tr></table></figure><p>即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0xe9</span>^<span class="number">0x36</span>)</span><br><span class="line"><span class="string">'0xdf'</span></span><br></pre></td></tr></table></figure><p>g函数的结果即是0xdf2bafe2<br>那上面W36=g(W39) xor W40 = 0xdf2bafe2 xor 0x8821df9e</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">hex</span>(<span class="number">0xdf2bafe2</span>^<span class="number">0x8821df9e</span>)</span><br><span class="line"><span class="string">'0x570a707c'</span></span><br></pre></td></tr></table></figure><p>所以完整的K9：570a707cd6bbe96d4ccfe6b63beb0b1b，就被我们分析出来了，跟一开始的K表里的K9是一致的。可以继续往上推出K0，获得主密钥。即AES可以依靠轮密钥逆推出主密钥。严肃的说，AES-128可以通过一轮轮密钥逆推出主密钥，AES-192需要一轮半，AES-256需要两轮轮密钥。</p><p>接下来顺便下讨论DES的<br><br>DES密钥长八字节，在密钥编排时，会舍弃每个字节的最后1比特。因此实际参与密钥编排的是56比特，我们可以验证这一点。<br>假设密钥是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">11</span> <span class="number">22</span> <span class="number">33</span> <span class="number">44</span> <span class="number">55</span> <span class="number">66</span> <span class="number">77</span> <span class="number">88</span> (<span class="built_in">hex</span>)</span><br></pre></td></tr></table></figure><p>二进制即 <br>0001000<strong>1</strong> 0010001<strong>0</strong> 0011001<strong>1</strong> 0100010<strong>0</strong> 0101010<strong>1</strong> 0110011<strong>0</strong> 0111011<strong>1</strong> 1000100<strong>0</strong><br>我们将末尾1比特翻转，即0变1，1变0。如果AES密钥中每个字节的最后一位被“丢弃”，那么翻转后也并不会对程序有任何影响，反之加密结果应该不同。<br>0001000<strong>0</strong> 0010001<strong>1</strong> 0011001<strong>0</strong> 0100010<strong>1</strong> 0101010<strong>0</strong> 0110011<strong>1</strong> 0111011<strong>0</strong> 1000100<strong>1</strong><br>转成十六进制即</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">23</span> <span class="number">32</span> <span class="number">45</span> <span class="number">54</span> <span class="number">67</span> <span class="number">76</span> <span class="number">89</span> (<span class="built_in">hex</span>)</span><br></pre></td></tr></table></figure><p>在Cyberchef中，使用这两个密钥进行DES加密，结果完全一致。<br></p><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/02.webp"><br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/03.webp"></p><p>对于DES而言，已知<strong>两轮或两轮</strong>以上的<strong>子密钥</strong>，就可逆推出初始密钥，具体代码见 <a href="https://www.freebuf.com/column/219723.html"><font color="blue">DES 子密钥逆推初始密钥</font></a> 一文。对于主密钥中无法复原的八比特，随便补什么都行，反正不影响结果。<br>在实际场景中，当我们需要基于AES/DES的轮密钥恢复主密钥时，我们用 <a href="https://github.com/SideChannelMarvels/Stark"><font color="blue">SideChannelMarvels/Stark</font></a> 这个开源项目，用户体验很好。<br>在另外一些情况中，目标加密算法可以基于某个轮密钥逆推出全体轮密钥，但没法恢复出主密钥，那怎么办呢——这不就是一开始说的吗</p><h4 id="轮密钥所处的内存块可区分吗"><a href="#轮密钥所处的内存块可区分吗" class="headerlink" title="轮密钥所处的内存块可区分吗"></a>轮密钥所处的内存块可区分吗</h4><p>首先得考虑一个代码编写的问题，<strong>在大多数加密实现中，出于模块化以及效率的考量，密钥编排作为一个整体性的、前置的步骤，在明文的运算前就被完全算出来。</strong>以AES -128为例，Key 为 16字节，密钥编排后生成11个16字节的轮密钥，这是我们刚学的。很少有程序会在明文运算中，用到了Ki再去编排生成那16字节，而是像我们的Python代码那样，提前生成所有轮密钥，供后续明文运算时使用。在Android Native开发中而言，即K0-K10紧凑的在一块内存中，装在比如 uint8_t RoundKey[176]这样的数组里。我们将全体轮密钥称为轮密钥群，这么叫比较好听。<br>那么如果提供给我们一串字节数据，能否判断其为AES的轮密钥群？这里用上一篇<a href="https://www.zskkk.cn/2023/01/09/%E6%9F%90%E9%B1%BC%E7%9B%B4%E6%92%AD%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8unidbg%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90/"><font color="blue">某鱼直播软件使用unidbg算法分析</font></a> 里面出面的轮密钥群做样例，比如如下的176字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000</span>: <span class="number">30</span> <span class="number">29</span> <span class="number">28</span> <span class="number">27</span> <span class="number">26</span> <span class="number">25</span> <span class="number">24</span> <span class="number">23</span> <span class="number">22</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="number">0</span>)(<span class="string">'&amp;%$#"!......</span></span><br><span class="line"><span class="string">0010: 52 4A 4B 44 74 6F 6F 67 56 4E 6F 67 56 4E 6F 67    RJKDtoogVNogVNog</span></span><br><span class="line"><span class="string">0020: 7F E2 CE F5 0B 8D A1 92 5D C3 CE F5 0B 8D A1 92    ........].......</span></span><br><span class="line"><span class="string">0030: 26 D0 81 DE 2D 5D 20 4C 70 9E EE B9 7B 13 4F 2B    &amp;...-] Lp...{.O+</span></span><br><span class="line"><span class="string">0040: 53 54 70 FF 7E 09 50 B3 0E 97 BE 0A 75 84 F1 21    STp.~.P.....u..!</span></span><br><span class="line"><span class="string">0050: 1C F5 8D 62 62 FC DD D1 6C 6B 63 DB 19 EF 92 FA    ...bb...lkc.....</span></span><br><span class="line"><span class="string">0060: E3 BA A0 B6 81 46 7D 67 ED 2D 1E BC F4 C2 8C 46    .....F}g.-.....F</span></span><br><span class="line"><span class="string">0070: 86 DE FA 09 07 98 87 6E EA B5 99 D2 1E 77 15 94    .......n.....w..</span></span><br><span class="line"><span class="string">0080: F3 87 D8 7B F4 1F 5F 15 1E AA C6 C7 00 DD D3 53    ...{.._........S</span></span><br><span class="line"><span class="string">0090: 29 E1 35 18 DD FE 6A 0D C3 54 AC CA C3 89 7F 99    ).5...j..T......</span></span><br><span class="line"><span class="string">00A0: B8 33 DB 36 65 CD B1 3B A6 99 1D F1 65 10 62 68    .3.6e..;....e.bh</span></span><br></pre></td></tr></table></figure><p>这个问题有什么意义？<br>一个比较小的作用在于，在重度混淆的样本里，我们没法自上而下的分析逻辑。那么如果发现某个参数指向这么一片内存，我们可能需要办法确认——这是不是编排后的轮密钥？<br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230131/01.webp"><br>比较取巧的办法是验证图中橙色部分，验证w5是否等于w4^w1，w6是否等于w5^w2等等。<br>那么比较体系化的办法呢？我们假定上面字节流的最后十六个字节是轮密钥最后一轮，然后逆推出整个轮密钥群，两相对比，如果一致就可确认是否是轮密钥群。<br>在stark中进行验证，传入的参数中，<strong>B833DB3665CDB13BA6991DF165106268</strong>是假设的轮密钥（字节流最后十六字节），10为第几轮。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">E:\Project\c_project\Stark&gt;aes_keyschedule B833DB3665CDB13BA6991DF165106268 10</span><br><span class="line">K00: 30292827262524232221000000000000</span><br><span class="line">K01: 524A4B44746F6F67564E6F67564E6F67</span><br><span class="line">K02: 7FE2CEF50B8DA1925DC3CEF50B8DA192</span><br><span class="line">K03: 26D081DE2D5D204C709EEEB97B134F2B</span><br><span class="line">K04: 535470FF7E0950B30E97BE0A7584F121</span><br><span class="line">K05: 1CF58D6262FCDDD16C6B63DB19EF92FA</span><br><span class="line">K06: E3BAA0B681467D67ED2D1EBCF4C28C46</span><br><span class="line">K07: 86DEFA090798876EEAB599D21E771594</span><br><span class="line">K08: F387D87BF41F5F151EAAC6C700DDD353</span><br><span class="line">K09: 29E13518DDFE6A0DC354ACCAC3897F99</span><br><span class="line">K10: B833DB3665CDB13BA6991DF165106268</span><br></pre></td></tr></table></figure><p>比对后可确认一致。AES中还有一个特殊之处，第一轮子密钥就是主密钥，所以密钥就是30292827262524232221000000000000。又因为AES”<strong>第一轮子密钥就是主密钥</strong>“，所以有个更简单和易懂的办法——假设可疑内存块的前十六个字节是主密钥，做密钥编排，对比两者结果是否一致。<br>现在也有开源的工具可以更快找到密钥，这里推荐龙哥的<a href="https://github.com/Pr0214/Unidbg_FindKey"><font color="blue">Unidbg_FindKey</font></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;从轮密钥逆推主密钥&quot;&gt;&lt;a href=&quot;#从轮密钥逆推主密钥&quot; class=&quot;headerlink&quot; title=&quot;从轮密钥逆推主密钥&quot;&gt;&lt;/a&gt;从轮密钥逆推主密钥&lt;/h4&gt;&lt;p&gt;首先讨论AES-128&lt;br&gt;这里用上上篇&lt;a href=&quot;https://www.</summary>
      
    
    
    
    
    <category term="算法" scheme="https://www.zskkk.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>某鱼直播软件使用unidbg算法分析</title>
    <link href="https://www.zskkk.cn/posts/57348/"/>
    <id>https://www.zskkk.cn/posts/57348/</id>
    <published>2023-01-09T11:24:29.000Z</published>
    <updated>2023-01-09T11:24:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/000.webp"                                     ></p><h2 id="Unidbg-模拟执行"><a href="#Unidbg-模拟执行" class="headerlink" title="Unidbg 模拟执行"></a>Unidbg 模拟执行</h2><p> 首先模拟执行，先搭个架子  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.douyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.AbstractJni;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.DalvikModule;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.VM;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DouYu</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DouYu</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build();</span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;</span>));</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DouYu</span> <span class="variable">douYu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DouYu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果<br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/01.webp"                                     ><br /> 报了一个 ”不合法的JNI版本“ 错误，具体出错的原因有很多，一个常见的问题是SO的依赖库缺失。即程 序调用依赖库中某个函数时，因为这个依赖库没加载到Unidbg虚拟内存中，进而发生寻址错误，比如上 图就是 0x1664 地址访问失败。在Unidbg日志的第三行我们看到， libc++_shared.so 加载失败，即库缺失报错。 我们的目标SO依赖了 libc++_shared.so ，这个库是C++的支持库，但不在Unidbg默认支持的SO里。 我们要在apk的lib里把它拷贝出来。<br />在加载so文件前添加这两行，目标so依赖的其他so文件要在其前面加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">DalvikModule</span> <span class="variable">dm_shared</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">dm_shared.callJNI_OnLoad(emulator);</span><br></pre></td></tr></table></figure><p>再次运行就一切正常了<br />下面就到了今天的主角——native_makeUrl函数，Unidbg中先call它，参数很长，构造的很随意，因为只是学习用途。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.douyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ArrayObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DouYu</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DouYu</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build();</span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;</span>));</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm_shared</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        dm_shared.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        emulator.traceCode(module.base, module.base + module.size);</span></span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMakeUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// args list</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// arg1 env</span></span><br><span class="line">        list.add(vm.getJNIEnv());</span><br><span class="line">        <span class="comment">// arg2 jobject/jclazz 一般用不到，直接填0</span></span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="literal">null</span>);</span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;aid&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;client_sys&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;time&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input3_1);</span><br><span class="line">        vm.addLocalObject(input3_2);</span><br><span class="line">        vm.addLocalObject(input3_3);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input3_1, input3_2, input3_3)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;android1&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;android&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;1673232015&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input4_1);</span><br><span class="line">        vm.addLocalObject(input4_2);</span><br><span class="line">        vm.addLocalObject(input4_3);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input4_1, input4_2, input4_3)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input5_1);</span><br><span class="line">        vm.addLocalObject(input5_2);</span><br><span class="line">        vm.addLocalObject(input5_3);</span><br><span class="line">        vm.addLocalObject(input5_4);</span><br><span class="line">        vm.addLocalObject(input5_5);</span><br><span class="line">        vm.addLocalObject(input5_6);</span><br><span class="line">        vm.addLocalObject(input5_7);</span><br><span class="line">        vm.addLocalObject(input5_8);</span><br><span class="line">        vm.addLocalObject(input5_9);</span><br><span class="line">        vm.addLocalObject(input5_10);</span><br><span class="line">        vm.addLocalObject(input5_11);</span><br><span class="line">        vm.addLocalObject(input5_12);</span><br><span class="line">        vm.addLocalObject(input5_13);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input5_1, input5_2, input5_3,input5_4, input5_5, input5_6,input5_7, input5_8, input5_9,input5_10, input5_11, input5_12,input5_13)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input6_1);</span><br><span class="line">        vm.addLocalObject(input6_2);</span><br><span class="line">        vm.addLocalObject(input6_3);</span><br><span class="line">        vm.addLocalObject(input6_4);</span><br><span class="line">        vm.addLocalObject(input6_5);</span><br><span class="line">        vm.addLocalObject(input6_6);</span><br><span class="line">        vm.addLocalObject(input6_7);</span><br><span class="line">        vm.addLocalObject(input6_8);</span><br><span class="line">        vm.addLocalObject(input6_9);</span><br><span class="line">        vm.addLocalObject(input6_10);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input6_1, input6_2, input6_3,input6_4, input6_5, input6_6,input6_7, input6_8, input6_9,input6_10)));</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 参数准备完成</span></span><br><span class="line">        <span class="comment">// call function</span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x2f91</span>, list.toArray());</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DouYu</span> <span class="variable">douYu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DouYu</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">makeUrl</span> <span class="operator">=</span> douYu.getMakeUrl();</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+ makeUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 运行后直接出结果  <br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/02.webp"                                     ><br /> 可以发现，结果由四部分组成，前三个参数是我们 input4 传进去的内容，所以需要分析的只有auth的 来源。 多次运行会发现，auth 的值，恒为 3c179e17e8e9b06d7b18c68555b92220，长度 32 位。  </p><h2 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h2><p> 首先，确认函数执行流的汇编长度，如果行数过多上千万甚至上亿行，就只能放弃。如果几十万行，那就还可以看看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traceLength</span><span class="params">()</span> &#123;</span><br><span class="line">    emulator.getBackend().hook_add_new(<span class="keyword">new</span> <span class="title class_">CodeHook</span>() &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook</span><span class="params">(Backend backend, <span class="type">long</span> address, <span class="type">int</span> size, Object user)</span> &#123;</span><br><span class="line">            count += <span class="number">1</span>;</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAttach</span><span class="params">(UnHook unHook)</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">module</span>.base, <span class="keyword">module</span>.size + <span class="keyword">module</span>.base, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/03.webp"                                     ><br />运行计数总共九十一万行， 不超过100w行的执行流，要么程序没怎么混淆，要么逻辑不 太复杂。两者任意一个复杂度高一些，都不会只有100w行汇编以内。  <br />使用findcrypt插件再确认一下样本大概使用了哪些加密算法<br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/04.webp"                                     ><br /> SO中至少存在 AES&#x2F;BASE64，至于我们的函数中用了什么？这得具体分析，毕竟Findcrypt只是一个静态 的、加密特征匹配插件。 </p><ul><li>目标函数可能用了AES&#x2F;Base64，说“可能”是上述算法可能用于SO中其他函数而非目标函数。 </li><li>目标函数可能用了AES和Base64之外的其他加密算法，因为FIndCrypt提供了静态的、有限的分析，很容易遗漏。</li></ul><p>使用Unidbg处理算法，一般而言，自下而上分析更省时省力，这得益于Unidbg两方面的能力 </p><ul><li><strong><font color="red">强大方便的内存读写监控</font></strong></br> </li><li><strong><font color="red">无地址随机化</font></strong></li></ul><p>这让我们可以逆流而上，自结果推来源，分析算法和数据块十分轻松。 <br />重新看运行结果图<br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/05.webp"                                     ><br />运算结果来自于NewStringUTF，这个JString从哪里来的？    <br /> 日志提示调用处在0x336f，这个地址实际上是LR（返回地址），所以NewStringUTF函数调用是 0x336f 的上一条 0x336C。  <br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/06.webp"                                     ><br><br /> 在 0x336C 下断点  <br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/07.webp"                                     ><br><br /> 回顾一下NewStringUTF 这个JNI方法，数据来源就是参数二字符数组  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstring <span class="title function_">NewStringUTF</span><span class="params">(JNIEnv *env, const <span class="type">char</span> *bytes)</span>;</span><br></pre></td></tr></table></figure><p> 数据从地址0x402d20a0开始，我们要监控auth&#x3D;后面的数据，即从0x402d20a0+len(aid&#x3D;android1&amp;client_sys&#x3D;android&amp;time&#x3D;1638452332&amp;auth&#x3D;)开始，数一下auth的32个字节所处的地址，监控对它的写入。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">emulator.traceWrite(<span class="number">0x401D20D5</span>, <span class="number">0x401D20D5</span>+<span class="number">0x20</span>);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/08.webp"                                     ><br><br /> 从下往上寻找对内存最晚的操作，可以发现，这32个字节的赋值发生在libc里。一般数据在libc里赋值， 指的是调用了libc中memcpy等库函数做拷贝、转换、比较等处理，而非数据生成的第一现场。  <br /> 把Unidbg的libc.so拷贝一份出来，扔到IDA里。搜索0x17d3a，看具体是哪个函数。我们发现 是在strcat函数里，即做字符串拼接。  <br />hook strcat 函数，进行追踪  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *strcat(<span class="type">char</span> *dest, const <span class="type">char</span> *src)</span><br></pre></td></tr></table></figure><ul><li><strong><font color="red">dest – 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串。</strong></font> </li><li><strong><font color="red">src – 指向要追加的字符串，该字符串不会覆盖目标字符串。</strong></font></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookStrCat</span><span class="params">()</span>&#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;strcat&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">r1</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">1</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;strcat:&quot;</span>+ r1);</span><br><span class="line">            System.out.println(r1.getString(<span class="number">0</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行，可以发现结果的四个字段就是strcat 逐步拼接的结果  <br /><br> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/09.webp"                                     ><br> <br /> 对来源 0xbffff69b 做traceWrite，千万记得加后缀L。  <br /> 发现依然来自于libc，这不是好事，说明我们还没到第一现场。  <br /><br> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/10.webp"                                     ><br> <br />从IDA跳到地址 0x176dc，看到是在_memcpy_base函数里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __fastcall <span class="title function_">_memcpy_base</span><span class="params">(<span class="type">int</span> a1, <span class="type">char</span> *a2, unsigned <span class="type">int</span> a3, <span class="type">int</span> a4, <span class="type">int</span> a5,</span></span><br><span class="line"><span class="params"><span class="type">int</span> a6)</span></span><br></pre></td></tr></table></figure><p> 它应该是memcpy函数内部的子函数，我们Hook一下memcpy，其原型如下  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *memcpy(<span class="keyword">void</span> *str1, const <span class="keyword">void</span> *str2, size_t n)</span><br></pre></td></tr></table></figure><ul><li><strong><font color="red">str1 – 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。</strong></font> </li><li><strong><font color="red">str2 – 指向要复制的数据源，类型强制转换为 void* 指针。</strong></font> </li><li><strong><font color="red">n – 要被复制的字节数。</strong></font></li></ul><p> 我们打印str2，长度为n  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookMemcpy</span><span class="params">()</span>&#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;memcpy&quot;</span>,</span><br><span class="line">            <span class="literal">true</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">r1</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">1</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> emulator.getContext().getIntArg(<span class="number">2</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;memcpy&quot;</span>);</span><br><span class="line">            Inspector.inspect(r1.getByteArray(<span class="number">0</span>, length), r1.toString());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 运行发现，程序逻辑上逐两个字节进行拷贝  <br /><br> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/11.webp"                                     ><br> <br />140处调用。看的头疼，所以我尝试性的搜索了下3c179e17e8e9b06d7b18c68555b92220，期待某次 memcpy可以看到它，那么我们就能找到它的产生之处了。  <br /><br> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/12.webp"                                     ><br> <br /> 打印memcpy的str2时，我采用了Unidbg的Inspect API，它会在 打印内存块时，顺带打印数据的MD5值，这个设计主要是为了比较两个内存块是否全然等值，但这里却 帮到了我们。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000</span>: <span class="number">61</span> <span class="number">69</span> <span class="number">64</span> <span class="number">3D</span> <span class="number">61</span> 6E <span class="number">64</span> <span class="number">72</span> <span class="number">6F</span> <span class="number">69</span> <span class="number">64</span> <span class="number">31</span> <span class="number">26</span> <span class="number">63</span> 6C <span class="number">69</span>    aid=android1&amp;cli</span><br><span class="line"><span class="number">0010</span>: <span class="number">65</span> 6E <span class="number">74</span> <span class="number">5F</span> <span class="number">73</span> <span class="number">79</span> <span class="number">73</span> <span class="number">3D</span> <span class="number">61</span> 6E <span class="number">64</span> <span class="number">72</span> <span class="number">6F</span> <span class="number">69</span> <span class="number">64</span> <span class="number">26</span>    ent_sys=android&amp;</span><br><span class="line"><span class="number">0020</span>: <span class="number">74</span> <span class="number">69</span> <span class="number">6D</span> <span class="number">65</span> <span class="number">3D</span> <span class="number">31</span> <span class="number">36</span> <span class="number">37</span> <span class="number">33</span> <span class="number">32</span> <span class="number">33</span> <span class="number">32</span> <span class="number">30</span> <span class="number">31</span> <span class="number">35</span> <span class="number">76</span>    time=1673232015v</span><br><span class="line"><span class="number">0030</span>: <span class="number">71</span> <span class="number">34</span> <span class="number">37</span> <span class="number">48</span> <span class="number">64</span> <span class="number">39</span> 4A <span class="number">55</span> <span class="number">67</span> <span class="number">66</span> <span class="number">44</span> <span class="number">43</span> <span class="number">79</span> <span class="number">74</span> <span class="number">43</span>       q47Hd9JUgfDCytC</span><br></pre></td></tr></table></figure><p>vq47Hd9JUgfDCytC 这十个字节是未知的，其余三个字段是传进来的，我们结合上面的MD5会产生一种 明悟，这不就是加盐MD5吗？传进来的参数拼接后加上”vq47Hd9JUgfDCytC“，MD5后传出去。 <br />那么现在问题就变成了，vq47Hd9JUgfDCytC是哪里来的？  <br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/13.webp"                                     ><br><br /> 对0xbffff500L 做traceWrite  <br /></p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/14.webp"                                     ><br><br /> ida打开libmakeurl.so，看一下来源0x8a88，十六个字节都来自这里  <br /></p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/15.webp"                                     ><br><br /> 前面我们用过Findcrypt，有看到RijnDael_AES_LONG_inv_45FC4，它自动将0x8a9e所位于的函数中，一个数组标记为AES的S逆盒。这告诉我们，十六字节的生成处是AES的运算逻辑。换而言之，这十六字节大概率是AES加密或解密的输出。  <br />可是，样本使用了Ollvm，比如0x8a9e这一行，就是Ollvm中的指令替换。 <br />我们先不要陷入函数的细节里，因为如果是标准AES，那根本不用 分析加密程序的内部，自然也就不用考虑这些混淆了。  <br /> 0x8a88 位于 sub_8228 函数内，Hook sub_8228，顺利断下  <br /> 观察两个参数  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_8228</span><span class="params">(unsigned __int64 a1, _QWORD *a2)</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/16.webp"                                     ><br><br /> 参数2像是buffer，存放加密结果。blr用于在函数返回处下断点，然后c继续跑，在函数运行结束后再次 查看参数2指向的内存。  <br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/17.webp"                                     ></p><p>可以发现确实是我们要分析的十六个字节。至于参数1是什么意思，硬看似乎看不出来。 <br />因此可以判断，sub_8228生成了我们要分析的十六个字节，而且它像AES的执行逻辑。 <br />AES 加密还是解密？什么工作模式？明文是什么？Key是什么？一概不知。我们得到sub_8228上层去看看。 <br />重新运行程序，bt 打印调用栈  <br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/18.webp"                                     ><br />跳到 0x08ba7 看一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __fastcall <span class="title function_">sub_8B3C</span><span class="params">(const <span class="type">char</span> *a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  signed <span class="type">int</span> i; <span class="comment">// r0</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// r1</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// r1</span></span><br><span class="line">  signed <span class="type">int</span> v10; <span class="comment">// [sp+4h] [bp-144h]</span></span><br><span class="line">  signed <span class="type">int</span> v11; <span class="comment">// [sp+Ch] [bp-13Ch]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">280</span>]; <span class="comment">// [sp+10h] [bp-138h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [sp+128h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">  v10 = (strlen(a1) + <span class="number">15</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">  sub_72BC(v12, a2, <span class="number">128</span>);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; i = v11 + <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v7 = <span class="number">1590846758</span>;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v8 = v7 &amp; <span class="number">0x7FFFFFFF</span>;</span><br><span class="line">      <span class="keyword">if</span> ( v8 != <span class="number">1590846758</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      v11 = i;</span><br><span class="line">      v7 = <span class="number">131555431</span>;</span><br><span class="line">      <span class="keyword">if</span> ( i &lt; v10 )</span><br><span class="line">        v7 = <span class="number">1574041125</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v8 == <span class="number">131555431</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v8 != <span class="number">1574041125</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_8228(v12, a3 + <span class="number">16</span> * v11, &amp;a1[<span class="number">16</span> * v11]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _stack_chk_guard - v13;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 首先我们知道，sub_8228是AES的具体运算程序，刚才Hook确认了这一点。而密钥编排一般发生在具 体运算前面，即早于sub_8228。整个函数体内，就只有sub_72BC 一个函数了，那也可能在sub_8B3C外层。更重要的线索是它的参数3，128。AES 存在128&#x2F;192&#x2F;256 三种密钥的规格，这里就是在指定AES的规格，并生成对应的轮密钥。 char v12[280]; v12是一个较大的数组，用于存放生成轮密钥的结果。<br />那么可以大胆猜测sub_8B3C的a2就是十六字节长的AES-128密钥。进而参数1就是 十六字节的输入。  <br />对 sub_8B3C 进行断点查看参数<br /><br> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/19.webp"                                     ><br> <br />密钥是30292827262524232221000000000000，暂时不知道是加密还是解密，结果是 767134374864394a5567664443797443（vq47Hd9JUgfDCytC）<br />看看加密过程对的上吗<br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/20.webp"                                     ><br> <br />因为aes会对明文进行填充，它会自动按照PKCS7约定，再次填充一个分组的长度，输出也是两个分组的结果。  这里结果a7488462036f15054005472d6f487c67才是对的，后面是填充后的分组加密而来的可以不用管<br />跟我们上面的 sub_8B3C 的参数一是一致的，说明 vq47Hd9JUgfDCytC 是由明文a7488462036f15054005472d6f487c67，密钥30292827262524232221000000000000解密而来的</p><p>我们这里做一个讨论，如何从一个小的线索点，分析出AES的全貌。<br />以 sub_72BC(v12, a2, 128); 为例，我们猜测它是密钥编排函数，那么如何快速验证呢？ <br />我Hook 入参时a2指向的十六字节，以及函数结束后v13指向的176字节（因为是AES-128，所以轮密钥 是4*44）。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook72bc</span><span class="params">()</span>&#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x72bc</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        UnidbgPointer v12;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">registerContext</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">a2</span> <span class="operator">=</span> registerContext.getPointerArg(<span class="number">1</span>);</span><br><span class="line">            v12 = registerContext.getPointerArg(<span class="number">0</span>);</span><br><span class="line">            Inspector.inspect(a2.getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;key &quot;</span> + a2.toString());</span><br><span class="line">            <span class="comment">// 函数结束对v12hook查看</span></span><br><span class="line">            emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                    Inspector.inspect(v12.getByteArray(<span class="number">0</span>, <span class="number">176</span>), <span class="string">&quot;Round Key &quot;</span>+v12.toString());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt;-----------------------------------------------------------------------------&lt;</span><br><span class="line">[<span class="number">17</span>:<span class="number">01</span>:<span class="number">35</span> <span class="number">327</span>]key unidbg@<span class="number">0xbffff3d8</span>, md5=037ff8eefc91404afaed9fa22e282e3f, hex=<span class="number">30292827262524232221000000000000</span></span><br><span class="line">size: <span class="number">16</span></span><br><span class="line"><span class="number">0000</span>: <span class="number">30</span> <span class="number">29</span> <span class="number">28</span> <span class="number">27</span> <span class="number">26</span> <span class="number">25</span> <span class="number">24</span> <span class="number">23</span> <span class="number">22</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="number">0</span>)(<span class="string">&#x27;&amp;%$#&quot;!......</span></span><br><span class="line"><span class="string">^-----------------------------------------------------------------------------^</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;-----------------------------------------------------------------------------&lt;</span></span><br><span class="line"><span class="string">[17:01:35 336]Round Key unidbg@0xbffff290, md5=159aaceb29acbcbd8d87b091ce103546, hex=0a00000098f2ffbf30292827262524232221000000000000524a4b44746f6f67564e6f67564e6f677fe2cef50b8da1925dc3cef50b8da19226d081de2d5d204c709eeeb97b134f2b535470ff7e0950b30e97be0a7584f1211cf58d6262fcddd16c6b63db19ef92fae3baa0b681467d67ed2d1ebcf4c28c4686defa090798876eeab599d21e771594f387d87bf41f5f151eaac6c700ddd35329e13518ddfe6a0dc354accac3897f99b833db3665cdb13b</span></span><br><span class="line"><span class="string">size: 176</span></span><br><span class="line"><span class="string">0000: 0A 00 00 00 98 F2 FF BF 30 29 28 27 26 25 24 23    ........0)(&#x27;</span>&amp;%$#</span><br><span class="line"><span class="number">0010</span>: <span class="number">22</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">52</span> 4A 4B <span class="number">44</span> <span class="number">74</span> <span class="number">6F</span> <span class="number">6F</span> <span class="number">67</span>    <span class="string">&quot;!......RJKDtoog</span></span><br><span class="line"><span class="string">0020: 56 4E 6F 67 56 4E 6F 67 7F E2 CE F5 0B 8D A1 92    VNogVNog........</span></span><br><span class="line"><span class="string">0030: 5D C3 CE F5 0B 8D A1 92 26 D0 81 DE 2D 5D 20 4C    ].......&amp;...-] L</span></span><br><span class="line"><span class="string">0040: 70 9E EE B9 7B 13 4F 2B 53 54 70 FF 7E 09 50 B3    p...&#123;.O+STp.~.P.</span></span><br><span class="line"><span class="string">0050: 0E 97 BE 0A 75 84 F1 21 1C F5 8D 62 62 FC DD D1    ....u..!...bb...</span></span><br><span class="line"><span class="string">0060: 6C 6B 63 DB 19 EF 92 FA E3 BA A0 B6 81 46 7D 67    lkc..........F&#125;g</span></span><br><span class="line"><span class="string">0070: ED 2D 1E BC F4 C2 8C 46 86 DE FA 09 07 98 87 6E    .-.....F.......n</span></span><br><span class="line"><span class="string">0080: EA B5 99 D2 1E 77 15 94 F3 87 D8 7B F4 1F 5F 15    .....w.....&#123;.._.</span></span><br><span class="line"><span class="string">0090: 1E AA C6 C7 00 DD D3 53 29 E1 35 18 DD FE 6A 0D    .......S).5...j.</span></span><br><span class="line"><span class="string">00A0: C3 54 AC CA C3 89 7F 99 B8 33 DB 36 65 CD B1 3B    .T.......3.6e..;</span></span><br><span class="line"><span class="string">^-----------------------------------------------------------------------------^</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p> RoundKey 的结果像是一个结构体，两个int组成，第一个是0x0000000a，即代表了AES-128的十轮运 算，第二个是指针，值为0xbffff298，是v12往后偏移八个字节。  <br /> 我们不妨修改一下hook72bc，看一下0xbffff298具体打印什么  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook72bc</span><span class="params">()</span>&#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x72bc</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        UnidbgPointer v12;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">RegisterContext</span> <span class="variable">registerContext</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">            <span class="type">UnidbgPointer</span> <span class="variable">a2</span> <span class="operator">=</span> registerContext.getPointerArg(<span class="number">1</span>);</span><br><span class="line">            v12 = registerContext.getPointerArg(<span class="number">0</span>);</span><br><span class="line">            Inspector.inspect(a2.getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;key &quot;</span> + a2.toString());</span><br><span class="line">            <span class="comment">// 函数结束对v12hook查看</span></span><br><span class="line">            emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                    <span class="comment">//Inspector.inspect(v12.getByteArray(0, 176), &quot;Round Key &quot;+v12.toString());</span></span><br><span class="line">                    Inspector.inspect(v12.getByteArray(<span class="number">8</span>, <span class="number">176</span>), <span class="string">&quot;Round Key &quot;</span>+v12.toString());</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 结果如下  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">17</span>:<span class="number">20</span>:<span class="number">19</span> <span class="number">949</span>]key unidbg@<span class="number">0xbffff3d8</span>, md5=037ff8eefc91404afaed9fa22e282e3f, hex=<span class="number">30292827262524232221000000000000</span></span><br><span class="line">size: <span class="number">16</span></span><br><span class="line"><span class="number">0000</span>: <span class="number">30</span> <span class="number">29</span> <span class="number">28</span> <span class="number">27</span> <span class="number">26</span> <span class="number">25</span> <span class="number">24</span> <span class="number">23</span> <span class="number">22</span> <span class="number">21</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>    <span class="number">0</span>)(<span class="string">&#x27;&amp;%$#&quot;!......</span></span><br><span class="line"><span class="string">^-----------------------------------------------------------------------------^</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt;-----------------------------------------------------------------------------&lt;</span></span><br><span class="line"><span class="string">[17:20:19 957]Round Key unidbg@0xbffff290, md5=1a32868f8f948e426e209b5995588178, hex=30292827262524232221000000000000524a4b44746f6f67564e6f67564e6f677fe2cef50b8da1925dc3cef50b8da19226d081de2d5d204c709eeeb97b134f2b535470ff7e0950b30e97be0a7584f1211cf58d6262fcddd16c6b63db19ef92fae3baa0b681467d67ed2d1ebcf4c28c4686defa090798876eeab599d21e771594f387d87bf41f5f151eaac6c700ddd35329e13518ddfe6a0dc354accac3897f99b833db3665cdb13ba6991df165106268</span></span><br><span class="line"><span class="string">size: 176</span></span><br><span class="line"><span class="string">0000: 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00    0)(&#x27;</span>&amp;%$#<span class="string">&quot;!......</span></span><br><span class="line"><span class="string">0010: 52 4A 4B 44 74 6F 6F 67 56 4E 6F 67 56 4E 6F 67    RJKDtoogVNogVNog</span></span><br><span class="line"><span class="string">0020: 7F E2 CE F5 0B 8D A1 92 5D C3 CE F5 0B 8D A1 92    ........].......</span></span><br><span class="line"><span class="string">0030: 26 D0 81 DE 2D 5D 20 4C 70 9E EE B9 7B 13 4F 2B    &amp;...-] Lp...&#123;.O+</span></span><br><span class="line"><span class="string">0040: 53 54 70 FF 7E 09 50 B3 0E 97 BE 0A 75 84 F1 21    STp.~.P.....u..!</span></span><br><span class="line"><span class="string">0050: 1C F5 8D 62 62 FC DD D1 6C 6B 63 DB 19 EF 92 FA    ...bb...lkc.....</span></span><br><span class="line"><span class="string">0060: E3 BA A0 B6 81 46 7D 67 ED 2D 1E BC F4 C2 8C 46    .....F&#125;g.-.....F</span></span><br><span class="line"><span class="string">0070: 86 DE FA 09 07 98 87 6E EA B5 99 D2 1E 77 15 94    .......n.....w..</span></span><br><span class="line"><span class="string">0080: F3 87 D8 7B F4 1F 5F 15 1E AA C6 C7 00 DD D3 53    ...&#123;.._........S</span></span><br><span class="line"><span class="string">0090: 29 E1 35 18 DD FE 6A 0D C3 54 AC CA C3 89 7F 99    ).5...j..T......</span></span><br><span class="line"><span class="string">00A0: B8 33 DB 36 65 CD B1 3B A6 99 1D F1 65 10 62 68    .3.6e..;....e.bh</span></span><br><span class="line"><span class="string">^-----------------------------------------------------------------------------^</span></span><br></pre></td></tr></table></figure><p> 首先我们就可以确定，这就是密钥编排的结果，这是我们根据AES-128的编排性质推断出来的。 </p><ul><li>轮密钥的前十六个字节就是主密钥，完全符合 </li><li>十六个字节后面的编排规则，以行为单位看的话，前四个字节较为复杂，后十二字节只是简单异 或。如下验证</li></ul><p>密钥 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00<br />按照密钥的编排 4个字节一组<br />W0 30 29 28 27<br />W1 26 25 24 23<br />W2 22 21 00 00<br />W3 00 00 00 00<br />根据结果我们也可以看出<br />W4 &#x3D; 52 4A 4B 44<br />W5 &#x3D; 74 6F 6F 67<br />验证可以得到 W4 xor W1 &#x3D; W5</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\zsk&gt;python</span><br><span class="line">Python <span class="number">3.8</span><span class="number">.10</span> (tags/v3<span class="number">.8</span><span class="number">.10</span>:3d8993a, May  <span class="number">3</span> <span class="number">2021</span>, <span class="number">11</span>:<span class="number">48</span>:<span class="number">03</span>) [MSC v<span class="number">.1928</span> <span class="number">64</span> bit (AMD64)] on win32</span><br><span class="line">Type <span class="string">&quot;help&quot;</span>, <span class="string">&quot;copyright&quot;</span>, <span class="string">&quot;credits&quot;</span> or <span class="string">&quot;license&quot;</span> <span class="keyword">for</span> more information.</span><br><span class="line">&gt;&gt;&gt; hex(<span class="number">0x524A4B44</span>^<span class="number">0x26252423</span>)</span><br><span class="line"><span class="string">&#x27;0x746f6f67&#x27;</span></span><br></pre></td></tr></table></figure><p> 确实符合编排的规律。  <br /><br><strong><font color="red">因此可以认定 72bc 就是密钥编排函数，并确定了密钥。怎么仅从这个线索，推出输入呢？</strong></font></p><ul><li><strong><font color="red">如果是加密，那么对K0做traceRead可以定位到算法的输入，对K10做traceRead，其运算结果就是算法 的输出。</strong></font></li><li><strong><font color="red">如果是解密，那么对K0做traceRead可以定位算法的输出，对K10做traceRead，其运算结果就是算法的 输入。</strong></font></li></ul><p><strong><font color="red">换个情况，如果只知道算法的输入，该怎么确认密钥呢？</strong></font></p><ul><li><strong><font color="red">如果是加密，那么对算法的输入做traceRead，可以定位到K0，在AES-128上意味着主密钥；</strong></font></li><li><strong><font color="red">如果是CBC 模式，那么定位到IV。 如果是解密，那么对算法的输入做traceRead，可以定位到K10，使用stark 逆推主密钥。</strong></font></li></ul><p><strong><font color="red">再换个情况，如果只知道算法的输出，该怎么确认其他要素？</strong></font></p><ul><li><strong><font color="red">如果是加密过程，对算法的输出做traceWrite，运算的双方中有一方是K10。</strong></font> </li><li><strong><font color="red">如果是解密过程，对算法的输出做traceWrite，运算的双方中有一方是K0。</strong></font></li></ul><p>下面考虑Key和密文哪里来的 在sub_8B3C打断点，查看堆栈，发现都位于 sub_A298  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> __fastcall <span class="title">sub_A298</span><span class="params">(<span class="type">void</span> *a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> v1; <span class="comment">// r9</span></span><br><span class="line">    <span class="type">int</span> v3; <span class="comment">// r11</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// r0</span></span><br><span class="line">    <span class="type">int</span> v6; <span class="comment">// [sp+0h] [bp-78h]</span></span><br><span class="line">    <span class="type">int</span> v7; <span class="comment">// [sp+4h] [bp-74h]</span></span><br><span class="line">    _QWORD v8[<span class="number">2</span>]; <span class="comment">// [sp+8h] [bp-70h] BYREF</span></span><br><span class="line">    <span class="type">char</span> v9[<span class="number">20</span>]; <span class="comment">// [sp+18h] [bp-60h] BYREF</span></span><br><span class="line">    _QWORD v10[<span class="number">2</span>]; <span class="comment">// [sp+30h] [bp-48h] BYREF</span></span><br><span class="line">    <span class="type">char</span> v11[<span class="number">20</span>]; <span class="comment">// [sp+40h] [bp-38h] BYREF</span></span><br><span class="line">    <span class="type">int</span> v12; <span class="comment">// [sp+58h] [bp-20h]</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">0</span>;</span><br><span class="line">    v10[<span class="number">0</span>] = unk_45688;</span><br><span class="line">    v10[<span class="number">1</span>] = unk_45690;</span><br><span class="line">    <span class="built_in">strcpy</span>(v11, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">    v8[<span class="number">0</span>] = unk_45CF0;</span><br><span class="line">    v8[<span class="number">1</span>] = unk_45CF8;</span><br><span class="line">    <span class="built_in">strcpy</span>(v9, <span class="string">&quot;                &quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(a1, <span class="number">0</span>, <span class="number">0x100</span>u);</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">1282341844</span>; ; i = <span class="number">1282341844</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> ( i != <span class="number">967467364</span> )</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ( i == <span class="number">1282341844</span> )</span><br><span class="line">                    &#123;</span><br><span class="line">                        v6 = v3;</span><br><span class="line">                        i = <span class="number">1618205161</span>;</span><br><span class="line">                        <span class="keyword">if</span> ( v3 &lt; <span class="number">32</span> )</span><br><span class="line">                            i = <span class="number">-1314423687</span>;</span><br><span class="line">                        <span class="keyword">if</span> ( i &lt;= <span class="number">967467363</span> )</span><br><span class="line">                            <span class="keyword">goto</span> LABEL_15;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        v1 = <span class="number">0</span>;</span><br><span class="line">                        LABEL_14:</span><br><span class="line">                        i = <span class="number">967467364</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            v7 = v1;</span><br><span class="line">            i = <span class="number">-688078044</span>;</span><br><span class="line">            <span class="keyword">if</span> ( v1 &lt; <span class="number">32</span> )</span><br><span class="line">                i = <span class="number">-1194610101</span>;</span><br><span class="line">            LABEL_15:</span><br><span class="line">            <span class="keyword">if</span> ( i != <span class="number">-1314423687</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            *((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; <span class="number">0x8E</span> | ~*((_BYTE *)v8 + v6) &amp; <span class="number">0x71</span>) ^ <span class="number">0x51</span>;</span><br><span class="line">            v3 = v6 + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span> ( i == <span class="number">-1194610101</span> )</span><br><span class="line">    &#123;</span><br><span class="line">        *((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; <span class="number">0xE9</span> | *((_BYTE *)v10 + v7) &amp; <span class="number">0x16</span>) ^ <span class="number">0xC9</span>;</span><br><span class="line">        v1 = v7 + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_14;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sub_8B3C</span>((<span class="type">const</span> <span class="type">char</span> *)v10, (<span class="type">int</span>)v8, (<span class="type">int</span>)a1);</span><br><span class="line">    <span class="keyword">return</span> _stack_chk_guard - v12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其中v10 ， 前八个字节来自0x45688，后八个字节来自0x45690。因为这两个八字节是紧连着的，所以可 以一并看。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.rodata:<span class="number">00045688</span> <span class="number">87</span>                            unk_45688 DCB <span class="number">0x87</span>                      ; DATA XREF: sub_A298+E↑o</span><br><span class="line">.rodata:<span class="number">00045688</span>                                                                       ; sub_A298+<span class="number">18</span>↑o</span><br><span class="line">.rodata:<span class="number">00045688</span>                                                                       ; .text:off_A424↑o</span><br><span class="line">.rodata:<span class="number">00045689</span> <span class="number">68</span>                            DCB <span class="number">0x68</span> ; h</span><br><span class="line">.rodata:<span class="number">0004568</span>A A4                            DCB <span class="number">0xA4</span></span><br><span class="line">.rodata:<span class="number">0004568B</span> <span class="number">42</span>                            DCB <span class="number">0x42</span> ; B</span><br><span class="line">.rodata:<span class="number">0004568</span>C <span class="number">23</span>                            DCB <span class="number">0x23</span> ; #</span><br><span class="line">.rodata:<span class="number">0004568</span>D <span class="number">4F</span>                            DCB <span class="number">0x4F</span> ; O</span><br><span class="line">.rodata:<span class="number">0004568</span>E <span class="number">35</span>                            DCB <span class="number">0x35</span> ; <span class="number">5</span></span><br><span class="line">.rodata:<span class="number">0004568F</span> <span class="number">25</span>                            DCB <span class="number">0x25</span> ; %</span><br><span class="line">.rodata:<span class="number">00045690</span> <span class="number">60</span>                            unk_45690 DCB <span class="number">0x60</span> ; `</span><br><span class="line">.rodata:<span class="number">00045691</span> <span class="number">25</span>                            DCB <span class="number">0x25</span> ; %</span><br><span class="line">.rodata:<span class="number">00045692</span> <span class="number">67</span>                            DCB <span class="number">0x67</span> ; g</span><br><span class="line">.rodata:<span class="number">00045693</span> <span class="number">0</span>D                            DCB  <span class="number">0xD</span></span><br><span class="line">.rodata:<span class="number">00045694</span> <span class="number">4F</span>                            DCB <span class="number">0x4F</span> ; O</span><br><span class="line">.rodata:<span class="number">00045695</span> <span class="number">68</span>                            DCB <span class="number">0x68</span> ; h</span><br><span class="line">.rodata:<span class="number">00045696</span> <span class="number">5</span>C                            DCB <span class="number">0x5C</span> ; \</span><br><span class="line">.rodata:<span class="number">00045697</span> <span class="number">47</span>                            DCB <span class="number">0x47</span> ; G</span><br></pre></td></tr></table></figure><p> 在逐字节经过如下处理后成为我们的密文  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; <span class="number">0xE9</span> | *((_BYTE *)v10 + v7) &amp; <span class="number">0x16</span>) ^ <span class="number">0xC9</span>;</span><br></pre></td></tr></table></figure><p> <br />而密钥也一样，前八个字节来自0x45CF0，后八个字节来自0x45CF8。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.rodata:<span class="number">00045</span>CF0 <span class="number">10</span>                            unk_45CF0 DCB <span class="number">0x10</span>                      ; DATA XREF: sub_A298+<span class="number">24</span>↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A298+<span class="number">2</span>C↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_A428↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A430+<span class="number">50</span>↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A430+<span class="number">5</span>E↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_A5D0↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A5D8+<span class="number">4</span>E↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A5D8+<span class="number">5</span>C↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_A770↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A778+<span class="number">4</span>E↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A778+<span class="number">5</span>C↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_A910↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A918+<span class="number">50</span>↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; sub_A918+<span class="number">5</span>E↑o</span><br><span class="line">.rodata:<span class="number">00045</span>CF0                                                                       ; .text:off_AAA4↑o ...</span><br><span class="line">.rodata:<span class="number">00045</span>CF1 <span class="number">09</span>                            DCB    <span class="number">9</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF2 <span class="number">08</span>                            DCB    <span class="number">8</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF3 <span class="number">07</span>                            DCB    <span class="number">7</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF4 <span class="number">06</span>                            DCB    <span class="number">6</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF5 <span class="number">05</span>                            DCB    <span class="number">5</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF6 <span class="number">04</span>                            DCB    <span class="number">4</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF7 <span class="number">03</span>                            DCB    <span class="number">3</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF8 <span class="number">02</span>                            unk_45CF8 DCB    <span class="number">2</span></span><br><span class="line">.rodata:<span class="number">00045</span>CF9 <span class="number">01</span>                            DCB    <span class="number">1</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFA <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFB <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFC <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFD <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFE <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br><span class="line">.rodata:<span class="number">00045</span>CFF <span class="number">20</span>                            DCB <span class="number">0x20</span></span><br></pre></td></tr></table></figure><p> 它经过了如下逐字节的处理  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; <span class="number">0x8E</span> | ~*((_BYTE *)v8 + v6) &amp; <span class="number">0x71</span>) ^ <span class="number">0x51</span>;</span><br></pre></td></tr></table></figure><p> 看起来有些云里雾里的，这是Ollvm中指令替换的功劳。  <br /> 真正功能上而言，只是SO中硬编码的两串十六进制字节，在异或0x20后，就成为了密文和Key，在运行 时AES解密出明文，作为MD5的盐。  <br /> 我们以Key为例，它的完整流程如下（下面均为十六进制字节）  <br /> 首先，Key是 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00，开发者不希望硬编码在SO里，所以先 将它异或0x20，在SO中硬编码即 10 09 08 07 06 05 04 03 02 01 20 20 20 20 20 20。  <br /> 然后在使用时，将这么一串异或0x20，因为异或两次等于自身，所以Key重新变成30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00，正常参与运算。  </p><p> 那么下面这两种运算，其功能都等价于单字节异或0x20，怎么变成这个样子了呢？  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; <span class="number">0xE9</span> | *((_BYTE *)v10 + v7) &amp; <span class="number">0x16</span>) ^ <span class="number">0xC9</span>;</span><br><span class="line">*((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; <span class="number">0x8E</span> | ~*((_BYTE *)v8 + v6) &amp; <span class="number">0x71</span>) ^ <span class="number">0x51</span>;</span><br></pre></td></tr></table></figure><p> <br />这就是指令替换的目的，将简单的加减乘除、异或、与等运算，替换成等价但更复杂的指令序列。  <br />演示一下这个过程 <br />S &#x3D; A ^ B <br />异或0不影响结果 <br />S &#x3D; A ^ B ^ 0 <br />0可以展开成C ^ C <br />S &#x3D; A ^ B ^ C ^ C <br />做一下简单的分配 <br />S &#x3D; (A^C)^(B^C) <br />两数异或时可以等价替换如下，可以自行验证。  <br /> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a ^ b =&gt; (~a &amp; b) | (a &amp; ~b) </span><br></pre></td></tr></table></figure><p>那么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S = (~A &amp; C) | (A &amp; ~C) ^ (~B &amp; C) | (B &amp; ~C)</span><br></pre></td></tr></table></figure><br />   回到 S = A ^ B，假设A 就是我们的待处理数据，B是0x20，即将数据和0x20异或，我们再选择C为0xE9  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S = (~A &amp; 0xE9) | (A &amp; ~0xE9) ^ (~0x20 &amp; 0xE9) | (0x20 &amp; ~0xE9)</span><br></pre></td></tr></table></figure><p> <br /> 0xE9 在取反后即 0x16，而异或的另外一方，因为不存在未知数，编译器会直接优化计算出结果  <br /></p><p> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20230109/21.webp"                                     ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">S = (~A &amp; 0xE9) | (A &amp; 0xE9) ^ 0xC9</span><br></pre></td></tr></table></figure><p>  <br /> A 代入 *((_BYTE *)v10 + v7) 不就是 <br /></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; 0xE9) | (*((_BYTE *)v10 + v7) &amp; 0xE9) ^ 0xC9</span><br></pre></td></tr></table></figure><p>A 代入 *((_BYTE *)v8 + v6) ，C 为0x71时，就是 另一个式子。 <br />本质上，两者都是逐字节与0x20异或。  </p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.douyu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.AndroidEmulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.Module;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.Backend;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.CodeHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.backend.UnHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.context.RegisterContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.debugger.BreakPointCallback;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidEmulatorBuilder;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.AndroidResolver;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.*;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.linux.android.dvm.array.ArrayObject;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.Memory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.utils.Inspector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DouYu</span> <span class="keyword">extends</span> <span class="title class_">AbstractJni</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AndroidEmulator emulator;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> VM vm;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Module <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DouYu</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator = AndroidEmulatorBuilder.for32Bit().build();</span><br><span class="line">        <span class="type">Memory</span> <span class="variable">memory</span> <span class="operator">=</span> emulator.getMemory();</span><br><span class="line">        memory.setLibraryResolver(<span class="keyword">new</span> <span class="title class_">AndroidResolver</span>(<span class="number">23</span>));</span><br><span class="line">        vm = emulator.createDalvikVM(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;</span>));</span><br><span class="line">        vm.setVerbose(<span class="literal">true</span>);</span><br><span class="line">        vm.setJni(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm_shared</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        dm_shared.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">        <span class="type">DalvikModule</span> <span class="variable">dm</span> <span class="operator">=</span> vm.loadLibrary(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">module</span> = dm.getModule();</span><br><span class="line">        dm.callJNI_OnLoad(emulator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// NewStringUTF断点</span></span><br><span class="line">        <span class="comment">//emulator.attach().addBreakPoint(module.base + 0x336c);</span></span><br><span class="line">        <span class="comment">// 监控地址写入, auth的32个字节所处的地址， 401d20a0 + len(aid=android1&amp;client_sys=android&amp;time=1638452332&amp;auth=)</span></span><br><span class="line">        <span class="comment">//emulator.traceWrite(0x401D20D5, 0x401D20D5+0x20);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 监控strcat函数，看结果是在哪里写入的</span></span><br><span class="line">        <span class="comment">//emulator.traceWrite(0xbffff69bL, 0xbffff69bL+0x20);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对 vq47Hd9JUgfDCytC 做traceWrite</span></span><br><span class="line">        <span class="comment">//emulator.traceWrite(0xbffff500L, 0xbffff69bL+0x20);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对 vq47Hd9JUgfDCytC 出现的位置函数 sub_8228(unsigned __int64 a1, _QWORD *a2) 进行断点</span></span><br><span class="line">        <span class="comment">//emulator.attach().addBreakPoint(module.base + 0x8228);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对调用生成 vq47Hd9JUgfDCytC 函数的上一级断点</span></span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x8B3C</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMakeUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// args list</span></span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">10</span>);</span><br><span class="line">        <span class="comment">// arg1 env</span></span><br><span class="line">        list.add(vm.getJNIEnv());</span><br><span class="line">        <span class="comment">// arg2 jobject/jclazz 一般用不到，直接填0</span></span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        DvmObject&lt;?&gt; context = vm.resolveClass(<span class="string">&quot;android/content/Context&quot;</span>).newObject(<span class="literal">null</span>);</span><br><span class="line">        list.add(vm.addLocalObject(context));</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;aid&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;client_sys&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input3_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;time&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input3_1);</span><br><span class="line">        vm.addLocalObject(input3_2);</span><br><span class="line">        vm.addLocalObject(input3_3);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input3_1, input3_2, input3_3)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;android1&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;android&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input4_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;1673232015&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input4_1);</span><br><span class="line">        vm.addLocalObject(input4_2);</span><br><span class="line">        vm.addLocalObject(input4_3);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input4_1, input4_2, input4_3)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_11</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_12</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input5_13</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input5_1);</span><br><span class="line">        vm.addLocalObject(input5_2);</span><br><span class="line">        vm.addLocalObject(input5_3);</span><br><span class="line">        vm.addLocalObject(input5_4);</span><br><span class="line">        vm.addLocalObject(input5_5);</span><br><span class="line">        vm.addLocalObject(input5_6);</span><br><span class="line">        vm.addLocalObject(input5_7);</span><br><span class="line">        vm.addLocalObject(input5_8);</span><br><span class="line">        vm.addLocalObject(input5_9);</span><br><span class="line">        vm.addLocalObject(input5_10);</span><br><span class="line">        vm.addLocalObject(input5_11);</span><br><span class="line">        vm.addLocalObject(input5_12);</span><br><span class="line">        vm.addLocalObject(input5_13);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input5_1, input5_2, input5_3,input5_4, input5_5, input5_6,input5_7, input5_8, input5_9,input5_10, input5_11, input5_12,input5_13)));</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_7</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_8</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_9</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">StringObject</span> <span class="variable">input6_10</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringObject</span>(vm, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        vm.addLocalObject(input6_1);</span><br><span class="line">        vm.addLocalObject(input6_2);</span><br><span class="line">        vm.addLocalObject(input6_3);</span><br><span class="line">        vm.addLocalObject(input6_4);</span><br><span class="line">        vm.addLocalObject(input6_5);</span><br><span class="line">        vm.addLocalObject(input6_6);</span><br><span class="line">        vm.addLocalObject(input6_7);</span><br><span class="line">        vm.addLocalObject(input6_8);</span><br><span class="line">        vm.addLocalObject(input6_9);</span><br><span class="line">        vm.addLocalObject(input6_10);</span><br><span class="line">        list.add(vm.addLocalObject(<span class="keyword">new</span> <span class="title class_">ArrayObject</span>(input6_1, input6_2, input6_3,input6_4, input6_5, input6_6,input6_7, input6_8, input6_9,input6_10)));</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 参数准备完成</span></span><br><span class="line">        <span class="comment">// call function</span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">number</span> <span class="operator">=</span> <span class="keyword">module</span>.callFunction(emulator, <span class="number">0x2f91</span>, list.toArray());</span><br><span class="line">        <span class="keyword">return</span> vm.getObject(number.intValue()).getValue().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">traceLength</span><span class="params">()</span> &#123;</span><br><span class="line">        emulator.getBackend().hook_add_new(<span class="keyword">new</span> <span class="title class_">CodeHook</span>() &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook</span><span class="params">(Backend backend, <span class="type">long</span> address, <span class="type">int</span> size, Object user)</span> &#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">                System.out.println(count);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onAttach</span><span class="params">(UnHook unHook)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">()</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="keyword">module</span>.base, <span class="keyword">module</span>.size + <span class="keyword">module</span>.base, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookStrCat</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;strcat&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                <span class="type">UnidbgPointer</span> <span class="variable">r1</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">1</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;strcat:&quot;</span>+ r1);</span><br><span class="line">                System.out.println(r1.getString(<span class="number">0</span>));</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookMemcpy</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;memcpy&quot;</span>, <span class="literal">true</span>).getAddress(), <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                <span class="type">UnidbgPointer</span> <span class="variable">r1</span> <span class="operator">=</span> emulator.getContext().getPointerArg(<span class="number">1</span>);</span><br><span class="line">                <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> emulator.getContext().getIntArg(<span class="number">2</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;memcpy&quot;</span>);</span><br><span class="line">                Inspector.inspect(r1.getByteArray(<span class="number">0</span>, length), r1.toString());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hook72bc</span><span class="params">()</span>&#123;</span><br><span class="line">        emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x72bc</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">            UnidbgPointer v12;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                <span class="type">RegisterContext</span> <span class="variable">registerContext</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">                <span class="type">UnidbgPointer</span> <span class="variable">a2</span> <span class="operator">=</span> registerContext.getPointerArg(<span class="number">1</span>);</span><br><span class="line">                v12 = registerContext.getPointerArg(<span class="number">0</span>);</span><br><span class="line">                Inspector.inspect(a2.getByteArray(<span class="number">0</span>, <span class="number">0x10</span>), <span class="string">&quot;key &quot;</span> + a2.toString());</span><br><span class="line">                <span class="comment">// 函数结束对v12hook查看</span></span><br><span class="line">                emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">                        <span class="comment">//Inspector.inspect(v12.getByteArray(0, 176), &quot;Round Key &quot;+v12.toString());</span></span><br><span class="line">                        Inspector.inspect(v12.getByteArray(<span class="number">8</span>, <span class="number">176</span>), <span class="string">&quot;Round Key &quot;</span>+v12.toString());</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DouYu</span> <span class="variable">douYu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DouYu</span>();</span><br><span class="line">        <span class="comment">//douYu.traceLength();</span></span><br><span class="line">        <span class="comment">//douYu.hookStrCat();</span></span><br><span class="line">        <span class="comment">//douYu.hookMemcpy();</span></span><br><span class="line">        <span class="comment">//douYu.hook72bc();</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">makeUrl</span> <span class="operator">=</span> douYu.getMakeUrl();</span><br><span class="line">        System.out.println(<span class="string">&quot;result:&quot;</span>+ makeUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     alt=&quot;image&quot;
                     data-src=&quot;https://jsd.cdn.zzko.cn/gh/Zskkk/blo</summary>
      
    
    
    
    
    <category term="安卓逆向" scheme="https://www.zskkk.cn/tags/%E5%AE%89%E5%8D%93%E9%80%86%E5%90%91/"/>
    
    <category term="Unidbg" scheme="https://www.zskkk.cn/tags/Unidbg/"/>
    
  </entry>
  
  <entry>
    <title>对称加密算法AES的原理及分析</title>
    <link href="https://www.zskkk.cn/posts/57259/"/>
    <id>https://www.zskkk.cn/posts/57259/</id>
    <published>2022-12-27T15:14:10.000Z</published>
    <updated>2022-12-27T15:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/000.webp"></p><h2 id="AES算法简述"><a href="#AES算法简述" class="headerlink" title="AES算法简述"></a>AES算法简述</h2><p><strong>分组加密有几种方式分别是：</strong><br></p><p>ECB：是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。<font color="red">将整个明文分成若干段相同的小段，然后对每一小段进行加密</font><br>00112233445566778899aabbccddee 还差2位hex（1个字节），填充01：00112233445566778899aabbccddee01<br>00112233445566778899aabbccddeeff 等于128比特，需要填充一整个分组：00112233445566778899aabbccddeeff(hex)==&gt; 00112233445566778899aabbccddeeff10101010101010101010101010101010<br>最少填充一字节，最多填充一整个分组，不能不填充。<br></p><p>CBC：是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。<font color="red">先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密</font><br></p><p>CFB/OFB实际上是一种反馈模式，目的也是增强破解的难度。<font color="red">密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。</font><br></p><p>ECB和CBC的加密结果是不一样的，两者的模式不同，而且CBC会在第一个密码块运算时加入一个初始化向量。</p><br>AES-128接收16字节的明文输入，16字节的密钥，输出16字节的密文结果。<br><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/01.webp"></p><p>入参：<br>明文：128比特（32个十六进制数、16个字节）<br>KEY：128比特（32十六进制数、16个字节）<br>出参：128比特（32个十六进制数、16个字节）</p><p>明文：7a68656e677368616f6b756e79796473（hex）<br>密钥：0123456789abcdef0123456789abcdef（hex）</p><p>下方是整体流程图：<br><br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/02.webp"></p><p>首先看整体的流程图，我们发现，AES的整体图景可以分成左右两块，即明文的处理和密钥的编排。明文的处理主体是一个初始化轮密钥加和十轮运算，在初始化轮密钥加十轮运算中都需要使用密钥编排的结果。密钥编排将16个字节经过运算推演出11组轮密钥，每一组16个字节，称之为K0,K1,K2…K10<br><br></p><h2 id="密钥编排"><a href="#密钥编排" class="headerlink" title="密钥编排"></a>密钥编排</h2><p>下面我们看一下密钥扩展是如何算出来的，这是我们的密钥Key <strong>0123456789abcdef0123456789abcdef</strong>。为了区分密钥和密钥编排后的轮密钥，我们将此时的密钥叫主密钥。</p><p>在AES-128中，密钥扩展后得16*11共176字节，使用时<strong>逐十六个字节</strong>划分成K0,K1,…K10使用，但是在生成时，它是<strong>逐四个字节</strong>生成的，即44*4。我们不妨用数组来描述它，即一个包含了44个元素的数组,叫W。</p><p>这四十四个元素的生成规则有三种，如下图所示：</p><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/03.webp"></p><p>不同颜色代表了不同规则。最上方的W0,W1,W2,W3 就是主密钥本身切成四段。<br>Key = 0123456789abcdef0123456789abcdef<br>W0 = 01234567<br>W1 = 89abcdef<br>W2 = 01234567<br>W3 = 89abcdef</p><p>左侧的红色部分，W4,W8,W12,….W40的生成复杂一点。<br>Wn=g(Wn−1) xor Wn−4<br>xor 是异或运算，比如 W4=g(W3) xor W0。g(当前元素前面那个元素) 异或 当前元素头顶上那个元素。</p><p><strong><font color="red">那么关键点就是这个 g 函数了， g 函数一共三个步骤——循环左移、S盒替换、字节异或。</font></strong> 我们以W4运算中所需的W3为例。<br>W3=89abcdef</p><h3 id="g函数——循环左移、S盒替换、字节异或"><a href="#g函数——循环左移、S盒替换、字节异或" class="headerlink" title="g函数——循环左移、S盒替换、字节异或"></a>g函数——循环左移、S盒替换、字节异或</h3><h4 id="循环左移"><a href="#循环左移" class="headerlink" title="循环左移"></a>循环左移</h4><p>首先是循环左移，规则固定—— <strong><font color="red">将最左边的一个字节挪到右边即可</font></strong> <br></p><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/04.webp"></p><p><br>循环左移后为 <strong>abcdef89</strong></p><h4 id="S盒替换"><a href="#S盒替换" class="headerlink" title="S盒替换"></a>S盒替换</h4><p>第二步是S盒替换，S盒替换听着很高级，但操作上很简单——将数值本身作为索引取出S数组中对用的值。S盒是固定的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SBox = [</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">num = <span class="number">0xab</span></span><br><span class="line">result = SBox[num]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(result))</span><br><span class="line"><span class="comment"># 0x62</span></span><br></pre></td></tr></table></figure><p>S盒的背后有十分复杂的知识，但好在我们并不需要去了解。<br><br><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/05.webp"></p><p><br><strong>AB CD EF 89</strong> 经过S盒替换后为 <strong>62 BD DF A7</strong></p><h4 id="最高字节和一个固定常量异或"><a href="#最高字节和一个固定常量异或" class="headerlink" title="最高字节和一个固定常量异或"></a>最高字节和一个固定常量异或</h4><p>最后一个步骤更简单，将上一步结果中的最高字节和一个固定常量异或。W4的生成是第一个，用如下rcon表的第一个元素0x1。W40即第十次，用最后一个元素0x36.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rcon = [<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>]</span><br><span class="line"><span class="comment">#        W4    W8    W12   W16   W20   W24   W28   W32   W36   W40</span></span><br></pre></td></tr></table></figure><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/06.webp"></p><p><br><strong>62 BD DF A7 <strong>最高位62与rcon第一个元素，即0x01异或后为：</strong>63 BD DF A7</strong> <br>W4 = g(W3) xor W0<br>   = g(0x89abcdef) xor 0x01234567<br>   = 0x63BDDFA7 xor 0x01234567<br>   = 0x629e9ac0<br>最后一步可以直接用python算: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">0x63BDDFA7</span> ^ <span class="number">0x01234567</span>))</span><br></pre></td></tr></table></figure><p>上图中蓝色和红色的部分都讲完了，那么橙色部分呢？相当的简单，和红色部分类似，去掉g函数即可<br><em><strong>Wn=Wn−1 xor Wn−4</strong></em><br>打个比方，<em>W5 = W4 ^ W1</em> = 0x629e9ac0 ^ 0x89abcdef = 0xeb35572f<br> <br>如下是完整的密钥编排部分的Python代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">Sbox = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Rcon = (<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shiftRound</span>(<span class="params">array, num</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param array: 需要循环左移的数组</span></span><br><span class="line"><span class="string">    :param num: 循环左移的位数</span></span><br><span class="line"><span class="string">    :return: 使用Python切片，返回循环左移num个单位的array</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> array[num:] + array[:num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">array, index</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    g 函数</span></span><br><span class="line"><span class="string">    :param array: 待处理的四字节数组</span></span><br><span class="line"><span class="string">    :index:从1-10，每次使用Rcon中不同的数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 首先循环左移1位</span></span><br><span class="line">    array = shiftRound(array, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 字节替换</span></span><br><span class="line">    array = [Sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> array]</span><br><span class="line">    <span class="comment"># 首字节和rcon中对应元素异或</span></span><br><span class="line">    array = [(Rcon[index] ^ array[<span class="number">0</span>])] + array[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorTwoArray</span>(<span class="params">array1, array2</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    返回两个数组逐元素异或的新数组</span></span><br><span class="line"><span class="string">    :param array1: 一个array</span></span><br><span class="line"><span class="string">    :param array2: 另一个array</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(array1) == <span class="built_in">len</span>(array2)</span><br><span class="line">    <span class="keyword">return</span> [array1[i] ^ array2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array1))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showRoundKeys</span>(<span class="params">kList</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(kList)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"K%02d:"</span> %i +<span class="string">""</span>.join(<span class="string">"%02x"</span> % k <span class="keyword">for</span> k <span class="keyword">in</span> kList[i]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keyExpand</span>(<span class="params">key</span>):</span><br><span class="line">    master_key = text2matrix(key)</span><br><span class="line">    round_keys = [[<span class="number">0</span>] * <span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">44</span>)]</span><br><span class="line">    <span class="comment"># 规则一(图中红色部分)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        round_keys[i] = master_key[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">4</span> * <span class="number">11</span>):</span><br><span class="line">        <span class="comment"># 规则二(图中红色部分)</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(g(round_keys[i - <span class="number">1</span>], i // <span class="number">4</span>), round_keys[i - <span class="number">4</span>])</span><br><span class="line">        <span class="comment"># 规则三(图中橙色部分)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(round_keys[i - <span class="number">1</span>], round_keys[i - <span class="number">4</span>])</span><br><span class="line">    <span class="comment"># 将轮密钥从44*4转成11*16,方便后面在明文的运算里使用</span></span><br><span class="line">    kList = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(round_keys)):</span><br><span class="line">        kList[i//<span class="number">4</span>] += round_keys[i]</span><br><span class="line"></span><br><span class="line">    showRoundKeys(kList)</span><br><span class="line">    <span class="keyword">return</span> kList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_bytes = <span class="number">0x00112233445566778899aabbccddeeff</span></span><br><span class="line">key = <span class="number">0x2b7e151628aed2a6abf7158809cf4f3c</span></span><br><span class="line">kList = keyExpand(key)</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">K00:0123456789abcdef0123456789abcdef</span><br><span class="line">K01:629e9ac0eb35572fea16124863bddfa7</span><br><span class="line">K02:1a00c63bf13591141b23835c789e5cfb</span><br><span class="line">K03:154ac987e47f5893ff5cdbcf87c28734</span><br><span class="line">K04:385dd190dc228903237e52cca4bcd5f8</span><br><span class="line">K05:4d5e90d9917c19dab2024b1616be9eee</span><br><span class="line">K06:c355b89e5229a144e02bea52f69574bc</span><br><span class="line">K07:a9c7dddcfbee7c981bc596caed50e276</span><br><span class="line">K08:7a5fe58981b199119a740fdb7724edad</span><br><span class="line">K09:570a707cd6bbe96d4ccfe6b63beb0b1b</span><br><span class="line">K10:8821df9e5e9a36f31255d04529bedb5e</span><br></pre></td></tr></table></figure><p>我们对AES密钥编排部分的学习就基本完成了。</p><h2 id="明文运算"><a href="#明文运算" class="headerlink" title="明文运算"></a>明文运算</h2><p>现在开始学习明文的运算，即图中左边的部分。首先，我们要调整明文的格式，在AES中，数据以state的形式计算、中间存储和传输，中文名即<strong>状态</strong>。<br>从明文转到state形式很简单，以我们的明文<strong>7a68656e677368616f6b756e79796473</strong>为例。从上到下，从左到右。千万不要颠倒顺序，第一行不是“7a 68 65 6e”。除此之外，<strong>state中的数，我们一般用十六进制表示，且不加0x前缀，这样看着比较舒服。除非特意强调是十进制，否则下文均为十六进制。</strong><br></p><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/07.webp"></p><p><br>接下来是轮密钥加步骤，因为是第一次轮密钥加步骤，所以也叫初始轮密钥加。轮密钥加步骤听着很怪，但实质很简单。只需要将对应的轮密钥和 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>  一样从上到下，从左到右排列。两个矩阵逐字节异或，这就是轮密钥加步骤。为什么要叫轮密钥加而不是轮密钥异或？我们卖个关子，后面再说。<br>初始的轮密钥加使用 K0 ，0123456789abcdef0123456789abcdef。<br></p><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/08.webp"></p><p><br>接下来就是十轮主运算，看如下的伪代码，我们可以清楚看到一轮运算中有什么，以及第十轮和前九轮有什么区别。<br></p><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/09.webp"></p><p><br>初始的明文转<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>和最后的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>转明文自不必说，然后是初始轮密钥，使用 K0 。<br>前九轮运算中，包含四个步骤： <strong><font color="red">字节替换，循环左移，列混淆，轮密钥加。</font></strong> <br>第十轮中，包含三个步骤：字节替换，循环左移，轮密钥加。相比前九轮缺一个列混淆，其余相同。<br>十轮运算中的轮密钥加，和初始轮密钥加相比，除了使用的轮密钥不同外，并无不同，分别为K1…..K10。<br>而 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.482ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4191 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1217,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1646,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(2405,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2895,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3256,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3722,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container> <strong>字节替换步骤，和密钥编排中的S盒替换完全一致。</strong><br> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="9.482ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 4191 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(645,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(1217,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(1646,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(2405,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(2895,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(3256,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(3722,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container> 即循环左移，和密钥编排中的循环左移类似，但有差异。密钥编排中， g 函数中也需循环左移，但其中待处理的数据仅有一行，而明文编排中 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container> 是四行。<br>其循环左移规则如下：<strong>第一行不循环左移，第二行循环左移1字节，第三行循环左移2字节，第四行循环左移3字节。</strong></p><p><img lazyload="" alt="image" data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221227/10.webp"></p><p><br>相对复杂的是列混淆步骤，列混淆步骤涉及两块知识，1是矩阵乘法，2是伽罗瓦域的加法和乘法。前者还好，后者属于抽象代数的内容，比较复杂。<br>先看第一块——矩阵乘法。首先演示简单的矩阵相乘，<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="29.02ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 12827 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g><g data-mml-node="mo" transform="translate(3722.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mrow" transform="translate(4444.4,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g><g data-mml-node="mo" transform="translate(8222.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(9278,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mtd" transform="translate(1574.5,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(48,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g><g data-mml-node="mtd" transform="translate(1529,0)"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2799,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g></g></g></svg></mjx-container><br>左边准备相乘的两个矩阵，我们称它俩为矩阵A和矩阵B，如何求结果矩阵中的abcd ？规则如下：第m行第n列的值等于<strong>矩阵</strong>A的第m行的元素与<strong>矩阵</strong>B的第n列对应元素乘积之和。<br>a是第一行第一列，那么就是A的第一行和B的第一列元素<strong>乘积之和</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.058ex" height="1.715ex" role="img" focusable="false" viewBox="0 -676 9307.4 758"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(806.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1862.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2584.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3307,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><g data-mml-node="mo" transform="translate(4029.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5029.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5751.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(6473.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7251.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8307.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br>同理可得<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="20.831ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 9207.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(706.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1762.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2484.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3207,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(3929.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4929.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(5651.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(6373.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(7151.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8207.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="20.84ex" height="1.717ex" role="img" focusable="false" viewBox="0 -677 9211.4 759"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(710.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1766.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2488.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3211,0)"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g><g data-mml-node="mo" transform="translate(3933.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4933.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(5655.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(6377.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(7155.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8211.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="21.037ex" height="1.756ex" role="img" focusable="false" viewBox="0 -694 9298.4 776"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(797.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1853.6,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2575.8,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(3298,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(4020.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(5020.4,0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g><g data-mml-node="mo" transform="translate(5742.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(6464.9,0)"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g><g data-mml-node="mo" transform="translate(7242.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(8298.4,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></svg></mjx-container><br>即<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.149ex;" xmlns="http://www.w3.org/2000/svg" width="31.172ex" height="5.43ex" role="img" focusable="false" viewBox="0 -1450 13778 2400"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g><g data-mml-node="mo" transform="translate(3722.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mrow" transform="translate(4444.4,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(2750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g><g data-mml-node="mo" transform="translate(8222.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mrow" transform="translate(9278,0)"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7B" d="M618 -943L612 -949H582L568 -943Q472 -903 411 -841T332 -703Q327 -682 327 -653T325 -350Q324 -28 323 -18Q317 24 301 61T264 124T221 171T179 205T147 225T132 234Q130 238 130 250Q130 255 130 258T131 264T132 267T134 269T139 272T144 275Q207 308 256 367Q310 436 323 519Q324 529 325 851Q326 1124 326 1154T332 1205Q369 1358 566 1443L582 1450H612L618 1444V1429Q618 1413 616 1411L608 1406Q599 1402 585 1393T552 1372T515 1343T479 1305T449 1257T429 1200Q425 1180 425 1152T423 851Q422 579 422 549T416 498Q407 459 388 424T346 364T297 318T250 284T214 264T197 254L188 251L205 242Q290 200 345 138T416 3Q421 -18 421 -48T423 -349Q423 -397 423 -472Q424 -677 428 -694Q429 -697 429 -699Q434 -722 443 -743T465 -782T491 -816T519 -845T548 -868T574 -886T595 -899T610 -908L616 -910Q618 -912 618 -928V-943Z"></path></g><g data-mml-node="mtable" transform="translate(750,0)"><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mtd" transform="translate(2000,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(500,0)"></path></g></g><g data-mml-node="mtd" transform="translate(2000,0)"><g data-mml-node="mn"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(500,0)"></path></g></g></g></g><g data-mml-node="mo" transform="translate(3750,0) translate(0 -0.5)"><path data-c="7D" d="M131 1414T131 1429T133 1447T148 1450H153H167L182 1444Q276 1404 336 1343T415 1207Q421 1184 421 1154T423 851L424 531L426 517Q434 462 460 415T518 339T571 296T608 274Q615 270 616 267T618 251Q618 241 618 238T615 232T608 227Q542 194 491 132T426 -15L424 -29L423 -350Q422 -622 422 -652T415 -706Q397 -780 337 -841T182 -943L167 -949H153Q137 -949 134 -946T131 -928Q131 -914 132 -911T144 -904Q146 -903 148 -902Q299 -820 323 -680Q324 -663 325 -349T327 -19Q355 145 541 241L561 250L541 260Q356 355 327 520Q326 537 325 850T323 1181Q315 1227 293 1267T244 1332T193 1374T151 1401T132 1413Q131 1414 131 1429Z"></path></g></g></g></g></svg></mjx-container><br><br> </p><p>所谓乘积之和，指乘法和加法。<br>再来看AES列混淆中的矩阵乘法，我们的 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="4.946ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 2186 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(469,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(830,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(1359,0)"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(1720,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container> ，<strong>左边乘如下所示固定矩阵</strong><br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex;" xmlns="http://www.w3.org/2000/svg" width="36.553ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 16156.4 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z" transform="translate(0,1951)"></path><path data-c="23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z" transform="translate(0,-1451)"></path><path data-c="23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g><g data-mml-node="mtable" transform="translate(889,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(4500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtd" transform="translate(4500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mtd" transform="translate(4500,0)"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mtd" transform="translate(1500,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(3000,0)"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mtd" transform="translate(4500,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(5889,0)"><path data-c="23AB" d="M170 875Q170 892 172 895T189 899H194H211L222 893Q345 826 420 715T503 476Q504 467 504 230Q504 51 504 21T499 -9H498Q496 -10 444 -10Q402 -10 394 -9T385 -4Q384 -2 384 240V311V366Q384 469 380 513T358 609Q342 657 319 698T271 767T227 812T189 843T171 856T170 875Z" transform="translate(0,1951)"></path><path data-c="23AD" d="M384 -239V-57Q384 4 389 9Q391 10 455 10Q496 10 498 9Q501 8 502 5Q504 -5 504 -230Q504 -261 504 -311T505 -381Q505 -486 492 -551T435 -691Q357 -820 222 -893L211 -899H195Q176 -899 173 -896T170 -874Q170 -858 171 -855T184 -846Q262 -793 312 -709T378 -525Q378 -524 379 -522Q383 -493 384 -351Q384 -345 384 -334Q384 -276 384 -239Z" transform="translate(0,-1451)"></path><path data-c="23AC" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 925V782Q504 676 511 616T546 490Q563 446 587 408T633 345T674 304T705 278T717 268Q718 267 718 250T717 232Q717 231 697 216T648 169T588 93T534 -24T505 -179Q504 -191 504 -425Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -424Q384 -191 385 -182Q394 -49 463 61T645 241L659 250L645 259Q539 325 467 434T385 682Q384 692 384 873Q384 1153 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g></g><g data-mml-node="mo" transform="translate(7000.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mrow" transform="translate(7722.4,0)"><g data-mml-node="mo"><path data-c="23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z" transform="translate(0,1951)"></path><path data-c="23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z" transform="translate(0,-1451)"></path><path data-c="23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g><g data-mml-node="mtable" transform="translate(889,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd" transform="translate(39,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g></g><g data-mml-node="mtd" transform="translate(1890,0)"><g data-mml-node="mi"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g></g><g data-mml-node="mtd" transform="translate(3908.5,0)"><g data-mml-node="mi"><path data-c="1D43C" d="M43 1Q26 1 26 10Q26 12 29 24Q34 43 39 45Q42 46 54 46H60Q120 46 136 53Q137 53 138 54Q143 56 149 77T198 273Q210 318 216 344Q286 624 286 626Q284 630 284 631Q274 637 213 637H193Q184 643 189 662Q193 677 195 680T209 683H213Q285 681 359 681Q481 681 487 683H497Q504 676 504 672T501 655T494 639Q491 637 471 637Q440 637 407 634Q393 631 388 623Q381 609 337 432Q326 385 315 341Q245 65 245 59Q245 52 255 50T307 46H339Q345 38 345 37T342 19Q338 6 332 0H316Q279 2 179 2Q143 2 113 2T65 2T43 1Z"></path></g></g><g data-mml-node="mtd" transform="translate(5605,0)"><g data-mml-node="mi"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd" transform="translate(34.5,0)"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g></g><g data-mml-node="mtd" transform="translate(1897.5,0)"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g></g><g data-mml-node="mtd" transform="translate(3844,0)"><g data-mml-node="mi"><path data-c="1D43D" d="M447 625Q447 637 354 637H329Q323 642 323 645T325 664Q329 677 335 683H352Q393 681 498 681Q541 681 568 681T605 682T619 682Q633 682 633 672Q633 670 630 658Q626 642 623 640T604 637Q552 637 545 623Q541 610 483 376Q420 128 419 127Q397 64 333 21T195 -22Q137 -22 97 8T57 88Q57 130 80 152T132 174Q177 174 182 130Q182 98 164 80T123 56Q115 54 115 53T122 44Q148 15 197 15Q235 15 271 47T324 130Q328 142 387 380T447 625Z"></path></g></g><g data-mml-node="mtd" transform="translate(5686.5,0)"><g data-mml-node="mi"><path data-c="1D441" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(34,0)"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g></g><g data-mml-node="mtd" transform="translate(1879,0)"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g></g><g data-mml-node="mtd" transform="translate(3716,0)"><g data-mml-node="mi"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g></g><g data-mml-node="mtd" transform="translate(5749,0)"><g data-mml-node="mi"><path data-c="1D442" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(1828,0)"><g data-mml-node="mi"><path data-c="1D43B" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 219 683Q260 681 355 681Q389 681 418 681T463 682T483 682Q499 682 499 672Q499 670 497 658Q492 641 487 638H485Q483 638 480 638T473 638T464 637T455 637Q416 636 405 634T387 623Q384 619 355 500Q348 474 340 442T328 395L324 380Q324 378 469 378H614L615 381Q615 384 646 504Q674 619 674 627T617 637Q594 637 587 639T580 648Q580 650 582 660Q586 677 588 679T604 682Q609 682 646 681T740 680Q802 680 835 681T871 682Q888 682 888 672Q888 645 876 638H874Q872 638 869 638T862 638T853 637T844 637Q805 636 794 634T776 623Q773 618 704 340T634 58Q634 51 638 51Q646 48 692 46H723Q729 38 729 37T726 19Q722 6 716 0H701Q664 2 567 2Q533 2 504 2T458 2T437 1Q420 1 420 10Q420 15 423 24Q428 43 433 45Q437 46 448 46H454Q481 46 514 49Q520 50 522 50T528 55T534 64T540 82T547 110T558 153Q565 181 569 198Q602 330 602 331T457 332H312L279 197Q245 63 245 58Q245 51 253 49T303 46H334Q340 38 340 37T337 19Q333 6 327 0H312Q275 2 178 2Q144 2 115 2T69 2T48 1Q31 1 31 10Q31 12 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mtd" transform="translate(3820,0)"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"></path></g></g><g data-mml-node="mtd" transform="translate(5755,0)"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(7545,0)"><path data-c="23AB" d="M170 875Q170 892 172 895T189 899H194H211L222 893Q345 826 420 715T503 476Q504 467 504 230Q504 51 504 21T499 -9H498Q496 -10 444 -10Q402 -10 394 -9T385 -4Q384 -2 384 240V311V366Q384 469 380 513T358 609Q342 657 319 698T271 767T227 812T189 843T171 856T170 875Z" transform="translate(0,1951)"></path><path data-c="23AD" d="M384 -239V-57Q384 4 389 9Q391 10 455 10Q496 10 498 9Q501 8 502 5Q504 -5 504 -230Q504 -261 504 -311T505 -381Q505 -486 492 -551T435 -691Q357 -820 222 -893L211 -899H195Q176 -899 173 -896T170 -874Q170 -858 171 -855T184 -846Q262 -793 312 -709T378 -525Q378 -524 379 -522Q383 -493 384 -351Q384 -345 384 -334Q384 -276 384 -239Z" transform="translate(0,-1451)"></path><path data-c="23AC" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 925V782Q504 676 511 616T546 490Q563 446 587 408T633 345T674 304T705 278T717 268Q718 267 718 250T717 232Q717 231 697 216T648 169T588 93T534 -24T505 -179Q504 -191 504 -425Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -424Q384 -191 385 -182Q394 -49 463 61T645 241L659 250L645 259Q539 325 467 434T385 682Q384 692 384 873Q384 1153 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g></g></g></g></svg></mjx-container><br><br><br>看起来有些复杂，小例子中是2*2的矩阵要算4个值，这里是4*4的矩阵要算16个值。我们这里只管第一列，其他列的计算类似。</p><p><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -5.317ex;" xmlns="http://www.w3.org/2000/svg" width="36.331ex" height="11.765ex" role="img" focusable="false" viewBox="0 -2850 16058.3 5200"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mrow"><g data-mml-node="mo"><path data-c="23A7" d="M712 899L718 893V876V865Q718 854 704 846Q627 793 577 710T510 525Q510 524 509 521Q505 493 504 349Q504 345 504 334Q504 277 504 240Q504 -2 503 -4Q502 -8 494 -9T444 -10Q392 -10 390 -9Q387 -8 386 -5Q384 5 384 230Q384 262 384 312T383 382Q383 481 392 535T434 656Q510 806 664 892L677 899H712Z" transform="translate(0,1951)"></path><path data-c="23A9" d="M718 -893L712 -899H677L666 -893Q542 -825 468 -714T385 -476Q384 -466 384 -282Q384 3 385 5L389 9Q392 10 444 10Q486 10 494 9T503 4Q504 2 504 -239V-310V-366Q504 -470 508 -513T530 -609Q546 -657 569 -698T617 -767T661 -812T699 -843T717 -856T718 -876V-893Z" transform="translate(0,-1451)"></path><path data-c="23A8" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 924Q504 691 503 682Q494 549 425 439T243 259L229 250L243 241Q349 175 421 66T503 -182Q504 -191 504 -424Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -425V-282Q384 -176 377 -116T342 10Q325 54 301 92T255 155T214 196T183 222T171 232Q170 233 170 250T171 268Q171 269 191 284T240 331T300 407T354 524T383 679Q384 691 384 925Q384 1152 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g><g data-mml-node="mtable" transform="translate(889,0)"><g data-mml-node="mtr" transform="translate(0,2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1472.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(2472.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(2972.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3953.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4953.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5936.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6936.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(8764.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(10936.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(13108.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,700)"><g data-mml-node="mtd"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(1972.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(2472.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3453.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(4453.9,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(4953.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5936.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(6936.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(8764.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(10936.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(13108.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-700)"><g data-mml-node="mtd" transform="translate(0,0)"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(972.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(1972.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(2953.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(3953.9,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(4453.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5436.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6436.3,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(6936.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(8764.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(10936.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(13108.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g><g data-mml-node="mtr" transform="translate(0,-2100)"><g data-mml-node="mtd"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mi" transform="translate(500,0)"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mo" transform="translate(1472.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(2472.4,0)"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(3453.7,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4453.9,0)"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mo" transform="translate(5436.1,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mn" transform="translate(6436.3,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(6936.3,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"></path></g></g><g data-mml-node="mtd" transform="translate(8764.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(10936.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g><g data-mml-node="mtd" transform="translate(13108.3,0)"><g data-mml-node="mo"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g></g></g></g><g data-mml-node="mo" transform="translate(15169.3,0)"><path data-c="23AB" d="M170 875Q170 892 172 895T189 899H194H211L222 893Q345 826 420 715T503 476Q504 467 504 230Q504 51 504 21T499 -9H498Q496 -10 444 -10Q402 -10 394 -9T385 -4Q384 -2 384 240V311V366Q384 469 380 513T358 609Q342 657 319 698T271 767T227 812T189 843T171 856T170 875Z" transform="translate(0,1951)"></path><path data-c="23AD" d="M384 -239V-57Q384 4 389 9Q391 10 455 10Q496 10 498 9Q501 8 502 5Q504 -5 504 -230Q504 -261 504 -311T505 -381Q505 -486 492 -551T435 -691Q357 -820 222 -893L211 -899H195Q176 -899 173 -896T170 -874Q170 -858 171 -855T184 -846Q262 -793 312 -709T378 -525Q378 -524 379 -522Q383 -493 384 -351Q384 -345 384 -334Q384 -276 384 -239Z" transform="translate(0,-1451)"></path><path data-c="23AC" d="M389 1159Q391 1160 455 1160Q496 1160 498 1159Q501 1158 502 1155Q504 1145 504 925V782Q504 676 511 616T546 490Q563 446 587 408T633 345T674 304T705 278T717 268Q718 267 718 250T717 232Q717 231 697 216T648 169T588 93T534 -24T505 -179Q504 -191 504 -425Q504 -600 504 -629T499 -659H498Q496 -660 444 -660T390 -659Q387 -658 386 -655Q384 -645 384 -424Q384 -191 385 -182Q394 -49 463 61T645 241L659 250L645 259Q539 325 467 434T385 682Q384 692 384 873Q384 1153 385 1155L389 1159Z" transform="translate(0,0)"></path><svg width="889" height="981" y="1060" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg><svg width="889" height="981" y="-1541" x="0" viewBox="0 172.9 889 981"><path data-c="23AA" d="M384 150V266Q384 304 389 309Q391 310 455 310Q496 310 498 309Q502 308 503 298Q504 283 504 150Q504 32 504 12T499 -9H498Q496 -10 444 -10T390 -9Q386 -8 385 2Q384 17 384 150Z" transform="scale(1,4.825)"></path></svg></g></g></g></g></svg></mjx-container></p><br>列混淆中的的加法和乘法并不是小例子或日常中的那样，其中的加法指 <font color="red">异或运算</font> 。2A + 3B + C + D 即 2A ^ 3B ^ C ^ D，这也是 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="15.928ex" height="2.084ex" role="img" focusable="false" viewBox="0 -716 7040 921"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D434" d="M208 74Q208 50 254 46Q272 46 272 35Q272 34 270 22Q267 8 264 4T251 0Q249 0 239 0T205 1T141 2Q70 2 50 0H42Q35 7 35 11Q37 38 48 46H62Q132 49 164 96Q170 102 345 401T523 704Q530 716 547 716H555H572Q578 707 578 706L606 383Q634 60 636 57Q641 46 701 46Q726 46 726 36Q726 34 723 22Q720 7 718 4T704 0Q701 0 690 0T651 1T578 2Q484 2 455 0H443Q437 6 437 9T439 27Q443 40 445 43L449 46H469Q523 49 533 63L521 213H283L249 155Q208 86 208 74ZM516 260Q516 271 504 416T490 562L463 519Q447 492 400 412L310 260L413 259Q516 259 516 260Z"></path></g><g data-mml-node="mi" transform="translate(750,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1270,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(1790,0)"><path data-c="1D445" d="M230 637Q203 637 198 638T193 649Q193 676 204 682Q206 683 378 683Q550 682 564 680Q620 672 658 652T712 606T733 563T739 529Q739 484 710 445T643 385T576 351T538 338L545 333Q612 295 612 223Q612 212 607 162T602 80V71Q602 53 603 43T614 25T640 16Q668 16 686 38T712 85Q717 99 720 102T735 105Q755 105 755 93Q755 75 731 36Q693 -21 641 -21H632Q571 -21 531 4T487 82Q487 109 502 166T517 239Q517 290 474 313Q459 320 449 321T378 323H309L277 193Q244 61 244 59Q244 55 245 54T252 50T269 48T302 46H333Q339 38 339 37T336 19Q332 6 326 0H311Q275 2 180 2Q146 2 117 2T71 2T50 1Q33 1 33 10Q33 12 36 24Q41 43 46 45Q50 46 61 46H67Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628Q287 635 230 637ZM630 554Q630 586 609 608T523 636Q521 636 500 636T462 637H440Q393 637 386 627Q385 624 352 494T319 361Q319 360 388 360Q466 361 492 367Q556 377 592 426Q608 449 619 486T630 554Z"></path></g><g data-mml-node="mi" transform="translate(2549,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3034,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3606,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4206,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(4726,0)"><path data-c="1D43E" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(5615,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mi" transform="translate(6081,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(6571,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></mjx-container> 叫轮密钥加而不是轮密钥异或的原因——加法就是异或。那么其中的乘法呢？乘法复杂一些，想真正理解的可以网上冲浪搜索<font color="red">伽罗瓦域内乘法</font>。我们这里仅考虑如下三种情况，因为AES-128加密中，列混淆的乘法中，仅涉及这三个数。<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.019ex" height="1.781ex" role="img" focusable="false" viewBox="0 -705 3544.2 787"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1516.4,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2294.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3072.2,0)"><path data-c="3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.019ex" height="1.781ex" role="img" focusable="false" viewBox="0 -705 3544.2 787"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1516.4,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(2294.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3072.2,0)"><path data-c="3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z"></path></g></g></g></svg></mjx-container><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.186ex;" xmlns="http://www.w3.org/2000/svg" width="8.019ex" height="1.781ex" role="img" focusable="false" viewBox="0 -705 3544.2 787"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(794.2,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(1516.4,0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(2294.2,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(3072.2,0)"><path data-c="3F" d="M226 668Q190 668 162 656T124 632L114 621Q116 621 119 620T130 616T145 607T157 591T162 567Q162 544 147 529T109 514T71 528T55 566Q55 625 100 661T199 704Q201 704 210 704T224 705H228Q281 705 320 692T378 656T407 612T416 567Q416 503 361 462Q267 395 247 303Q242 279 242 241V224Q242 205 239 202T222 198T205 201T202 218V249Q204 320 220 371T255 445T292 491T315 537Q317 546 317 574V587Q317 604 315 615T304 640T277 661T226 668ZM162 61Q162 89 180 105T224 121Q247 119 264 104T281 61Q281 31 264 16T222 1Q197 1 180 16T162 61Z"></path></g></g></g></svg></mjx-container>结合Python代码可以更清晰，函数名中 mul 是multiply（乘）的缩写。<br><br><p><strong>x * 1，结果为x本身</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_01</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> num</span><br></pre></td></tr></table></figure><p><strong>x * 2，首先切换到二进制形式，最高位为0时，比特串左移1比特，最右边补0即可。如果最高位为1，比特串左移1比特，最右边补0，最后再异或上 0x1B</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_02</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0x80</span>:</span><br><span class="line">        res = (num &lt;&lt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    res = (num &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res % <span class="number">0x100</span></span><br></pre></td></tr></table></figure><p><strong>x * 3 = (x * 02) + x，注意”加“是异或哦</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_03</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> (mul_by_02(num) ^ num)</span><br></pre></td></tr></table></figure><p>列混淆，就这么讲完了。下面看完整的AES代码实现<br> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line">Sbox = (</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7C</span>, <span class="number">0x77</span>, <span class="number">0x7B</span>, <span class="number">0xF2</span>, <span class="number">0x6B</span>, <span class="number">0x6F</span>, <span class="number">0xC5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2B</span>, <span class="number">0xFE</span>, <span class="number">0xD7</span>, <span class="number">0xAB</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xCA</span>, <span class="number">0x82</span>, <span class="number">0xC9</span>, <span class="number">0x7D</span>, <span class="number">0xFA</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xF0</span>, <span class="number">0xAD</span>, <span class="number">0xD4</span>, <span class="number">0xA2</span>, <span class="number">0xAF</span>, <span class="number">0x9C</span>, <span class="number">0xA4</span>, <span class="number">0x72</span>, <span class="number">0xC0</span>,</span><br><span class="line">    <span class="number">0xB7</span>, <span class="number">0xFD</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3F</span>, <span class="number">0xF7</span>, <span class="number">0xCC</span>, <span class="number">0x34</span>, <span class="number">0xA5</span>, <span class="number">0xE5</span>, <span class="number">0xF1</span>, <span class="number">0x71</span>, <span class="number">0xD8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xC7</span>, <span class="number">0x23</span>, <span class="number">0xC3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9A</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xE2</span>, <span class="number">0xEB</span>, <span class="number">0x27</span>, <span class="number">0xB2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2C</span>, <span class="number">0x1A</span>, <span class="number">0x1B</span>, <span class="number">0x6E</span>, <span class="number">0x5A</span>, <span class="number">0xA0</span>, <span class="number">0x52</span>, <span class="number">0x3B</span>, <span class="number">0xD6</span>, <span class="number">0xB3</span>, <span class="number">0x29</span>, <span class="number">0xE3</span>, <span class="number">0x2F</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xD1</span>, <span class="number">0x00</span>, <span class="number">0xED</span>, <span class="number">0x20</span>, <span class="number">0xFC</span>, <span class="number">0xB1</span>, <span class="number">0x5B</span>, <span class="number">0x6A</span>, <span class="number">0xCB</span>, <span class="number">0xBE</span>, <span class="number">0x39</span>, <span class="number">0x4A</span>, <span class="number">0x4C</span>, <span class="number">0x58</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xD0</span>, <span class="number">0xEF</span>, <span class="number">0xAA</span>, <span class="number">0xFB</span>, <span class="number">0x43</span>, <span class="number">0x4D</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xF9</span>, <span class="number">0x02</span>, <span class="number">0x7F</span>, <span class="number">0x50</span>, <span class="number">0x3C</span>, <span class="number">0x9F</span>, <span class="number">0xA8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xA3</span>, <span class="number">0x40</span>, <span class="number">0x8F</span>, <span class="number">0x92</span>, <span class="number">0x9D</span>, <span class="number">0x38</span>, <span class="number">0xF5</span>, <span class="number">0xBC</span>, <span class="number">0xB6</span>, <span class="number">0xDA</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xFF</span>, <span class="number">0xF3</span>, <span class="number">0xD2</span>,</span><br><span class="line">    <span class="number">0xCD</span>, <span class="number">0x0C</span>, <span class="number">0x13</span>, <span class="number">0xEC</span>, <span class="number">0x5F</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xC4</span>, <span class="number">0xA7</span>, <span class="number">0x7E</span>, <span class="number">0x3D</span>, <span class="number">0x64</span>, <span class="number">0x5D</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4F</span>, <span class="number">0xDC</span>, <span class="number">0x22</span>, <span class="number">0x2A</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xEE</span>, <span class="number">0xB8</span>, <span class="number">0x14</span>, <span class="number">0xDE</span>, <span class="number">0x5E</span>, <span class="number">0x0B</span>, <span class="number">0xDB</span>,</span><br><span class="line">    <span class="number">0xE0</span>, <span class="number">0x32</span>, <span class="number">0x3A</span>, <span class="number">0x0A</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5C</span>, <span class="number">0xC2</span>, <span class="number">0xD3</span>, <span class="number">0xAC</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xE4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xE7</span>, <span class="number">0xC8</span>, <span class="number">0x37</span>, <span class="number">0x6D</span>, <span class="number">0x8D</span>, <span class="number">0xD5</span>, <span class="number">0x4E</span>, <span class="number">0xA9</span>, <span class="number">0x6C</span>, <span class="number">0x56</span>, <span class="number">0xF4</span>, <span class="number">0xEA</span>, <span class="number">0x65</span>, <span class="number">0x7A</span>, <span class="number">0xAE</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xBA</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2E</span>, <span class="number">0x1C</span>, <span class="number">0xA6</span>, <span class="number">0xB4</span>, <span class="number">0xC6</span>, <span class="number">0xE8</span>, <span class="number">0xDD</span>, <span class="number">0x74</span>, <span class="number">0x1F</span>, <span class="number">0x4B</span>, <span class="number">0xBD</span>, <span class="number">0x8B</span>, <span class="number">0x8A</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3E</span>, <span class="number">0xB5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xF6</span>, <span class="number">0x0E</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xB9</span>, <span class="number">0x86</span>, <span class="number">0xC1</span>, <span class="number">0x1D</span>, <span class="number">0x9E</span>,</span><br><span class="line">    <span class="number">0xE1</span>, <span class="number">0xF8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xD9</span>, <span class="number">0x8E</span>, <span class="number">0x94</span>, <span class="number">0x9B</span>, <span class="number">0x1E</span>, <span class="number">0x87</span>, <span class="number">0xE9</span>, <span class="number">0xCE</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xDF</span>,</span><br><span class="line">    <span class="number">0x8C</span>, <span class="number">0xA1</span>, <span class="number">0x89</span>, <span class="number">0x0D</span>, <span class="number">0xBF</span>, <span class="number">0xE6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2D</span>, <span class="number">0x0F</span>, <span class="number">0xB0</span>, <span class="number">0x54</span>, <span class="number">0xBB</span>, <span class="number">0x16</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Rcon = (<span class="number">0x00</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1B</span>, <span class="number">0x36</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">text2matrix</span>(<span class="params">text</span>):</span><br><span class="line">    matrix = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        byte = (text &gt;&gt; (<span class="number">8</span> * (<span class="number">15</span> - i))) &amp; <span class="number">0xFF</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            matrix.append([byte])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            matrix[i // <span class="number">4</span>].append(byte)</span><br><span class="line">    <span class="keyword">return</span> matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shiftRound</span>(<span class="params">array, num</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param array: 需要循环左移的数组</span></span><br><span class="line"><span class="string">    :param num: 循环左移的位数</span></span><br><span class="line"><span class="string">    :return: 使用Python切片，返回循环左移num个单位的array</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">return</span> array[num:] + array[:num]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">g</span>(<span class="params">array, index</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    g 函数</span></span><br><span class="line"><span class="string">    :param array: 待处理的四字节数组</span></span><br><span class="line"><span class="string">    :index:从1-10，每次使用Rcon中不同的数</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 首先循环左移1位</span></span><br><span class="line">    array = shiftRound(array, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 字节替换</span></span><br><span class="line">    array = [Sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> array]</span><br><span class="line">    <span class="comment"># 首字节和rcon中对应元素异或</span></span><br><span class="line">    array = [(Rcon[index] ^ array[<span class="number">0</span>])] + array[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xorTwoArray</span>(<span class="params">array1, array2</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    返回两个数组逐元素异或的新数组</span></span><br><span class="line"><span class="string">    :param array1: 一个array</span></span><br><span class="line"><span class="string">    :param array2: 另一个array</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(array1) == <span class="built_in">len</span>(array2)</span><br><span class="line">    <span class="keyword">return</span> [array1[i] ^ array2[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(array1))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showRoundKeys</span>(<span class="params">round_keys</span>):</span><br><span class="line">    <span class="comment"># 将轮密钥从44*4转成11*16</span></span><br><span class="line">    kList = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(round_keys)):</span><br><span class="line">        kList[i // <span class="number">4</span>] += round_keys[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(kList)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"K%02d:"</span> % i + <span class="string">""</span>.join(<span class="string">"%02x"</span> % k <span class="keyword">for</span> k <span class="keyword">in</span> kList[i]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keyExpand</span>(<span class="params">key</span>):</span><br><span class="line">    master_key = text2matrix(key)</span><br><span class="line">    round_keys = [[<span class="number">0</span>] * <span class="number">4</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">44</span>)]</span><br><span class="line">    <span class="comment"># 规则一(图中红色部分)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        round_keys[i] = master_key[i]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">4</span> * <span class="number">11</span>):</span><br><span class="line">        <span class="comment"># 规则二(图中红色部分)</span></span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(g(round_keys[i - <span class="number">1</span>], i // <span class="number">4</span>), round_keys[i - <span class="number">4</span>])</span><br><span class="line">        <span class="comment"># 规则三(图中橙色部分)</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            round_keys[i] = xorTwoArray(round_keys[i - <span class="number">1</span>], round_keys[i - <span class="number">4</span>])</span><br><span class="line">    showRoundKeys(round_keys)</span><br><span class="line">    <span class="keyword">return</span> round_keys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AddRoundKeys</span>(<span class="params">state, roundKey</span>):</span><br><span class="line">    result = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        result[i] = xorTwoArray(state[i], roundKey[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">SubBytes</span>(<span class="params">state</span>):</span><br><span class="line">    result = [[] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        result[i] = [Sbox[i] <span class="keyword">for</span> i <span class="keyword">in</span> state[i]]</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ShiftRows</span>(<span class="params">s</span>):</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">1</span>], s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>] = s[<span class="number">1</span>][<span class="number">1</span>], s[<span class="number">2</span>][<span class="number">1</span>], s[<span class="number">3</span>][<span class="number">1</span>], s[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>], s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>] = s[<span class="number">2</span>][<span class="number">2</span>], s[<span class="number">3</span>][<span class="number">2</span>], s[<span class="number">0</span>][<span class="number">2</span>], s[<span class="number">1</span>][<span class="number">2</span>]</span><br><span class="line">    s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>], s[<span class="number">3</span>][<span class="number">3</span>] = s[<span class="number">3</span>][<span class="number">3</span>], s[<span class="number">0</span>][<span class="number">3</span>], s[<span class="number">1</span>][<span class="number">3</span>], s[<span class="number">2</span>][<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_02</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0x80</span>:</span><br><span class="line">        res = (num &lt;&lt; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        res = (num &lt;&lt; <span class="number">1</span>) ^ <span class="number">0x1b</span></span><br><span class="line">    <span class="keyword">return</span> res % <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul_by_03</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> mul_by_02(num) ^ num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MixColumns</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        s0 = mul_by_02(state[i][<span class="number">0</span>]) ^ mul_by_03(state[i][<span class="number">1</span>]) ^ state[i][<span class="number">2</span>] ^ state[i][<span class="number">3</span>]</span><br><span class="line">        s1 = state[i][<span class="number">0</span>] ^ mul_by_02(state[i][<span class="number">1</span>]) ^ mul_by_03(state[i][<span class="number">2</span>]) ^ state[i][<span class="number">3</span>]</span><br><span class="line">        s2 = state[i][<span class="number">0</span>] ^ state[i][<span class="number">1</span>] ^ mul_by_02(state[i][<span class="number">2</span>]) ^ mul_by_03(state[i][<span class="number">3</span>])</span><br><span class="line">        s3 = mul_by_03(state[i][<span class="number">0</span>]) ^ state[i][<span class="number">1</span>] ^ state[i][<span class="number">2</span>] ^ mul_by_02(state[i][<span class="number">3</span>])</span><br><span class="line">        state[i][<span class="number">0</span>] = s0</span><br><span class="line">        state[i][<span class="number">1</span>] = s1</span><br><span class="line">        state[i][<span class="number">2</span>] = s2</span><br><span class="line">        state[i][<span class="number">3</span>] = s3</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">state2Text</span>(<span class="params">state</span>):</span><br><span class="line">    text = <span class="built_in">sum</span>(state, [])</span><br><span class="line">    <span class="keyword">return</span> <span class="string">""</span>.join(<span class="string">"%02x"</span> % k <span class="keyword">for</span> k <span class="keyword">in</span> text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">input_bytes, kList</span>):</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param input_bytes: 输入的明文</span></span><br><span class="line"><span class="string">    :param kList: K0-K10</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    plainState = text2matrix(input_bytes)</span><br><span class="line">    <span class="comment"># 初始轮密钥加</span></span><br><span class="line">    state = AddRoundKeys(plainState, kList[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        state = SubBytes(state)</span><br><span class="line">        state = ShiftRows(state)</span><br><span class="line">        state = MixColumns(state)</span><br><span class="line">        state = AddRoundKeys(state, kList[<span class="number">4</span> * i:<span class="number">4</span> * (i + <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line">    state = SubBytes(state)</span><br><span class="line">    state = ShiftRows(state)</span><br><span class="line">    state = AddRoundKeys(state, kList[<span class="number">40</span>:<span class="number">44</span>])</span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_bytes = <span class="number">0x7a68656e677368616f6b756e79796473</span></span><br><span class="line">key = <span class="number">0x0123456789abcdef0123456789abcdef</span></span><br><span class="line">kList = keyExpand(key)</span><br><span class="line">cipherState = encrypt(input_bytes, kList)</span><br><span class="line">cipher = state2Text(cipherState)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br> <br> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img lazyload=&quot;&quot; alt=&quot;image&quot; data-src=&quot;https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/000.webp&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;AES算法简述&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
    <category term="算法" scheme="https://www.zskkk.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>unidbg补获取系统属性</title>
    <link href="https://www.zskkk.cn/posts/42662/"/>
    <id>https://www.zskkk.cn/posts/42662/</id>
    <published>2022-12-22T15:58:52.000Z</published>
    <updated>2023-10-10T15:23:30.544Z</updated>
    
    <content type="html"><![CDATA[<p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/000.webp"                                     ></p><h2 id="什么叫获取系统属性？"><a href="#什么叫获取系统属性？" class="headerlink" title="什么叫获取系统属性？"></a>什么叫获取系统属性？</h2><h3 id="Build类"><a href="#Build类" class="headerlink" title="Build类"></a>Build类</h3><p>第一种<br /> NDK中最常见的方式是通过JNI调用 ， 通过JNI调用JAVA方法获取本机的属性和信息，是最常见的做法，除了Build类，常见的还有 System.getProperty和Systemproperties.get等API。  <br />  Unidbg补环境过程中，最好补而且不会遗漏的就是这一类，因为Unidbg会给出清楚的报错，你没法对它置之不理。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">j<span class="keyword">class</span> <span class="title class_">androidBuildClass</span> = env-&gt;<span class="title class_">FindClass</span>(<span class="string">&quot;android/os/Build&quot;</span>);</span><br><span class="line">jfieldID <span class="variable constant_">SERIAL</span> = env-&gt;<span class="title class_">GetStaticFieldID</span>(androidBuildClass, <span class="string">&quot;SERIAL&quot;</span>,</span><br><span class="line"><span class="string">&quot;Ljava/lang/String;&quot;</span>);</span><br><span class="line">jstring serialNum = (jstring) env-&gt;<span class="title class_">GetStaticObjectField</span>(androidBuildClass,</span><br><span class="line"><span class="variable constant_">SERIAL</span>);</span><br></pre></td></tr></table></figure><h3 id="system-property-get"><a href="#system-property-get" class="headerlink" title="system_property_get"></a>system_property_get</h3><p>第二种常见方式是通过system_property_get 函数获取系统属性也是常见做法  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">char *key = <span class="string">&quot;ro.build.id&quot;</span>;</span><br><span class="line">char value[<span class="variable constant_">PROP_VALUE_MAX</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="title function_">__system_property_get</span>(key, value);</span><br></pre></td></tr></table></figure><p> 这类环境缺失容易被大家忽视，因为没有日志提示，即使src&#x2F;test&#x2F;resources&#x2F;log4j.properties中日志全 开，也不会打印相关信息。  </p><h3 id="通过文件访问"><a href="#通过文件访问" class="headerlink" title="通过文件访问"></a>通过文件访问</h3><p> 第三个常见方式是通过文件访问，比如读取&#x2F;proc&#x2F;pid&#x2F;maps，此种情况，Unidbg会提供日志输出，但 经常被大家忽视，事实上，不少朋友初学Unidbg时除了JAVA环境的报错，其他日志信息都不去管。  </p><h3 id="popen"><a href="#popen" class="headerlink" title="popen()"></a>popen()</h3><p> 第四个常见方式是通过popen()管道从shell中获取系统属性，其效果可以理解成在NDK中使用adb shell，popen参数一就是shell命令，返回值是一个fd文件描述符，可以read其内容，其中内容就是adb shell执行该命令应该返回的内容。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">char value[<span class="variable constant_">PROP_VALUE_MAX</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="attr">std</span>::string cmd = <span class="string">&quot;getprop ro.build.id&quot;</span>;</span><br><span class="line"><span class="variable constant_">FILE</span>* file = <span class="title function_">popen</span>(cmd.<span class="title function_">c_str</span>(), <span class="string">&quot;r&quot;</span>);</span><br><span class="line"><span class="title function_">fread</span>(value, <span class="variable constant_">PROP_VALUE_MAX</span>, <span class="number">1</span>, file);</span><br><span class="line"><span class="title function_">pclose</span>(file);</span><br></pre></td></tr></table></figure><h3 id="getenv函数"><a href="#getenv函数" class="headerlink" title="getenv函数"></a>getenv函数</h3><p>第五个常见方式是通过 getenv函数 获取进程环境变量，首先，Android系统层面存在一些默认的环境变 量，除此之外，样本可以设置自己进程内的环境变量。因此，样本可以在Native层获取系统环境变量或 者自身JAVA层设置的环境变量。 <br /> 我们可以通过ADB 查看环境变量有哪些，也可以查看环境变量的值。   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:\<span class="title class_">Users</span>\pr0214&gt;adb shell</span><br><span class="line"><span class="attr">bullhead</span>:/ $ <span class="keyword">export</span></span><br><span class="line"><span class="variable constant_">ANDROID_ASSETS</span></span><br><span class="line"><span class="variable constant_">ANDROID_BOOTLOGO</span></span><br><span class="line"><span class="variable constant_">ANDROID_DATA</span></span><br><span class="line"><span class="variable constant_">ANDROID_ROOT</span></span><br><span class="line">ANDROID_SOCKET_adbd</span><br><span class="line"><span class="variable constant_">ANDROID_STORAGE</span></span><br><span class="line"><span class="variable constant_">ASEC_MOUNTPOINT</span></span><br><span class="line"><span class="variable constant_">BOOTCLASSPATH</span></span><br><span class="line"><span class="variable constant_">DOWNLOAD_CACHE</span></span><br><span class="line"><span class="variable constant_">EXTERNAL_STORAGE</span></span><br><span class="line"><span class="variable constant_">HOME</span></span><br><span class="line"><span class="variable constant_">HOSTNAME</span></span><br><span class="line"><span class="variable constant_">LOGNAME</span></span><br><span class="line"><span class="variable constant_">PATH</span></span><br><span class="line"><span class="variable constant_">SHELL</span></span><br><span class="line"><span class="variable constant_">SYSTEMSERVERCLASSPATH</span></span><br><span class="line"><span class="variable constant_">TERM</span></span><br><span class="line"><span class="variable constant_">TMPDIR</span></span><br><span class="line"><span class="variable constant_">USER</span></span><br><span class="line"><span class="attr">bullhead</span>:/ $ echo $HOME</span><br><span class="line">/</span><br><span class="line"><span class="attr">bullhead</span>:/ $ echo $ANDROID_DATA</span><br><span class="line">/data</span><br><span class="line"><span class="attr">bullhead</span>:/ $ echo $SYSTEMSERVERCLASSPATH</span><br><span class="line">/system/framework/services.<span class="property">jar</span>:<span class="regexp">/system/</span>framework/ethernetservice.<span class="property">jar</span>:<span class="regexp">/system/</span>framework/wifiservice.<span class="property">jar</span>:<span class="regexp">/system/</span>framework/com.<span class="property">android</span>.<span class="property">location</span>.<span class="property">provider</span>.<span class="property">jar</span></span><br><span class="line"><span class="attr">bullhead</span>:/ $ echo $PATH</span><br><span class="line">/<span class="attr">sbin</span>:<span class="regexp">/system/</span><span class="attr">sbin</span>:<span class="regexp">/system/</span><span class="attr">bin</span>:<span class="regexp">/system/</span><span class="attr">xbin</span>:<span class="regexp">/vendor/</span><span class="attr">bin</span>:<span class="regexp">/vendor/</span>xbin</span><br><span class="line"><span class="attr">bullhead</span>:/ $</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 第六个常见方式是使用系统调用获取相关属性，不管是通过syscall函数还是内联汇编，都属此类。 常见的比如uname系统调用  </p><blockquote><p> uname - 获取当前内核的名称和信息<br>返回的信息是一个结构体  </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">struct utsname &#123;</span><br><span class="line">char sysname[]; <span class="comment">/* 操作系统名称 (例如 &quot;Linux&quot;) */</span></span><br><span class="line">char nodename[]; <span class="comment">/* &quot;一些实现了的网络”内的名称*/</span></span><br><span class="line">char release[]; <span class="comment">/* 操作系统版本 (例如 &quot;2.6.28&quot;)*/</span></span><br><span class="line">char version[]; <span class="comment">/* 操作系统发布日期 */</span></span><br><span class="line">char machine[]; <span class="comment">/* 硬件标识符 */</span></span><br><span class="line">#ifdef _GNU_SOURCE</span><br><span class="line">char domainname[]; <span class="comment">/* NIS或YP域名 */</span></span><br><span class="line">#endif</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> 日志全开的情况下，系统调用的相关调用会被全部打印， Unidbg的uname系统调用实现是个很好也很简单的检测点，十分规范的表明了自己是Unidbg。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">protected int <span class="title function_">uname</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">    <span class="title class_">RegisterContext</span> context = emulator.<span class="title function_">getContext</span>();</span><br><span class="line">    <span class="title class_">Pointer</span> buf = context.<span class="title function_">getPointerArg</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (log.<span class="title function_">isDebugEnabled</span>()) &#123;</span><br><span class="line">        log.<span class="title function_">debug</span>(<span class="string">&quot;uname buf=&quot;</span> + buf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    final int <span class="variable constant_">SYS_NMLN</span> = <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> sysName = buf.<span class="title function_">share</span>(<span class="number">0</span>);</span><br><span class="line">    sysName.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;Linux&quot;</span>); <span class="comment">/* Operating system name (e.g., &quot;Linux&quot;) */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> nodeName = sysName.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    nodeName.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;localhost&quot;</span>); <span class="comment">/* Name within &quot;some implementation-defined network&quot; */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> release = nodeName.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    release.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;1.0.0-unidbg&quot;</span>); <span class="comment">/* Operating system release (e.g., &quot;2.6.28&quot;) */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> version = release.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    version.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;#1 SMP PREEMPT Thu Apr 19 14:36:58 CST 2018&quot;</span>); <span class="comment">/* Operating system version */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> machine = version.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    machine.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;armv8l&quot;</span>); <span class="comment">/* Hardware identifier */</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Pointer</span> domainName = machine.<span class="title function_">share</span>(<span class="variable constant_">SYS_NMLN</span>);</span><br><span class="line">    domainName.<span class="title function_">setString</span>(<span class="number">0</span>, <span class="string">&quot;localdomain&quot;</span>); <span class="comment">/* NIS or YP domain name */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 以上这些是较为常见的获取系统属性的方式，  </p><h2 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h2><h3 id="system-property-get的处理"><a href="#system-property-get的处理" class="headerlink" title="__system_property_get的处理"></a>__system_property_get的处理</h3><p>一般运行报IO错误，继承IOResolver实现文件重定向接口，打上自己的日志</p><blockquote><p> lilac path:&#x2F;dev&#x2F;properties<br>lilac path:&#x2F;proc&#x2F;stat  </p></blockquote><p>一般这前两个文件访问，不需要管，这是libc初始化的内部逻辑  <br /> 文件访问处理好了，接下来用第二种的方式，是__system_property_get 这个函数的处理 ，此Unidbg 在src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;linux&#x2F;android 目录下有相 关类对它进行了Hook和封装，我们可以直接拿来用  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">SystemPropertyHook</span> systemPropertyHook = <span class="keyword">new</span> <span class="title class_">SystemPropertyHook</span>(emulator);</span><br><span class="line">systemPropertyHook.<span class="title function_">setPropertyProvider</span>(<span class="keyword">new</span> <span class="title class_">SystemPropertyProvider</span>() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="title class_">String</span> <span class="title function_">getProperty</span>(<span class="params"><span class="built_in">String</span> key</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;lilac Systemkey:&quot;</span>+key);</span><br><span class="line">        <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">memory.<span class="title function_">addHookListener</span>(systemPropertyHook);</span><br></pre></td></tr></table></figure><blockquote><p>lilac Systemkey:ro.serialno<br>lilac Systemkey:ro.product.manufacturer<br>lilac Systemkey:ro.product.brand<br>lilac Systemkey:ro.product.model</p></blockquote><p> 通过adb shell 获取这些信息，一 一填入正确的值，建议使用Unidbg时，对应的测试机Android版本为 6.0，这样或许可以避免潜在的麻烦。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">C</span>:\<span class="title class_">Users</span>\zsk&gt;adb shell</span><br><span class="line"><span class="attr">angler</span>:/ $ su</span><br><span class="line"><span class="attr">angler</span>:/ # getprop ro.<span class="property">serialno</span></span><br><span class="line">84B5T15A04002645</span><br><span class="line"><span class="attr">angler</span>:/ # getprop ro.<span class="property">product</span>.<span class="property">manufacturer</span></span><br><span class="line"><span class="title class_">Huawei</span></span><br><span class="line"><span class="attr">angler</span>:/ # getprop ro.<span class="property">product</span>.<span class="property">brand</span></span><br><span class="line">google</span><br><span class="line"><span class="attr">angler</span>:/ # getprop ro.<span class="property">product</span>.<span class="property">model</span></span><br><span class="line"><span class="title class_">Nexus</span> 6P</span><br><span class="line"><span class="attr">angler</span>:/ #</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册绑定IO重定向</span></span><br><span class="line">emulator.<span class="title function_">getSyscallHandler</span>().<span class="title function_">addIOResolver</span>(<span class="variable language_">this</span>);</span><br><span class="line"><span class="title class_">SystemPropertyHook</span> systemPropertyHook = <span class="keyword">new</span> <span class="title class_">SystemPropertyHook</span>(emulator);</span><br><span class="line">systemPropertyHook.<span class="title function_">setPropertyProvider</span>(<span class="keyword">new</span> <span class="title class_">SystemPropertyProvider</span>() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public <span class="title class_">String</span> <span class="title function_">getProperty</span>(<span class="params"><span class="built_in">String</span> key</span>) &#123;</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;lilac Systemkey:&quot;</span>+key);</span><br><span class="line">        <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ro.serialno&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;84B5T15A04002645&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ro.product.manufacturer&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Huawei&quot;</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ro.product.brand&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;google&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ro.product.model&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Nexus 6P&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line">memory.<span class="title function_">addHookListener</span>(systemPropertyHook);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Android虚拟机</span></span><br><span class="line">vm = emulator.<span class="title function_">createDalvikVM</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;xxx.apk&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="popen的处理"><a href="#popen的处理" class="headerlink" title="popen的处理"></a>popen的处理</h3><p>接下来是第四种和第五种， 管popen和getenv，它俩都是libc里的函数，所以放一起说。我的想法是Hook这两个函数， 如果产生调用就打印日志 ， 基于 Unidbg原生Hook封装的各种Hook。 </p><ul><li>HOOK时机要在什么时候？这个样本的popen调用发生在目标函数中，如果发生在init中呢？ </li><li>我们通过HOOK得到了其参数，那怎么给它返回正确的值呢？</li></ul><p>避免so存在init_proc 函数，或者init_array非空，需要在Loadlibrary加载so文件前面开始Hook，为了实现这个目标，我们提前将libc加载进Unidbg内存中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">DalvikModule</span> dmLibc = vm.<span class="title function_">loadLibrary</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;unidbg-android/src/main/resources/android/sdk23/lib/libc.so&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"><span class="title class_">Module</span> moduleLibc = dmLibc.<span class="title function_">getModule</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// HOOK popen</span></span><br><span class="line">int popenAddress = (int) moduleLibc.<span class="title function_">findSymbolByName</span>(<span class="string">&quot;popen&quot;</span>).<span class="title function_">getAddress</span>();</span><br><span class="line"><span class="comment">// 函数原型：FILE *popen(const char *command, const char *type);</span></span><br><span class="line">emulator.<span class="title function_">attach</span>().<span class="title function_">addBreakPoint</span>(popenAddress, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    public boolean <span class="title function_">onHit</span>(<span class="params">Emulator&lt;?&gt; emulator, long address</span>) &#123;</span><br><span class="line">        <span class="title class_">RegisterContext</span> registerContext = emulator.<span class="title function_">getContext</span>();</span><br><span class="line">        <span class="title class_">String</span> command = registerContext.<span class="title function_">getPointerArg</span>(<span class="number">0</span>).<span class="title function_">getString</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;lilac popen command:&quot;</span>+command);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> addBreakPoint 我们一般用于下断点，添加回调，在命中断点时打印输出popen的参数1(即传给shell的 命令)，并设置返回值为true，即做完打印程序继续跑，不用真断下来。  </p><p>第一个问题解决， 第二个问题，怎么给它合适的返回值呢？  <br /></p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/02.webp"                                     ></p><p><br /> 其实下面奇怪的报错就是popen导致的，popen返回的是文件描述符 。<br /> NR &#x3D; 190，190是什么系统调用？Unidbg尚未实现  <br /></p><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/03.webp"                                     ><br><br /> 查一下表 <a class="link"   href="https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm-32_bit_EABI" >https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm-32_bit_EABI<i class="fas fa-external-link-alt"></i></a><br /><br><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/04.webp"                                     ><br><br />而Unidbg提供了一种在底层修复和实现popen函数的法子。  <br />接着是 uname -a</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">angler</span>:/ # uname -a</span><br><span class="line"><span class="title class_">Linux</span> localhost <span class="number">3.10</span><span class="number">.73</span>-g33ace82f84b #<span class="number">1</span> <span class="variable constant_">SMP</span> <span class="variable constant_">PREEMPT</span> <span class="title class_">Fri</span> <span class="title class_">Oct</span> <span class="number">13</span> <span class="number">04</span>:<span class="number">41</span>:<span class="number">33</span> <span class="variable constant_">UTC</span> <span class="number">2017</span> aarch64</span><br></pre></td></tr></table></figure><p>首先实现自己的ARM32SyscallHandler，完整代码如下，你可以把它当成固定讨论，它是针对 popen报错的官方解决方案。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">package com.<span class="property">bailong</span>.<span class="property">qtt</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">Emulator</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">arm</span>.<span class="property">context</span>.<span class="property">EditableArm32RegisterContext</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">linux</span>.<span class="property">ARM32SyscallHandler</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">linux</span>.<span class="property">file</span>.<span class="property">ByteArrayFileIO</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">linux</span>.<span class="property">file</span>.<span class="property">DumpFileIO</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">memory</span>.<span class="property">SvcMemory</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">github</span>.<span class="property">unidbg</span>.<span class="property">pointer</span>.<span class="property">UnidbgPointer</span>;</span><br><span class="line"><span class="keyword">import</span> com.<span class="property">sun</span>.<span class="property">jna</span>.<span class="property">Pointer</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.<span class="property">util</span>.<span class="property">concurrent</span>.<span class="property">ThreadLocalRandom</span>;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">class</span> <span class="title class_">qttSyscallHandler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">ARM32SyscallHandler</span> &#123;</span><br><span class="line">    public <span class="title function_">qttSyscallHandler</span>(<span class="params">SvcMemory svcMemory</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(svcMemory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title class_">Override</span></span><br><span class="line">    protected boolean <span class="title function_">handleUnknownSyscall</span>(<span class="params">Emulator&lt;?&gt; emulator, int NR</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="variable constant_">NR</span>)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">190</span>:</span><br><span class="line">                <span class="title function_">vfork</span>(emulator);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">114</span>:</span><br><span class="line">                <span class="title function_">wait4</span>(emulator);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">handleUnknownSyscall</span>(emulator, <span class="variable constant_">NR</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">wait4</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">        <span class="title class_">EditableArm32RegisterContext</span> context = (<span class="title class_">EditableArm32RegisterContext</span>) emulator.<span class="title function_">getContext</span>();</span><br><span class="line">        int pid = context.<span class="title function_">getR0Int</span>();</span><br><span class="line">        <span class="title class_">UnidbgPointer</span> wstatus = context.<span class="title function_">getR1Pointer</span>();</span><br><span class="line">        int options = context.<span class="title function_">getR2Int</span>();</span><br><span class="line">        <span class="title class_">Pointer</span> rusage = context.<span class="title function_">getR3Pointer</span>();</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;wait4 pid=&quot;</span> + pid + <span class="string">&quot;, wstatus=&quot;</span> + wstatus + <span class="string">&quot;, options=0x&quot;</span> + <span class="title class_">Integer</span>.<span class="title function_">toHexString</span>(options) + <span class="string">&quot;, rusage=&quot;</span> + rusage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="keyword">void</span> <span class="title function_">vfork</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">        <span class="title class_">EditableArm32RegisterContext</span> context = (<span class="title class_">EditableArm32RegisterContext</span>) emulator.<span class="title function_">getContext</span>();</span><br><span class="line">        int childPid = emulator.<span class="title function_">getPid</span>() + <span class="title class_">ThreadLocalRandom</span>.<span class="title function_">current</span>().<span class="title function_">nextInt</span>(<span class="number">256</span>);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;vfork pid=&quot;</span> + childPid);</span><br><span class="line">        context.<span class="title function_">setR0</span>(childPid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected int <span class="title function_">pipe2</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">        <span class="title class_">EditableArm32RegisterContext</span> context = (<span class="title class_">EditableArm32RegisterContext</span>) emulator.<span class="title function_">getContext</span>();</span><br><span class="line">        <span class="title class_">Pointer</span> pipefd = context.<span class="title function_">getPointerArg</span>(<span class="number">0</span>);</span><br><span class="line">        int flags = context.<span class="title function_">getIntArg</span>(<span class="number">1</span>);</span><br><span class="line">        int write = <span class="title function_">getMinFd</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fdMap</span>.<span class="title function_">put</span>(write, <span class="keyword">new</span> <span class="title class_">DumpFileIO</span>(write));</span><br><span class="line">        int read = <span class="title function_">getMinFd</span>();</span><br><span class="line">        <span class="comment">// stdout中写入popen command 应该返回的结果</span></span><br><span class="line">        <span class="title class_">String</span> stdout = <span class="string">&quot;Linux localhost 3.10.73-g33ace82f84b #1 SMP PREEMPT Fri Oct 13 04:41:33 UTC 2017 aarch64</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fdMap</span>.<span class="title function_">put</span>(read, <span class="keyword">new</span> <span class="title class_">ByteArrayFileIO</span>(<span class="number">0</span>, <span class="string">&quot;pipe2_read_side&quot;</span>, stdout.<span class="title function_">getBytes</span>()));</span><br><span class="line">        pipefd.<span class="title function_">setInt</span>(<span class="number">0</span>, read);</span><br><span class="line">        pipefd.<span class="title function_">setInt</span>(<span class="number">4</span>, write);</span><br><span class="line">        <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;pipe2 pipefd=&quot;</span> + pipefd + <span class="string">&quot;, flags=0x&quot;</span> + flags + <span class="string">&quot;, read=&quot;</span> + read + <span class="string">&quot;, write=&quot;</span> + write + <span class="string">&quot;, stdout=&quot;</span> + stdout);</span><br><span class="line">        context.<span class="title function_">setR0</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解释一下为什么不直接补在ARM32SyscallHandler中？因为Unidbg并没有真正实现wait4和fork这两个 系统调用，只不过对于popen而言，用上述方式可以“凑合用”，既然不是完美的实现，自然不能放到 ARM32SyscallHandler中去，免得出大问题。  </p><p> 在pipe2中注释下的stdout中传入正确返回值即可，比如uname -a就是，需要注意，结果都i要加换行 符，这是shell结果的返回习惯。</p><p> 接下来让我们的emulator使用我们自己的syscallHandler，emulator &#x3D; new AndroidARMEmulator(new File(“target&#x2F;rootfs”)); 由如下洋洋洒洒十来行取代。  <br />  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建模拟器实例，要模拟32位或者64位，在这里区分</span></span><br><span class="line"><span class="comment">//        emulator = AndroidEmulatorBuilder.for32Bit().build();</span></span><br><span class="line"><span class="title class_">AndroidEmulatorBuilder</span> builder = <span class="keyword">new</span> <span class="title class_">AndroidEmulatorBuilder</span>(<span class="literal">false</span>) &#123;</span><br><span class="line">    public <span class="title class_">AndroidEmulator</span> <span class="title function_">build</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AndroidARMEmulator</span>(processName, rootDir,backendFactories) &#123;</span><br><span class="line">            @<span class="title class_">Override</span></span><br><span class="line">            protected <span class="title class_">UnixSyscallHandler</span>&lt;<span class="title class_">AndroidFileIO</span>&gt;</span><br><span class="line">            <span class="title function_">createSyscallHandler</span>(<span class="params">SvcMemory svcMemory</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">qttSyscallHandler</span>(svcMemory);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">emulator = builder.<span class="title function_">setRootDir</span>(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;target/rootfs&quot;</span>)).<span class="title function_">build</span>();</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/05.webp"                                     ><br /> 直接跑出了结果，但我们的任务其实还没有完成&#x3D; &#x3D;，tag中搜索lilac popen，发现一共调用了三次  </p><blockquote><p>lilac popen command:uname -a<br>lilac popen command:cd &#x2F;system&#x2F;bin &amp;&amp; ls -l<br>lilac popen command:stat &#x2F;root  </p></blockquote><p> 我们上面的代码，似乎只处理了uname -a应该返回的值，后面两次呢？怎么在pipe2中根据 popen输入的command返回合适的输出呢？  <br />我们可以使用emulator的全局变量来完成这一点  <br /><br> <img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/06.webp"                                     ><br> <br /> 对应的qttSyscallHandler代码，其中 cd &#x2F;system&#x2F;bin &amp;&amp; ls -l 和 stat &#x2F;root 的结果来自adb shell，大家 根据自己的测试机情况填入合适的结果。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">protected int <span class="title function_">pipe2</span>(<span class="params">Emulator&lt;?&gt; emulator</span>) &#123;</span><br><span class="line">    <span class="title class_">EditableArm32RegisterContext</span> context = (<span class="title class_">EditableArm32RegisterContext</span>) emulator.<span class="title function_">getContext</span>();</span><br><span class="line">    <span class="title class_">Pointer</span> pipefd = context.<span class="title function_">getPointerArg</span>(<span class="number">0</span>);</span><br><span class="line">    int flags = context.<span class="title function_">getIntArg</span>(<span class="number">1</span>);</span><br><span class="line">    int write = <span class="title function_">getMinFd</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fdMap</span>.<span class="title function_">put</span>(write, <span class="keyword">new</span> <span class="title class_">DumpFileIO</span>(write));</span><br><span class="line">    int read = <span class="title function_">getMinFd</span>();</span><br><span class="line">    <span class="title class_">String</span> stdout = <span class="string">&quot;</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">    <span class="comment">// stdout中写入popen command 应该返回的结果</span></span><br><span class="line">    <span class="title class_">String</span> command = emulator.<span class="title function_">get</span>(<span class="string">&quot;command&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span> (command) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;uname -a&quot;</span>: &#123;</span><br><span class="line">            stdout = <span class="string">&quot;Linux localhost 3.10.73-g33ace82f84b #1 SMP PREEMPT Fri Oct 13 04:41:33 UTC 2017 aarch64</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;cd /system/bin &amp;&amp; ls -l&quot;</span>: &#123;</span><br><span class="line">            stdout = <span class="string">&quot;total 25152</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 128688 2009-01-01 08:00 abb</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;lrwxr-xr-x 1 root shell 6 2009-01-01 08:00 acpi -&gt; toybox</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 30240 2009-01-01 08:00 adbd</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 207 2009-01-01 08:00 am</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 456104 2009-01-01 08:00 apexd</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;lrwxr-xr-x 1 root shell 13 2009-01-01 08:00 app_process -&gt; app_process64</span></span><br><span class="line"><span class="string">&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;-rwxr-xr-x 1 root shell 25212 2009-01-01 08:00 app_process32</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;stat /root&quot;</span>: &#123;</span><br><span class="line">            stdout = <span class="string">&quot;stat: &#x27;/root&#x27;: No such file or directory</span></span><br><span class="line"><span class="string">&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;command do not match!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">fdMap</span>.<span class="title function_">put</span>(read, <span class="keyword">new</span> <span class="title class_">ByteArrayFileIO</span>(<span class="number">0</span>, <span class="string">&quot;pipe2_read_side&quot;</span>, stdout.<span class="title function_">getBytes</span>()));</span><br><span class="line">    pipefd.<span class="title function_">setInt</span>(<span class="number">0</span>, read);</span><br><span class="line">    pipefd.<span class="title function_">setInt</span>(<span class="number">4</span>, write);</span><br><span class="line">    <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;pipe2 pipefd=&quot;</span> + pipefd + <span class="string">&quot;, flags=0x&quot;</span> + flags + <span class="string">&quot;, read=&quot;</span> + read + <span class="string">&quot;, write=&quot;</span> + write + <span class="string">&quot;, stdout=&quot;</span> + stdout);</span><br><span class="line">    context.<span class="title function_">setR0</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getenv的处理"><a href="#getenv的处理" class="headerlink" title="getenv的处理"></a>getenv的处理</h3><p> getenv的出现频率也挺高， 首先我们看一下当前测试机有哪些环境变量    </p><blockquote><p>angler:&#x2F;system&#x2F;bin $ export<br>ANDROID_ASSETS<br>ANDROID_BOOTLOGO<br>ANDROID_DATA<br>ANDROID_ROOT<br>ANDROID_SOCKET_adbd<br>ANDROID_STORAGE<br>ASEC_MOUNTPOINT<br>BOOTCLASSPATH<br>DOWNLOAD_CACHE<br>EXTERNAL_STORAGE<br>HOME<br>HOSTNAME<br>LOGNAME<br>PATH<br>SHELL<br>SYSTEMSERVERCLASSPATH<br>TERM<br>TMPDIR<br>USER</p></blockquote><p> 看一下PATH的内容  </p><blockquote><p>angler:&#x2F;system&#x2F;bin $ echo $PATH<br>&#x2F;sbin:&#x2F;system&#x2F;sbin:&#x2F;system&#x2F;bin:&#x2F;system&#x2F;xbin:&#x2F;vendor&#x2F;bin:&#x2F;vendor&#x2F;xbin</p></blockquote><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/07.webp"                                     ><br /> getValue取不到结果，原因就是getenv没有返回值，那么该怎么办呢？   这里给env返回正确的值有几种办法呢？  </p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p> Unidbg提供了对环境变量的初始化，它在 src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;linux&#x2F;AndroidElfLoader.java中。  <br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/08.webp"                                     ><br /> 我们填上这一个就行，为了辨别不同方法是否生效，我们这里返回1  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.environ = initializeTLS(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;</span><br><span class="line">        <span class="string">&quot;ANDROID_DATA=/data&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ANDROID_ROOT=/system&quot;</span>,</span><br><span class="line">        <span class="comment">//&quot;PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin&quot;,</span></span><br><span class="line">        <span class="string">&quot;NO_ADDR_COMPAT_LAYOUT_FIXUP=1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PATH=1&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p> libc 提供了setenv方法，可以设置环境变量。 <br />在调用函数前先调用该方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setenv设置环境变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEnv</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Symbol</span> <span class="variable">setenv</span> <span class="operator">=</span> <span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;setenv&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    setenv.call(emulator, <span class="string">&quot;PATH&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p> 通过HookZz hook函数，替换结果  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookgetEnvByHookZz</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HookZz</span> <span class="variable">hookZz</span> <span class="operator">=</span> HookZz.getInstance(emulator);</span><br><span class="line">    hookZz.wrap(<span class="keyword">module</span>.findSymbolByName(<span class="string">&quot;getenv&quot;</span>), <span class="keyword">new</span> <span class="title class_">WrapCallback</span>&lt;EditableArm32RegisterContext&gt;() &#123;</span><br><span class="line">        String name;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preCall</span><span class="params">(Emulator&lt;?&gt; emulator, EditableArm32RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">            name = ctx.getPointerArg(<span class="number">0</span>).getString(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postCall</span><span class="params">(Emulator&lt;?&gt; emulator, EditableArm32RegisterContext ctx, HookEntryInfo info)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (name)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;PATH&quot;</span>: &#123;</span><br><span class="line">                    <span class="type">MemoryBlock</span> <span class="variable">replaceBlock</span> <span class="operator">=</span> emulator.getMemory().malloc(<span class="number">0x100</span>, <span class="literal">true</span>);</span><br><span class="line">                    <span class="type">UnidbgPointer</span> <span class="variable">replacePtr</span> <span class="operator">=</span> replaceBlock.getPointer();</span><br><span class="line">                    <span class="type">String</span> <span class="variable">pathValue</span> <span class="operator">=</span> <span class="string">&quot;3&quot;</span>;</span><br><span class="line">                    replacePtr.write(<span class="number">0</span>, pathValue.getBytes(StandardCharsets.UTF_8), <span class="number">0</span>, pathValue.length());</span><br><span class="line">                    ctx.setR0(replacePtr.toIntPeer());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">super</span>.postCall(emulator, ctx, info);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><p> 也可以通过断点的方式hook  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hookgetEnvByBreakPointer</span><span class="params">()</span> &#123;</span><br><span class="line">    emulator.attach().addBreakPoint(<span class="keyword">module</span>.base + <span class="number">0x7FE</span>, <span class="keyword">new</span> <span class="title class_">BreakPointCallback</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onHit</span><span class="params">(Emulator&lt;?&gt; emulator, <span class="type">long</span> address)</span> &#123;</span><br><span class="line">            <span class="type">EditableArm32RegisterContext</span> <span class="variable">registerContext</span> <span class="operator">=</span></span><br><span class="line">                    emulator.getContext();</span><br><span class="line">            registerContext.getPointerArg(<span class="number">0</span>).setString(<span class="number">0</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">            emulator.getBackend().reg_write(ArmConst.UC_ARM_REG_PC,</span><br><span class="line">                    (address) + <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 直接让R0指针指向正确的值，并操纵PC寄存器跳过这条指令  <br /><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/Zskkk/blog-images@master/20221223/09.webp"                                     ></p><h4 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h4><p> 仿照SystemPropertyHook写一下，代码如下  <br />在 vm.loadLibrary 加载so文件之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">EnvHook</span> <span class="variable">envHook</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EnvHook</span>(emulator);</span><br><span class="line">memory.addHookListener(envHook);</span><br></pre></td></tr></table></figure><p> EnvHook.java  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.unidbg.Emulator;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.ArmHook;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.HookStatus;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.arm.context.RegisterContext;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.hook.HookListener;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.memory.SvcMemory;</span><br><span class="line"><span class="keyword">import</span> com.github.unidbg.pointer.UnidbgPointer;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnvHook</span> <span class="keyword">implements</span> <span class="title class_">HookListener</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Emulator&lt;?&gt; emulator;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EnvHook</span><span class="params">(Emulator&lt;?&gt; emulator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.emulator = emulator;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">hook</span><span class="params">(SvcMemory svcMemory, String libraryName, String symbolName,</span></span><br><span class="line"><span class="params">                     <span class="keyword">final</span> <span class="type">long</span> old)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;libc.so&quot;</span>.equals(libraryName) &amp;&amp; <span class="string">&quot;getenv&quot;</span>.equals(symbolName)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (emulator.is32Bit()) &#123;</span><br><span class="line">                <span class="keyword">return</span> svcMemory.registerSvc(<span class="keyword">new</span> <span class="title class_">ArmHook</span>() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">protected</span> HookStatus <span class="title function_">hook</span><span class="params">(Emulator&lt;?&gt; emulator)</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> getenv(old);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;).peer;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> HookStatus <span class="title function_">getenv</span><span class="params">(<span class="type">long</span> old)</span> &#123;</span><br><span class="line">        <span class="type">RegisterContext</span> <span class="variable">context</span> <span class="operator">=</span> emulator.getContext();</span><br><span class="line">        <span class="type">UnidbgPointer</span> <span class="variable">pointer</span> <span class="operator">=</span> context.getPointerArg(<span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> pointer.getString(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">switch</span> (key)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;PATH&quot;</span>:&#123;</span><br><span class="line">                pointer.setString(<span class="number">0</span>, <span class="string">&quot;5&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> HookStatus.LR(emulator, pointer.peer);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> HookStatus.RET(emulator, old);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img  
                     lazyload
                     alt=&quot;image&quot;
                     data-src=&quot;https://jsd.cdn.zzko.cn/gh/Zskkk/blo</summary>
      
    
    
    
    
    <category term="Unidbg" scheme="https://www.zskkk.cn/tags/Unidbg/"/>
    
  </entry>
  
</feed>
