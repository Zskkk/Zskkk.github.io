[{"title":"HTTP TCP/IP协议与抓包原理","url":"/posts/50697/","content":"网络基础 TCP&#x2F;IP在说Http之前，先来说一下TCP&#x2F;IP协议。\nTCP&#x2F;IP协议是众多协议的统称，像HTTP，TCP,UDP,DNS等都包括在里面\nTCP&#x2F;IP 协议会把这些进行分层，按层次分为4层：应用层、传输层、网络层、数据链路层。\n也有细分为7层的，应用层、表示层、会话层、传输层、网络层、数据链路层、物理层像HTTP、FTP、DNS就属于应用层，TCP、UDP在传输层，IP在网络层 \n\n\n\nTCP&#x2F;IP通信传输流\n\n\n以HTTP来举例，首先作为发送端的客户端在应用层以HTTP协议发出一个想看某个Web页面的HTTP请求。在应用层会经过DNS解析，通过域名查找IP地址\n\n接着，为了传输方便，在传输层用了TCP协议把从应用层处收到的数据HTTP请求的报文进行分割，并在各个报文上打上标记序号及端口号转发给网络层\n在网络层IP协议，增加作为通信目的地的MAC地址后转发给链路层。\n接收端的服务器在链路层接受数据，按序往上层发送，一直到应用层。在传输到传输层的时候，会把接收到的数据包按原来的顺序重组请求报文。当传输到应用层，才算真正接受到由客户端发送过来的HTTP请求。\n作为接收端的服务器收到发送端的请求后，会把对应的页面以同样的TCP&#x2F;IP通信协议进行回传。\n发送端在层与层之间传输数据时，每经过一层时会被打上该层所属的首部信息，反之，接受端在层与层传输数据时，每经过一层时会把对应的首部消去。\n\n\nTCP协议的可靠性（三次握手）TCP位于传输层，提供可靠的字节流服务。所谓字节流服务指，为了方便传输，将大块数据分割成报文段为单位的数据包进行管理，可靠性指能够准确可靠的传输给对方。一言以蔽之，TCP协议为了更容易传输大数据才把数据分割，而且TCP协议能够确认数据最终是否送达对方。\n确保数据能到达目标为了准确无误的将数据送达目标处，TCP协议采用了三次握手策略。用TCP协议把数据包送出去后，TCP不会对传送后的情况置之不理，它一定会向对方确认是否成功送达，握手过程中使用了TCP的标志SYN和ACK。\n\n发送端首先发送一个带SYN标志的数据包给对方。\n接收端收到后，回传一个带有SYN/ACK标志的数据包以示传达确认信息。\n最后，发送端再回传一个带ACK标志的数据包，代表握手结束。\n若在握手过程中某个阶段莫名中断，TCP协议会再次以相同的顺序发送相同的数据包。\n\n\n\n\n为什么不是二次，四次握手，而是三次？四次？很显然1.2和1.3 这两个步骤可以合并，只需要三次握手，可以提高连接的速度与效率。\n\n\n二次？现假定出现一种异常情况，即A发出的第一个请求连接报文段并没有丢失，而是在某些网络结点长时间滞留了，以至到连接释放以后的某个时间才到达B。本来这是一个已失效的报文段。但B收到此失效的连接请求报文段后，就误认为是A又发出一次新的连接请求。于是就向A发出确认报文段，同意建立连接。假定不采用三次握手，那么只要B发出确认，新的连接就建立了。\n由于现在A并没有发出建立请求的连接，因此不会理睬B的确认，也不会向B发送数据，但B却以为新的运输连接已经建立了，并一直等待A发来的数据。B的许多资源就这样白白浪费了。\n采用三次握手的办法可以防止上述现象发生。例如在刚才的情况下，A不会向B的确认发出确认。B由于收不到确认，就知道A并没有要求建立连接，所以就不会分配资源给这个连接\n\n\n\n\nHTTP 是不保存状态的协议HTTP 是一种不保存状态，即无状态（stateless）协议。HTTP 协议自 身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP 这个 级别，协议对于发送过的请求或响应都不做持久化处理。\n虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了Cookie 技术。有了 Cookie 再用 HTTP 协议通信，就可以管 理状态了。\n\n\n持久连接HTTP&#x2F;1.1 和一部分的HTTP&#x2F;1.0 想出了 持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive 或 HTTP connection reuse）的方法。持久连接的特点是，只要任意一端 没有明确提出断开连接，则保持 TCP 连接状态。\n持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额 外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相 应提高了。\n\n持久连接的好处在于减少了 TCP 连接的重复建立和断开所造成的额 外开销，减轻了服务器端的负载。另外，减少开销的那部分时间，使 HTTP 请求和响应能够更早地结束，这样 Web 页面的显示速度也就相 应提高了。\n\n\n四次挥手：TCP连接是双向传输的对等的模式，就是说双方都可以同时向对方发送或接收数据。当有一方要关闭连接时，会发送指令告知对方，我要关闭连接了。这时对方会回一个ACK，此时一个方向的连接关闭。但是另一个方向仍然可以继续传输数据，等到发送完了所有的数据后，会发送一个FIN段来关闭此方向上的连接。接收方发送ACK确认关闭连接。\n\n\nHTTP的缺点\n通信使用明文（不加密），内容可能会被窃听\n\n不验证通信方的身份，因此有可能遭遇伪装\n无法证明报文的完整性，所以有可能已遭篡改\n对于 HTTP 来说，服务器也好，客户端也好，都是没有办法确认通信方的。因为很有可能并不是和原本预想的通信方在实际通信。 并且还需要考虑到接收到的报文在通信途中已经遭到篡改这一可能性。\n为了统一解决上述这些问题，需要在 HTTP 上再加入加密处理和认证 等机制。我们把添加了加密及认证机制的 HTTP 称为 HTTPS\n通信的加密一种方式就是将通信加密。HTTP 协议中没有加密机制，但可以通过和 SSL（Secure Socket Layer，安全套接层）或 TLS（Transport Layer Security，安全层传输协议）的组合使用， 加密 HTTP 的通信内容。\n用 SSL建立安全通信线路之后，就可以在这条线路上进行 HTTP 通信了。与 SSL组合使用的HTTP 被称为 HTTPS（HTTP Secure，超文本传输安全协议）。\n\n\nHTTP+ 加密 + 认证 + 完整性保护 &#x3D;HTTPS可以说HTTPS 是身披 SSL 外壳的 HTTP\nHTTPS 并非是应用层的一种新协议。只是 HTTP 通信接口部分用 SSL和TLS协议代 替而已。\n通常，HTTP 直接和 TCP 通信。当使用 SSL时，则演变成先和 SSL通信，再由 SSL和 TCP 通信了。简言之，所谓HTTPS，其实就是身披 SSL协议这层外壳的 HTTP。\n在采用 SSL后，HTTP 就拥有了 HTTPS 的加密、证书和完整性保护 这些功能。\n\n\nSSL&#x2F;TLS加密第一次访问采用非对称加解密（非对称指客户端和服务器都有自己的公钥和私钥）客户端访问服务器，\n服务器收到客户端访问返回服务器的公钥，\n客户端收到服务器的公钥，用服务器的公钥对客户端的公钥进行加密发送给服务器，\n服务器收到加密后的公钥，用服务器的私钥进行解密取得客户端的公钥，\n将session key用客户端的公钥进行加密发送给客户端，\n客户端用自己的私钥进行解密获取session key\n\n\n后续通信使用对称加解密（对称加密指客户端和服务器使用同一套公钥私钥）对session key加密后发送session key进行通信\n非对称加解密只是用于session key安全的在两者之间进行传递，因为非对称加解密的开销很大。session key是有时效性的\n\n\n加入了抓包软件后SSL&#x2F;TLS加密Charles对客户端来说是服务器，对服务器来说是客户端\n1.客户端去访问Charles，Charles去访问服务器\n2.服务器会给Charles发送服务器的公钥，Charles会给客户端发送Charles的公钥\n3.客户端用Charles的公钥对自己的公钥进行加密发送给Charles，Charles用服务器的公钥对自己的公钥进行加密发送给服务器\n4.服务器用自己的私钥解开得到Charles的公钥，Charles用自己的私钥解开得到客户端的公钥\n5.服务器得到Charles的公钥对session key加密发送给Charles，Charles用自己的私钥解开得到session key\n6.Charles把session key用客户端的公钥对session key加密后发送给客户端，客户端用自己的私钥解开得到session key到这里客户端，Charles，服务器的session key就统一了。\nCharles抓不到包打开Charles抓不到包，为什么导入Charles的证书之后，app抓包就正常了呢？\n\n有了Charles置于中间之后，本来c/s架构的通信过程会“分裂”为两个独立的通信过程，app本来验证的是服务器的证书，服务器的证书手机的根证书是认可的，直接内置的；但是分裂成两个独立的通信过程之后，app验证的是Charles的证书，它的证书手机根证书并不认可，它并不是由手机内置的权威根证书签发机构签发的，所以手机不认，然后app也不认；所以我们要把Charles的证书导入到手机根证书目录中去，这样手机就会认可，如果app没有进行额外的校验（比如在代码中对该证书进行校验，也就是SSL pinning系列API)的话，app也会直接认可接受。\n\n\n\n在高版本的安卓上，用户安装的证书不会直接安装到系统根证书目录中，需要root手机后将证书移动到系统根证书目录中去。\n 当Charles的证书安装到系统根目录中去之后，系统就会信任来自Charles的流量包了，我们的抓包过程就会回归正常\n 1.安装个人证书 通过VPN连接到Charles，然后用浏览器访问chls.pro&#x2F;ssl，会自动弹出安装个人证书。\n 个人证书安装在手机的 &#x2F;data&#x2F;misc&#x2F;user&#x2F;0&#x2F;cacerts-added 目录下\n 2.复制个人证书到系统目录（安卓8以上需要） cd /data/misc/user/0/cacerts-added/ mount -o remount,rw /systemmv * /etc/security/cacerts/ cd  /etc/security/cacerts/ls -alit mount -o remount,ro /system\n\n\nSSL Pinning（情况更少） \n 就是客户端并不会默认信任系统根证书目录中的证书，而是在代码里再加一层校验，这就是证书绑定机制——SSL pinning，如果这段代码的校验过不了，那么客户端还是会报证书错误。\n \n\n \n\nHttps客户端代码校验服务器证书 案例：滴答清单\n遇到这种情况的时候，有这两种方式，当然目标是一样的，都是hook住这段校验的代码，使这段判断的机制失效即可。\n\nhook住checkServerTrusted，将其所有重载都置空；\n\nfunction hook_ssl() &#123;    Java.perform(function() &#123;        var ClassName = &quot;com.android.org.conscrypt.Platform&quot;;        var Platform = Java.use(ClassName);        var targetMethod = &quot;checkServerTrusted&quot;;        var len = Platform[targetMethod].overloads.length;        console.log(len);        for(var i = 0; i &lt; len; ++i) &#123;            Platform[targetMethod].overloads[i].implementation = function () &#123;                console.log(&quot;class:&quot;, ClassName, &quot;target:&quot;, targetMethod, &quot; i:&quot;, i, arguments);                //printStack(ClassName + &quot;.&quot; + targetMethod);            &#125;        &#125;    &#125;);&#125;\n\n\n\n使用objection，直接将SSL pinning给disable掉  android sslpinning disable\n\n\n\n\n如果还有一些情况没有覆盖的话，可以来看看https://github.com/WooyunDota/DroidSSLUnpinning\n\n\n目录ObjectionUnpinningPlus增加了ObjectionUnpinning没覆盖到的锁定场景.(objection)\n\n使用方法1 attach : frida -U com.example.mennomorsink.webviewtest2 —no-pause -l hooks.js\n\n使用方法2 spawn : python application.py com.example.mennomorsink.webviewtest2\n\n\n\nObjectionUnpinningPlus hook list:\n\nSSLcontext(ART only)\n\nokhttp\n\nwebview\n\nXUtils(ART only)\n\nhttpclientandroidlib\n\nJSSE\n\nnetwork_security_config (android 7.0+)\n\nApache Http client (support partly)\n\nOpenSSLSocketImpl\n\nTrustKit\n\n\n\n\n应该可以覆盖到目前已知的所有种类的证书绑定了。\n\n\n服务器校验客户端证书（情况少） \n既然app客户端会校验服务器证书，那么服务器可不可能校验app客户端证书呢？答案是肯定的。\n\n单一通信已经分裂成两个互相独立的通信，这时候与服务器进行通信的已经不是app、而是Charles了，所以我们要将app中内置的证书导入到Charles中去。\n这个操作通常需要完成两项内容：\n\n找到证书文件\n找到证书密码\n\n\n\n\n\nfunction hook_KeyStore_load() &#123;    Java.perform(function () &#123;        var StringClass = Java.use(&quot;java.lang.String&quot;);        var KeyStore = Java.use(&quot;java.security.KeyStore&quot;);        KeyStore.load.overload(&#x27;java.security.KeyStore$LoadStoreParameter&#x27;).implementation = function (arg0) &#123;            //printStack(&quot;KeyStore.load1&quot;);            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));            console.log(&quot;KeyStore.load1:&quot;, arg0);            this.load(arg0);        &#125;;        KeyStore.load.overload(&#x27;java.io.InputStream&#x27;, &#x27;[C&#x27;).implementation = function (arg0, arg1) &#123;            //printStack(&quot;KeyStore.load2&quot;);            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));            console.log(&quot;KeyStore.load2:&quot;, arg0, arg1 ? StringClass.$new(arg1) : null);            this.load(arg0, arg1);        &#125;;        console.log(&quot;hook_KeyStore_load...&quot;);    &#125;);&#125;setImmediate(hook_KeyStore_load)\n \n找到证书文件很简单，一般apk进行解包，直接过滤搜索后缀名为p12的文件即可，一般常用的命令为 tree -NCfhl |grep -i p12，直接打印出p12文件的路径\n\n想要拿到密码也很简单，一般解密会调用现成的API，java.security.KeyStore ，直接使用frida打印出来，也可以hook系统文件库\n\n\n\n\nobjection -g cn.soulapp.android explore//android hooking watch class_method java.io.File.$init - -dump-args --dump-backtrace --dump-returnandroid hooking watch class_method java.io.File.$init - -dump-args\n\n有了证书和密码之后，就可以将其导入到抓包软件中\n\n\n\n\n一般HTTPS：大部分只采用客户端检验服务器\n\n双向绑定：很少会有服务器校验客户端\n\n\nSSL cert Pinning：更少（案例：趣充）\n\n\n推荐使用Postern+Charles组合进行抓包我们平时用代理的时候，都是通过给wifi设置http代理的方式进行抓包，只是在应用层抓包，所以会被很轻易的检测到和绕过的。\n 很多应用会通过\nSystem.getProperty(“http.proxyHost”)\nSystem.getProperty(“http.proxyPort”);\n这两个API来查看当前系统是否挂了http代理，会很轻松的让你的抓包失效。\n这时候只能用Frida或Xposed来hook这个接口、修改其返回值\n\n所以我们需要换一种方式来设置代理。就是设置vpn代理，vpn是属于网络层的，设置了vpn后，你的手机上ifconfig后会多一个tun0的接口，等于加了一个虚拟网卡，所有的流量都会从这走。应用层和传输层的请求都可以拿到，还不会被上面提及的两个api所检测。\n\n\n\n输入ip route show table 0 |grep defalut查看路由表\n路由表的第一条就指向了tun0，可以说开vpn的效果就和直连的效果一摸一样。\n","tags":["抓包"]},{"title":"对称加密算法AES的原理及分析","url":"/posts/57259/","content":"\nAES算法简述分组加密有几种方式分别是：\nECB：是一种基础的加密方式，密文被分割成分组长度相等的块（不足补齐），然后单独一个个加密，一个个输出组成密文。将整个明文分成若干段相同的小段，然后对每一小段进行加密00112233445566778899aabbccddee 还差2位hex（1个字节），填充01：00112233445566778899aabbccddee0100112233445566778899aabbccddeeff 等于128比特，需要填充一整个分组：00112233445566778899aabbccddeeff(hex)==&gt; 00112233445566778899aabbccddeeff10101010101010101010101010101010最少填充一字节，最多填充一整个分组，不能不填充。\nCBC：是一种循环模式，前一个分组的密文和当前分组的明文异或操作后再加密，这样做的目的是增强破解难度。先将明文切分成若干小段，然后每一小段与初始块或者上一段的密文段进行异或运算后，再与密钥进行加密\nCFB/OFB实际上是一种反馈模式，目的也是增强破解的难度。密码算法的输出（指密码key而不是密文）会反馈到密码算法的输入中，OFB模式并不是通过密码算法对明文直接加密，而是通过将明文分组和密码算法的输出进行XOR来产生密文分组。\nECB和CBC的加密结果是不一样的，两者的模式不同，而且CBC会在第一个密码块运算时加入一个初始化向量。\n\nAES-128接收16字节的明文输入，16字节的密钥，输出16字节的密文结果。\n\n\n入参：明文：128比特（32个十六进制数、16个字节）KEY：128比特（32十六进制数、16个字节）出参：128比特（32个十六进制数、16个字节）\n明文：7a68656e677368616f6b756e79796473（hex）密钥：0123456789abcdef0123456789abcdef（hex）\n下方是整体流程图：\n首先看整体的流程图，我们发现，AES的整体图景可以分成左右两块，即明文的处理和密钥的编排。明文的处理主体是一个初始化轮密钥加和十轮运算，在初始化轮密钥加十轮运算中都需要使用密钥编排的结果。密钥编排将16个字节经过运算推演出11组轮密钥，每一组16个字节，称之为K0,K1,K2…K10\n密钥编排下面我们看一下密钥扩展是如何算出来的，这是我们的密钥Key 0123456789abcdef0123456789abcdef。为了区分密钥和密钥编排后的轮密钥，我们将此时的密钥叫主密钥。\n在AES-128中，密钥扩展后得16*11共176字节，使用时逐十六个字节划分成K0,K1,…K10使用，但是在生成时，它是逐四个字节生成的，即44*4。我们不妨用数组来描述它，即一个包含了44个元素的数组,叫W。\n这四十四个元素的生成规则有三种，如下图所示：\n\n不同颜色代表了不同规则。最上方的W0,W1,W2,W3 就是主密钥本身切成四段。Key = 0123456789abcdef0123456789abcdefW0 = 01234567W1 = 89abcdefW2 = 01234567W3 = 89abcdef\n左侧的红色部分，W4,W8,W12,….W40的生成复杂一点。Wn=g(Wn−1) xor Wn−4xor 是异或运算，比如 W4=g(W3) xor W0。g(当前元素前面那个元素) 异或 当前元素头顶上那个元素。\n那么关键点就是这个 g 函数了， g 函数一共三个步骤——循环左移、S盒替换、字节异或。 我们以W4运算中所需的W3为例。W3=89abcdef\ng函数——循环左移、S盒替换、字节异或循环左移首先是循环左移，规则固定—— 将最左边的一个字节挪到右边即可 \n\n循环左移后为 abcdef89\nS盒替换第二步是S盒替换，S盒替换听着很高级，但操作上很简单——将数值本身作为索引取出S数组中对用的值。S盒是固定的。\nSBox = [    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]num = 0xabresult = SBox[num]print(hex(result))# 0x62\n\nS盒的背后有十分复杂的知识，但好在我们并不需要去了解。\nAB CD EF 89 经过S盒替换后为 62 BD DF A7\n最高字节和一个固定常量异或最后一个步骤更简单，将上一步结果中的最高字节和一个固定常量异或。W4的生成是第一个，用如下rcon表的第一个元素0x1。W40即第十次，用最后一个元素0x36.\nrcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]#        W4    W8    W12   W16   W20   W24   W28   W32   W36   W40\n\n62 BD DF A7 最高位62与rcon第一个元素，即0x01异或后为：63 BD DF A7 W4 = g(W3) xor W0   = g(0x89abcdef) xor 0x01234567   = 0x63BDDFA7 xor 0x01234567   = 0x629e9ac0最后一步可以直接用python算: \nprint(hex(0x63BDDFA7 ^ 0x01234567))\n上图中蓝色和红色的部分都讲完了，那么橙色部分呢？相当的简单，和红色部分类似，去掉g函数即可Wn=Wn−1 xor Wn−4打个比方，W5 = W4 ^ W1 = 0x629e9ac0 ^ 0x89abcdef = 0xeb35572f 如下是完整的密钥编排部分的Python代码\nSbox = (    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,)Rcon = (0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36)def text2matrix(text):    matrix = []    for i in range(16):        byte = (text &gt;&gt; (8 * (15 - i))) &amp; 0xFF        if i % 4 == 0:            matrix.append([byte])        else:            matrix[i // 4].append(byte)    return matrixdef shiftRound(array, num):    '''    :param array: 需要循环左移的数组    :param num: 循环左移的位数    :return: 使用Python切片，返回循环左移num个单位的array    '''    return array[num:] + array[:num]def g(array, index):    '''    g 函数    :param array: 待处理的四字节数组    :index:从1-10，每次使用Rcon中不同的数    '''    # 首先循环左移1位    array = shiftRound(array, 1)    # 字节替换    array = [Sbox[i] for i in array]    # 首字节和rcon中对应元素异或    array = [(Rcon[index] ^ array[0])] + array[1:]    return arraydef xorTwoArray(array1, array2):    '''    返回两个数组逐元素异或的新数组    :param array1: 一个array    :param array2: 另一个array    :return:    '''    assert len(array1) == len(array2)    return [array1[i] ^ array2[i] for i in range(len(array1))]def showRoundKeys(kList):    for i in range(len(kList)):        print(\"K%02d:\" %i +\"\".join(\"%02x\" % k for k in kList[i]))def keyExpand(key):    master_key = text2matrix(key)    round_keys = [[0] * 4 for i in range(44)]    # 规则一(图中红色部分)    for i in range(4):        round_keys[i] = master_key[i]    for i in range(4, 4 * 11):        # 规则二(图中红色部分)        if i % 4 == 0:            round_keys[i] = xorTwoArray(g(round_keys[i - 1], i // 4), round_keys[i - 4])        # 规则三(图中橙色部分)        else:            round_keys[i] = xorTwoArray(round_keys[i - 1], round_keys[i - 4])    # 将轮密钥从44*4转成11*16,方便后面在明文的运算里使用    kList = [[] for i in range(11)]    for i in range(len(round_keys)):        kList[i//4] += round_keys[i]    showRoundKeys(kList)    return kListinput_bytes = 0x00112233445566778899aabbccddeeffkey = 0x2b7e151628aed2a6abf7158809cf4f3ckList = keyExpand(key)\n运行结果如下\nK00:0123456789abcdef0123456789abcdefK01:629e9ac0eb35572fea16124863bddfa7K02:1a00c63bf13591141b23835c789e5cfbK03:154ac987e47f5893ff5cdbcf87c28734K04:385dd190dc228903237e52cca4bcd5f8K05:4d5e90d9917c19dab2024b1616be9eeeK06:c355b89e5229a144e02bea52f69574bcK07:a9c7dddcfbee7c981bc596caed50e276K08:7a5fe58981b199119a740fdb7724edadK09:570a707cd6bbe96d4ccfe6b63beb0b1bK10:8821df9e5e9a36f31255d04529bedb5e\n我们对AES密钥编排部分的学习就基本完成了。\n明文运算现在开始学习明文的运算，即图中左边的部分。首先，我们要调整明文的格式，在AES中，数据以state的形式计算、中间存储和传输，中文名即状态。从明文转到state形式很简单，以我们的明文7a68656e677368616f6b756e79796473为例。从上到下，从左到右。千万不要颠倒顺序，第一行不是“7a 68 65 6e”。除此之外，state中的数，我们一般用十六进制表示，且不加0x前缀，这样看着比较舒服。除非特意强调是十进制，否则下文均为十六进制。\n\n接下来是轮密钥加步骤，因为是第一次轮密钥加步骤，所以也叫初始轮密钥加。轮密钥加步骤听着很怪，但实质很简单。只需要将对应的轮密钥和   一样从上到下，从左到右排列。两个矩阵逐字节异或，这就是轮密钥加步骤。为什么要叫轮密钥加而不是轮密钥异或？我们卖个关子，后面再说。初始的轮密钥加使用 K0 ，0123456789abcdef0123456789abcdef。\n\n接下来就是十轮主运算，看如下的伪代码，我们可以清楚看到一轮运算中有什么，以及第十轮和前九轮有什么区别。\n\n初始的明文转和最后的转明文自不必说，然后是初始轮密钥，使用 K0 。前九轮运算中，包含四个步骤： 字节替换，循环左移，列混淆，轮密钥加。 第十轮中，包含三个步骤：字节替换，循环左移，轮密钥加。相比前九轮缺一个列混淆，其余相同。十轮运算中的轮密钥加，和初始轮密钥加相比，除了使用的轮密钥不同外，并无不同，分别为K1…..K10。而  字节替换步骤，和密钥编排中的S盒替换完全一致。  即循环左移，和密钥编排中的循环左移类似，但有差异。密钥编排中， g 函数中也需循环左移，但其中待处理的数据仅有一行，而明文编排中  是四行。其循环左移规则如下：第一行不循环左移，第二行循环左移1字节，第三行循环左移2字节，第四行循环左移3字节。\n\n相对复杂的是列混淆步骤，列混淆步骤涉及两块知识，1是矩阵乘法，2是伽罗瓦域的加法和乘法。前者还好，后者属于抽象代数的内容，比较复杂。先看第一块——矩阵乘法。首先演示简单的矩阵相乘，左边准备相乘的两个矩阵，我们称它俩为矩阵A和矩阵B，如何求结果矩阵中的abcd ？规则如下：第m行第n列的值等于矩阵A的第m行的元素与矩阵B的第n列对应元素乘积之和。a是第一行第一列，那么就是A的第一行和B的第一列元素乘积之和同理可得即 \n所谓乘积之和，指乘法和加法。再来看AES列混淆中的矩阵乘法，我们的  ，左边乘如下所示固定矩阵看起来有些复杂，小例子中是2*2的矩阵要算4个值，这里是4*4的矩阵要算16个值。我们这里只管第一列，其他列的计算类似。\n\n\n列混淆中的的加法和乘法并不是小例子或日常中的那样，其中的加法指 异或运算 。2A + 3B + C + D 即 2A ^ 3B ^ C ^ D，这也是  叫轮密钥加而不是轮密钥异或的原因——加法就是异或。那么其中的乘法呢？乘法复杂一些，想真正理解的可以网上冲浪搜索伽罗瓦域内乘法。我们这里仅考虑如下三种情况，因为AES-128加密中，列混淆的乘法中，仅涉及这三个数。\n\n\n\n结合Python代码可以更清晰，函数名中 mul 是multiply（乘）的缩写。\n\n\n\nx * 1，结果为x本身\ndef mul_by_01(num):    return num\nx * 2，首先切换到二进制形式，最高位为0时，比特串左移1比特，最右边补0即可。如果最高位为1，比特串左移1比特，最右边补0，最后再异或上 0x1B\ndef mul_by_02(num):    if num &lt; 0x80:        res = (num &lt;&lt; 1)else:    res = (num &lt;&lt; 1) ^ 0x1b    return res % 0x100\nx * 3 = (x * 02) + x，注意”加“是异或哦。\ndef mul_by_03(num):    return (mul_by_02(num) ^ num)\n列混淆，就这么讲完了。下面看完整的AES代码实现 \nSbox = (    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,)Rcon = (0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36)def text2matrix(text):    matrix = []    for i in range(16):        byte = (text &gt;&gt; (8 * (15 - i))) &amp; 0xFF        if i % 4 == 0:            matrix.append([byte])        else:            matrix[i // 4].append(byte)    return matrixdef shiftRound(array, num):    '''    :param array: 需要循环左移的数组    :param num: 循环左移的位数    :return: 使用Python切片，返回循环左移num个单位的array    '''    return array[num:] + array[:num]def g(array, index):    '''    g 函数    :param array: 待处理的四字节数组    :index:从1-10，每次使用Rcon中不同的数    '''    # 首先循环左移1位    array = shiftRound(array, 1)    # 字节替换    array = [Sbox[i] for i in array]    # 首字节和rcon中对应元素异或    array = [(Rcon[index] ^ array[0])] + array[1:]    return arraydef xorTwoArray(array1, array2):    '''    返回两个数组逐元素异或的新数组    :param array1: 一个array    :param array2: 另一个array    :return:    '''    assert len(array1) == len(array2)    return [array1[i] ^ array2[i] for i in range(len(array1))]def showRoundKeys(round_keys):    # 将轮密钥从44*4转成11*16    kList = [[] for i in range(11)]    for i in range(len(round_keys)):        kList[i // 4] += round_keys[i]    for i in range(len(kList)):        print(\"K%02d:\" % i + \"\".join(\"%02x\" % k for k in kList[i]))def keyExpand(key):    master_key = text2matrix(key)    round_keys = [[0] * 4 for i in range(44)]    # 规则一(图中红色部分)    for i in range(4):        round_keys[i] = master_key[i]    for i in range(4, 4 * 11):        # 规则二(图中红色部分)        if i % 4 == 0:            round_keys[i] = xorTwoArray(g(round_keys[i - 1], i // 4), round_keys[i - 4])        # 规则三(图中橙色部分)        else:            round_keys[i] = xorTwoArray(round_keys[i - 1], round_keys[i - 4])    showRoundKeys(round_keys)    return round_keysdef AddRoundKeys(state, roundKey):    result = [[] for i in range(4)]    for i in range(4):        result[i] = xorTwoArray(state[i], roundKey[i])    return resultdef SubBytes(state):    result = [[] for i in range(4)]    for i in range(4):        result[i] = [Sbox[i] for i in state[i]]    return resultdef ShiftRows(s):    s[0][1], s[1][1], s[2][1], s[3][1] = s[1][1], s[2][1], s[3][1], s[0][1]    s[0][2], s[1][2], s[2][2], s[3][2] = s[2][2], s[3][2], s[0][2], s[1][2]    s[0][3], s[1][3], s[2][3], s[3][3] = s[3][3], s[0][3], s[1][3], s[2][3]    return sdef mul_by_02(num):    if num &lt; 0x80:        res = (num &lt;&lt; 1)    else:        res = (num &lt;&lt; 1) ^ 0x1b    return res % 0x100def mul_by_03(num):    return mul_by_02(num) ^ numdef MixColumns(state):    for i in range(4):        s0 = mul_by_02(state[i][0]) ^ mul_by_03(state[i][1]) ^ state[i][2] ^ state[i][3]        s1 = state[i][0] ^ mul_by_02(state[i][1]) ^ mul_by_03(state[i][2]) ^ state[i][3]        s2 = state[i][0] ^ state[i][1] ^ mul_by_02(state[i][2]) ^ mul_by_03(state[i][3])        s3 = mul_by_03(state[i][0]) ^ state[i][1] ^ state[i][2] ^ mul_by_02(state[i][3])        state[i][0] = s0        state[i][1] = s1        state[i][2] = s2        state[i][3] = s3    return statedef state2Text(state):    text = sum(state, [])    return \"\".join(\"%02x\" % k for k in text)def encrypt(input_bytes, kList):    '''    :param input_bytes: 输入的明文    :param kList: K0-K10    :return:    '''    plainState = text2matrix(input_bytes)    # 初始轮密钥加    state = AddRoundKeys(plainState, kList[0:4])    for i in range(1, 10):        state = SubBytes(state)        state = ShiftRows(state)        state = MixColumns(state)        state = AddRoundKeys(state, kList[4 * i:4 * (i + 1)])    state = SubBytes(state)    state = ShiftRows(state)    state = AddRoundKeys(state, kList[40:44])    return stateinput_bytes = 0x7a68656e677368616f6b756e79796473key = 0x0123456789abcdef0123456789abcdefkList = keyExpand(key)cipherState = encrypt(input_bytes, kList)cipher = state2Text(cipherState)print(cipher)\n  \n","tags":["算法"]},{"title":"对称加密算法DES的原理及分析","url":"/posts/35582/","content":"图解\n手算DES入参：明文：64比特（16个十六进制数、8个字节）KEY：64比特（16个十六进制数、8个字节）出参：64比特（16个十六进制数、8个字节）\n明文：0123456789ABCDEF（hex）密钥：133457799BBCDFF1（hex）结果：85e813540f0ab405fdf2e174492922f8因为模式的原因，会进行填充，这里先把结果当成 85e813540f0ab405（hex）\n1.对明文初始置换（重排）PI置换表（IP表）\nPI = [58, 50, 42, 34, 26, 18, 10, 2,      60, 52, 44, 36, 28, 20, 12, 4,      62, 54, 46, 38, 30, 22, 14, 6,      64, 56, 48, 40, 32, 24, 16, 8,      57, 49, 41, 33, 25, 17, 9, 1,      59, 51, 43, 35, 27, 19, 11, 3,      61, 53, 45, 37, 29, 21, 13, 5,      63, 55, 47, 39, 31, 23, 15, 7]\n根据置换表的索引对明文进行重新排列（例如明文第58的位置放到第一位）明文 0123456789ABCDEF（hex）转为二进制 00000001 00100011 01000101 01100111 10001001 10101011 11001101 11101111重新排列后 11001100 00000000 11001100 11111111 11110000 10101010 11110000 10101010排列顺序如图所示：\n2.对密钥进行编排PC1（CP_1）（置换选择一表）\nCP_1 = [57, 49, 41, 33, 25, 17, 9,        1, 58, 50, 42, 34, 26, 18,        10, 2, 59, 51, 43, 35, 27,        19, 11, 3, 60, 52, 44, 36,        63, 55, 47, 39, 31, 23, 15,        7, 62, 54, 46, 38, 30, 22,        14, 6, 61, 53, 45, 37, 29,        21, 13, 5, 28, 20, 12, 4]\n密钥：133457799BBCDFF1（hex）转为二进制：00010011 00110100 01010111 01111001 10011011 10111100 11011111 11110001重新排列后：1111000 0110011 0010101 0101111 0101010 1011001 1001111 0001111对DES来说，密钥64位，只有56位被使用，每8个比特的最后一位被舍弃掉对重新编排后的拆分成左右两部分L0：1111000 0110011 0010101 0101111R0：0101010 1011001 1001111 0001111\n3.对编排后的密钥进行16轮循环左移生成16个子密钥对L0和R0进行16轮循环左移，每轮根据上一轮左移n位+本次左移的位数（或者是本次左移索引+前面左移索引位数），左移后加在一起LnRn，然后根据PC2（CP_2）表重新编排为K，只有48位，生成16个子密钥（注：索引是从1开始）。生成的16个子密钥subkeys会对应明文处理16轮每轮的key\nSHIFT = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]\nCP_2 = [14, 17, 11, 24, 1, 5, 3, 28,        15, 6, 21, 10, 23, 19, 12, 4,        26, 8, 16, 7, 27, 20, 13, 2,        41, 52, 31, 37, 47, 55, 30, 40,        51, 45, 33, 48, 44, 49, 39, 56,        34, 53, 46, 42, 50, 36, 29, 32]\nL1：1110000 1100110 0101010 1011111R1：1010101 0110011 0011110 0011110L1R1：1110000 1100110 0101010 1011111 1010101 0110011 0011110 0011110编排后K1：00011011 00000010 11101111 11111100 01110000 01110010\n第二次左移2位（对L0和R0左移2位，或者对L1和R1左移1位）L2：1100001 1001100 1010101 0111111R2：0101010 1100110 0111100 0111101L2R2：1100001 1001100 1010101 0111111 0101010 1100110 0111100 0111101编排后K2：01111001 10101110 11011001 11011011 11001001 11100101\n第三次左移4位（对L0和R0左移4位，或者对L2和R2左移2位）L3：0000110 0110010 1010101 1111111R3：0101011 0011001 1110001 1110101L3R3：0000110 0110010 1010101 1111111 0101011 0011001 1110001 1110101编排后K3：010101 011111 110010 001010 010000 101100 111110 011001…\nK1 &#x3D; 000110 110000 001011 101111 111111 000111 000001 110010K2 &#x3D; 011110 011010 111011 011001 110110 111100 100111 100101K3 &#x3D; 010101 011111 110010 001010 010000 101100 111110 011001K4 &#x3D; 011100 101010 110111 010110 110110 110011 010100 011101K5 &#x3D; 011111 001110 110000 000111 111010 110101 001110 101000K6 &#x3D; 011000 111010 010100 111110 010100 000111 101100 101111K7 &#x3D; 111011 001000 010010 110111 111101 100001 100010 111100K8 &#x3D; 111101 111000 101000 111010 110000 010011 101111 111011K9 &#x3D; 111000 001101 101111 101011 111011 011110 011110 000001K10 &#x3D; 101100 011111 001101 000111 101110 100100 011001 001111K11 &#x3D; 001000 010101 111111 010011 110111 101101 001110 000110K12 &#x3D; 011101 010111 000111 110101 100101 000110 011111 101001K13 &#x3D; 100101 111100 010111 010001 111110 101011 101001 000001K14 &#x3D; 010111 110100 001110 110111 111100 101110 011100 111010K15 &#x3D; 101111 111001 000110 001101 001111 010011 111100 001010K16 &#x3D; 110010 110011 110110 001011 000011 100001 011111 110101\n4.对明文进行16轮运算加密明文重新编排后的 11001100 00000000 11001100 11111111 11110000 10101010 11110000 10101010拆分成左右两部分L0：11001100 00000000 11001100 11111111R0：11110000 10101010 11110000 10101010每一轮运算只对R进行改变加密：Li+1&#x3D;RiRi+1&#x3D;Li⊕F(Ri,Ki)解密：Ri&#x3D;Li+1Li&#x3D;Ri+1⊕F(Li+1,Ki)\n\nf函数：\n1. f函数首先将输入经过E表扩展置换，将32位的输入扩展为48位。\n2. 将48位结果与第i轮第密钥ki进行XOR(异或)操作\n3. 将异或操作第结果送入S盒进行压缩，压缩成32位\n4. 将32位的结果送入P盒置换\n\n\n\n\n\nExpand表\nE = [32, 1, 2, 3, 4, 5,     4, 5, 6, 7, 8, 9,     8, 9, 10, 11, 12, 13,     12, 13, 14, 15, 16, 17,     16, 17, 18, 19, 20, 21,     20, 21, 22, 23, 24, 25,     24, 25, 26, 27, 28, 29,     28, 29, 30, 31, 32, 1]\nS盒（S_BOX，8组）\nS_BOX = [    [[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7], [0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8], [4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0], [15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],],[[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10], [3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5], [0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15], [13, 8, 10, 1, 3, 15, 4, 2, 11, 6, 7, 12, 0, 5, 14, 9],],[[10, 0, 9, 14, 6, 3, 15, 5, 1, 13, 12, 7, 11, 4, 2, 8], [13, 7, 0, 9, 3, 4, 6, 10, 2, 8, 5, 14, 12, 11, 15, 1], [13, 6, 4, 9, 8, 15, 3, 0, 11, 1, 2, 12, 5, 10, 14, 7], [1, 10, 13, 0, 6, 9, 8, 7, 4, 15, 14, 3, 11, 5, 2, 12],],[[7, 13, 14, 3, 0, 6, 9, 10, 1, 2, 8, 5, 11, 12, 4, 15], [13, 8, 11, 5, 6, 15, 0, 3, 4, 7, 2, 12, 1, 10, 14, 9], [10, 6, 9, 0, 12, 11, 7, 13, 15, 1, 3, 14, 5, 2, 8, 4], [3, 15, 0, 6, 10, 1, 13, 8, 9, 4, 5, 11, 12, 7, 2, 14],],  [[2, 12, 4, 1, 7, 10, 11, 6, 8, 5, 3, 15, 13, 0, 14, 9], [14, 11, 2, 12, 4, 7, 13, 1, 5, 0, 15, 10, 3, 9, 8, 6], [4, 2, 1, 11, 10, 13, 7, 8, 15, 9, 12, 5, 6, 3, 0, 14], [11, 8, 12, 7, 1, 14, 2, 13, 6, 15, 0, 9, 10, 4, 5, 3],], [[12, 1, 10, 15, 9, 2, 6, 8, 0, 13, 3, 4, 14, 7, 5, 11], [10, 15, 4, 2, 7, 12, 9, 5, 6, 1, 13, 14, 0, 11, 3, 8], [9, 14, 15, 5, 2, 8, 12, 3, 7, 0, 4, 10, 1, 13, 11, 6], [4, 3, 2, 12, 9, 5, 15, 10, 11, 14, 1, 7, 6, 0, 8, 13],], [[4, 11, 2, 14, 15, 0, 8, 13, 3, 12, 9, 7, 5, 10, 6, 1], [13, 0, 11, 7, 4, 9, 1, 10, 14, 3, 5, 12, 2, 15, 8, 6], [1, 4, 11, 13, 12, 3, 7, 14, 10, 15, 6, 8, 0, 5, 9, 2], [6, 11, 13, 8, 1, 4, 10, 7, 9, 5, 0, 15, 14, 2, 3, 12],],   [[13, 2, 8, 4, 6, 15, 11, 1, 10, 9, 3, 14, 5, 0, 12, 7], [1, 15, 13, 8, 10, 3, 7, 4, 12, 5, 6, 11, 0, 14, 9, 2], [7, 11, 4, 1, 9, 12, 14, 2, 0, 6, 10, 13, 15, 3, 5, 8], [2, 1, 14, 7, 4, 10, 8, 13, 15, 12, 9, 0, 3, 5, 6, 11],]]\nP盒\nP = [16, 7, 20, 21, 29, 12, 28, 17,     1, 15, 23, 26, 5, 18, 31, 10,     2, 8, 24, 14, 32, 27, 3, 9,     19, 13, 30, 6, 22, 11, 4, 25]\n\n第一轮为例：R1&#x3D; L0⊕f(R0，K1)F函数\tP(S(E(Ri)⊕Ki))：R0：11110000 10101010 11110000 10101010经过E表编排：01111010 00010101 01010101 01111010 00010101 01010101与K1异或后：011000 010001 011110 111010 100001 100110 010100 100111把异或后的拆分8组，进行8轮S盒运算B1 &#x3D; 011000 B2 &#x3D; 010001 B3 &#x3D; 011110 B4 &#x3D; 111010 B5 &#x3D; 100001 B6 &#x3D; 100110 B7 &#x3D; 010100 B8 &#x3D; 100111将每一组前后1个比特拼接为row转十进制，中间4个比特为column转十进制，然后去S盒映射第i个row行column列B1\t0 1100 0 row：00 &#x3D;&#x3D;&gt; 0  （十进制）column：1100 &#x3D;&#x3D;&gt; 12  （十进制）(0, 12) &#x3D;&#x3D;&gt; S[0][0][12]&#x3D;&#x3D;&gt;5B1 &#x3D; 5 &#x3D;&#x3D;&gt; 0101 （二进制）\nB2 \t0 1000 1row：01 &#x3D;&#x3D;&gt; 1  （十进制）column：1000 &#x3D;&#x3D;&gt; 8  （十进制）(1, 8) &#x3D;&#x3D;&gt; S[1][1][8]&#x3D;&#x3D;&gt;12B1 &#x3D;12&#x3D;&#x3D;&gt; 1100（二进制）\nB3 \t0 1111 0 row：00 &#x3D;&#x3D;&gt; 0  （十进制）column：1111&#x3D;&#x3D;&gt; 15  （十进制）(0, 15) &#x3D;&#x3D;&gt; S[2][0][15]&#x3D;&#x3D;&gt;8B1 &#x3D;8&#x3D;&#x3D;&gt; 1000（二进制）…68&#x3D;48bit 经过8轮 48&#x3D;32bit把B1-B8拼接起来：01011100 10000010 10110101 10010111\n经过P盒置换后：00100011 01001010 10101001 10111011F函数结束，结果异或L0R1：11101111 01001010 01100101 01000100L1：R0…16轮后R16：00001010 01001100 11011001 10010101L16：01000011 01000010 00110010 00110100R16L16拼接（R在前），再经过末置换表（PI_1）（64位）：R16L16：00001010 01001100 11011001 10010101 01000011 01000010 00110010 00110100置换后：10000101 11101000 00010011 01010100 00001111 00001010 10110100 00000101转为hex就是结果了：85e813540f0ab405\nPI_1表\nPI_1 = [40, 8, 48, 16, 56, 24, 64, 32,        39, 7, 47, 15, 55, 23, 63, 31,        38, 6, 46, 14, 54, 22, 62, 30,        37, 5, 45, 13, 53, 21, 61, 29,        36, 4, 44, 12, 52, 20, 60, 28,        35, 3, 43, 11, 51, 19, 59, 27,        34, 2, 42, 10, 50, 18, 58, 26,        33, 1, 41, 9, 49, 17, 57, 25]\n\n\n分组密码的填充Passing只用于CBC和ECB模式，默认采用PKCS#7进行填充DES 64比特明文，64比特密钥，结果64比特输出那为什么明文刚好是64比特，如果输入是56比特？20比特？或者什么都不输入呢？明文会切割成每64比特为一组进行des加密，最后一组小于或等于64都会进行填充如果传入的是utf，需先转hex\n小于64比特：123456789（hex）&#x3D;&#x3D;&gt; 1234567809（hex）还差6位hex（3个字节），填充030303：1234567809030303\n123456789abcd（hex）&#x3D;&#x3D;&gt;123456789abc0d（hex）还差2位hex（1个字节），填充01：123456789abc0d01\n\n\n等于64比特，需要填充一整个分组0808080808080808：0123456789abcdef（hex）&#x3D;&#x3D;&gt; 0123456789abcdef0808080808080808\n最少填充一字节，最多填充一整个分组，不能不填充。\n分组密码的工作模式ECB相同的分组输入，计算后的结果是完全一致的，每个分组单独处理，叫ECB工作模式这种模式有很多好处，我们可以直接for 循环，将很长的输入分成对应个数的分组，每个分组得到结果后拼接在一起就行，而且这也意味着可以并行计算。 如果ECB模式是可行的、安全的，那么我们一定选择它，因为最简单和高效。那也就不会出现别的工作模式了，可惜的是它并不安全。\nCBC最常用的模式其实想法也很朴素，每个明文分组在加密前多一个步骤，和上一个分组的密文块进行异或运算。因为第一个明文块没有所谓的“上一个分组的密文块“，所以需要人给一个64比特，或者说8字节的输入，我们叫它初始化向量，IV。在cyberchef中验证一下\n\n明文：123456789ABCDEF0（hex）密钥：133457799BBCDFF1（hex）使用CBC模式IV：0123456789ABCDEF计算结果：0ecb68bac16aece07cbadcfa7a974bcc（hex）\n\n按照我们上面的说法0ecb68bac16aece0的明文应该就是123456789ABCDEF0和0123456789ABCDEF异或的结果得到结果1317131f1317131f使用cyberchef计算123456789ABCDEF0 ^ 0123456789ABCDEF 得到结果1317131f1317131f，单独计算其DES加密结果，注意这儿要用ECB模式: 0ecb68bac16aece0 fdf2e174492922f8，因为1317131f1317131f是一个分组的长度，所以要填充0808080808080808， fdf2e174492922f8是08的结果，所以不用管。可以发现，第一块加密结果0ecb68bac16aece0正是我们所预期的。\n接下来看一下第二块，第二块即0808080808080808，按照CBC的规则计算 0ecb68bac16aece0 ^ 0808080808080808 &#x3D; 06c360b2c962e4e8，单独计算ECB下的06c360b2c962e4e8 结果为7cbadcfa7a974bcc fdf2e174492922f8，第二块结果7cbadcfa7a974bcc也完全正确。\nCFB\n明文：123456789ABCDEF0密钥：133457799BBCDFF1IV：0123456789ABCDEF模式：CFB结果: 97dc452c95b66af5IV即0123456789ABCDEF的des加密结果85e813540f0ab40585e813540f0ab405 与 123456789ABCDEF0 的异或结果是97dc452c95b66af5\n\n\nOFB\n明文：123456789ABCDEF0密钥：133457799BBCDFF1IV：0123456789ABCDEF模式：OFB结果: 97dc452c95b66af5即一个分组的OFB与CFB是一样一样的\n\n两个分组的计算：\n\n明文：123456789ABCDEF0 123456789ABCDEF0密钥：133457799BBCDFF1IV：0123456789ABCDEF模式：OFB结果：97dc452c95b66af5 759a2c51fb637db5\n\n直接观察第二个分组759a2c51fb637db5是如何计算出来呢?它是明文和加密两次的IV的异或结果明文：123456789ABCDEF0 加密第一次：85e813540f0ab405 加密第二次 67ae7a2961dfa345f，最后异或 67ae7a2961dfa345f ^ 123456789ABCDEF0 &#x3D; 759a2c51fb637db5\nCTR","tags":["算法"]},{"title":"Android加壳与脱壳（二）加壳和运行时的机制","url":"/posts/7260/","content":"Android App启动流程这里就先以一张图来说明这个过程\n\n(1)点击桌面APP图标时，Launcher的startActivity()方法，通过Binder通信，调用system_server进程中AMS服务的startActivity方法，发起启动请求(2)system_server进程接收到请求后，向Zygote进程发送创建进程的请求(3)Zygote进程fork出App进程，并执行ActivityThread的main方法，创建ActivityThread线程，初始化MainLooper，主线程Handler，同时初始化ApplicationThread用于和AMS通信交互(4)App进程，通过Binder向sytem_server进程发起attachApplication请求，这里实际上就是APP进程通过Binder调用sytem_server进程中AMS的attachApplication方法,AMS的attachApplication方法的作用是将ApplicationThread对象与AMS绑定(5)system_server进程在收到attachApplication的请求，进行一些准备工作后，再通过binder IPC向App进程发送handleBindApplication请求（初始化Application并调用onCreate方法）和scheduleLaunchActivity请求（创建启动Activity）(6)App进程的binder线程（ApplicationThread）在收到请求后，通过handler向主线程发送BIND_APPLICATION和LAUNCH_ACTIVITY消息，这里注意的是AMS和主线程并不直接通信，而是AMS和主线程的内部类ApplicationThread通过Binder通信，ApplicationThread再和主线程通过Handler消息交互。(7)主线程在收到Message后，创建Application并调用onCreate方法，再通过反射机制创建目标Activity，并回调Activity.onCreate()等方法(8)到此，App便正式启动，开始进入Activity生命周期，执行完onCreate&#x2F;onStart&#x2F;onResume方法，UI渲染后显示APP主界面\n\n寒冰大佬在FART：ART环境下基于主动调用的自动化脱壳方案一文中讲述了ActivityThread.main()是进入App世界的大门，并由此展开了对加壳原理的讲述开始进行ActivityThread源码分析，了解ActivityThread的具体操作：以下代码均出自安卓8.1，链接：http://androidxref.com/8.1.0_r33/xref/frameworks/base/core/java/android/app/ActivityThread.java\n6459    public static void main(String[] args) &#123;6460        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;ActivityThreadMain&quot;);64616462        // CloseGuard defaults to true and can be quite spammy.  We6463        // disable it here, but selectively enable it later (via6464        // StrictMode) on debug builds, but using DropBox, not logs.6465        CloseGuard.setEnabled(false);64666467        Environment.initForCurrentUser();64686469        // Set the reporter for event logging in libcore6470        EventLogger.setReporter(new EventLoggingReporter());64716472        // Make sure TrustedCertificateStore looks in the right place for CA certificates6473        final File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());6474        TrustedCertificateStore.setDefaultUserDirectory(configDir);64756476        Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;);64776478        Looper.prepareMainLooper();64796480        ActivityThread thread = new ActivityThread();6481        thread.attach(false);64826483        if (sMainThreadHandler == null) &#123;6484            sMainThreadHandler = thread.getHandler();6485        &#125;64866487        if (false) &#123;6488            Looper.myLooper().setMessageLogging(new6489                    LogPrinter(Log.DEBUG, &quot;ActivityThread&quot;));6490        &#125;64916492        // End of event ActivityThreadMain.6493        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);6494        Looper.loop();64956496        throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);6497    &#125;\n\n根据寒冰大佬描述，在ActivityThread完成实例化操作，调用thread.attach(false)完成一系列初始化准备工作，最后主线程进入消息循环，等待接收来自系统的消息。当收到系统发送来的bindapplication的进程间调用时，调用函数handlebindapplication来处理该请求。可以查看handleMessage方法，查看参数为BIND_APPLICATION，即上面步骤第五步通过binder IPC向App进程发送handleBindApplication请求\n1580        public void handleMessage(Message msg) &#123;1581            if (DEBUG_MESSAGES) Slog.v(TAG, &quot;&gt;&gt;&gt; handling: &quot; + codeToString(msg.what));1582            switch (msg.what) &#123;                    ......1653                case BIND_APPLICATION:1654                    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, &quot;bindApplication&quot;);1655                    AppBindData data = (AppBindData)msg.obj;1656                    handleBindApplication(data);1657                    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);1658                    break;                    ......1846            &#125;1847            Object obj = msg.obj;1848            if (obj instanceof SomeArgs) &#123;1849                ((SomeArgs) obj).recycle();1850            &#125;1851            if (DEBUG_MESSAGES) Slog.v(TAG, &quot;&lt;&lt;&lt; done: &quot; + codeToString(msg.what));1852        &#125;1853    &#125;\n在处理消息过程，就进入了handlebindapplication函数这里源代码有点长，我再用寒冰大佬文章的内容：\nprivate void handleBindApplication(AppBindData data) &#123;    //step 1: 创建LoadedApk对象    data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);    ...    //step 2: 创建ContextImpl对象;    final ContextImpl appContext = ContextImpl.createAppContext(this, data.info);     //step 3: 创建Instrumentation    mInstrumentation = new Instrumentation();     //step 4: 创建Application对象;在makeApplication函数中调用了newApplication，    //在该函数中又调用了app.attach(context)，在attach函数中调用了Application.attachBaseContext函数    Application app = data.info.makeApplication(data.restrictedBackupMode, null);    mInitialApplication = app;     //step 5: 安装providers    List&lt;ProviderInfo&gt; providers = data.providers;    installContentProviders(app, providers);     //step 6: 执行Application.Create回调    mInstrumentation.callApplicationOnCreate(app);\t...&#125;\n定位第四步，Application进行实例化，然后进入makeApplication\n进入983行newApplication函数\n\n这里调用的时1084行的newApplication，但它又调用了1099行的newApplication这里可以看到做了两件事：（1）完成了Application的实例化（2）并调用Application.attach()函数继续进入Application.attach()函数\n\n调用了Application.attachBaseContext函数，回到handleBindApplication，这里就执行完第四步跟进第六步，进入callApplicationOnCreate函数\n执行了Application.onCreate()方法从上面可以看到大概的流程：初始化—&gt;Application的构造函数—&gt;Application.attachBaseContext()—&gt;Application.onCreate()最后才会进入MainActivity中的attachBaseContext函数、onCreate函数可以得出结论，app最先获得执行权限的是app中声明的Application类中的attachBaseContext和onCreate函数。因此，壳要想完成应用中加固代码的解密以及应用执行权的交付就都是在这两个函数上做文章。\n下面这张图大致讲了加壳应用的运行流程。 \n当壳在函数attachBaseContext和onCreate中执行完加密的dex文件的解密后，通过自定义的Classloader在内存中加载解密后的dex文件。为了解决后续应用在加载执行解密后的dex文件中的Class和Method的问题，接下来就是通过利用java的反射修复一系列的变量。其中最为重要的一个变量就是应用运行中的Classloader，只有Classloader被修正后，应用才能够正常的加载并调用dex中的类和方法，否则的话由于Classloader的双亲委派机制，最终会报ClassNotFound异常，应用崩溃退出，这是加固厂商不愿意看到的。由此可见Classloader是一个至关重要的变量，所有的应用中加载的dex文件最终都在应用的Classloader中。\n整体加壳原理Dex整体加壳可以理解为在加密的源Apk程序外面有套上了一层外壳，简单过程为： \n简要概括：壳dex读取源dex文件，通过加密后写进一个新的dex文件，就成为新的APK\n如何对App进行加一层外壳呢，这里就需要应用动态加载的原理，关于动态加载和类加载器，可以看下上一篇文章Android加壳与脱壳（一）ClassLoader和动态加载大概的流程就是\n\n（1）BootClassLoader加载系统核心库（2）PathClassLoader加载APP自身dex（3）进入APP自身组件，解析AndroidManifest.xml，然后查找Application代理（4）调用声明Application的attachBaseContext()对源程序进行动态加载或解密（5）调用声明Application的onCreate()对源程序进行动态加载或解密（6）进入MainActivity中的attachBaseContext()，然后进入onCreate()函数，执行源程序代码\n\n上面文章也说到：\n\nAndroid中的ClassLoader类型分为系统ClassLoader和自定义ClassLoader。其中系统ClassLoader包括3种是BootClassLoader、DexClassLoader、PathClassLoader(1)BootClassLoader:Android平台上所有Android系统启动时会使用BootClassLoader来预加载常用的类(2)BaseDexClassLoader:实际应用层类文件的加载，而真正的加载委托给pathList来完成(3)DexClassLoader:可以加载dex文件以及包含dex的压缩文件(apk,dex,jar,zip),可以安装一个未安装的apk文件，一般为自定义类加载器(4)PathClassLoader:可以加载系统类和应用程序的类，通常用来加载已安装的apk的dex文件补充：Android 提供的原生加载器叫做基础类加载器，包括：BootClassLoader，PathClassLoader，DexClassLoader，InMemoryDexClassLoader（Android 8.0 引入），DelegateLastClassLoader（Android 8.1 引入）\n\nDexClassLoader加载的类是没有组件生命周期的，例如Activity。Android 生命周期中的方法（如 onCreate(), onStart(), onResume(), 等）由系统在特定情况下自动调用。直接通过类加载器加载这些类并调用这些方法不会触发正确的生命周期行为，也不会被系统管理。两种解决方法：\n\n替换系统组件类加载器为我们的DexClassLoader，同时设置DexClassLoader的parent为系统组件类加载器。\n打破原有的双亲关系，在系统组件类加载器和BootClassLoader的中间插入我们自己的DexClassLoader即可。\n\n第一种：类加载器替换怎么去替换系统的类加载器，这就和上面分析的ActivityThread中LoadedApk有关了，LoadedApk主要负责加载一个Apk程序，我们进一步分析源码\n在LoadedApk里面就定义了ClassLoader即mClassLoader，可以通过反射获取mclassLoader，然后使用我们的DexClassLoader进行替换。\n\n总结：（1）获取ActivityThread实例（2）通过反射获取类加载器（3）获取LoadedApk（4）获取mClassLoader系统类加载器（5）替换自定义类加载器为系统类加载器\n\n大概的图如下，Android 应用的组件mclassLoader是由PathClassLoader加载的，要把mclassLoader替换成DexClassLoader就可以加载自定义的dex文件\n先新建项目loaddextest编写一个activity类\npackage com.example.loaddextest;import android.os.Bundle;import android.util.Log;import androidx.appcompat.app.AppCompatActivity;public class TestActivity extends AppCompatActivity &#123;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Log.i(&quot;zskkk&quot;, &quot;i am from com.example.loaddextest.TestActivity.onCreate&quot;);    &#125;&#125;\n\n设置让apk解压后只生成一个class.dex文件，在proguard-rules.pro中，可以添加如下配置：\n-forceprocessing-dontshrink-dontoptimize\n在 build.gradle 中添加：\nandroid &#123;    defaultConfig &#123;        ...        multiDexEnabled false    &#125;&#125;\n打包解压推送dex到sdcard下命名为2.dex\n在新项目下AndroidMainfest.xml添加读写sdcard的权限，并在application下添加TestActivity\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;&lt;application  ...\t&lt;activity android:name=&quot;com.example.loaddextest.TestActivity&quot;&gt;&lt;/application&gt;\n\n在MainActivity下编写如下代码：\npackage com.example.loaddex;import androidx.appcompat.app.AppCompatActivity;import android.content.Context;import android.os.Bundle;import android.util.ArrayMap;import android.util.Log;import java.io.File;import java.lang.ref.WeakReference;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import dalvik.system.DexClassLoader;public class MainActivity extends AppCompatActivity &#123;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Context appContext = this.getApplicationContext();//        testDesClassLoader(appContext, &quot;/sdcard/1.dex&quot;);  // 加载普通类        staticTestActivityFirstMethod(appContext, &quot;/sdcard/2.dex&quot;);   // 加载组件类        Log.i(&quot;zskkk&quot;, String.valueOf(MainActivity.class.getClassLoader()));    &#125;    public void testDesClassLoader(Context context, String dexFilePath) &#123;        File optFile = context.getDir(&quot;opt_path&quot;, 0);  // 用于存放优化的dex文件        File libFile = context.getDir(&quot;lib_path&quot;, 0);  // 用于存放优化的dex文件        ClassLoader parentClassLoader = MainActivity.class.getClassLoader();  // 获取当前的类加载器        ClassLoader tmpClassLoader = context.getClassLoader();  // 获取当前的类加载器        // 指定了它的双亲为mainactivety的classloader,这样就可以访问到mainactivety的类        DexClassLoader dexClassLoader = new DexClassLoader(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), MainActivity.class.getClassLoader());  // 创建类加载器        Class&lt;?&gt; clazz = null;        try &#123;            clazz = dexClassLoader.loadClass(&quot;com.example.loaddextest.TestClass&quot;);  // 加载类        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;        if (clazz != null) &#123;            try &#123;                Method testFuncMethod = clazz.getDeclaredMethod(&quot;testFunc&quot;);  // 获取方法                Object obj = clazz.newInstance();  // 创建对象                testFuncMethod.invoke(obj);  // 调用方法            &#125; catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;    public void replaceClassLoader(Context context, ClassLoader dexClassLoader) &#123;        ClassLoader classLoader = MainActivity.class.getClassLoader();        try &#123;            // 1. 获取ActivityThread的实例对象            Class&lt;?&gt; ActivityThreadClazz = classLoader.loadClass(&quot;android.app.ActivityThread&quot;);            Method currentActivityThread = ActivityThreadClazz.getDeclaredMethod(&quot;currentActivityThread&quot;);            Object activityThreadObj = currentActivityThread.invoke(null);            // 2. 通过反射获得类加载器            // final ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt; mPackages = new ArrayMap&lt;&gt;();            Field mPackagesField = ActivityThreadClazz.getDeclaredField(&quot;mPackages&quot;);            mPackagesField.setAccessible(true); // 设置可访问            // 3. 拿到LoaderApk            ArrayMap mPackagesObj = (ArrayMap) mPackagesField.get(activityThreadObj); // 获取了 ActivityThread 类中名为 mPackages 的字段的值，该字段是一个 ArrayMap 类型的对象，用于存储应用程序包名与 LoadedApk 对象的映射关系            String packageName = context.getPackageName();  // 获取当前应用的包名。            WeakReference wr = (WeakReference) mPackagesObj.get(packageName);            Object LoadApkObj = wr.get();            // 4.拿到mclassLoader            Class LoadedApkClass = classLoader.loadClass(&quot;android.app.LoadedApk&quot;);            // private ClassLoader mClassLoader;            Field mClassLoaderField = LoadedApkClass.getDeclaredField(&quot;mClassLoader&quot;);            mClassLoaderField.setAccessible(true);//            Object mClassLoader = mClassLoaderField.get(LoadApkObj);  // 获取 LoadedApk 对象 LoadApkObj 中的 mClassLoader 字段值：//            Log.e(&quot;mClassLoader&quot;,mClassLoader.toString());            // 5.将系统组件ClassLoader给替换            mClassLoaderField.set(LoadApkObj, dexClassLoader);        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125; catch (NoSuchMethodException e) &#123;            e.printStackTrace();        &#125; catch (InvocationTargetException e) &#123;            e.printStackTrace();        &#125; catch (IllegalAccessException e) &#123;            e.printStackTrace();        &#125; catch (NoSuchFieldException e) &#123;            e.printStackTrace();        &#125;    &#125;    public void staticTestActivityFirstMethod(Context context, String dexFilePath)&#123;        File optFile = context.getDir(&quot;opt_dex&quot;, 0);        File libFile = context.getDir(&quot;lib_path&quot;, 0);        DexClassLoader dexClassLoader = new DexClassLoader(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), MainActivity.class.getClassLoader());  // 创建类加载器        replaceClassLoader(context, dexClassLoader);        Class&lt;?&gt; clazz = null;        try &#123;            clazz = dexClassLoader.loadClass(&quot;com.example.loaddextest.TestActivity&quot;);  // 加载类        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;        context.startActivity(new Intent(context, clazz));    &#125;&#125;// com.example.loaddex I/zskkk: dalvik.system.PathClassLoader// com.example.loaddex I/zskkk: i am from com.example.loaddextest.TestActivity.onCreate\n\n第二种：类加载器插入还有一种方案，动态加载中我们讲述了类加载器的双亲委派机制，就是说我们的类加载器刚拿到类，并不会直接进行加载，而是先判断自己是否加载，如果没有加载则给自己的父类，父类再给父类，所以我们让DexClassLoader成为PathClassLoader的父类，这样就可以解决DexClassLoader生命周期的问题大概的图如下：\n总结：（1）将DexClassloader父节点设置为BootClassLoader（2）将PathClassLoader父节点设置为DexClassloader\npublic void staticTestActivitySecondMethod(Context context, String dexFilePath)&#123;    File optFile = context.getDir(&quot;opt_dex&quot;, 0);    File libFile = context.getDir(&quot;lib_path&quot;, 0);    ClassLoader pathClassLoader = MainActivity.class.getClassLoader();    ClassLoader bootClassLoader = MainActivity.class.getClassLoader().getParent();    DexClassLoader dexClassLoader = new DexClassLoader(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), bootClassLoader);  // 创建类加载器    try &#123;        Field parentField = ClassLoader.class.getDeclaredField(&quot;parent&quot;);        parentField.setAccessible(true);        parentField.set(pathClassLoader, dexClassLoader);    &#125; catch (NoSuchFieldException e) &#123;        e.printStackTrace();    &#125; catch (IllegalAccessException e) &#123;        e.printStackTrace();    &#125;    Class&lt;?&gt; clazz = null;    try &#123;        clazz = dexClassLoader.loadClass(&quot;com.example.loaddextest.TestActivity&quot;);  // 加载类    &#125; catch (ClassNotFoundException e) &#123;        e.printStackTrace();    &#125;    context.startActivity(new Intent(context, clazz));&#125;\n\n加壳案例实现1. 编写源程序package com.example.loaddextest;import androidx.appcompat.app.AppCompatActivity;import android.os.Bundle;import android.util.Log;public class MainActivity extends AppCompatActivity &#123;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Log.i(&quot;zskkk&quot;, &quot;i am a source dex&quot;);    &#125;&#125;\n这就是我们的源程序，源程序运行，我们会在日志中看见我们打印的信息，然后我们生成dex文件 。先打包成apk解压得到dex文件，push到sdcard。\n2. 编写壳程序编写代理类模仿上面的加壳，在attachBaseContext或onCreate中对我们的dex进行动态加载和类加载器修正即可，因为这里我们源dex并未进行加密，所以也无需解密的过程\npackage com.example.loaddex;import android.app.Application;import android.content.Context;import android.content.Intent;import android.util.ArrayMap;import android.util.Log;import java.io.File;import java.lang.ref.WeakReference;import java.lang.reflect.Field;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import dalvik.system.DexClassLoader;public class StubApplication extends Application &#123;    @Override    protected void attachBaseContext(Context base) &#123;        super.attachBaseContext(base);        String dexFilePath = &quot;/sdcard/3.dex&quot;;        File optFile = base.getDir(&quot;opt_dex&quot;, 0);        File libFile = base.getDir(&quot;lib_path&quot;, 0);        ClassLoader parentClassLoader = StubApplication.class.getClassLoader();        DexClassLoader dexClassLoader = new DexClassLoader(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), StubApplication.class.getClassLoader());  // 创建类加载器        // 使用上面的一种方法进行类加载器修正        replaceClassLoader(this, dexClassLoader);        try &#123;            Class&lt;?&gt; activityClass = dexClassLoader.loadClass(&quot;com.example.loaddextest.MainActivity&quot;);            startActivity(new Intent(StubApplication.this, activityClass));        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;    &#125;    public void replaceClassLoader(Context context, ClassLoader dexClassLoader)&#123;        ...    &#125;    @Override    public void onCreate() &#123;        super.onCreate();    &#125;&#125;\n在新建项目的AndroidMainfest.xml添加读写sdcard的权限，还有在application下代理类别，加入导入类的Activity\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;...&lt;application  android:name=&quot;.StubApplication&quot;  ...  &lt;activity android:name=&quot;com.example.loaddextest.MainActivity&quot;&gt;&lt;/activity&gt;&lt;/application&gt;\n\n运行成功，说明我们的整体加壳成功\n","tags":["脱壳"]},{"title":"iOS逆向系列（一）环境配置","url":"/posts/12801/","content":"前期准备有mac设备可以直接下载checker1n，下载链接：https://checkra.in/下载后安装打开如果提示身份不明的开发者（如下图），则在 设置-隐私与安全性 进行设置\n\n打开后点击 Options，记得先连接手机\n\n勾选第一个和第三个，然后点 Back 返回\n\n点击 Start，再点击Next，这时候手机就自动进入恢复模式\n\n等待结束就会到这一步\n\n意思就是，1.先点击Start，2. 点击Start后要按住提示的按键，即侧边键，比如我的是iphone6就是同时按住电源键和home键（机型不同按键稍有差距），同时按住看着那个4秒倒计时完放开电源键，一直按住home键10秒，直到3.上面的倒计时结束放开，然后就会有进度条跑代码开机，显示All Done为成功\n\n越狱成功的话，打开手机桌面上的checkra1n，安装cydia记可成功的越狱。注意：手机重启的话越狱会失效，需要重新越狱。\nwin可以使用u盘越狱，教程：https://mp.weixin.qq.com/s/oTm4xlO1b-v3f4y3x_koUA工具下载链接：链接：https://pan.baidu.com/s/1_Rw810In2L9eR0Xsc2WEDA提取码：4511\n越狱后root密码 alpine，输入 passwd 命令后按照提示连续两次输入新密码即可越狱后下载的几个插件&#x2F;工具Vi IMprovedhtopFilza File ManageApple File ConduitAppSync Unified (需要添加软件源 cydia.angelxwind.net)MTerminalnanoOpenSSH\nfrida安装，选择16.0.19，deb后缀的，推到ios上使用命令安装 dpkg -i frida_xxxxxx.deb安装成功可以在cydia看到\n\nios脱壳脱壳脚本 https://github.com/AloneMonkey/frida-ios-dump拉取下来后安装README里的要求，下载requirements.txt里的库，端口转发 iproxy 2222 22，ssh链接端口2222，ssh root@127.0.0.1 -p 2222加壳软件：高考蜂背（爱思助手下载）使用方式：dump.py xxx -uroot -P123456\n不行就多试几次结束后会得到ipa安装包，使用 7z x xxx.ipa进行解压找到最大可执行文件\n可以使用ida打开，ida64 Gkfb\n通过命令行获取设备信息，类似adb安装地址：https://libimobiledevice.org/#get-started遇到安装失败，更新一下 apt-get update使用命令查看 https://github.com/libimobiledevice/libimobiledevice\napt install ideviceinstallerhttps://github.com/libimobiledevice/ideviceinstaller其他功能可以查看他的其他项目\n","tags":["iOS"]},{"title":"Android加壳与脱壳（一）ClassLoader和动态加载","url":"/posts/23195/","content":"三层类加载器1. 启动类加载器  Bootstrap ClassLoader负责加载存在放&lt;JAVA_HOME&gt;\\lib目录或者-Xbootclasspath指定的路径中存放的类库。比如java.lang、java.uti等这些系统类。启动类加载器无法被java程序直接引用，但可以通过在自定义类加载器时将getClassLoader的返回值设为null  将加载请求委派给启动类加载器处理。\n2. 扩展类加载器  Extensions ClassLoader它负责加载&lt;JAVA_HOME&gt;\\lib\\ext目录中或者java.ext.dirs指定的路径下的类库。Java中实现类为ExtClassLoader，提供了除了系统类之外的额外功能，可以在java里获取。\n3.应用程序类加载器  Application ClassLoader负责加载用户类路径上的所有类库。该加载器可以通过ClassLoader的静态方法getSystemLoader获得。java中的实现类为AppClassLoader，与我们接触最多的类加载器，也可以通过ClassLoader.getSystemClassLoader返回。\n自定义类加载器需要通过继承java.lang.ClassLoader类的方式来实现自己的类加载器即可。加载顺序Bootstrap ClassLoader、Extention ClassLoader、AppClassLoader。\n双亲委派模式\nprotected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException&#123;       //1.先检查是否已经加载过--findLoaded       Class&lt;?&gt; c = findLoadedClass(name);       if (c == null) &#123;           try &#123;               //2.如果自己没加载过,存在父类,则委托父类               if (parent != null) &#123;                   c = parent.loadClass(name, false);               &#125; else &#123;                   c = findBootstrapClassOrNull(name);               &#125;           &#125; catch (ClassNotFoundException e) &#123;           &#125;           if (c == null) &#123;               //3.如果父类也没加载过,则尝试本级classLoader加载               c = findClass(name);           &#125;       &#125;      return c;&#125;\n\n双亲委派模式的工作原理是如果一个类加载器收到了累加器的请求，他并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式。\n\n我们要加载一个class文件，我们定义了一个CustomerClassLoader类加载器:(1)首先会判断自己的CustomerClassLoader否加载过,如果加载过直接返回,(2)如果没有加载过则会调用父类PathClassLoader去加载,该父类同样会判断自己是否加载过,如果没有加载过则委托给父类BootClassLoader去加载,(3)这个BootClassLoader是顶级classLoader,同样会去判断自己有没有加载过,如果也没有加载过则会调用自己的findClass(name)去加载,(4)如果顶级BootClassLoader加载失败了,则会把加载这个动作向下交还给PathClassLoader,(5)这个PathClassLoader也会尝试去调用findClass(name);去加载,如果加载失败了,则会继续向下交还给CustomClassLoader来完成加载,这整个过程感觉是一个递归的过程,逐渐往上然后有逐渐往下,直到加载成功其实这个String.class在系统启动的时候已经被加载了,我们自己定义一个CustomerClassLoader去加载,其实也是父类加载的\n\n好处：1.避免重复加载，如果已经加载过一次class，可以直接读取已经加载的class。2.更加安全，无法自定义类来替代系统的类，可以防止核心api库被随意篡改。\n这种机制天生就给java类划分了带优先级的层次关系，bootstrap classloader优先级最高。假设用户自己写了一个java.lang.object类，在加载时会加载请求会委派给bootstrap classloader，它会去\\lib目录下加载jdk自带的java.lang.object类，这样不管用哪个类加载器去加载java.lang.object都会是同一个类。如果没有双亲委派的话，出现不同的java.lang.object类型，那么java类型体系中最基础的行为都无法保证。\nAndroid系统中的ClassLoader的继承关系\nAndroid系统中与ClassLoader相关的一共有8个：ClassLoader为抽象类。BootClassLoader预加载常用类继承自ClassLoader，单例模式。与Java中的BootClassLoader不同，并不是由C&#x2F;C++代码实现，而是由Java实现的。BaseDexClassLoader是PathCLassLoader、DexCLassLoader、InMemoryCLassLoader的父类，类加载器的主要逻辑都是在BaseDexClassLoader完成的。SecureClassLoader继承了抽象类CLassLoader，扩展了ClassLoader类加入了权限方面的功能，加强了安全性，其子类URLClassLOader是用URl路径和jar文件中加载类和资源。其中重点关注PathCLassLoader、DexCLassLoaderPathClassLoader是Android默认使用的类加载器，一个apk中的Activity等类便是在其中加载。DexCLassLoader可以加载任意目录下的dex&#x2F;jar&#x2F;apl&#x2F;zip文件，比PathClassLoader更灵活，是实现插件化，热修复，以及dex加壳的重点。Android8.0新引入InMemoryDexClassloader，从名字看出是直接从内存中加载dex\n通过查看Android8.0的源码，ClassLoader是一个抽象类，里面还有个parent变量，这是实现双亲委派机制的关键。对于每个继承的ClassLoader的类，都有parent来表示父节点。还定义了final，只能进行一次赋值。对于实现插件化，热修复parent是一个关键的变量。不带参的默认ClassLoader构造函数会将parent指定为systemClassLoader,也就是说在不指定 &lt;父&gt;classloader的情况下，而是每个加载器内部都有一个parent，代表它的父classloader。只有bootstrap classloader的parent为null。\n\n看下面PathCLassLoader、DexCLassLoader、InMemoryCLassLoader的源码都很少，主要逻辑都是在父类BaseDexClassLoader里。DexClassLoader\npublic class DexClassLoader extends BaseDexClassLoader &#123;    /**     * Creates a &#123;@code DexClassLoader&#125; that finds interpreted and native     * code.  Interpreted classes are found in a set of DEX files contained     * in Jar or APK files.     *     * &lt;p&gt;The path lists are separated using the character specified by the     * &#123;@code path.separator&#125; system property, which defaults to &#123;@code :&#125;.     *     * @param dexPath the list of jar/apk files containing classes and     *     resources, delimited by &#123;@code File.pathSeparator&#125;, which     *     defaults to &#123;@code &quot;:&quot;&#125; on Android     * @param optimizedDirectory directory where optimized dex files     *     should be written; must not be &#123;@code null&#125;     * @param librarySearchPath the list of directories containing native     *     libraries, delimited by &#123;@code File.pathSeparator&#125;; may be     *     &#123;@code null&#125;     * @param parent the parent class loader     */    public DexClassLoader(String dexPath, String optimizedDirectory,                          String librarySearchPath, ClassLoader parent) &#123;        super(dexPath, new File(optimizedDirectory), librarySearchPath, parent);    &#125;&#125;\n\nPathClassLoader\npublic class PathClassLoader extends BaseDexClassLoader &#123;    /**     * Creates a &#123;@code PathClassLoader&#125; that operates on a given list of files     * and directories. This method is equivalent to calling     * &#123;@link #PathClassLoader(String, String, ClassLoader)&#125; with a     * &#123;@code null&#125; value for the second argument (see description there).     *     * @param dexPath the list of jar/apk files containing classes and     * resources, delimited by &#123;@code File.pathSeparator&#125;, which     * defaults to &#123;@code &quot;:&quot;&#125; on Android     * @param parent the parent class loader     */    public PathClassLoader(String dexPath, ClassLoader parent) &#123;        super(dexPath, null, null, parent);    &#125;    /**     * Creates a &#123;@code PathClassLoader&#125; that operates on two given     * lists of files and directories. The entries of the first list     * should be one of the following:     *     * &lt;ul&gt;     * &lt;li&gt;JAR/ZIP/APK files, possibly containing a &quot;classes.dex&quot; file as     * well as arbitrary resources.     * &lt;li&gt;Raw &quot;.dex&quot; files (not inside a zip file).     * &lt;/ul&gt;     *     * The entries of the second list should be directories containing     * native library files.     *     * @param dexPath the list of jar/apk files containing classes and     * resources, delimited by &#123;@code File.pathSeparator&#125;, which     * defaults to &#123;@code &quot;:&quot;&#125; on Android     * @param librarySearchPath the list of directories containing native     * libraries, delimited by &#123;@code File.pathSeparator&#125;; may be     * &#123;@code null&#125;     * @param parent the parent class loader     */    public PathClassLoader(String dexPath, String librarySearchPath, ClassLoader parent) &#123;        super(dexPath, null, librarySearchPath, parent);    &#125;&#125;\n\nInMemoryDexClassLoader\npublic final class InMemoryDexClassLoader extends BaseDexClassLoader &#123;    /**     * Create an in-memory DEX class loader with the given dex buffers.     *     * @param dexBuffers array of buffers containing DEX files between     *                       &lt;tt&gt;buffer.position()&lt;/tt&gt; and &lt;tt&gt;buffer.limit()&lt;/tt&gt;.     * @param parent the parent class loader for delegation.     * @hide     */    public InMemoryDexClassLoader(ByteBuffer[] dexBuffers, ClassLoader parent) &#123;        super(dexBuffers, parent);    &#125;    /**     * Creates a new in-memory DEX class loader.     *     * @param dexBuffer buffer containing DEX file contents between     *                       &lt;tt&gt;buffer.position()&lt;/tt&gt; and &lt;tt&gt;buffer.limit()&lt;/tt&gt;.     * @param parent the parent class loader for delegation.     */    public InMemoryDexClassLoader(ByteBuffer dexBuffer, ClassLoader parent) &#123;        this(new ByteBuffer[] &#123; dexBuffer &#125;, parent);    &#125;&#125;\n\n代码验证public void testClassLoader()&#123;    ClassLoader thisClassloader = MainActivity.class.getClassLoader();    Log.i(&quot;ClassLoaderTag&quot;, &quot;thisClassLoader: &quot; + thisClassloader);    ClassLoader tmpClassloader = null;    ClassLoader parentClassloader = thisClassloader.getParent();    while (parentClassloader != null) &#123;        Log.i(&quot;ClassLoaderTag&quot;, &quot;this:&quot; + thisClassloader + &quot;---&quot; + parentClassloader);        tmpClassloader = parentClassloader.getParent();        thisClassloader = parentClassloader;        parentClassloader = tmpClassloader;    &#125;    Log.i(&quot;ClassLoaderTag&quot;, &quot;root:&quot; + thisClassloader);&#125;// thisClassLoader: dalvik.system.PathClassLoader// this:dalvik.system.PathClassLoader---java.lang.BootClassLoader@e2f9b5c// root:java.lang.BootClassLoader@e2f9b5c\n\n动态加载dex，调用dex的函数import android.util.Log;public class TestClass &#123;    public void testFunc()&#123;        Log.i(&quot;DexTestTag&quot;, &quot;i am from com.example.test01.TestClass.testFunc&quot;);    &#125;&#125;\n设置让apk解压后只生成一个class.dex文件，在proguard-rules.pro中，可以添加如下配置：\n-forceprocessing-dontshrink-dontoptimize\n在 build.gradle 中添加：\nandroid &#123;    defaultConfig &#123;        ...        multiDexEnabled false    &#125;&#125;\n打包解压推送dex到sdcard下命名为1.dex\n再新建个项目用于加载上面dex文件里面的testFunc函数，用DexClassLoader类去加载dex文件\n// DexClassLoader方法参数：// dexPath：目标所在的apk或者jar文件的路径，装载器将从路径中寻找指定的目标类。// dexOutputDir：由于dex文件在apk或者jar文件中，所以在装载前面前先要从里面解压出dex文件，这个路径就是dex存放的路径，在android系统中，一个应用程序对应一个linux用户id，应用程序只对自己的数据目录有写的权限，所以存放在这个路径。// libPath：目标类中使用的C/C++库。// 最后一个参数是该装载器的父装载器，一般为当前类执行的装载器。\n\nimport androidx.appcompat.app.AppCompatActivity;import android.content.Context;import android.os.Bundle;import java.io.File;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import dalvik.system.DexClassLoader;public class MainActivity extends AppCompatActivity &#123;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        Context appContext = this.getApplicationContext();        testDesClassLoader(appContext,  &quot;/sdcard/1.dex&quot;);    &#125;    public void testDesClassLoader(Context context, String dexFilePath)&#123;        File optFile = context.getDir(&quot;opt_path&quot;, 0);  // 用于存放优化的dex文件        File libFile = context.getDir(&quot;lib_path&quot;, 0);  // 用于存放优化的dex文件        // ClassLoader parentClassLoader = MainActivity.class.getClassLoader();  // 获取当前的类加载器        // ClassLoader tmpClassLoader = context.getClassLoader();  // 获取当前的类加载器        // 指定了它的双亲为mainactivety的classloader,这样就可以访问到mainactivety的类        DexClassLoader dexClassLoader = new DexClassLoader(dexFilePath, optFile.getAbsolutePath(), libFile.getAbsolutePath(), MainActivity.class.getClassLoader());  // 创建类加载器        Class&lt;?&gt; clazz = null;        try &#123;            clazz = dexClassLoader.loadClass(&quot;com.example.test01.TestClass&quot;);  // 加载类        &#125; catch (ClassNotFoundException e) &#123;            e.printStackTrace();        &#125;        if (clazz != null)&#123;            try &#123;                Method testFuncMethod = clazz.getDeclaredMethod(&quot;testFunc&quot;);  // 通过反射获取方法                Object obj = clazz.newInstance();  // 创建对象                testFuncMethod.invoke(obj);  // 调用方法            &#125; catch (NoSuchMethodException | IllegalAccessException | InstantiationException | InvocationTargetException e) &#123;                e.printStackTrace();            &#125;        &#125;    &#125;&#125;// I/DexTestTag: i am from com.example.test01.TestClass.testFunc\n还要在AndroidMainfest.xml文件里添加读写sd卡的权限,并在手机设置给应用增加读取文件权限\n&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&gt;&lt;/uses-permission&gt;\n\n这样就实现了dex通过ClassLoader加载进行调用，并指定了MainActivity.class.getClassLoader()，也就是PathClassLoader作为父节点。\n","tags":["脱壳"]},{"title":"某音web端X-Bogus 逆向分析算法","url":"/posts/16537/","content":"目标：视频评论接口X-Bogus参数接口地址：’aHR0cHM6Ly93d3cuZG91eWluLmNvbS9hd2VtZS92MS93ZWIvY29tbWVudC9saXN0Lw&#x3D;&#x3D;’\n抓包该接口是xhr请求，使用xhr下断点，当url中包含X-Bogus时就断下看调用栈上一层是在webmssdk.es5.js文件里，其实这个文件就是生成参数的，通过查阅知道这就是jsvmp，而且整体上也做了混淆。\n这里使用v_jstools插件进行变量的压缩计算。还原后使用浏览器的 Overrides 替换功能将 webmssdk.es5.js替换掉。往上跟栈也就是跟到上图的堆栈b那里，X-Bogus参数是在this.openArgs[1]里面，直接打一个条件断点在b那this.openArgs[1].indexOf(&quot;X-Bogus&quot;) != -1翻页评论重新触发请求，如图所示，到这里就已经生成了X-Bogus如图所示，$函数这里就已经生成了X-Bogus，this.openArgs[1]就是携带了xb的完整url仔细观察这段代码，有很多三元表达式，当 M 的值为 15 时，就会走到这段逻辑，执行完函数后赋值给K，K 的值生成之后，有一个 O[S] &#x3D; K 的操作。再往上看代码，O初始化的地方O 是一个数组，单步调试的话会发现代码会一直走这个 if-else 的逻辑，几乎每一步都有 O 数组的参与，不断往里面增删改查值，for 循环里面的 j 值，决定着后续 if 语句的走向，这里也就是插桩的关键所在。\n插桩分析大的 for 循环和 if-else 逻辑有两个地方，为了保证最后的日志更加详细完整，在这两个地方都下个日志断点（右键 Add logpoint），断点内容为：“位置 1”, “索引j”, j, “索引A”, A, “值O: “, JSON.stringify(O, function(key, value) {if (value &#x3D;&#x3D; window) {return undefined} return value})“位置 2”, “索引j”, j, “索引A”, A, “值O: “, JSON.stringify(O, function(key, value) {if (value &#x3D;&#x3D; window) {return undefined} return value})\n插桩输出 O 的时候为什么要写这么长一串呢？首先 JSON.stringify() 方法的作用是将 JavaScript 值转换为 JSON 字符串，基础语法是 JSON.stringify(value[, replacer [, space]])，如果不将其转换成 JSON，那么 O 的值，输出可能是这样的：[empty, Array(26), 1, Array(0)]，你看不到 Array 数组里面具体的值，该方法有个可选参数 replacer，如果 replacer 为函数，则 JSON.stringify 将调用该函数，并传入每个成员的键和值，在函数中可以对成员进行处理，最后返回处理后的值，如果此函数返回 undefined，则排除该成员。下好日志断点后，注意前面我们下的 XHR 断点不要取消，然后进行翻页出发请求，控制台就开始打印日志了，如果 XHR 断点取消了，日志就会一直打印直到卡死。日志输出完毕后，右键Save as保存下来到本地进行分析顺便记录下当前已经生成的xb，DFSzswVupV0ANJPItap8URXAIQ5fxb由DFSzswVupV0ANJPItap8URXAIQ5f这28位字符组成的，现在看是怎么来的，打开刚才的日志，在里面搜索，找到第一次出现的地方。可以看到是逐个生成的，在9047行，xb后面的元素是null，到了下一行9048就生了下一个字符f，那么在这两步之间就是f的生成逻辑，这个时候我们看第9047行的日志断点是 位置 2 索引j 16 索引A 716，那么我们回到原网页，在位置2，下一个条件断点（右键 Add conditional breakpoint），当 j&#x3D;&#x3D;16 &amp;&amp; A&#x3D;&#x3D;716 &amp;&amp; O[7] &#x3D;&#x3D; 21 时就断下。之所以要加 O[7] 是因为 索引j 16 索引A 716 的位置有很多，多加个限制条件就可以缩小范围，当然有可能加了多个条件仍然有多个位置都满足，就需要自己筛选了，通过断点断下的时候看看控制台前面输出的日志来判断是不是我们想要的位置。继续翻页，断下之后开始单步跟，来到下图所示的地方：到这里之后，就不要下一步了，再下一步有可能整个语句就执行完毕了，其中的细节你看不到，所以这里我们在控制台挨个输入看看：可以看到实际上的逻辑就是返回指定位置的字符，w 的值就是 O[5]，m 的值就是 O[4]，经过多次调试发现 m 的值是固定的，P 就是 charAt() 方法。我们再看看我们本地的日志，O[5] 的值为 [16]，charAt() 取值出来就是f，逻辑完全正确。现在我们还需要知道这个16是怎么来的，继续往上看，找到16第一次出现的地方，在第9046行，那么我们就要使其在上一步断下，也就是第9045行，如下图所示：第9045行的索引信息为 位置 2 索引j 47 索引A 708，同样的下条件断点观察怎么生成的：可以看到逻辑是 O[5] &amp; O[6]，再把值赋给O[5]，再看我们之前本地的日志O[5] &#x3D; 5809808O[6] &#x3D; 635809808 &amp; 63 &#x3D; 16，逻辑正确，16就是这么来的。接下来又开始找 5809808 和 63 是怎么生成的，先看看63是怎么来的，同样在生成的上一步，也就是第9044行下个条件断点，这行的索引为 位置 2 索引j 72 索引A 704。 可以看到 63 是直接 F[A] 生成的，F 是一个大数组，A 就是索引为 704，F 这个大数组怎么来的先不用管，经过几次测试发现是固定的。5809808后面再说，再逐个找倒数的字符串的生成，记录下来xb &#x3D; “DFSzswVupV0ANJPItap8URXAIQ5f”m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”第28字符串 &#x3D;&#x3D;&gt; f&#x3D;m[16]，16&#x3D;5809808&amp;63，63&#x3D;F[704]第27字符串 &#x3D;&#x3D;&gt; 5&#x3D;m[26]，26&#x3D;1664&gt;&gt;6，6&#x3D;F[646]第26字符串 &#x3D;&#x3D;&gt; Q&#x3D;m[10]，10&#x3D;40960&gt;&gt;12，12&#x3D;F[580]第25字符串 &#x3D;&#x3D;&gt; I&#x3D;m[22]，22&#x3D;5767168&gt;&gt;18，18&#x3D;F[510]第24字符串 &#x3D;&#x3D;&gt; A&#x3D;m[30]，30&#x3D;7701854&amp;63，63&#x3D;F[704]第23字符串 &#x3D;&#x3D;&gt; X&#x3D;m[21]，21&#x3D;1344&gt;&gt;6，6&#x3D;F[646]第22字符串 &#x3D;&#x3D;&gt; R&#x3D;m[24]，24&#x3D;98304&gt;&gt;12，12&#x3D;F[580]第21字符串 &#x3D;&#x3D;&gt; U&#x3D;m[29]，29&#x3D;7602176&gt;&gt;18，18&#x3D;F[510]第20字符串 &#x3D;&#x3D;&gt; 8&#x3D;m[12]，12&#x3D;16232652&amp;63，63&#x3D;F[704]\n把xb &#x3D; DFSz swVu pV0A NJPI tap8 URXA IQ5f，将其看成每四个为一组，从上面的规律可以得到，每4个字符串为一组，每组的字符生成流程都是一样的\n就差大数字是怎么来的，搜本地日志5809808第一次出现的位置，x直接定位到第一次出现的地方第8979行的上一行第8978行，位置 2 索引j 48 索引A 454可以看出大数字是O[2]|O[3]计算而来，那我们本地5809808就是5809664|144\n找到144第一次出现的地方，同样的操作114是由O[4].charCodeAt(O[5])生成，O[4]&#x3D;’\\x02ÿ-%.,2\\x10^\\x8F\\x1AÖ÷°cÛ\\x85^X¦?’，O[5]&#x3D;20经过几次测试知道乱码字符串是跟url有关，生成过程后面说。用我们本地的O[4]试一下“\\u0002ÿ-%.,\\u000F^\\u001AÖ÷°Ìu^X¦”.charCodeAt(20)经过后面8位字符的跟进后，记录了一下规则xb &#x3D; “DFSzswVupV0ANJPItap8URXAIQ5f”m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”\n\n第28字符串f：\t  f&#x3D;m[16]  16&#x3D;5809808&amp;63 63&#x3D;F[704]\t5809808&#x3D;5809664|144\t144&#x3D;”\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(20)\t5809664&#x3D;5767168|42496 42496&#x3D;166&lt;&lt;8\t8&#x3D;F[386]\t166&#x3D;”\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(19)\t5767168&#x3D;88&lt;&lt;16\t16&#x3D;F[320]\t88&#x3D;”\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(18)\n\n第27字符串5：\t5&#x3D;m[26]\t26&#x3D;1664&gt;&gt;6\t6&#x3D;F[646]\t1664&#x3D;5809808&amp;4032\t4032&#x3D;F[638]\n\n第26字符串Q：\tQ&#x3D;m[10]\t10&#x3D;40960&gt;&gt;12\t12&#x3D;F[580]\t40960&#x3D;5809808&amp;258048\t258048&#x3D;F[568]\n\n第25字符串I：\tI&#x3D;m[22]\t22&#x3D;5767168&gt;&gt;18\t18&#x3D;F[510]\t5767168&#x3D;5809808&amp;16515072\t16515072&#x3D;F[498]\n\n第24字符串A:\tA&#x3D;m[30]\t30&#x3D;7701854&amp;63\t63&#x3D;F[704]\t7701854&#x3D;7701760|94\t94&#x3D;”\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(17)\t7701760&#x3D;7667712|34048\t34048&#x3D;133&lt;&lt;8\t8&#x3D;F[386]\t133&#x3D;”\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(16)\t7667712&#x3D;117&lt;&lt;16\t16&#x3D;F[320]\t117&#x3D;”\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(15)\n\n第23字符串X：\tX&#x3D;m[21]\t21&#x3D;1344&gt;&gt;6\t6&#x3D;F[646]\t1344&#x3D;7701854&amp;4032\t4032&#x3D;F[638]\n\n第22字符串R：\tR&#x3D;m[24]\t24&#x3D;98304&gt;&gt;12\t12&#x3D;F[580]\t98304&#x3D;7701854&amp;258048\t258048&#x3D;F[568]\n\n第21字符串U：\tU&#x3D;m[29]\t29&#x3D;7602176&gt;&gt;18\t18&#x3D;F[510]\t7602176&#x3D;7701854&amp;16515072\t16515072&#x3D;F[498]\n\n\n正序整理了一下，大致的流程就是m &#x3D; “Dkdpgh4ZKsQB80&#x2F;Mfvw36XI1R25-WUAlEi7NLboqYTOPuzmFjJnryx9HVGcaStCe&#x3D;”xb &#x3D; “DFSz swVu pV0A NJPI tap8 URXA IQ5f”&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;第6组 URXA &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;“\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(15) &#x3D; 117F[320] &#x3D; 16117 &lt;&lt; 16 &#x3D; 7667712\n“\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(16) &#x3D; 133F[386] &#x3D; 8133 &lt;&lt; 8 &#x3D; 340487667712|34048 &#x3D; 7701760\n“\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(17) &#x3D; 947701760 | 94 &#x3D; 7701854\nF[498] &#x3D; 165150727701854 &amp; 16515072 &#x3D; 7602176F[510] &#x3D; 187602176 &gt;&gt; 18 &#x3D; 29m.charAt(29) &#x3D; ‘U’\nF[568] &#x3D; 2580487701854 &amp; 258048 &#x3D; 98304F[580] &#x3D; 1298304 &gt;&gt; 12 &#x3D; 24m.charAt(24) &#x3D; ‘R’\tF[638] &#x3D; 40327701854 &amp; 4032 &#x3D; 1344F[646] &#x3D; 61344 &gt;&gt; 6 &#x3D; 21m.charAt(21) &#x3D; ‘X’\nF[704] &#x3D; 637701854 &amp; 63 &#x3D; 30m.charAt(30) &#x3D; ‘A’\t&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;第7组 IQ5f &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;“\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(18) &#x3D; 88F[320] &#x3D; 1688 &lt;&lt; 16 &#x3D; 5767168\n“\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(19) &#x3D; 166F[386] &#x3D; 8166 &lt;&lt; 8 &#x3D; 424965767168 | 42496 &#x3D; 5809664\n“\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu^X¦”.charCodeAt(20) &#x3D; 1445809664 | 144 &#x3D; 5809808\nF[498] &#x3D; 165150725809808 &amp; 16515072 &#x3D; 5767168F[510] &#x3D; 185767168 &gt;&gt; 18 &#x3D; 22m.charAt(22) &#x3D; ‘I’\nF[568] &#x3D; 2580485809808 &amp; 258048 &#x3D; 40960F[580] &#x3D; 1240960 &gt;&gt; 12 &#x3D; 10m.charAt(10) &#x3D; ‘Q’\nF[638] &#x3D; 40325809808 &amp; 4032 &#x3D; 1664F[646] &#x3D; 61664 &gt;&gt; 6 &#x3D; 26m.charAt(26) &#x3D; ‘5’\nF[704] &#x3D; 635809808 &amp; 63 &#x3D; 16m.charAt(16) &#x3D; ‘f’\n将流程对比一下就可以发现，每个步骤 F 里面的取值都是一样的，这个可以直接写死，不同之处就在于最开始的 charCodeAt() 操作，也就是返回乱码字符串指定位置字符的 Unicode 编码，第7组依次是 18、19、20，第6组依次是15、16、17，以此类推，第1组刚好是0、1、2，如下图所示：每一组的逻辑都是一样的，依次生成七组字符串，最后拼接成完整的 X-Bogus。\n乱码字符串生成逻辑该样本对应的param_url &#x3D; “device_platform&#x3D;webapp&amp;aid&#x3D;6383&amp;channel&#x3D;channel_pc_web&amp;aweme_id&#x3D;7071984856741186853&amp;cursor&#x3D;0&amp;count&#x3D;20&amp;item_type&#x3D;0&amp;insert_ids&#x3D;&amp;rcFT&#x3D;&amp;pc_client_type&#x3D;1&amp;version_code&#x3D;170400&amp;version_name&#x3D;17.4.0&amp;cookie_enabled&#x3D;true&amp;screen_width&#x3D;2048&amp;screen_height&#x3D;1152&amp;browser_language&#x3D;zh-CN&amp;browser_platform&#x3D;Win32&amp;browser_name&#x3D;Chrome&amp;browser_version&#x3D;110.0.0.0&amp;browser_online&#x3D;true&amp;engine_name&#x3D;Blink&amp;engine_version&#x3D;110.0.0.0&amp;os_name&#x3D;Windows&amp;os_version&#x3D;10&amp;cpu_core_num&#x3D;20&amp;device_memory&#x3D;8&amp;platform&#x3D;PC&amp;downlink&#x3D;3.85&amp;effective_type&#x3D;4g&amp;round_trip_time&#x3D;100&amp;webid&#x3D;7206219799877142077&amp;msToken&#x3D;Z9-0y9elP0-Obz51QiLXg2qpd-dyJHammHH_0hNY48UFC3RxAx8bjxf2Hpmxmm52cmDQVfBP0lf1UwzvAtbOcW6RGQuSY_1W-plCkw-lP-OkNH00Ion2DohnZlsySAc&#x3D;”在进行下一步之前，我们要注意两点：\n\n文章演示有些变量前后不对应，因为每次插桩的值都是会变的，看流程就行了，流程是正确的；\n我们日志输出是经过 JSON.stringify 处理了的，有些步骤是向某个函数传入乱码字符串进行处理，你会发现处理后的结果和日志不一致，这是正常的。\n\n乱码字符串的生成相对来说稍微复杂一点，但思路仍然一样，这里就不一一截图展示了，直接用日志描述一下关键步骤，注意以下日志是正向的步骤，就不逆着推了，建议自己先逆着把流程走一走，再来看这个步骤就看得懂了。\nStep1：首先对 URL 后面的参数，也就是 Query String Parameters 进行两次 MD5、两次转 Uint8Array 处理，最后得到的 Uint8Array 对象在后面的步骤中用得到，步骤如下：位置 1 索引j 4 索引A 134：将 URL 后面的参数进行 MD5 加密得到字符串位置 1 索引j 16 索引A 494：将上一步的字符串转换为 Uint8Array 对象位置 1 索引j 4 索引A 134：将上一步的 Uint8Array 对象进行 MD5 加密，得到字符串位置 1 索引j 16 索引A 504：将上一步的字符串转换为 Uint8Array 对象\n上述步骤中，我们将最终得到的结果命名为 uint8Array，md5字符串转uint8Array，跟进到相应位置把函数抠出来即可\nStep2：生成两个大数，一个是时间戳，我们称之为 fixedString1，另一个调用某个方法生成，我们称之为 fixedString2。fixedString1位置 1 索引j 43 索引A 1032：1677985818608 &#x2F; 1000 &#x3D; 1677985818.608fixedString2位置 1 索引j 16 索引A 1060：P.apply(null, []) &#x3D; 1489154074上述步骤中，P 对应以下方法，缺失的方法自行补齐：\nfunction _0x17dd8c() &#123;    try &#123;        return _0x2fc47d || (_0xeb6638.perf ? -1 : _0x2fc47d = _0x5bc542(3735928559));    &#125; catch (a) &#123;        return -1;    &#125;&#125;function _0x5bc542(a) &#123;    var b, c = document.createElement(&quot;canvas&quot;);    c.width = 48, c.height = 16;    var e = c.getContext(&quot;2d&quot;);    e.font = &quot;14px serif&quot;, e.fillText(&quot;龘ฑภ경&quot;, 2, 12), e.shadowBlur = 2, e.showOffsetX = 1,     e.showColor = &quot;lime&quot;, e.arc(8, 8, 8, 0, 2), e.stroke(), b = c.toDataURL();    for (var d = 0; d &lt; 32; d++) &#123;        a = 65599 * a + b.charCodeAt(a % b.length) &gt;&gt;&gt; 0;    &#125;    return a;&#125;\n\nStep3：先后生成两个数组，我们称之为 array1、array2，array2 就是由 array1 的元素位置变换后得来的，严格来讲，array1 不是一个完整的数组，而是一个个数字，这一点可以在日志中体现出来，为了方便我们就直接将其视为一个数组，两个数组都有19个元素，步骤如下：array1[0] 至 array1[3] 为定值  [64,0.00390625,1,8]array1[4]位置 1 索引j 25 索引A 1172：uint8Array[14] &#x3D; 127array1[5]位置 1 索引j 25 索引A 1196：uint8Array[15] &#x3D; 208\narray1[6]、array1[7] 可以直接写死\narray1[8]、array1[9]  与 ua 有关, 可以直接写死\narray1[10]位置 1 索引j 52 索引A 1316：fixedString1 &gt;&gt; 24 &#x3D; 100位置 1 索引j 47 索引A 1324：100 &amp; 255 &#x3D; 100\narray1[11]位置 1 索引j 52 索引A 1348：fixedString1 &gt;&gt; 16 &#x3D; 25604位置 1 索引j 47 索引A 1356：25604 &amp; 255 &#x3D; 4\narray1[12]位置 1 索引j 52 索引A 1380：fixedString1 &gt;&gt; 8 &#x3D; 6554632位置 1 索引j 47 索引A 1388：6554632 &amp; 255 &#x3D; 8\narray1[13]位置 1 索引j 52 索引A 1412：fixedString1 &gt;&gt; 0 &#x3D; 1677985818位置 1 索引j 47 索引A 1420：1677985818 &amp; 255 &#x3D; 26\narray1[14]位置 1 索引j 52 索引A 1444：fixedString2 &gt;&gt; 24 &#x3D; 88位置 1 索引j 47 索引A 1452 ：88 &amp; 255 &#x3D; 88\narray1[15]位置 1 索引j 52 索引A 1476：fixedString2 &gt;&gt; 16 &#x3D; 22722位置 1 索引j 47 索引A 1484：22722 &amp; 255 &#x3D; 194\narray1[16]位置 1 索引j 52 索引A 1508：fixedString2 &gt;&gt; 8 &#x3D; 5817008位置 1 索引j 47 索引A 1516：5817008 &amp; 255 &#x3D; 176\narray1[17]位置 1 索引j 52 索引A 1540：fixedString2 &gt;&gt; 0 &#x3D; 1489154074位置 1 索引j 47 索引A 1548：1489154074 &amp; 255 &#x3D; 26\narray1[18]前面18个字符全部进行亦或位置 1 索引j 49 索引A 1736：array1.reduce(function(a, b) { return a ^ b; }); &#x3D; 96\narray1 完整值如下位置 1 索引j 16 索引A 1932：array1 &#x3D; [64,0.00390625,1,8,127,208,69,63,35,157,100,4,8,26,88,194,176,26,96]array2 由 array1 元素交换位置而来：array2 &#x3D; [array1[0], array1[2], array1[4], array1[6], array1[8], array1[10], array1[12], array1[14], array1[16], array1[18], array1[1], array1[3], array1[5], array1[7], array1[9], array1[11], array1[13], array1[15], array1[17]]array2 完整值如下array2 &#x3D; [64, 1, 127, 69, 35, 100, 8, 88, 176, 96, 0.00390625, 8, 208, 63, 157, 4, 26, 194, 26]\nStep4：将 Step3 得到的 array2 经过转换得到乱码字符串，步骤如下：位置 1 索引j 16 索引A 1932：_0x398111.apply(null, array2) &#x3D; ‘@\\u0000\\u0001\\bÐE?#d\\u0004\\b\\u001aXÂ°\\u001a&#96;’\n\n\n位置 1 索引j 16 索引A 1986：_0x25788b.apply(null, [‘ÿ’,‘@\\x00\\x01\\bïwE?#\\x9Dd\\x074\\x89XÂ°\\x1Aû’]) &#x3D; ‘-%.,\\u000f^\\u001aÖ÷°Ìu�^X¦’\n\n 位置 1 索引j 16 索引A 2038：_0x94582.apply(null, [2,255,’-%.,\\u000f^\\u001aÖ÷°Ìu�^X¦’]) &#x3D; “\\u0002ÿ-%.,\\u000f^\\u001aÖ÷°Ìu�^X¦”\n\n至此乱码字符串的流程就结束了。以上缺的函数根据相应的索引根据到代码位置抠出来即可\n测试成功，我这里把生成方式封装成api接口\n","tags":["js"]},{"title":"谷歌Pixel3刷机以及magisk的安装","url":"/posts/36296/","content":"一、刷机1、首先找到对应自己手机的镜像版本，进行下载，https://developers.google.cn/android/images#blueline新建个文件夹shuaji，下载完解压到刷机里面2、下载刷机工具platform-tools.zip，https://developer.android.com/studio/releases/platform-tools?hl=zh-cn，根据操作系统下载，链接需要翻墙才能打开，我也把下载链接放出来，可以直接下载\n\n下载适用于 Windows 的 SDK Platform-Tools\n下载适用于 Mac 的 SDK Platform-Tools\n下载适用于 Linux 的 SDK Platform-Tools\n\n下载完，同样解压到shuaji目录下3、手机关机，关机后 长按住 关键键+音量减键（或者开机界面执行adb reboot bootloader），手机进入bootloader4、winfows运行shuaji目录下flash-all.bat，mac则需要运行flash-all.sh文件，整个过程会自动处理完成，伴随着重启几次。 过了几分钟后，到这里就刷机成功了5.修改手机配置（1）点击English，换成简体中文，然后点击开始，能跳过的则跳过。（2）点击设置，点击关于手机，多次点击版本号，开启开发者模式，在开发者模式开启USB调式。（3）在设置修改手机日期时间为当前日期时间（不弄可能没网）\n二、解锁root下载Magisk，https://github.com/topjohnwu/Magisk/tags，我这下载的是v24.0的1.usb连接电脑后，使用命令 adb install Magisk-v24.0.apk 进行安装。2.解压上面shuaji文件目录下的image-xxxx.zip，把boot.img 通过adb push到手机&#x2F;sdcard&#x2F;download&#x2F;命令：adb push boot.img &#x2F;sdcard&#x2F;download&#x2F;3.手机上如下操作magisk，生成 magisk_patched-24000_xxxxx.img 文件选择刚才上传的boot.img 然后点击开始，接着会在目录下生成带magisk的文件4.把生成的magisk_patched-24000_xxxxx.img 通过 adb pull 到电脑fastboot.exe所在的目录，也就是shuaji目录，命令如下 adb pull &#x2F;sdcard&#x2F;Download&#x2F;magisk_patched-24000_qJQvu.img .5. 执行 adb reboot bootloader 手机进入bootloader6. 执行命令 fastboot flash boot magisk_patched-24000_qJQvu.img 刷magisk fastboot reboot7. 手机点击电源键让手机正常启动，magisk安装成功，root完成\n","tags":["刷机"]},{"title":"ProtoBuf逆向之某公交app","url":"/posts/14763/","content":"上一篇是web端的ProtoBuf逆向，这篇就找了个app的ProtoBuf看看练练手目标app：aHR0cHM6Ly93d3cud2FuZG91amlhLmNvbS9hcHBzLzc0NTAxNjM&#x3D;\n抓包分析随便搜索一个线路点进去，看到请求头和响应都是加密的用jadx分析下请求头的加密参数request记住这里其他两个函数，有”&#x2F;protoc.Request.Sequence”，还引用了proto的包到这可以知道request的值是经过native函数加密后再由base64得到的。用ida打开native so文件，定位encode2函数!可以看到是用了aes_cbc_128加密，那就是需要拿到密钥和iv直接frida hook这两个函数\nfunction main()&#123;    Java.perform(function()&#123;        var ByteString = Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);        var UtilsClass = Java.use(&quot;com.shjt.map.tool.Native&quot;);        UtilsClass.encode2.implementation = function (a)&#123;          console.log(&quot;入参: &quot;, ByteString.of(a).hex());          var value = this.encode2(a);          console.log(&#x27;结果: &#x27;, ByteString.of(value).hex());          return value;            &#125;        inline_hook()    &#125;)&#125;function inline_hook() &#123;    var libnative_lib_addr = Module.findBaseAddress(&quot;libnative.so&quot;);    if (libnative_lib_addr) &#123;        var aes_decrypt_cbc  = Module.findExportByName(&quot;libnative.so&quot;, &quot;_Z15aes_encrypt_cbcPKhjPhPKjiS0_&quot;)        var aes_key_setup = Module.getExportByName(&#x27;libnative.so&#x27;, &#x27;_Z13aes_key_setupPKhPji&#x27;);        var Native_encode2 = Module.getExportByName(&#x27;libnative.so&#x27;, &#x27;Java_com_shjt_map_tool_Native_encode2&#x27;);        Interceptor.attach(aes_key_setup, &#123;            onEnter:function(args)&#123;                console.log(&quot;================aes_key_setup=================&quot;)                console.log(&#x27;arg1:&#x27;,args[0].readByteArray(16))                console.log(&#x27;arg2:&#x27;,args[1].readByteArray(16))                console.log(&#x27;arg3:&#x27;,args[2].toInt32())            &#125;,            onLeave:function(retval)&#123;            &#125;        &#125;)        Interceptor.attach(aes_decrypt_cbc, &#123;            onEnter: function (args) &#123;                console.log(&quot;================aes_decrypt_cbc=================&quot;)                console.log(&#x27;arg1:&#x27;,args[0].readByteArray(16))                console.log(&#x27;arg2:&#x27;,args[1].toInt32())                console.log(&#x27;arg3:&#x27;,args[2].readByteArray(16))                console.log(&#x27;arg4:&#x27;,args[3].readByteArray(16))                console.log(&#x27;arg5:&#x27;,args[4].toInt32())                console.log(&#x27;arg6:&#x27;,args[5].readByteArray(16))            &#125;,            onLeave: function (retval) &#123;                 console.log(&quot;retval is :&quot;, retval)             &#125;        &#125;)    &#125;&#125;setImmediate(main);\n结果\n入参:  0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801================aes_key_setup=================arg1:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF00000000  2f d3 02 8e 14 a4 5d 1f 8b 6e b0 b2 ad b7 ca af  /.....]..n......arg2:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF00000000  39 39 37 34 20 49 ed f1 ff ff ff ff 00 00 00 00  9974 I..........arg3: 128================aes_decrypt_cbc=================arg1:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF00000000  0a 27 0a 18 2f 70 72 6f 74 6f 63 2e 52 65 71 75  .&#x27;../protoc.Requarg2: 48arg3:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF00000000  00 6f 6d 2f 61 6e 64 72 6f 69 64 2f 6f 6b 68 74  .om/android/okhtarg4:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF00000000  8e 02 d3 2f 1f 5d a4 14 b2 b0 6e 8b af ca b7 ad  .../.]....n.....arg5: 128arg6:            0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  0123456789ABCDEF00000000  75 4c 8f d5 84 fa cf 62 10 37 6b 2b 72 b0 63 e4  uL.....b.7k+r.c.retval is : 0x1结果:  8d456e87c6801a2e18920732f80a1127e7a9548fd9f2f8b45edab8fd629e60bd804287b6fa4bb05fbc8b284ab0eb9783\n明文，密文有了iv和密钥就在这几个之间，两两组合试一试\n2f d3 02 8e 14 a4 5d 1f 8b 6e b0 b2 ad b7 ca af39 39 37 34 20 49 ed f1 ff ff ff ff 00 00 00 000a 27 0a 18 2f 70 72 6f 74 6f 63 2e 52 65 71 7500 6f 6d 2f 61 6e 64 72 6f 69 64 2f 6f 6b 68 748e 02 d3 2f 1f 5d a4 14 b2 b0 6e 8b af ca b7 ad75 4c 8f d5 84 fa cf 62 10 37 6b 2b 72 b0 63 e4\n所以这个aes是标准的算法，没经过魔改的，再把加密后的结果base64一下就是请求的参数了，过程算法知道了，那参数来源呢，是怎么得到的\n使用proto上面说了用了proto的包，看里面的函数过程，明文是经过了proto协议的才到aes加密那就0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801转成二进制写进文件，再用proto解码器解码看看\nimport binascii# hex字符串转二进制d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:    f.write(d)\nprotoc --decode_raw &lt; req.bin\n解码后得到\n1 &#123;  1: &quot;/protoc.Request.Sequence&quot;  2 &#123;    1: 1    2: &quot;90\\350\\267\\257&quot;    3: 1  &#125;&#125;\n果不其然，那接下来如何模拟发请求呢经过上一篇后，现在很快就能编写proto文件了\nsyntax = &quot;proto3&quot;;message Msg22 &#123;  int32 field1 = 1;  string field2 = 2;  int32 field3 = 3;&#125;message Msg11 &#123;  string field1 = 1;  Msg22 msg22 = 2;&#125;message SearchService&#123;  Msg11 msg11 = 1;&#125;\n编译成python版本\nprotoc --python_out=. ./req.proto\n目录下生成了req_pb2.py 拖入项目中，需要使用时就调用即可\nimport binasciiimport req_pb2 as pb# hex字符串转二进制# d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)# with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:#     f.write(d)search_request = pb.SearchService.SearchRequest()  # 实例化对象search_request.msg11.field1 = &#x27;/protoc.Request.Sequence&#x27;search_request.msg11.msg22.field1 = 1search_request.msg11.msg22.field2 = &#x27;90路&#x27;search_request.msg11.msg22.field3 = 1# 序列化请求数据serialize_data = search_request.SerializeToString()# print(serialize_data)# 保存数据玮bin文件供后续对比使用with open(&#x27;my_req.bin&#x27;, mode=&quot;wb&quot;) as f:    f.write(serialize_data)\n运行后生成my_req.bin文件，跟原来的对比一下发送请求\nimport binasciifrom urllib.parse import quoteimport req_pb2 as pbimport requestsfrom Crypto.Cipher import AESfrom Crypto.Util.Padding import pad, unpadimport base64def aes_encry(ori):    key = &#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;    iv = &#x27;754c8fd584facf6210376b2b72b063e4&#x27;    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))    return aes.encrypt(pad(ori, 16))def aes_decry(ori):    key = &#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;    iv = &#x27;754c8fd584facf6210376b2b72b063e4&#x27;    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))    return unpad(aes.decrypt(ori), 16)# hex字符串转二进制# d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)# with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:#     f.write(d)search_request = pb.SearchService.SearchRequest()  # 实例化对象search_request.msg1.field1 = &#x27;/protoc.Request.Sequence&#x27;search_request.msg1.msg2.field1 = 1search_request.msg1.msg2.field2 = &#x27;90路&#x27;search_request.msg1.msg2.field3 = 1# 序列化请求数据serialize_data = search_request.SerializeToString()# print(serialize_data)# 保存数据玮bin文件供后续对比使用# with open(&#x27;my_req.bin&#x27;, mode=&quot;wb&quot;) as f:#     f.write(serialize_data)# 对序列化后的数据aes加密aes_data = aes_encry(serialize_data)# b64 aes加密数据b64_aes_data = base64.b64encode(aes_data)# 请求体post_data = &#x27;request=&#x27; + quote(b64_aes_data.decode(), safe=&#x27;&#x27;)+&#x27;%0A&#x27;header = &#123;    &#x27;Accept&#x27;: &#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;,    &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,    &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh&#x27;,    &#x27;Connection&#x27;: &#x27;keep-alive&#x27;,    &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;,    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;,    &#x27;Host&#x27;: &#x27;lbs.jt.sh.cn:8082&#x27;&#125;url = &quot;http://lbs.jt.sh.cn:8082/app/rls/monitor&quot;response = requests.post(url, headers=header, data=post_data)print(response.text)\n运行后响应内容跟抓包的一样是加密的，用aes尝试解密解完后很像protobuf格式，写进bin文件，再用proto解码看看\ndecry_data = aes_decry(response.content)with open(&#x27;resp.bin&#x27;, mode=&quot;wb&quot;) as f:    f.write(decry_data)\nD:\\pythonProject\\xxxx&gt;protoc --decode_raw &lt; resp.bin1 &#123;  1: &quot;/protoc.Response.Dispatch&quot;  2 &#123;    1 &#123;      1: &quot;90\\350\\267\\257&quot;      2 &#123;        1 &#123;          1: &quot;05:00&quot;          2: &quot;23:41&quot;        &#125;        2: &quot;\\351\\235\\226\\345\\256\\207\\345\\215\\227\\350\\267\\257\\346\\216\\247\\346\\261\\237\\350\\267\\257&quot;        2: &quot;\\346\\216\\247\\346\\261\\237\\346\\226\\260\\346\\235\\221&quot;        2: &quot;\\351\\273\\204\\345\\205\\264\\350\\267\\257\\345\\233\\275\\346\\235\\203\\350\\267\\257&quot;        2: &quot;\\351\\273\\204\\345\\205\\264\\350\\267\\257\\345\\233\\275\\351\\241\\272\\350\\267\\257&quot;        2: &quot;\\344\\272\\224\\350\\247\\222\\345\\234\\272(\\347\\277\\224\\346\\256\\267\\350\\267\\257)&quot;        2: &quot;\\345\\233\\275\\345\\222\\214\\350\\267\\257\\346\\224\\277\\347\\253\\213\\350\\267\\257&quot;        2: &quot;\\346\\201\\222\\344\\273\\201\\350\\267\\257\\346\\270\\205\\346\\272\\220\\347\\216\\257\\350\\267\\257&quot;        2: &quot;\\344\\270\\226\\347\\225\\214\\350\\267\\257\\345\\233\\275\\345\\222\\214\\350\\267\\257&quot;        2: &quot;\\344\\270\\226\\347\\225\\214\\350\\267\\257\\346\\260\\221\\344\\272\\254\\350\\267\\257&quot;        2: &quot;\\351\\227\\270\\346\\256\\267\\350\\267\\257\\346\\256\\267\\350\\241\\214\\350\\267\\257&quot;        2: &quot;\\351\\227\\270\\346\\256\\267\\350\\267\\257\\345\\206\\233\\345\\267\\245\\350\\267\\257&quot;        2: &quot;\\345\\206\\233\\345\\267\\245\\350\\267\\257\\351\\227\\270\\345\\214\\227\\347\\224\\265\\345\\216\\202&quot;        2: &quot;\\351\\225\\277\\350\\210\\252\\351\\224\\232\\345\\234\\260&quot;        2: &quot;\\345\\206\\233\\345\\267\\245\\350\\267\\257\\351\\231\\210\\345\\256\\266\\345\\256\\205&quot;        2: &quot;\\345\\215\\227\\345\\274\\240\\345\\215\\216\\346\\265\\234(\\351\\200\\270\\344\\273\\231\\350\\267\\257)&quot;        2: &quot;\\345\\214\\227\\345\\274\\240\\345\\215\\216\\346\\265\\234(\\351\\200\\270\\344\\273\\231\\350\\267\\257)&quot;        2: &quot;\\346\\267\\236\\346\\273\\250\\350\\267\\257\\345\\220\\214\\346\\265\\216\\350\\267\\257&quot;        2: &quot;\\346\\260\\270\\346\\270\\205\\350\\267\\257\\346\\267\\236\\345\\256\\235\\350\\267\\257&quot;        2: &quot;\\346\\260\\270\\346\\270\\205\\350\\267\\257\\346\\260\\264\\344\\272\\247\\350\\267\\257&quot;        2: &quot;\\345\\217\\214\\345\\237\\216\\350\\267\\257\\346\\260\\270\\346\\270\\205\\350\\267\\257&quot;        2: &quot;\\346\\267\\236\\345\\256\\235\\350\\267\\257\\345\\217\\214\\345\\237\\216\\350\\267\\257&quot;        2: &quot;\\346\\267\\236\\345\\256\\235\\350\\267\\257\\346\\267\\236\\351\\235\\222\\350\\267\\257&quot;      &#125;      2 &#123;        1 &#123;          1: &quot;05:00&quot;          2: &quot;23:10&quot;        &#125;        2: &quot;\\346\\267\\236\\345\\256\\235\\350\\267\\257\\346\\267\\236\\351\\235\\222\\350\\267\\257&quot;        2: &quot;\\345\\217\\214\\345\\237\\216\\350\\267\\257\\346\\267\\236\\345\\256\\235\\350\\267\\257&quot;        2: &quot;\\346\\260\\270\\346\\270\\205\\350\\267\\257\\345\\217\\214\\345\\237\\216\\350\\267\\257&quot;        2: &quot;\\346\\260\\270\\346\\270\\205\\350\\267\\257\\346\\260\\264\\344\\272\\247\\350\\267\\257&quot;        2: &quot;\\346\\260\\270\\346\\270\\205\\350\\267\\257\\346\\267\\236\\345\\256\\235\\350\\267\\257&quot;        2: &quot;\\346\\267\\236\\346\\273\\250\\350\\267\\257\\345\\220\\214\\346\\263\\260\\350\\267\\257&quot;        2: &quot;\\351\\225\\277\\345\\276\\201\\346\\226\\260\\346\\235\\221&quot;        2: &quot;\\346\\267\\236\\346\\273\\250\\350\\267\\257\\346\\267\\236\\346\\273\\250\\346\\224\\257\\350\\267\\257&quot;        2: &quot;\\345\\214\\227\\345\\274\\240\\345\\215\\216\\346\\265\\234(\\351\\200\\270\\344\\273\\231\\350\\267\\257)&quot;        2: &quot;\\345\\215\\227\\345\\274\\240\\345\\215\\216\\346\\265\\234(\\351\\200\\270\\344\\273\\231\\350\\267\\257)&quot;        2: &quot;\\345\\206\\233\\345\\267\\245\\350\\267\\257\\351\\231\\210\\345\\256\\266\\345\\256\\205&quot;        2: &quot;\\351\\225\\277\\350\\210\\252\\351\\224\\232\\345\\234\\260&quot;        2: &quot;\\345\\206\\233\\345\\267\\245\\350\\267\\257\\351\\227\\270\\345\\214\\227\\347\\224\\265\\345\\216\\202&quot;        2: &quot;\\351\\227\\270\\346\\256\\267\\350\\267\\257\\345\\206\\233\\345\\267\\245\\350\\267\\257&quot;        2: &quot;\\351\\227\\270\\346\\256\\267\\350\\267\\257\\346\\256\\267\\350\\241\\214\\350\\267\\257&quot;        2: &quot;\\344\\270\\226\\347\\225\\214\\350\\267\\257\\346\\260\\221\\344\\272\\254\\350\\267\\257&quot;        2: &quot;\\344\\270\\226\\347\\225\\214\\350\\267\\257\\345\\233\\275\\345\\222\\214\\350\\267\\257&quot;        2: &quot;\\346\\201\\222\\344\\273\\201\\350\\267\\257\\346\\270\\205\\346\\272\\220\\347\\216\\257\\350\\267\\257&quot;        2: &quot;\\351\\225\\277\\346\\265\\267\\350\\267\\257\\351\\273\\221\\345\\261\\261\\350\\267\\257&quot;        2: &quot;\\345\\233\\275\\345\\222\\214\\350\\267\\257\\346\\224\\277\\351\\200\\232\\350\\267\\257&quot;        2: &quot;\\344\\272\\224\\350\\247\\222\\345\\234\\272(\\347\\277\\224\\346\\256\\267\\350\\267\\257)&quot;        2: &quot;\\344\\272\\224\\350\\247\\222\\345\\234\\272(\\351\\273\\204\\345\\205\\264\\350\\267\\257)&quot;        2: &quot;\\351\\273\\204\\345\\205\\264\\350\\267\\257\\345\\233\\275\\351\\241\\272\\350\\267\\257&quot;        2: &quot;\\351\\273\\204\\345\\205\\264\\350\\267\\257\\345\\233\\275\\346\\235\\203\\350\\267\\257&quot;        2: &quot;\\346\\216\\247\\346\\261\\237\\346\\226\\260\\346\\235\\221&quot;        2: &quot;\\351\\235\\226\\345\\256\\207\\345\\215\\227\\350\\267\\257\\346\\216\\247\\346\\261\\237\\350\\267\\257&quot;      &#125;    &#125;    2 &#123;      1: &quot;\\346\\262\\252A-30515D&quot;      2: &quot;15:26&quot;    &#125;    2 &#123;      1: &quot;\\346\\262\\252A-07660D&quot;      2: &quot;15:33&quot;    &#125;    2 &#123;      1: &quot;\\346\\262\\252A-33990D&quot;      2: &quot;15:41&quot;    &#125;  &#125;&#125;\n编写proto文件并编译\nsyntax = &quot;proto3&quot;; // 定义proto的版本message Msg1 &#123;  string field1 = 1;  Msg2 msg2 = 2;&#125;message Msg2 &#123;  repeated Msg3 msg3 = 1;  repeated Msg4 msg4 = 2;&#125;message Msg3 &#123;  string field1 = 1;  repeated Msg5 msg5 = 2;&#125;message Msg4 &#123;  string field1 = 1;  string field2 = 2;&#125;message Msg5 &#123;  Msg6 msg6 = 1;  repeated string field1 = 2;&#125;message Msg6 &#123;  string field1 = 1;  string field2 = 2;&#125;message SearchResponse &#123;  Msg1 msg1 = 1;&#125;\n完整代码\nimport binasciiimport jsonfrom urllib.parse import quotefrom google.protobuf.json_format import MessageToJsonimport req_pb2 as pbimport resp_pb2 as pb2import requestsfrom Crypto.Cipher import AESfrom Crypto.Util.Padding import pad, unpadimport base64def aes_encry(ori):    key = &#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;    iv = &#x27;754c8fd584facf6210376b2b72b063e4&#x27;    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))    return aes.encrypt(pad(ori, 16))def aes_decry(ori):    key = &#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;    iv = &#x27;754c8fd584facf6210376b2b72b063e4&#x27;    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))    return unpad(aes.decrypt(ori), 16)# hex字符串转二进制# d = binascii.a2b_hex(&#x27;0a270a182f70726f746f632e526571756573742e53657175656e6365120b080112053930e8b7af1801&#x27;)# with open(&quot;req.bin&quot;, &#x27;wb&#x27;) as f:#     f.write(d)search_request = pb.SearchService()  # 实例化对象search_request.msg11.field1 = &#x27;/protoc.Request.Sequence&#x27;search_request.msg11.msg22.field1 = 1search_request.msg11.msg22.field2 = &#x27;90路&#x27;search_request.msg11.msg22.field3 = 1# 序列化请求数据serialize_data = search_request.SerializeToString()# print(serialize_data)# 保存数据玮bin文件供后续对比使用# with open(&#x27;my_req.bin&#x27;, mode=&quot;wb&quot;) as f:#     f.write(serialize_data)# 对序列化后的数据aes加密aes_data = aes_encry(serialize_data)# b64 aes加密数据b64_aes_data = base64.b64encode(aes_data)# 请求体post_data = &#x27;request=&#x27; + quote(b64_aes_data.decode(), safe=&#x27;&#x27;)+&#x27;%0A&#x27;header = &#123;    &#x27;Accept&#x27;: &#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;,    &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,    &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh&#x27;,    &#x27;Connection&#x27;: &#x27;keep-alive&#x27;,    &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;,    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;,    &#x27;Host&#x27;: &#x27;lbs.jt.sh.cn:8082&#x27;&#125;url = &quot;http://lbs.jt.sh.cn:8082/app/rls/monitor&quot;response = requests.post(url, headers=header, data=post_data)# print(response.text)decry_data = aes_decry(response.content)# with open(&#x27;resp.bin&#x27;, mode=&quot;wb&quot;) as f:#     f.write(decry_data)# 使用proto编写文件root = pb2.SearchResponse()root.ParseFromString(decry_data)data = json.loads(MessageToJson(root))print(data)\n\n使用blackboxprotobuf还有一种更快的方式，使用blackboxprotobuf读取请求的二进制文件，通过blackboxprotobuf转为json，直接把关键词修改掉再转回去像响应内容的key只是一个符号，可以通过value大概知道它的含义就行了\nimport blackboxprotobufimport binasciiimport requestsfrom Crypto.Cipher import AESfrom Crypto.Util.Padding import pad, unpadimport base64from urllib.parse import quotedef aes_encry(ori):    key = &#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;    iv = &#x27;754c8fd584facf6210376b2b72b063e4&#x27;    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))    return aes.encrypt(pad(ori, 16))def aes_decry(ori):    key = &#x27;2fd3028e14a45d1f8b6eb0b2adb7caaf&#x27;    iv = &#x27;754c8fd584facf6210376b2b72b063e4&#x27;    aes = AES.new(binascii.a2b_hex(key), AES.MODE_CBC, binascii.a2b_hex(iv))    return unpad(aes.decrypt(ori), 16)with open(r&quot;req.bin&quot;, &quot;rb&quot;) as fp:    data = fp.read()    message, typedef = blackboxprotobuf.protobuf_to_json(data, message_type=None)    bus_data = blackboxprotobuf.decode_message(data, message_type=None)[0]    print(message)    print(bus_data)    print(typedef)    bus_data[&#x27;1&#x27;][&#x27;2&#x27;][&#x27;2&#x27;] = bytes(&#x27;90路&#x27;, &#x27;utf-8&#x27;)serializedata = blackboxprotobuf.encode_message(bus_data, message_type=typedef)print(serializedata)# 对序列化后的数据aes加密aesdata = aes_encry(serializedata)# b64 aes加密数据b64_aes_data = base64.b64encode(aesdata)# 抓取postdata = &#x27;request=&#x27; + quote(b64_aes_data.decode(), safe=&#x27;&#x27;) + &#x27;%0A&#x27;header = &#123;    &#x27;Accept&#x27;: &#x27;application/json,application/xml,application/xhtml+xml,text/html;q=0.9,image/webp,*/*;q=0.8&#x27;,    &#x27;Accept-Encoding&#x27;: &#x27;gzip, deflate&#x27;,    &#x27;Accept-Language&#x27;: &#x27;zh-CN,zh&#x27;,    &#x27;Connection&#x27;: &#x27;keep-alive&#x27;,    &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded; charset=utf-8&#x27;,    &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Linux; U; Android 6.0; zh-cn; Nexus 6P Build/MDA89D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30&#x27;,    &#x27;Host&#x27;: &#x27;lbs.jt.sh.cn:8082&#x27;&#125;response = requests.post(url=&#x27;http://lbs.jt.sh.cn:8082/app/rls/monitor&#x27;, data=postdata, headers=header)decry_data = aes_decry(response.content)json_data, type_data = blackboxprotobuf.protobuf_to_json(decry_data, message_type=None)print(json_data)\n\n\n","tags":["protobuf","安卓逆向"]},{"title":"ProtoBuf分析以及某方数据逆向","url":"/posts/13480/","content":"什么是protobuf一拿到网站，F12查看是否有相关数据的请求接口请求体是这样的请求头的类型也非常见的\n\napplication&#x2F;json： JSON数据格式\napplication&#x2F;octet-stream ： 二进制流数据\napplication&#x2F;x-www-form-urlencoded ： 中默认的encType，form表单数据被编码为key&#x2F;value格式发送到服务器（表单默认的提交数据的格式）\nmultipart&#x2F;form-data ： 需要在表单中进行文件上传时，就需要使用该格式\n\n通过查询知道这是protobuf参考文章：https://blog.csdn.net/dideng7039/article/details/101869819总结在图下了\n那如何使用protobuf？开发者需要先编写proto文件，在proto文件中编写预期的数据类型、数据字段、默认值等然后，通过编译器生成，编程语言对应的开发包！开发时调开发包中的对应方法进行序列化和反序列化。所以请求的时候需要参数是序列化的字节序列，对接收到的返回值进行反序列化而要实现序列化，就必须要有开发包，可是开发包是js版本的。而开发包是由proto编译而来，只要能拿到proto文件，就可以编译成任意编程的语言版本。那就是需要通过编译好的包反编译出proto，再编译为python版本的\n这里先写一个简单proto，在编译成js版本，看看里面大概的结构长什么样下载编译器：https://github.com/protocolbuffers/protobuf/releases/解压后把bin目录路径添加到环境变量，就可以全局使用注意，下载低于3.21.0 的proto版本，因为原项目已将它独立出来，下载最新版本的protoc，运行js_out会缺少插件proto除了一些基础字段，还有一些特殊字段\n\n\n\n英文\n中文\n备注\n\n\n\nenum\n枚举(数字从零开始) 作用是为字段指定某”预定义值序列”\nenum Type {DEFAULT &#x3D; 0;success &#x3D; 1; fail&#x3D; -1;}\n\n\nmessage\n消息体\nmessage Student{}\n\n\nrepeated\n数组&#x2F;集合\nrepeated Student student &#x3D; 1\n\n\nimport\n导入定义\nimport “protos&#x2F;other_protos.proto”\n\n\n&#x2F;&#x2F;\n注释\n&#x2F;&#x2F;用于注释\n\n\nextend\n扩展\nextend Student {}\n\n\npackage\n包名\n相当于命名空间，用来防止不同消息类型的明明冲突\n\n\n现在写一个简单的proto文件\nsyntax = &quot;proto3&quot;; // 定义proto的版本enum Gender&#123;  boy=0;  girl=1;&#125;enum Score&#123;  DEFAULT = 0;  success = 1; // 及格  fail = -1; // 不及格&#125;message Student &#123;  string name = 1; // 姓名  int32 age = 2; // 年龄  Gender gender = 3; //性别  message Subject &#123;    string name = 1; // 学科名称    Score score = 2; // 分数  &#125;  repeated Subject subject = 4; // 学科&#125;\n编译为JS包\nprotoc --js_out=. .\\test.proto3protoc --js_out=import_style=commonjs,binary:. test.proto\n两条语句都可以，第一条会拆分成多个文件，第二条是合并成一个，推荐使用第二条头部就能看到定义好的几个大的对象可以大概看下代码，截一段比较重要的\n/** * Serializes the given message to binary data (in protobuf wire * format), writing to the given BinaryWriter. * @param &#123;!proto.Student&#125; message * @param &#123;!jspb.BinaryWriter&#125; writer * @suppress &#123;unusedLocalVariables&#125; f is only used for nested messages */proto.Student.serializeBinaryToWriter = function(message, writer) &#123;  var f = undefined;  f = message.getName();  if (f.length &gt; 0) &#123;    writer.writeString(      1,      f    );  &#125;  f = message.getAge();  if (f !== 0) &#123;    writer.writeInt32(      2,      f    );  &#125;  f = message.getGender();  if (f !== 0.0) &#123;    writer.writeEnum(      3,      f    );  &#125;  f = message.getSubjectList();  if (f.length &gt; 0) &#123;    writer.writeRepeatedMessage(      4,      f,      proto.Student.Subject.serializeBinaryToWriter    );  &#125;&#125;;\n这一段序列化的代码中出现了如下的方法名：\n\ngetName, writeStringgetAge, writeInt32getGender, writeEnumgetSubjectList, writeRepeatedMessage\n\n这一整个判断，这意味 Student中定义了四个数据变量， 序号为1， 2，3，4，而数据类型和变量名可以根据其调用的方法推出\n\n序号为1的数据类型为String，变量名为name序号为2的数据类型为Int32，变量名为age序号为3的数据类型为Enum， 变量名为gender序号为4的数据类型为Message，变量名为subject，Repeated下面讲\n\n字符串和整数型一看就明了，不做过多解释，下面了解Message和EnumMessage是什么数据类型？简单的理解，可以把message看作是一个类，在其中定义的变量就是类属性在序号为4的subject判断中有这样一行代码\nproto.Student.Subject.serializeBinaryToWriter\n再来看看Student的\nproto.Student.serializeBinaryToWriter\n到这里可知，Subject定义在Student里面且类型是Message在定义序号为4的数据时，数据类型就是Subject，并且是可重复的！所以才会出现这样一个方法writeRepeatedMessage，并且严格来说，序号为4的数据是自定义的Message数据类型，且是可重复的Message类型的Subject被repeated修饰，即Subject是一个包含多个Subject实例的数组Enum是什么数据类型？枚举类型，在值为限定的情况下，比如性别除了男就是女。可以理解为单选框，这里还有个注意的，枚举类型。必须要有为0的默认选项总而言之呢，看见writeEnum就知道这个数据为Enum类型repeated也可以修饰Enum，其对应的JS写操作的方法为writePackedEnum被repeated修饰的enum类型，则好似的多选框，至少选择一个，可选择多个小结一下：被repeated修饰的message类型的数据，看作是一个包含任意个某message类型数据的数组被repeated修饰的enum类型的数据，看作是一个包含任意个整数类型数据的整型数组\n调试JS反写proto目标网站：aHR0cHM6Ly9zLndhbmZhbmdkYXRhLmNvbS5jbi9wYXBlcj9xPXB5dGhvbg&#x3D;&#x3D;将接口的请求地址复制 &#x2F;SearchService.SearchService&#x2F;search ，打 XHR&#x2F;fetch 断点断住后查看堆栈，有SearchService跟进去打断点看看看下这些方法的命名，序列化（serialize）、反序列化（deserialize），基本断定就在这个js文件里，但是这个js有几万行代码，不可能仔细去看也没必要。看到明显的prototype字样，直接搜proto的特征\n\ntoObject 将获取到的数据转成结构化数据deserializeBinary 二进制数据转换成数组结构（反序列化 | 获取到的数据需要Uint8Array转成二进制）deserializeBinaryFromReader 根据规则，将二进制数据转换成数组结构serializeBinary 将数据转成二进制（序列化）serializeBinaryToWriter 根据规则，将数据转换成二进制数据（序列化）\n\n可以肯定就是proto了一步步跟进后，到序列化发包的位置在这里，直接就可以看出其基本结构\nmessage SearchService &#123;  message SearchRequest &#123;  &#125;&#125;\n继续调试。这里可以看出SearchRequest定义了两个变量，分别是序号为1的message类型的CommonRequest和序号为2的enum类型的InterfaceType。根据SearchService.CommonRequest可知，CommonRequest定义在SearchService中所以，proto文件现在是这样的：\nsyntax = &quot;proto3&quot;; // 定义proto的版本message SearchService &#123;  message SearchRequest &#123;    CommonRequest commonRequest = 1; // 任意变量名    InterfaceType interfaceType = 2; // 任意变量名  &#125;  message CommonRequest &#123;  &#125;  enum InterfaceType&#123;    DEFAULT = 0;  // 定义了什么不知道，但是enum必须有一个值就是0  &#125;&#125;\n关于变量名是什么，这个其实不重要继续往下调试，进入到了CommonRequest根据方法名，直接就可以反写出CommonRequest\n  message SearchRequest &#123;    CommonRequest commonRequest = 1; // 任意变量名    InterfaceType interfaceType = 2; // 任意变量名  &#125;  message CommonRequest &#123;    string searchType = 1;    string searchWord = 2;    SearchSort searchSort = 3;    repeated Second second = 4;    int32 currentPage = 5;    int32 pageSize = 6;    SearchScope searchScope = 7;    repeated SearchFilter searchFilter = 8;    bool languageExpand = 9;    bool topicExpand = 10;  &#125;  message SearchSort &#123;  &#125;  message Second &#123;  &#125;  enum InterfaceType&#123;    TypeDefault = 0;  // 定义了什么不知道，但是enum必须有一个值就是0  &#125;  enum SearchScope&#123;    ScopeDefault = 0;  &#125;  enum SearchFilter &#123;      FilterDefault = 0;  &#125;&#125;\nSearchSort和Second都是在SearchService定义的，Ctrl + F搜索SearchService.SearchSort.serializeBinaryToWriterSearchService.Second.serializeBinaryToWriter补齐字段，请求接口的proto文件就算写完了\nsyntax = &quot;proto3&quot;; // 定义proto的版本message SearchService &#123;  message SearchRequest &#123;    CommonRequest commonRequest = 1; // 任意变量名    InterfaceType interfaceType = 2; // 任意变量名  &#125;  message CommonRequest &#123;    string searchType = 1;    string searchWord = 2;    SearchSort searchSort = 3;    repeated Second second = 4;    int32 currentPage = 5;    int32 pageSize = 6;    SearchScope searchScope = 7;    repeated SearchFilter searchFilter = 8;    bool languageExpand = 9;    bool topicExpand = 10;  &#125;  message SearchSort &#123;    string field = 1;    Order order = 2;    enum Order &#123;      OrderDefault = 0;    &#125;  &#125;  message Second &#123;    string field = 1;    string value = 2;  &#125;  enum InterfaceType&#123;    TypeDefault = 0;  // 定义了什么不知道，但是enum必须有一个值就是0  &#125;  enum SearchScope&#123;    ScopeDefault = 0;  &#125;  enum SearchFilter &#123;    FilterDefault = 0;  &#125;&#125;\n对于所有的enum枚举类，至少填充一个默认值0，且变量名唯一有的情况，枚举类含有哪些字段，可以在代码中直接看到，就照抄写进去。看不到的，给个唯一变量名，默认值为0即可现在还差一个源数据，即我们需要知道待编译的源数据是什么样子的？使用fiddler进行抓包查看请求参数抓到包后查看HexView，黑色部分就是请求体，里面也可以看到我们搜素的关键词python选中，右键保存为字节文件也就是bin后缀，这里要注意，前5个字节表示请求体的长度，从第6个字节开始到结束刚好就是0x1A字节数据是可以通过protoc编译器解码出来的\n&gt;protoc --decode_raw &lt; get_req.bin1 &#123;  1: &quot;paper&quot;  2: &quot;python&quot;  5: 2  6: 20  8: &quot;\\000&quot;&#125;2: 1\n与上面编写好的proto文件进行对比像有些没包含到的字段，是请求的时候页面没做一些条件筛选，就没触发到某些字段实际传输时，简单的看，键就是proto中定义的序号，这就是之前提到的 变量名是什么根本不重要，变量名只是方便开发者开发时便于理解与调用。（传输一个数字远比传输一个字符串更有效率）完全还原proto文件是不需要的，构造出这个请求参数，获取这个接口的响应内容就可以了\n实现请求编译proto为python包，构建参数，序列化参数，发送请求\nprotoc --python_out=. ./search.proto\n目录下生成了search_pb2.py 拖入项目中，需要使用时就调用即可\nimport search_pb2 as pb  # 导入包search_request = pb.SearchService.SearchRequest()  # 实例化对象# 按上面解析数据，按照对应的属性设置值# 字符串，数字型的都是直接赋值search_request.commonRequest.searchType = &#x27;paper&#x27;search_request.commonRequest.searchWord = &#x27;python&#x27;search_request.commonRequest.currentPage = 2search_request.commonRequest.pageSize = 20# repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤search_request.commonRequest.searchFilter.append(0)search_request.interfaceType = 1form_data = search_request.SerializeToString()print(form_data)# 保存数据玮bin文件供后续对比使用with open(&#x27;me.bin&#x27;, mode=&quot;wb&quot;) as f:    f.write(form_data)print(search_request.SerializeToString().decode())\n至此，请求参数的序列化已经是完成了发送请求完整代码\nimport search_pb2 as pb  # 导入包import requestssearch_request = pb.SearchService.SearchRequest()  # 实例化对象# 按上面解析数据，按照对应的属性设置值# 字符串，数字型的都是直接赋值search_request.commonRequest.searchType = &#x27;paper&#x27;search_request.commonRequest.searchWord = &#x27;python&#x27;search_request.commonRequest.currentPage = 2search_request.commonRequest.pageSize = 20# repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤search_request.commonRequest.searchFilter.append(0)search_request.interfaceType = 1form_data = search_request.SerializeToString()print(form_data)# 保存数据玮bin文件供后续对比使用# with open(&#x27;me.bin&#x27;, mode=&quot;wb&quot;) as f:#     f.write(form_data)# print(search_request.SerializeToString().decode())bytes_head = bytes([0, 0, 0, 0, len(form_data)])print(bytes_head+form_data)headers = &#123;    &quot;Accept&quot;: &quot;*/*&quot;,    &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9,zh-TW;q=0.8&quot;,    &quot;Content-Type&quot;: &quot;application/grpc-web+proto&quot;,    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36&quot;,&#125;url = &quot;https://*********/SearchService.SearchService/search&quot;response=requests.post(url,headers=headers,data=bytes_head+form_data)print(response.content)\n\n响应处理我们构造了请求的proto文件，并成功用python发包获得了数据，但是得到的数据和f12得到的数据是一样的乱码如下图其实这个也是protobuf格式，发过去的是protobuf格式，收到的也是protobuf格式，只是它是以二进制序列化格式传输的，所以看上去像乱码.接下来会带来两种方法：①直观但有点复杂，②便捷但不太直观\n方法一写对应的响应的proto文件，和发包一样。当然可以和发包写在一起。老规矩，还是打断点从堆栈进行分析，根据发包的堆栈主要看app开头的js，因为chunk开头的是基本库，很少在里面做手脚，一般都是在自写的js里面做加密或其他操作。一步步调试后，异步然后获得了值去.toObject,这个toObject就是proto文件转js的时候会产生的一个api函数接口，可以简单使用protoc去尝试转化成js看看。这里不好跟进，直接全局搜索一下：proto.SearchService.SearchResponse这里接受响应后需要把二进制数据进行反序列化，那么就会用到下面的apideserializeBinary——deserializeBinaryFromReader（重点核心）完整的就是 proto.SearchService.SearchResponse.deserializeBinaryFromReader一下子就定位到了，和请求的一样理解，只是他现在变成了case语句来表示序号位置，read后面的类型来表示类型。序号4有个message，进去查看这个返回的数据量太大了，标号也特别的多，有没有什么更好的方法得到proto文件呢？那就是自写ast，然后用ast来处理这种switch语句。这里直接使用渔歌写好的ats插件，文末附上链接，网站js有些小更新，之前的可能有些小报错，小小的修改了一下这里把整个js复制出来命名为test.js，先安装babel解析库在当前目录下\nnpm install @babel/core --save-dev\n执行ast代码\nconst parser = require(&quot;@babel/parser&quot;);// 为parser提供模板引擎const template = require(&quot;@babel/template&quot;).default;// 遍历ASTconst traverse = require(&quot;@babel/traverse&quot;).default;// 操作节点，比如判断节点类型，生成新的节点等const t = require(&quot;@babel/types&quot;);// 将语法树转换为源代码const generator = require(&quot;@babel/generator&quot;);// 操作文件const fs = require(&quot;fs&quot;);//定义公共函数function wtofile(path, flags, code) &#123;    var fd = fs.openSync(path,flags);    fs.writeSync(fd, code);    fs.closeSync(fd);&#125;function dtofile(path) &#123;    fs.unlinkSync(path);&#125;var file_path = &#x27;test.js&#x27;; //你要处理的文件var jscode = fs.readFileSync(file_path, &#123;    encoding: &quot;utf-8&quot;&#125;);// 转换为AST语法树let ast = parser.parse(jscode);let proto_text = `syntax = &quot;proto3&quot;;// protoc --python_out=. app_proto2.proto`;traverse(ast, &#123;    MemberExpression(path)&#123;        if(path.node.property.type === &#x27;Identifier&#x27; &amp;&amp; path.node.property.name === &#x27;deserializeBinaryFromReader&#x27; &amp;&amp; path.parentPath.type === &#x27;AssignmentExpression&#x27;)&#123;            let id_name = path.toString().split(&#x27;.&#x27;).slice(1, -1).join(&#x27;_&#x27;);            path.parentPath.traverse(&#123;                VariableDeclaration(path_2)&#123;                    if(path_2.node.declarations.length === 1)&#123;                        path_2.replaceWith(t.expressionStatement(                            t.assignmentExpression(                                &quot;=&quot;,                                path_2.node.declarations[0].id,                                path_2.node.declarations[0].init                            )                        ))                    &#125;                &#125;,                SwitchStatement(path_2)&#123;                    for (let i = 0; i &lt; path_2.node.cases.length - 1; i++) &#123;                        let item = path_2.node.cases[i];                        let item2 = path_2.node.cases[i + 1];                        if(item.consequent.length === 0 &amp;&amp; item2.consequent[1].expression.type === &#x27;SequenceExpression&#x27;)&#123;                            item.consequent = [                                item2.consequent[0],                                t.expressionStatement(                                    item2.consequent[1].expression.expressions[0]                                ),                                item2.consequent[2]                            ];                            item2.consequent[1] = t.expressionStatement(                                item2.consequent[1].expression.expressions[1]                            )                        &#125;else if(item.consequent.length === 0)&#123;                            item.consequent = item2.consequent                        &#125;else if(item.consequent[1].expression.type === &#x27;SequenceExpression&#x27;)&#123;                            item.consequent[1] = t.expressionStatement(                                item.consequent[1].expression.expressions[1]                            )                        &#125;                    &#125;                &#125;            &#125;);            let id_text = &#x27;message &#x27; + id_name + &#x27; &#123;&#x27;;            let let_id_list = [];            try&#123;                // console.log(path.parentPath.node.right.body.body[0].body.body[0].cases.length);                for (let i = 0; i &lt; path.parentPath.node.right.body.body[0].body.body[0].cases.length; i++) &#123;                    let item = path.parentPath.node.right.body.body[0].body.body[0].cases[i];                    if(item.test)&#123;                        let id_number = item.test.value;                        let key = item.consequent[1].expression.callee.property.name;                        let id_st, id_type;                        if(key.startsWith(&quot;set&quot;))&#123;                            id_st = &quot;&quot;;                        &#125;else if(key.startsWith(&quot;add&quot;))&#123;                            id_st = &quot;repeated&quot;;                        &#125;else&#123;                            // map类型，因为案例中用不到，所以这里省略                            continue                        &#125;                        key = key.substring(3, key.length);                        id_type = item.consequent[0];                        if(id_type.expression.right.type === &#x27;NewExpression&#x27;)&#123;                            id_type = generator.default(id_type.expression.right.callee).code.split(&#x27;.&#x27;).slice(1).join(&#x27;_&#x27;);                        &#125;else&#123;                            switch (id_type.expression.right.callee.property.name) &#123;                                case &quot;readString&quot;:                                    id_type = &quot;string&quot;;                                    break;                                case &quot;readDouble&quot;:                                    id_type = &quot;double&quot;;                                    break;                                case &quot;readInt32&quot;:                                    id_type = &quot;int32&quot;;                                    break;                                case &quot;readInt64&quot;:                                    id_type = &quot;int64&quot;;                                    break;                                case &quot;readFloat&quot;:                                    id_type = &quot;float&quot;;                                    break;                                case &quot;readBool&quot;:                                    id_type = &quot;bool&quot;;                                    break;                                case &quot;readPackedInt32&quot;:                                    id_st = &quot;repeated&quot;;                                    id_type = &quot;int32&quot;;                                    break;                                case &quot;readBytes&quot;:                                    id_type = &quot;bytes&quot;;                                    break;                                case &quot;readEnum&quot;:                                    id_type = &quot;readEnum&quot;;                                    break;                                case &quot;readPackedEnum&quot;:                                    id_st = &quot;repeated&quot;;                                    id_type = &quot;readEnum&quot;;                                    break;                            &#125;                        &#125;                        if(id_type === &#x27;readEnum&#x27;)&#123;                            id_type = id_name + &#x27;_&#x27; + key + &#x27;Enum&#x27;;                            if(let_id_list.indexOf(id_number) === -1)&#123;                                id_text += &#x27;\\tenum &#x27; + id_type + &#x27; &#123;&#x27;;                                for (let j = 0; j &lt; 3; j++) &#123;                                    id_text += &#x27;\\t\\t&#x27; + id_type + &#x27;TYPE_&#x27; + j + &#x27; = &#x27; + j + &#x27;;&#x27;;                                &#125;                                id_text += &#x27;\\t&#125;&#x27;;                                id_text += &#x27;\\t&#x27; + id_st + &#x27; &#x27; + id_type + &#x27; &#x27; + key + &#x27; = &#x27; + id_number + &#x27;;&#x27;;                                let_id_list.push(id_number)                            &#125;                        &#125;else&#123;                            if(let_id_list.indexOf(id_number) === -1)&#123;                                id_text += &#x27;\\t&#x27; + id_st + &#x27; &#x27; + id_type + &#x27; &#x27; + key + &#x27; = &#x27; + id_number + &#x27;;&#x27;;                                let_id_list.push(id_number)                            &#125;                        &#125;                    &#125;                &#125;            &#125;catch(e)&#123;            &#125;            id_text += &#x27;&#125;&#x27;;            proto_text += id_text        &#125;    &#125;&#125;);wtofile(&#x27;app_proto3.proto&#x27;, &#x27;w&#x27;, proto_text);\n这个ast代码单纯只是针对这个站点，其他站点也是类似分析。运行后生成了app_proto3.proto文件，打开看一面有一些报错，如下图，渔歌文章也讲清楚了原因，因为对象调用deserializeBinaryFromReader方法的时候，ast代码处理对象无法确定，所以就没加载到。我们在调试里面，搜索关键词ExportResponse.deserializeBinaryFromReader跟进去就能找到s对象是什么，补上就行，其他的报错也是这样的操作得到了proto文件后进行编译成python \nprotoc --python_out=. ./app_proto3.proto\n然后发个请求试一试\nimport app_proto3_pb2 as pbimport requestssearch_request = pb.SearchService_SearchRequest()  # 实例化对象# 按上面解析数据，按照对应的属性设置值# 字符串，数字型的都是直接赋值search_request.Commonrequest.SearchType = &#x27;paper&#x27;search_request.Commonrequest.SearchWord = &#x27;python&#x27;search_request.Commonrequest.CurrentPage = 2search_request.Commonrequest.PageSize = 20# repeated修饰的messsage类型和enum类型，则需要稍微多几个步骤search_request.Commonrequest.SearchFilterList.append(0)search_request.InterfaceType = 1form_data = search_request.SerializeToString()print(form_data)# 保存数据玮bin文件供后续对比使用# with open(&#x27;me.bin&#x27;, mode=&quot;wb&quot;) as f:#     f.write(form_data)# print(search_request.SerializeToString().decode())bytes_head = bytes([0, 0, 0, 0, len(form_data)])print(bytes_head + form_data)headers = &#123;    &quot;Accept&quot;: &quot;*/*&quot;,    &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9&quot;,    &quot;Content-Type&quot;: &quot;application/grpc-web+proto&quot;,    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&quot;,&#125;url = &quot;https://*********.com.cn/SearchService.SearchService/search&quot;response = requests.post(url, headers=headers, data=bytes_head + form_data)# print(response.text)search_response = pb.SearchService_SearchResponse()search_response.ParseFromString(response.content[5:])print(search_response)\n可以看到很直观，取值也方便。上面之所以从响应的第六位字节开启取，是跟上面发包一样的，前五个字节表示请求头的长度下面是proto的核心，序列化和反序列化serializeBinary——serializeBinaryFromReader（重点核心）deserializeBinary——deserializeBinaryFromReader（重点核心）\n方法二使用python应对protobuf的第三方库：blackboxprotobuf安装命令：pip install blackboxprotobuf调用核心函数 ：blackboxprotobuf.decode_message(Byte类型数据)，进行解protobuf格式数据上面是数据对应结构位置，下面是类型对应结构位置虽然拿到了数据，只是位置序号加内容，我们其实要靠猜才能知道是什么，这种就不需要去写proto文件两种方式都可以，喜欢哪种用哪种\n相关资料参考https://blog.csdn.net/dideng7039/article/details/101869819https://blog.csdn.net/qq_35491275&#x2F;article&#x2F;details&#x2F;111721639https://mp.weixin.qq.com/s/DzCz66_Szc7vfG6bpl956whttps://blog.csdn.net/qq_56881388&#x2F;article&#x2F;details&#x2F;128612717\n","tags":["js","protobuf"]},{"title":"AES知道某一轮次密钥反推主密钥","url":"/posts/17732/","content":"从轮密钥逆推主密钥首先讨论AES-128这里用上上篇对称加密算法AES原理及分析里面用到的密钥0123456789abcdef0123456789abcdef生成的10轮子密钥做分析\nK00:0123456789abcdef0123456789abcdefK01:629e9ac0eb35572fea16124863bddfa7K02:1a00c63bf13591141b23835c789e5cfbK03:154ac987e47f5893ff5cdbcf87c28734K04:385dd190dc228903237e52cca4bcd5f8K05:4d5e90d9917c19dab2024b1616be9eeeK06:c355b89e5229a144e02bea52f69574bcK07:a9c7dddcfbee7c981bc596caed50e276K08:7a5fe58981b199119a740fdb7724edadK09:570a707cd6bbe96d4ccfe6b63beb0b1bK10:8821df9e5e9a36f31255d04529bedb5e\n\n假如获取到的是K0，那不用说。如果获取到的是K10呢？8821df9e5e9a36f31255d04529bedb5e，首先我们会到W数组的视图，看W10密钥怎么编排出来的\nK10是W40,W41,W42,W43拼起来的，我们已知K10，即已知W40,W41,W42,W43有没有办法求K9？如果可以，那么同理可以逆推到K0，即求得了主密钥\n我们不妨先复习一下异或的基本性质，异或作用与比特位上，对应的比特位相同则为0，相异则为1。\n因为相同为0，相异为1，那么一个数和自身异或时，因为每个比特位都相同，所以结果为0。而当某个数和0异或时，自身为0的比特0^0得0，自身为1的比特位1^0得1，这就导致结果和没异或前一样。 \n除此之外，异或并不看谁先谁后，A ^ B 与 B ^ A 显然无区别，即具有交换律。\n\n看看异或的多角度理解：如何理解「异或」的含义。下面做变换，左右W42异或\nK10中涉及到的四个式子均可以做变化 \nK10 = 8821df9e5e9a36f31255d04529bedb5e，切成四块\nW40 = 8821df9e\nW41 = 5e9a36f3\nW42 = 1255d045\nW43 = 29bedb5e\n\n&gt;&gt;&gt; hex(0x8821df9e^0x5e9a36f3)'0xd6bbe96d'&gt;&gt;&gt; hex(0x5e9a36f3^0x1255d045)'0x4ccfe6b6'&gt;&gt;&gt; hex(0x1255d045^0x29bedb5e)'0x3beb0b1b'\n\n所以W37 = 0xd6bbe96dW38 = 0x4ccfe6b6W39 = 0x3beb0b1b求出了W37,W38,W39，即K9的后大半部分，和真实情况比对后发现一致。K09:570a707cd6bbe96d4ccfe6b63beb0b1b那么W36呢？再复习一下g函数吧首先循环左移一字节，3beb0b1b 变成 eb0b1b3b然后逐字节S盒替换，得e92bafe2\n&gt;&gt;&gt; SBox = [...     0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,...     0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,...     0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,...     0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,...     0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,...     0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,...     0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,...     0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,...     0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,...     0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,...     0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,...     0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,...     0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,...     0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,...     0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,...     0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16... ]&gt;&gt;&gt; hex(SBox[0xeb])'0xe9'&gt;&gt;&gt; hex(SBox[0x0b])'0x2b'&gt;&gt;&gt; hex(SBox[0x1b])'0xaf'&gt;&gt;&gt; hex(SBox[0x3b])'0xe2'\n最后是首字节和Rcon中的一个字节异或，这是最后一次变换，即用0x36\nrcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]\n即\n&gt;&gt;&gt; hex(0xe9^0x36)'0xdf'\ng函数的结果即是0xdf2bafe2那上面W36=g(W39) xor W40 = 0xdf2bafe2 xor 0x8821df9e\n&gt;&gt;&gt; hex(0xdf2bafe2^0x8821df9e)'0x570a707c'\n所以完整的K9：570a707cd6bbe96d4ccfe6b63beb0b1b，就被我们分析出来了，跟一开始的K表里的K9是一致的。可以继续往上推出K0，获得主密钥。即AES可以依靠轮密钥逆推出主密钥。严肃的说，AES-128可以通过一轮轮密钥逆推出主密钥，AES-192需要一轮半，AES-256需要两轮轮密钥。\n接下来顺便下讨论DES的DES密钥长八字节，在密钥编排时，会舍弃每个字节的最后1比特。因此实际参与密钥编排的是56比特，我们可以验证这一点。假设密钥是\n11 22 33 44 55 66 77 88 (hex)\n二进制即 00010001 00100010 00110011 01000100 01010101 01100110 01110111 10001000我们将末尾1比特翻转，即0变1，1变0。如果AES密钥中每个字节的最后一位被“丢弃”，那么翻转后也并不会对程序有任何影响，反之加密结果应该不同。00010000 00100011 00110010 01000101 01010100 01100111 01110110 10001001转成十六进制即\n10 23 32 45 54 67 76 89 (hex)\n在Cyberchef中，使用这两个密钥进行DES加密，结果完全一致。\n\n对于DES而言，已知两轮或两轮以上的子密钥，就可逆推出初始密钥，具体代码见 DES 子密钥逆推初始密钥 一文。对于主密钥中无法复原的八比特，随便补什么都行，反正不影响结果。在实际场景中，当我们需要基于AES/DES的轮密钥恢复主密钥时，我们用 SideChannelMarvels/Stark 这个开源项目，用户体验很好。在另外一些情况中，目标加密算法可以基于某个轮密钥逆推出全体轮密钥，但没法恢复出主密钥，那怎么办呢——这不就是一开始说的吗\n轮密钥所处的内存块可区分吗首先得考虑一个代码编写的问题，在大多数加密实现中，出于模块化以及效率的考量，密钥编排作为一个整体性的、前置的步骤，在明文的运算前就被完全算出来。以AES -128为例，Key 为 16字节，密钥编排后生成11个16字节的轮密钥，这是我们刚学的。很少有程序会在明文运算中，用到了Ki再去编排生成那16字节，而是像我们的Python代码那样，提前生成所有轮密钥，供后续明文运算时使用。在Android Native开发中而言，即K0-K10紧凑的在一块内存中，装在比如 uint8_t RoundKey[176]这样的数组里。我们将全体轮密钥称为轮密钥群，这么叫比较好听。那么如果提供给我们一串字节数据，能否判断其为AES的轮密钥群？这里用上一篇某鱼直播软件使用unidbg算法分析 里面出面的轮密钥群做样例，比如如下的176字节\n0000: 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00    0)('&amp;%$#\"!......0010: 52 4A 4B 44 74 6F 6F 67 56 4E 6F 67 56 4E 6F 67    RJKDtoogVNogVNog0020: 7F E2 CE F5 0B 8D A1 92 5D C3 CE F5 0B 8D A1 92    ........].......0030: 26 D0 81 DE 2D 5D 20 4C 70 9E EE B9 7B 13 4F 2B    &amp;...-] Lp...{.O+0040: 53 54 70 FF 7E 09 50 B3 0E 97 BE 0A 75 84 F1 21    STp.~.P.....u..!0050: 1C F5 8D 62 62 FC DD D1 6C 6B 63 DB 19 EF 92 FA    ...bb...lkc.....0060: E3 BA A0 B6 81 46 7D 67 ED 2D 1E BC F4 C2 8C 46    .....F}g.-.....F0070: 86 DE FA 09 07 98 87 6E EA B5 99 D2 1E 77 15 94    .......n.....w..0080: F3 87 D8 7B F4 1F 5F 15 1E AA C6 C7 00 DD D3 53    ...{.._........S0090: 29 E1 35 18 DD FE 6A 0D C3 54 AC CA C3 89 7F 99    ).5...j..T......00A0: B8 33 DB 36 65 CD B1 3B A6 99 1D F1 65 10 62 68    .3.6e..;....e.bh\n这个问题有什么意义？一个比较小的作用在于，在重度混淆的样本里，我们没法自上而下的分析逻辑。那么如果发现某个参数指向这么一片内存，我们可能需要办法确认——这是不是编排后的轮密钥？比较取巧的办法是验证图中橙色部分，验证w5是否等于w4^w1，w6是否等于w5^w2等等。那么比较体系化的办法呢？我们假定上面字节流的最后十六个字节是轮密钥最后一轮，然后逆推出整个轮密钥群，两相对比，如果一致就可确认是否是轮密钥群。在stark中进行验证，传入的参数中，B833DB3665CDB13BA6991DF165106268是假设的轮密钥（字节流最后十六字节），10为第几轮。\nE:\\Project\\c_project\\Stark&gt;aes_keyschedule B833DB3665CDB13BA6991DF165106268 10K00: 30292827262524232221000000000000K01: 524A4B44746F6F67564E6F67564E6F67K02: 7FE2CEF50B8DA1925DC3CEF50B8DA192K03: 26D081DE2D5D204C709EEEB97B134F2BK04: 535470FF7E0950B30E97BE0A7584F121K05: 1CF58D6262FCDDD16C6B63DB19EF92FAK06: E3BAA0B681467D67ED2D1EBCF4C28C46K07: 86DEFA090798876EEAB599D21E771594K08: F387D87BF41F5F151EAAC6C700DDD353K09: 29E13518DDFE6A0DC354ACCAC3897F99K10: B833DB3665CDB13BA6991DF165106268\n比对后可确认一致。AES中还有一个特殊之处，第一轮子密钥就是主密钥，所以密钥就是30292827262524232221000000000000。又因为AES”第一轮子密钥就是主密钥“，所以有个更简单和易懂的办法——假设可疑内存块的前十六个字节是主密钥，做密钥编排，对比两者结果是否一致。现在也有开源的工具可以更快找到密钥，这里推荐龙哥的Unidbg_FindKey\n","tags":["算法"]},{"title":"某鱼直播软件使用unidbg算法分析","url":"/posts/57348/","content":"\nUnidbg 模拟执行 首先模拟执行，先搭个架子  \npackage com.douyu;import com.github.unidbg.AndroidEmulator;import com.github.unidbg.Module;import com.github.unidbg.linux.android.AndroidEmulatorBuilder;import com.github.unidbg.linux.android.AndroidResolver;import com.github.unidbg.linux.android.dvm.AbstractJni;import com.github.unidbg.linux.android.dvm.DalvikModule;import com.github.unidbg.linux.android.dvm.VM;import com.github.unidbg.memory.Memory;import java.io.File;public class DouYu extends AbstractJni &#123;    private final AndroidEmulator emulator;    private final VM vm;    private final Module module;    public DouYu()&#123;        emulator = AndroidEmulatorBuilder.for32Bit().build();        Memory memory = emulator.getMemory();        memory.setLibraryResolver(new AndroidResolver(23));        vm = emulator.createDalvikVM(new File(&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;));        vm.setVerbose(true);        vm.setJni(this);        DalvikModule dm = vm.loadLibrary(new File(&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;), true);        module = dm.getModule();        dm.callJNI_OnLoad(emulator);    &#125;    public static void main(String[] args) &#123;        DouYu douYu = new DouYu();    &#125;&#125;\n运行结果 报了一个 ”不合法的JNI版本“ 错误，具体出错的原因有很多，一个常见的问题是SO的依赖库缺失。即程 序调用依赖库中某个函数时，因为这个依赖库没加载到Unidbg虚拟内存中，进而发生寻址错误，比如上 图就是 0x1664 地址访问失败。在Unidbg日志的第三行我们看到， libc++_shared.so 加载失败，即库缺失报错。 我们的目标SO依赖了 libc++_shared.so ，这个库是C++的支持库，但不在Unidbg默认支持的SO里。 我们要在apk的lib里把它拷贝出来。在加载so文件前添加这两行，目标so依赖的其他so文件要在其前面加载\nDalvikModule dm_shared = vm.loadLibrary(new File(&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;), true);dm_shared.callJNI_OnLoad(emulator);\n再次运行就一切正常了下面就到了今天的主角——native_makeUrl函数，Unidbg中先call它，参数很长，构造的很随意，因为只是学习用途。  \npackage com.douyu;import com.github.unidbg.AndroidEmulator;import com.github.unidbg.Module;import com.github.unidbg.linux.android.AndroidEmulatorBuilder;import com.github.unidbg.linux.android.AndroidResolver;import com.github.unidbg.linux.android.dvm.*;import com.github.unidbg.linux.android.dvm.array.ArrayObject;import com.github.unidbg.memory.Memory;import java.io.File;import java.util.ArrayList;import java.util.List;public class DouYu extends AbstractJni &#123;    private final AndroidEmulator emulator;    private final VM vm;    private final Module module;    public DouYu()&#123;        emulator = AndroidEmulatorBuilder.for32Bit().build();        Memory memory = emulator.getMemory();        memory.setLibraryResolver(new AndroidResolver(23));        vm = emulator.createDalvikVM(new File(&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;));        vm.setVerbose(true);        vm.setJni(this);        DalvikModule dm_shared = vm.loadLibrary(new File(&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;), true);        dm_shared.callJNI_OnLoad(emulator);        DalvikModule dm = vm.loadLibrary(new File(&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;), true);        module = dm.getModule();//        emulator.traceCode(module.base, module.base + module.size);        dm.callJNI_OnLoad(emulator);    &#125;    public String getMakeUrl() &#123;        // args list        List&lt;Object&gt; list = new ArrayList&lt;&gt;(10);        // arg1 env        list.add(vm.getJNIEnv());        // arg2 jobject/jclazz 一般用不到，直接填0        list.add(0);        DvmObject&lt;?&gt; context = vm.resolveClass(&quot;android/content/Context&quot;).newObject(null);        list.add(vm.addLocalObject(context));        list.add(vm.addLocalObject(new StringObject(vm, &quot;&quot;)));        StringObject input3_1 = new StringObject(vm, &quot;aid&quot;);        StringObject input3_2 = new StringObject(vm, &quot;client_sys&quot;);        StringObject input3_3 = new StringObject(vm, &quot;time&quot;);        vm.addLocalObject(input3_1);        vm.addLocalObject(input3_2);        vm.addLocalObject(input3_3);        list.add(vm.addLocalObject(new ArrayObject(input3_1, input3_2, input3_3)));        StringObject input4_1 = new StringObject(vm, &quot;android1&quot;);        StringObject input4_2 = new StringObject(vm, &quot;android&quot;);        StringObject input4_3 = new StringObject(vm, &quot;1673232015&quot;);        vm.addLocalObject(input4_1);        vm.addLocalObject(input4_2);        vm.addLocalObject(input4_3);        list.add(vm.addLocalObject(new ArrayObject(input4_1, input4_2, input4_3)));        StringObject input5_1 = new StringObject(vm, &quot;&quot;);        StringObject input5_2 = new StringObject(vm, &quot;&quot;);        StringObject input5_3 = new StringObject(vm, &quot;&quot;);        StringObject input5_4 = new StringObject(vm, &quot;&quot;);        StringObject input5_5 = new StringObject(vm, &quot;&quot;);        StringObject input5_6 = new StringObject(vm, &quot;&quot;);        StringObject input5_7 = new StringObject(vm, &quot;&quot;);        StringObject input5_8 = new StringObject(vm, &quot;&quot;);        StringObject input5_9 = new StringObject(vm, &quot;&quot;);        StringObject input5_10 = new StringObject(vm, &quot;&quot;);        StringObject input5_11 = new StringObject(vm, &quot;&quot;);        StringObject input5_12 = new StringObject(vm, &quot;&quot;);        StringObject input5_13 = new StringObject(vm, &quot;&quot;);        vm.addLocalObject(input5_1);        vm.addLocalObject(input5_2);        vm.addLocalObject(input5_3);        vm.addLocalObject(input5_4);        vm.addLocalObject(input5_5);        vm.addLocalObject(input5_6);        vm.addLocalObject(input5_7);        vm.addLocalObject(input5_8);        vm.addLocalObject(input5_9);        vm.addLocalObject(input5_10);        vm.addLocalObject(input5_11);        vm.addLocalObject(input5_12);        vm.addLocalObject(input5_13);        list.add(vm.addLocalObject(new ArrayObject(input5_1, input5_2, input5_3,input5_4, input5_5, input5_6,input5_7, input5_8, input5_9,input5_10, input5_11, input5_12,input5_13)));        StringObject input6_1 = new StringObject(vm, &quot;&quot;);        StringObject input6_2 = new StringObject(vm, &quot;&quot;);        StringObject input6_3 = new StringObject(vm, &quot;&quot;);        StringObject input6_4 = new StringObject(vm, &quot;&quot;);        StringObject input6_5 = new StringObject(vm, &quot;&quot;);        StringObject input6_6 = new StringObject(vm, &quot;&quot;);        StringObject input6_7 = new StringObject(vm, &quot;&quot;);        StringObject input6_8 = new StringObject(vm, &quot;&quot;);        StringObject input6_9 = new StringObject(vm, &quot;&quot;);        StringObject input6_10 = new StringObject(vm, &quot;&quot;);        vm.addLocalObject(input6_1);        vm.addLocalObject(input6_2);        vm.addLocalObject(input6_3);        vm.addLocalObject(input6_4);        vm.addLocalObject(input6_5);        vm.addLocalObject(input6_6);        vm.addLocalObject(input6_7);        vm.addLocalObject(input6_8);        vm.addLocalObject(input6_9);        vm.addLocalObject(input6_10);        list.add(vm.addLocalObject(new ArrayObject(input6_1, input6_2, input6_3,input6_4, input6_5, input6_6,input6_7, input6_8, input6_9,input6_10)));        list.add(0);        list.add(1);        // 参数准备完成        // call function        Number number = module.callFunction(emulator, 0x2f91, list.toArray());        return vm.getObject(number.intValue()).getValue().toString();    &#125;    public static void main(String[] args) &#123;        DouYu douYu = new DouYu();        String makeUrl = douYu.getMakeUrl();        System.out.println(&quot;result:&quot;+ makeUrl);    &#125;&#125;\n 运行后直接出结果   可以发现，结果由四部分组成，前三个参数是我们 input4 传进去的内容，所以需要分析的只有auth的 来源。 多次运行会发现，auth 的值，恒为 3c179e17e8e9b06d7b18c68555b92220，长度 32 位。  \n算法分析 首先，确认函数执行流的汇编长度，如果行数过多上千万甚至上亿行，就只能放弃。如果几十万行，那就还可以看看。\npublic void traceLength() &#123;    emulator.getBackend().hook_add_new(new CodeHook() &#123;        int count = 0;        @Override        public void hook(Backend backend, long address, int size, Object user) &#123;            count += 1;            System.out.println(count);        &#125;        @Override        public void onAttach(UnHook unHook) &#123;        &#125;        @Override        public void detach() &#123;        &#125;    &#125;, module.base, module.size + module.base, null);&#125;\n运行计数总共九十一万行， 不超过100w行的执行流，要么程序没怎么混淆，要么逻辑不 太复杂。两者任意一个复杂度高一些，都不会只有100w行汇编以内。  使用findcrypt插件再确认一下样本大概使用了哪些加密算法 SO中至少存在 AES&#x2F;BASE64，至于我们的函数中用了什么？这得具体分析，毕竟Findcrypt只是一个静态 的、加密特征匹配插件。 \n\n目标函数可能用了AES&#x2F;Base64，说“可能”是上述算法可能用于SO中其他函数而非目标函数。 \n目标函数可能用了AES和Base64之外的其他加密算法，因为FIndCrypt提供了静态的、有限的分析，很容易遗漏。\n\n使用Unidbg处理算法，一般而言，自下而上分析更省时省力，这得益于Unidbg两方面的能力 \n\n强大方便的内存读写监控 \n无地址随机化\n\n这让我们可以逆流而上，自结果推来源，分析算法和数据块十分轻松。 重新看运行结果图运算结果来自于NewStringUTF，这个JString从哪里来的？     日志提示调用处在0x336f，这个地址实际上是LR（返回地址），所以NewStringUTF函数调用是 0x336f 的上一条 0x336C。   在 0x336C 下断点   回顾一下NewStringUTF 这个JNI方法，数据来源就是参数二字符数组  \njstring NewStringUTF(JNIEnv *env, const char *bytes);\n 数据从地址0x402d20a0开始，我们要监控auth&#x3D;后面的数据，即从0x402d20a0+len(aid&#x3D;android1&amp;client_sys&#x3D;android&amp;time&#x3D;1638452332&amp;auth&#x3D;)开始，数一下auth的32个字节所处的地址，监控对它的写入。  \nemulator.traceWrite(0x401D20D5, 0x401D20D5+0x20);\n 从下往上寻找对内存最晚的操作，可以发现，这32个字节的赋值发生在libc里。一般数据在libc里赋值， 指的是调用了libc中memcpy等库函数做拷贝、转换、比较等处理，而非数据生成的第一现场。   把Unidbg的libc.so拷贝一份出来，扔到IDA里。搜索0x17d3a，看具体是哪个函数。我们发现 是在strcat函数里，即做字符串拼接。  hook strcat 函数，进行追踪  \nchar *strcat(char *dest, const char *src)\n\n\ndest – 指向目标数组，该数组包含了一个 C 字符串，且足够容纳追加后的字符串。 \nsrc – 指向要追加的字符串，该字符串不会覆盖目标字符串。\n\npublic void hookStrCat()&#123;    emulator.attach().addBreakPoint(module.findSymbolByName(&quot;strcat&quot;,            true).getAddress(), new BreakPointCallback() &#123;        @Override        public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;            UnidbgPointer r1 = emulator.getContext().getPointerArg(1);            System.out.println(&quot;strcat:&quot;+ r1);            System.out.println(r1.getString(0));            return true;        &#125;    &#125;);&#125;\n 运行，可以发现结果的四个字段就是strcat 逐步拼接的结果     对来源 0xbffff69b 做traceWrite，千万记得加后缀L。   发现依然来自于libc，这不是好事，说明我们还没到第一现场。    从IDA跳到地址 0x176dc，看到是在_memcpy_base函数里\nvoid __fastcall _memcpy_base(int a1, char *a2, unsigned int a3, int a4, int a5,int a6)\n 它应该是memcpy函数内部的子函数，我们Hook一下memcpy，其原型如下  \nvoid *memcpy(void *str1, const void *str2, size_t n)\n\n\nstr1 – 指向用于存储复制内容的目标数组，类型强制转换为 void* 指针。 \nstr2 – 指向要复制的数据源，类型强制转换为 void* 指针。 \nn – 要被复制的字节数。\n\n 我们打印str2，长度为n  \npublic void hookMemcpy()&#123;    emulator.attach().addBreakPoint(module.findSymbolByName(&quot;memcpy&quot;,            true).getAddress(), new BreakPointCallback() &#123;        @Override        public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;            UnidbgPointer r1 = emulator.getContext().getPointerArg(1);            int length = emulator.getContext().getIntArg(2);            System.out.println(&quot;memcpy&quot;);            Inspector.inspect(r1.getByteArray(0, length), r1.toString());            return true;        &#125;    &#125;);&#125;\n 运行发现，程序逻辑上逐两个字节进行拷贝    140处调用。看的头疼，所以我尝试性的搜索了下3c179e17e8e9b06d7b18c68555b92220，期待某次 memcpy可以看到它，那么我们就能找到它的产生之处了。     打印memcpy的str2时，我采用了Unidbg的Inspect API，它会在 打印内存块时，顺带打印数据的MD5值，这个设计主要是为了比较两个内存块是否全然等值，但这里却 帮到了我们。  \n0000: 61 69 64 3D 61 6E 64 72 6F 69 64 31 26 63 6C 69    aid=android1&amp;cli0010: 65 6E 74 5F 73 79 73 3D 61 6E 64 72 6F 69 64 26    ent_sys=android&amp;0020: 74 69 6D 65 3D 31 36 37 33 32 33 32 30 31 35 76    time=1673232015v0030: 71 34 37 48 64 39 4A 55 67 66 44 43 79 74 43       q47Hd9JUgfDCytC\nvq47Hd9JUgfDCytC 这十个字节是未知的，其余三个字段是传进来的，我们结合上面的MD5会产生一种 明悟，这不就是加盐MD5吗？传进来的参数拼接后加上”vq47Hd9JUgfDCytC“，MD5后传出去。 那么现在问题就变成了，vq47Hd9JUgfDCytC是哪里来的？   对0xbffff500L 做traceWrite  \n ida打开libmakeurl.so，看一下来源0x8a88，十六个字节都来自这里  \n 前面我们用过Findcrypt，有看到RijnDael_AES_LONG_inv_45FC4，它自动将0x8a9e所位于的函数中，一个数组标记为AES的S逆盒。这告诉我们，十六字节的生成处是AES的运算逻辑。换而言之，这十六字节大概率是AES加密或解密的输出。  可是，样本使用了Ollvm，比如0x8a9e这一行，就是Ollvm中的指令替换。 我们先不要陷入函数的细节里，因为如果是标准AES，那根本不用 分析加密程序的内部，自然也就不用考虑这些混淆了。   0x8a88 位于 sub_8228 函数内，Hook sub_8228，顺利断下   观察两个参数  \nint __fastcall sub_8228(unsigned __int64 a1, _QWORD *a2)\n 参数2像是buffer，存放加密结果。blr用于在函数返回处下断点，然后c继续跑，在函数运行结束后再次 查看参数2指向的内存。  \n可以发现确实是我们要分析的十六个字节。至于参数1是什么意思，硬看似乎看不出来。 因此可以判断，sub_8228生成了我们要分析的十六个字节，而且它像AES的执行逻辑。 AES 加密还是解密？什么工作模式？明文是什么？Key是什么？一概不知。我们得到sub_8228上层去看看。 重新运行程序，bt 打印调用栈  跳到 0x08ba7 看一下\nint __fastcall sub_8B3C(const char *a1, int a2, int a3)&#123;  signed int i; // r0  int v7; // r1  int v8; // r1  signed int v10; // [sp+4h] [bp-144h]  signed int v11; // [sp+Ch] [bp-13Ch]  char v12[280]; // [sp+10h] [bp-138h] BYREF  int v13; // [sp+128h] [bp-20h]  v10 = (strlen(a1) + 15) &gt;&gt; 4;  sub_72BC(v12, a2, 128);  for ( i = 0; ; i = v11 + 1 )  &#123;    v7 = 1590846758;    while ( 1 )    &#123;      v8 = v7 &amp; 0x7FFFFFFF;      if ( v8 != 1590846758 )        break;      v11 = i;      v7 = 131555431;      if ( i &lt; v10 )        v7 = 1574041125;    &#125;    if ( v8 == 131555431 )      break;    if ( v8 != 1574041125 )    &#123;      while ( 1 )        ;    &#125;    sub_8228(v12, a3 + 16 * v11, &amp;a1[16 * v11]);  &#125;  return _stack_chk_guard - v13;&#125;\n 首先我们知道，sub_8228是AES的具体运算程序，刚才Hook确认了这一点。而密钥编排一般发生在具 体运算前面，即早于sub_8228。整个函数体内，就只有sub_72BC 一个函数了，那也可能在sub_8B3C外层。更重要的线索是它的参数3，128。AES 存在128&#x2F;192&#x2F;256 三种密钥的规格，这里就是在指定AES的规格，并生成对应的轮密钥。 char v12[280]; v12是一个较大的数组，用于存放生成轮密钥的结果。那么可以大胆猜测sub_8B3C的a2就是十六字节长的AES-128密钥。进而参数1就是 十六字节的输入。  对 sub_8B3C 进行断点查看参数  密钥是30292827262524232221000000000000，暂时不知道是加密还是解密，结果是 767134374864394a5567664443797443（vq47Hd9JUgfDCytC）看看加密过程对的上吗 因为aes会对明文进行填充，它会自动按照PKCS7约定，再次填充一个分组的长度，输出也是两个分组的结果。  这里结果a7488462036f15054005472d6f487c67才是对的，后面是填充后的分组加密而来的可以不用管跟我们上面的 sub_8B3C 的参数一是一致的，说明 vq47Hd9JUgfDCytC 是由明文a7488462036f15054005472d6f487c67，密钥30292827262524232221000000000000解密而来的\n我们这里做一个讨论，如何从一个小的线索点，分析出AES的全貌。以 sub_72BC(v12, a2, 128); 为例，我们猜测它是密钥编排函数，那么如何快速验证呢？ 我Hook 入参时a2指向的十六字节，以及函数结束后v13指向的176字节（因为是AES-128，所以轮密钥 是4*44）。  \npublic void hook72bc()&#123;    emulator.attach().addBreakPoint(module.base + 0x72bc, new BreakPointCallback() &#123;        UnidbgPointer v12;        @Override        public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;            RegisterContext registerContext = emulator.getContext();            UnidbgPointer a2 = registerContext.getPointerArg(1);            v12 = registerContext.getPointerArg(0);            Inspector.inspect(a2.getByteArray(0, 0x10), &quot;key &quot; + a2.toString());            // 函数结束对v12hook查看            emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, new BreakPointCallback() &#123;                @Override                public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;                    Inspector.inspect(v12.getByteArray(0, 176), &quot;Round Key &quot;+v12.toString());                    return false;                &#125;            &#125;);            return true;        &#125;    &#125;);&#125;\n&gt;-----------------------------------------------------------------------------&lt;[17:01:35 327]key unidbg@0xbffff3d8, md5=037ff8eefc91404afaed9fa22e282e3f, hex=30292827262524232221000000000000size: 160000: 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00    0)(&#x27;&amp;%$#&quot;!......^-----------------------------------------------------------------------------^&gt;-----------------------------------------------------------------------------&lt;[17:01:35 336]Round Key unidbg@0xbffff290, md5=159aaceb29acbcbd8d87b091ce103546, hex=0a00000098f2ffbf30292827262524232221000000000000524a4b44746f6f67564e6f67564e6f677fe2cef50b8da1925dc3cef50b8da19226d081de2d5d204c709eeeb97b134f2b535470ff7e0950b30e97be0a7584f1211cf58d6262fcddd16c6b63db19ef92fae3baa0b681467d67ed2d1ebcf4c28c4686defa090798876eeab599d21e771594f387d87bf41f5f151eaac6c700ddd35329e13518ddfe6a0dc354accac3897f99b833db3665cdb13bsize: 1760000: 0A 00 00 00 98 F2 FF BF 30 29 28 27 26 25 24 23    ........0)(&#x27;&amp;%$#0010: 22 21 00 00 00 00 00 00 52 4A 4B 44 74 6F 6F 67    &quot;!......RJKDtoog0020: 56 4E 6F 67 56 4E 6F 67 7F E2 CE F5 0B 8D A1 92    VNogVNog........0030: 5D C3 CE F5 0B 8D A1 92 26 D0 81 DE 2D 5D 20 4C    ].......&amp;...-] L0040: 70 9E EE B9 7B 13 4F 2B 53 54 70 FF 7E 09 50 B3    p...&#123;.O+STp.~.P.0050: 0E 97 BE 0A 75 84 F1 21 1C F5 8D 62 62 FC DD D1    ....u..!...bb...0060: 6C 6B 63 DB 19 EF 92 FA E3 BA A0 B6 81 46 7D 67    lkc..........F&#125;g0070: ED 2D 1E BC F4 C2 8C 46 86 DE FA 09 07 98 87 6E    .-.....F.......n0080: EA B5 99 D2 1E 77 15 94 F3 87 D8 7B F4 1F 5F 15    .....w.....&#123;.._.0090: 1E AA C6 C7 00 DD D3 53 29 E1 35 18 DD FE 6A 0D    .......S).5...j.00A0: C3 54 AC CA C3 89 7F 99 B8 33 DB 36 65 CD B1 3B    .T.......3.6e..;^-----------------------------------------------------------------------------^\n\n RoundKey 的结果像是一个结构体，两个int组成，第一个是0x0000000a，即代表了AES-128的十轮运 算，第二个是指针，值为0xbffff298，是v12往后偏移八个字节。   我们不妨修改一下hook72bc，看一下0xbffff298具体打印什么  \npublic void hook72bc()&#123;    emulator.attach().addBreakPoint(module.base + 0x72bc, new BreakPointCallback() &#123;        UnidbgPointer v12;        @Override        public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;            RegisterContext registerContext = emulator.getContext();            UnidbgPointer a2 = registerContext.getPointerArg(1);            v12 = registerContext.getPointerArg(0);            Inspector.inspect(a2.getByteArray(0, 0x10), &quot;key &quot; + a2.toString());            // 函数结束对v12hook查看            emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, new BreakPointCallback() &#123;                @Override                public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;                    //Inspector.inspect(v12.getByteArray(0, 176), &quot;Round Key &quot;+v12.toString());                    Inspector.inspect(v12.getByteArray(8, 176), &quot;Round Key &quot;+v12.toString());                    return true;                &#125;            &#125;);            return true;        &#125;    &#125;);&#125;\n 结果如下  \n[17:20:19 949]key unidbg@0xbffff3d8, md5=037ff8eefc91404afaed9fa22e282e3f, hex=30292827262524232221000000000000size: 160000: 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00    0)(&#x27;&amp;%$#&quot;!......^-----------------------------------------------------------------------------^&gt;-----------------------------------------------------------------------------&lt;[17:20:19 957]Round Key unidbg@0xbffff290, md5=1a32868f8f948e426e209b5995588178, hex=30292827262524232221000000000000524a4b44746f6f67564e6f67564e6f677fe2cef50b8da1925dc3cef50b8da19226d081de2d5d204c709eeeb97b134f2b535470ff7e0950b30e97be0a7584f1211cf58d6262fcddd16c6b63db19ef92fae3baa0b681467d67ed2d1ebcf4c28c4686defa090798876eeab599d21e771594f387d87bf41f5f151eaac6c700ddd35329e13518ddfe6a0dc354accac3897f99b833db3665cdb13ba6991df165106268size: 1760000: 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00    0)(&#x27;&amp;%$#&quot;!......0010: 52 4A 4B 44 74 6F 6F 67 56 4E 6F 67 56 4E 6F 67    RJKDtoogVNogVNog0020: 7F E2 CE F5 0B 8D A1 92 5D C3 CE F5 0B 8D A1 92    ........].......0030: 26 D0 81 DE 2D 5D 20 4C 70 9E EE B9 7B 13 4F 2B    &amp;...-] Lp...&#123;.O+0040: 53 54 70 FF 7E 09 50 B3 0E 97 BE 0A 75 84 F1 21    STp.~.P.....u..!0050: 1C F5 8D 62 62 FC DD D1 6C 6B 63 DB 19 EF 92 FA    ...bb...lkc.....0060: E3 BA A0 B6 81 46 7D 67 ED 2D 1E BC F4 C2 8C 46    .....F&#125;g.-.....F0070: 86 DE FA 09 07 98 87 6E EA B5 99 D2 1E 77 15 94    .......n.....w..0080: F3 87 D8 7B F4 1F 5F 15 1E AA C6 C7 00 DD D3 53    ...&#123;.._........S0090: 29 E1 35 18 DD FE 6A 0D C3 54 AC CA C3 89 7F 99    ).5...j..T......00A0: B8 33 DB 36 65 CD B1 3B A6 99 1D F1 65 10 62 68    .3.6e..;....e.bh^-----------------------------------------------------------------------------^\n\n 首先我们就可以确定，这就是密钥编排的结果，这是我们根据AES-128的编排性质推断出来的。 \n\n轮密钥的前十六个字节就是主密钥，完全符合 \n十六个字节后面的编排规则，以行为单位看的话，前四个字节较为复杂，后十二字节只是简单异 或。如下验证\n\n密钥 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00按照密钥的编排 4个字节一组W0 30 29 28 27W1 26 25 24 23W2 22 21 00 00W3 00 00 00 00根据结果我们也可以看出W4 &#x3D; 52 4A 4B 44W5 &#x3D; 74 6F 6F 67验证可以得到 W4 xor W1 &#x3D; W5\nC:\\Users\\zsk&gt;pythonPython 3.8.10 (tags/v3.8.10:3d8993a, May  3 2021, 11:48:03) [MSC v.1928 64 bit (AMD64)] on win32Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; hex(0x524A4B44^0x26252423)&#x27;0x746f6f67&#x27;\n 确实符合编排的规律。  因此可以认定 72bc 就是密钥编排函数，并确定了密钥。怎么仅从这个线索，推出输入呢？\n\n如果是加密，那么对K0做traceRead可以定位到算法的输入，对K10做traceRead，其运算结果就是算法 的输出。\n如果是解密，那么对K0做traceRead可以定位算法的输出，对K10做traceRead，其运算结果就是算法的 输入。\n\n换个情况，如果只知道算法的输入，该怎么确认密钥呢？\n\n如果是加密，那么对算法的输入做traceRead，可以定位到K0，在AES-128上意味着主密钥；\n如果是CBC 模式，那么定位到IV。 如果是解密，那么对算法的输入做traceRead，可以定位到K10，使用stark 逆推主密钥。\n\n再换个情况，如果只知道算法的输出，该怎么确认其他要素？\n\n如果是加密过程，对算法的输出做traceWrite，运算的双方中有一方是K10。 \n如果是解密过程，对算法的输出做traceWrite，运算的双方中有一方是K0。\n\n下面考虑Key和密文哪里来的 在sub_8B3C打断点，查看堆栈，发现都位于 sub_A298  \nint __fastcall sub_A298(void *a1)&#123;    int v1; // r9    int v3; // r11    int i; // r0    int v6; // [sp+0h] [bp-78h]    int v7; // [sp+4h] [bp-74h]    _QWORD v8[2]; // [sp+8h] [bp-70h] BYREF    char v9[20]; // [sp+18h] [bp-60h] BYREF    _QWORD v10[2]; // [sp+30h] [bp-48h] BYREF    char v11[20]; // [sp+40h] [bp-38h] BYREF    int v12; // [sp+58h] [bp-20h]    v3 = 0;    v10[0] = unk_45688;    v10[1] = unk_45690;    strcpy(v11, &quot;                &quot;);    v8[0] = unk_45CF0;    v8[1] = unk_45CF8;    strcpy(v9, &quot;                &quot;);    memset(a1, 0, 0x100u);    for ( i = 1282341844; ; i = 1282341844 )        &#123;            while ( i != 967467364 )                &#123;                    if ( i == 1282341844 )                    &#123;                        v6 = v3;                        i = 1618205161;                        if ( v3 &lt; 32 )                            i = -1314423687;                        if ( i &lt;= 967467363 )                            goto LABEL_15;                    &#125;                    else                    &#123;                        v1 = 0;                        LABEL_14:                        i = 967467364;                    &#125;                &#125;            v7 = v1;            i = -688078044;            if ( v1 &lt; 32 )                i = -1194610101;            LABEL_15:            if ( i != -1314423687 )                break;            *((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; 0x8E | ~*((_BYTE *)v8 + v6) &amp; 0x71) ^ 0x51;            v3 = v6 + 1;        &#125;    if ( i == -1194610101 )    &#123;        *((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; 0xE9 | *((_BYTE *)v10 + v7) &amp; 0x16) ^ 0xC9;        v1 = v7 + 1;        goto LABEL_14;    &#125;    sub_8B3C((const char *)v10, (int)v8, (int)a1);    return _stack_chk_guard - v12;&#125;\n\n 其中v10 ， 前八个字节来自0x45688，后八个字节来自0x45690。因为这两个八字节是紧连着的，所以可 以一并看。  \n.rodata:00045688 87                            unk_45688 DCB 0x87                      ; DATA XREF: sub_A298+E↑o.rodata:00045688                                                                       ; sub_A298+18↑o.rodata:00045688                                                                       ; .text:off_A424↑o.rodata:00045689 68                            DCB 0x68 ; h.rodata:0004568A A4                            DCB 0xA4.rodata:0004568B 42                            DCB 0x42 ; B.rodata:0004568C 23                            DCB 0x23 ; #.rodata:0004568D 4F                            DCB 0x4F ; O.rodata:0004568E 35                            DCB 0x35 ; 5.rodata:0004568F 25                            DCB 0x25 ; %.rodata:00045690 60                            unk_45690 DCB 0x60 ; `.rodata:00045691 25                            DCB 0x25 ; %.rodata:00045692 67                            DCB 0x67 ; g.rodata:00045693 0D                            DCB  0xD.rodata:00045694 4F                            DCB 0x4F ; O.rodata:00045695 68                            DCB 0x68 ; h.rodata:00045696 5C                            DCB 0x5C ; \\.rodata:00045697 47                            DCB 0x47 ; G\n\n 在逐字节经过如下处理后成为我们的密文  \n*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; 0xE9 | *((_BYTE *)v10 + v7) &amp; 0x16) ^ 0xC9;\n 而密钥也一样，前八个字节来自0x45CF0，后八个字节来自0x45CF8。\n.rodata:00045CF0 10                            unk_45CF0 DCB 0x10                      ; DATA XREF: sub_A298+24↑o.rodata:00045CF0                                                                       ; sub_A298+2C↑o.rodata:00045CF0                                                                       ; .text:off_A428↑o.rodata:00045CF0                                                                       ; sub_A430+50↑o.rodata:00045CF0                                                                       ; sub_A430+5E↑o.rodata:00045CF0                                                                       ; .text:off_A5D0↑o.rodata:00045CF0                                                                       ; sub_A5D8+4E↑o.rodata:00045CF0                                                                       ; sub_A5D8+5C↑o.rodata:00045CF0                                                                       ; .text:off_A770↑o.rodata:00045CF0                                                                       ; sub_A778+4E↑o.rodata:00045CF0                                                                       ; sub_A778+5C↑o.rodata:00045CF0                                                                       ; .text:off_A910↑o.rodata:00045CF0                                                                       ; sub_A918+50↑o.rodata:00045CF0                                                                       ; sub_A918+5E↑o.rodata:00045CF0                                                                       ; .text:off_AAA4↑o ....rodata:00045CF1 09                            DCB    9.rodata:00045CF2 08                            DCB    8.rodata:00045CF3 07                            DCB    7.rodata:00045CF4 06                            DCB    6.rodata:00045CF5 05                            DCB    5.rodata:00045CF6 04                            DCB    4.rodata:00045CF7 03                            DCB    3.rodata:00045CF8 02                            unk_45CF8 DCB    2.rodata:00045CF9 01                            DCB    1.rodata:00045CFA 20                            DCB 0x20.rodata:00045CFB 20                            DCB 0x20.rodata:00045CFC 20                            DCB 0x20.rodata:00045CFD 20                            DCB 0x20.rodata:00045CFE 20                            DCB 0x20.rodata:00045CFF 20                            DCB 0x20\n 它经过了如下逐字节的处理  \n*((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; 0x8E | ~*((_BYTE *)v8 + v6) &amp; 0x71) ^ 0x51;\n 看起来有些云里雾里的，这是Ollvm中指令替换的功劳。   真正功能上而言，只是SO中硬编码的两串十六进制字节，在异或0x20后，就成为了密文和Key，在运行 时AES解密出明文，作为MD5的盐。   我们以Key为例，它的完整流程如下（下面均为十六进制字节）   首先，Key是 30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00，开发者不希望硬编码在SO里，所以先 将它异或0x20，在SO中硬编码即 10 09 08 07 06 05 04 03 02 01 20 20 20 20 20 20。   然后在使用时，将这么一串异或0x20，因为异或两次等于自身，所以Key重新变成30 29 28 27 26 25 24 23 22 21 00 00 00 00 00 00，正常参与运算。  \n 那么下面这两种运算，其功能都等价于单字节异或0x20，怎么变成这个样子了呢？  \n*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; 0xE9 | *((_BYTE *)v10 + v7) &amp; 0x16) ^ 0xC9;*((_BYTE *)v8 + v6) = (*((_BYTE *)v8 + v6) &amp; 0x8E | ~*((_BYTE *)v8 + v6) &amp; 0x71) ^ 0x51;\n 这就是指令替换的目的，将简单的加减乘除、异或、与等运算，替换成等价但更复杂的指令序列。  演示一下这个过程 S &#x3D; A ^ B 异或0不影响结果 S &#x3D; A ^ B ^ 0 0可以展开成C ^ C S &#x3D; A ^ B ^ C ^ C 做一下简单的分配 S &#x3D; (A^C)^(B^C) 两数异或时可以等价替换如下，可以自行验证。   \na ^ b =&gt; (~a &amp; b) | (a &amp; ~b) \n那么\nS = (~A &amp; C) | (A &amp; ~C) ^ (~B &amp; C) | (B &amp; ~C)\n  \n 回到 S = A ^ B，假设A 就是我们的待处理数据，B是0x20，即将数据和0x20异或，我们再选择C为0xE9 \n \nS = (~A &amp; 0xE9) | (A &amp; ~0xE9) ^ (~0x20 &amp; 0xE9) | (0x20 &amp; ~0xE9)\n  0xE9 在取反后即 0x16，而异或的另外一方，因为不存在未知数，编译器会直接优化计算出结果  \n \nS = (~A &amp; 0xE9) | (A &amp; 0xE9) ^ 0xC9\n   A 代入 *((_BYTE *)v10 + v7) 不就是 \n*((_BYTE *)v10 + v7) = (~*((_BYTE *)v10 + v7) &amp; 0xE9) | (*((_BYTE *)v10 + v7) &amp; 0xE9) ^ 0xC9\nA 代入 *((_BYTE *)v8 + v6) ，C 为0x71时，就是 另一个式子。 本质上，两者都是逐字节与0x20异或。  \n完整代码package com.douyu;import com.github.unidbg.AndroidEmulator;import com.github.unidbg.Emulator;import com.github.unidbg.Module;import com.github.unidbg.arm.backend.Backend;import com.github.unidbg.arm.backend.CodeHook;import com.github.unidbg.arm.backend.UnHook;import com.github.unidbg.arm.context.RegisterContext;import com.github.unidbg.debugger.BreakPointCallback;import com.github.unidbg.linux.android.AndroidEmulatorBuilder;import com.github.unidbg.linux.android.AndroidResolver;import com.github.unidbg.linux.android.dvm.*;import com.github.unidbg.linux.android.dvm.array.ArrayObject;import com.github.unidbg.memory.Memory;import com.github.unidbg.pointer.UnidbgPointer;import com.github.unidbg.utils.Inspector;import java.io.File;import java.util.ArrayList;import java.util.List;public class DouYu extends AbstractJni &#123;    private final AndroidEmulator emulator;    private final VM vm;    private final Module module;    public DouYu()&#123;        emulator = AndroidEmulatorBuilder.for32Bit().build();        Memory memory = emulator.getMemory();        memory.setLibraryResolver(new AndroidResolver(23));        vm = emulator.createDalvikVM(new File(&quot;unidbg-android/src/test/resources/demo/douyu/douyu.apk&quot;));        vm.setVerbose(true);        vm.setJni(this);        DalvikModule dm_shared = vm.loadLibrary(new File(&quot;unidbg-android/src/test/resources/demo/douyu/libc++_shared.so&quot;), true);        dm_shared.callJNI_OnLoad(emulator);        DalvikModule dm = vm.loadLibrary(new File(&quot;unidbg-android/src/test/resources/demo/douyu/libmakeurl2.5.0.so&quot;), true);        module = dm.getModule();        dm.callJNI_OnLoad(emulator);        // NewStringUTF断点        //emulator.attach().addBreakPoint(module.base + 0x336c);        // 监控地址写入, auth的32个字节所处的地址， 401d20a0 + len(aid=android1&amp;client_sys=android&amp;time=1638452332&amp;auth=)        //emulator.traceWrite(0x401D20D5, 0x401D20D5+0x20);        // 监控strcat函数，看结果是在哪里写入的        //emulator.traceWrite(0xbffff69bL, 0xbffff69bL+0x20);        // 对 vq47Hd9JUgfDCytC 做traceWrite        //emulator.traceWrite(0xbffff500L, 0xbffff69bL+0x20);        // 对 vq47Hd9JUgfDCytC 出现的位置函数 sub_8228(unsigned __int64 a1, _QWORD *a2) 进行断点        //emulator.attach().addBreakPoint(module.base + 0x8228);        // 对调用生成 vq47Hd9JUgfDCytC 函数的上一级断点        emulator.attach().addBreakPoint(module.base + 0x8B3C);    &#125;    public String getMakeUrl() &#123;        // args list        List&lt;Object&gt; list = new ArrayList&lt;&gt;(10);        // arg1 env        list.add(vm.getJNIEnv());        // arg2 jobject/jclazz 一般用不到，直接填0        list.add(0);        DvmObject&lt;?&gt; context = vm.resolveClass(&quot;android/content/Context&quot;).newObject(null);        list.add(vm.addLocalObject(context));        list.add(vm.addLocalObject(new StringObject(vm, &quot;&quot;)));        StringObject input3_1 = new StringObject(vm, &quot;aid&quot;);        StringObject input3_2 = new StringObject(vm, &quot;client_sys&quot;);        StringObject input3_3 = new StringObject(vm, &quot;time&quot;);        vm.addLocalObject(input3_1);        vm.addLocalObject(input3_2);        vm.addLocalObject(input3_3);        list.add(vm.addLocalObject(new ArrayObject(input3_1, input3_2, input3_3)));        StringObject input4_1 = new StringObject(vm, &quot;android1&quot;);        StringObject input4_2 = new StringObject(vm, &quot;android&quot;);        StringObject input4_3 = new StringObject(vm, &quot;1673232015&quot;);        vm.addLocalObject(input4_1);        vm.addLocalObject(input4_2);        vm.addLocalObject(input4_3);        list.add(vm.addLocalObject(new ArrayObject(input4_1, input4_2, input4_3)));        StringObject input5_1 = new StringObject(vm, &quot;&quot;);        StringObject input5_2 = new StringObject(vm, &quot;&quot;);        StringObject input5_3 = new StringObject(vm, &quot;&quot;);        StringObject input5_4 = new StringObject(vm, &quot;&quot;);        StringObject input5_5 = new StringObject(vm, &quot;&quot;);        StringObject input5_6 = new StringObject(vm, &quot;&quot;);        StringObject input5_7 = new StringObject(vm, &quot;&quot;);        StringObject input5_8 = new StringObject(vm, &quot;&quot;);        StringObject input5_9 = new StringObject(vm, &quot;&quot;);        StringObject input5_10 = new StringObject(vm, &quot;&quot;);        StringObject input5_11 = new StringObject(vm, &quot;&quot;);        StringObject input5_12 = new StringObject(vm, &quot;&quot;);        StringObject input5_13 = new StringObject(vm, &quot;&quot;);        vm.addLocalObject(input5_1);        vm.addLocalObject(input5_2);        vm.addLocalObject(input5_3);        vm.addLocalObject(input5_4);        vm.addLocalObject(input5_5);        vm.addLocalObject(input5_6);        vm.addLocalObject(input5_7);        vm.addLocalObject(input5_8);        vm.addLocalObject(input5_9);        vm.addLocalObject(input5_10);        vm.addLocalObject(input5_11);        vm.addLocalObject(input5_12);        vm.addLocalObject(input5_13);        list.add(vm.addLocalObject(new ArrayObject(input5_1, input5_2, input5_3,input5_4, input5_5, input5_6,input5_7, input5_8, input5_9,input5_10, input5_11, input5_12,input5_13)));        StringObject input6_1 = new StringObject(vm, &quot;&quot;);        StringObject input6_2 = new StringObject(vm, &quot;&quot;);        StringObject input6_3 = new StringObject(vm, &quot;&quot;);        StringObject input6_4 = new StringObject(vm, &quot;&quot;);        StringObject input6_5 = new StringObject(vm, &quot;&quot;);        StringObject input6_6 = new StringObject(vm, &quot;&quot;);        StringObject input6_7 = new StringObject(vm, &quot;&quot;);        StringObject input6_8 = new StringObject(vm, &quot;&quot;);        StringObject input6_9 = new StringObject(vm, &quot;&quot;);        StringObject input6_10 = new StringObject(vm, &quot;&quot;);        vm.addLocalObject(input6_1);        vm.addLocalObject(input6_2);        vm.addLocalObject(input6_3);        vm.addLocalObject(input6_4);        vm.addLocalObject(input6_5);        vm.addLocalObject(input6_6);        vm.addLocalObject(input6_7);        vm.addLocalObject(input6_8);        vm.addLocalObject(input6_9);        vm.addLocalObject(input6_10);        list.add(vm.addLocalObject(new ArrayObject(input6_1, input6_2, input6_3,input6_4, input6_5, input6_6,input6_7, input6_8, input6_9,input6_10)));        list.add(0);        list.add(1);        // 参数准备完成        // call function        Number number = module.callFunction(emulator, 0x2f91, list.toArray());        return vm.getObject(number.intValue()).getValue().toString();    &#125;    public void traceLength() &#123;        emulator.getBackend().hook_add_new(new CodeHook() &#123;            int count = 0;            @Override            public void hook(Backend backend, long address, int size, Object user) &#123;                count += 1;                System.out.println(count);            &#125;            @Override            public void onAttach(UnHook unHook) &#123;            &#125;            @Override            public void detach() &#123;            &#125;        &#125;, module.base, module.size + module.base, null);    &#125;    public void hookStrCat()&#123;        emulator.attach().addBreakPoint(module.findSymbolByName(&quot;strcat&quot;,                true).getAddress(), new BreakPointCallback() &#123;            @Override            public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;                UnidbgPointer r1 = emulator.getContext().getPointerArg(1);                System.out.println(&quot;strcat:&quot;+ r1);                System.out.println(r1.getString(0));                return true;            &#125;        &#125;);    &#125;    public void hookMemcpy()&#123;        emulator.attach().addBreakPoint(module.findSymbolByName(&quot;memcpy&quot;, true).getAddress(), new BreakPointCallback() &#123;            @Override            public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;                UnidbgPointer r1 = emulator.getContext().getPointerArg(1);                int length = emulator.getContext().getIntArg(2);                System.out.println(&quot;memcpy&quot;);                Inspector.inspect(r1.getByteArray(0, length), r1.toString());                return true;            &#125;        &#125;);    &#125;    public void hook72bc()&#123;        emulator.attach().addBreakPoint(module.base + 0x72bc, new BreakPointCallback() &#123;            UnidbgPointer v12;            @Override            public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;                RegisterContext registerContext = emulator.getContext();                UnidbgPointer a2 = registerContext.getPointerArg(1);                v12 = registerContext.getPointerArg(0);                Inspector.inspect(a2.getByteArray(0, 0x10), &quot;key &quot; + a2.toString());                // 函数结束对v12hook查看                emulator.attach().addBreakPoint(registerContext.getLRPointer().peer, new BreakPointCallback() &#123;                    @Override                    public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;                        //Inspector.inspect(v12.getByteArray(0, 176), &quot;Round Key &quot;+v12.toString());                        Inspector.inspect(v12.getByteArray(8, 176), &quot;Round Key &quot;+v12.toString());                        return true;                    &#125;                &#125;);                return true;            &#125;        &#125;);    &#125;    public static void main(String[] args) &#123;        DouYu douYu = new DouYu();        //douYu.traceLength();        //douYu.hookStrCat();        //douYu.hookMemcpy();        //douYu.hook72bc();        String makeUrl = douYu.getMakeUrl();        System.out.println(&quot;result:&quot;+ makeUrl);    &#125;&#125;\n\n\n","tags":["安卓逆向","Unidbg"]},{"title":"unidbg补获取系统属性","url":"/posts/42662/","content":"\n什么叫获取系统属性？Build类第一种 NDK中最常见的方式是通过JNI调用 ， 通过JNI调用JAVA方法获取本机的属性和信息，是最常见的做法，除了Build类，常见的还有 System.getProperty和Systemproperties.get等API。    Unidbg补环境过程中，最好补而且不会遗漏的就是这一类，因为Unidbg会给出清楚的报错，你没法对它置之不理。  \njclass androidBuildClass = env-&gt;FindClass(&quot;android/os/Build&quot;);jfieldID SERIAL = env-&gt;GetStaticFieldID(androidBuildClass, &quot;SERIAL&quot;,&quot;Ljava/lang/String;&quot;);jstring serialNum = (jstring) env-&gt;GetStaticObjectField(androidBuildClass,SERIAL);\n\nsystem_property_get第二种常见方式是通过system_property_get 函数获取系统属性也是常见做法  \nchar *key = &quot;ro.build.id&quot;;char value[PROP_VALUE_MAX] = &#123;0&#125;;__system_property_get(key, value);\n 这类环境缺失容易被大家忽视，因为没有日志提示，即使src&#x2F;test&#x2F;resources&#x2F;log4j.properties中日志全 开，也不会打印相关信息。  \n通过文件访问 第三个常见方式是通过文件访问，比如读取&#x2F;proc&#x2F;pid&#x2F;maps，此种情况，Unidbg会提供日志输出，但 经常被大家忽视，事实上，不少朋友初学Unidbg时除了JAVA环境的报错，其他日志信息都不去管。  \npopen() 第四个常见方式是通过popen()管道从shell中获取系统属性，其效果可以理解成在NDK中使用adb shell，popen参数一就是shell命令，返回值是一个fd文件描述符，可以read其内容，其中内容就是adb shell执行该命令应该返回的内容。  \nchar value[PROP_VALUE_MAX] = &#123;0&#125;;std::string cmd = &quot;getprop ro.build.id&quot;;FILE* file = popen(cmd.c_str(), &quot;r&quot;);fread(value, PROP_VALUE_MAX, 1, file);pclose(file);\n\n\ngetenv函数第五个常见方式是通过 getenv函数 获取进程环境变量，首先，Android系统层面存在一些默认的环境变 量，除此之外，样本可以设置自己进程内的环境变量。因此，样本可以在Native层获取系统环境变量或 者自身JAVA层设置的环境变量。  我们可以通过ADB 查看环境变量有哪些，也可以查看环境变量的值。   \nC:\\Users\\pr0214&gt;adb shellbullhead:/ $ exportANDROID_ASSETSANDROID_BOOTLOGOANDROID_DATAANDROID_ROOTANDROID_SOCKET_adbdANDROID_STORAGEASEC_MOUNTPOINTBOOTCLASSPATHDOWNLOAD_CACHEEXTERNAL_STORAGEHOMEHOSTNAMELOGNAMEPATHSHELLSYSTEMSERVERCLASSPATHTERMTMPDIRUSERbullhead:/ $ echo $HOME/bullhead:/ $ echo $ANDROID_DATA/databullhead:/ $ echo $SYSTEMSERVERCLASSPATH/system/framework/services.jar:/system/framework/ethernetservice.jar:/system/framework/wifiservice.jar:/system/framework/com.android.location.provider.jarbullhead:/ $ echo $PATH/sbin:/system/sbin:/system/bin:/system/xbin:/vendor/bin:/vendor/xbinbullhead:/ $\n\n 第六个常见方式是使用系统调用获取相关属性，不管是通过syscall函数还是内联汇编，都属此类。 常见的比如uname系统调用  \n\n uname - 获取当前内核的名称和信息返回的信息是一个结构体  \n\nstruct utsname &#123;char sysname[]; /* 操作系统名称 (例如 &quot;Linux&quot;) */char nodename[]; /* &quot;一些实现了的网络”内的名称*/char release[]; /* 操作系统版本 (例如 &quot;2.6.28&quot;)*/char version[]; /* 操作系统发布日期 */char machine[]; /* 硬件标识符 */#ifdef _GNU_SOURCEchar domainname[]; /* NIS或YP域名 */#endif&#125;;\n 日志全开的情况下，系统调用的相关调用会被全部打印， Unidbg的uname系统调用实现是个很好也很简单的检测点，十分规范的表明了自己是Unidbg。  \nprotected int uname(Emulator&lt;?&gt; emulator) &#123;    RegisterContext context = emulator.getContext();    Pointer buf = context.getPointerArg(0);    if (log.isDebugEnabled()) &#123;        log.debug(&quot;uname buf=&quot; + buf);    &#125;    final int SYS_NMLN = 65;    Pointer sysName = buf.share(0);    sysName.setString(0, &quot;Linux&quot;); /* Operating system name (e.g., &quot;Linux&quot;) */    Pointer nodeName = sysName.share(SYS_NMLN);    nodeName.setString(0, &quot;localhost&quot;); /* Name within &quot;some implementation-defined network&quot; */    Pointer release = nodeName.share(SYS_NMLN);    release.setString(0, &quot;1.0.0-unidbg&quot;); /* Operating system release (e.g., &quot;2.6.28&quot;) */    Pointer version = release.share(SYS_NMLN);    version.setString(0, &quot;#1 SMP PREEMPT Thu Apr 19 14:36:58 CST 2018&quot;); /* Operating system version */    Pointer machine = version.share(SYS_NMLN);    machine.setString(0, &quot;armv8l&quot;); /* Hardware identifier */    Pointer domainName = machine.share(SYS_NMLN);    domainName.setString(0, &quot;localdomain&quot;); /* NIS or YP domain name */    return 0;&#125;\n 以上这些是较为常见的获取系统属性的方式，  \n如何解决？__system_property_get的处理一般运行报IO错误，继承IOResolver实现文件重定向接口，打上自己的日志\n\n lilac path:&#x2F;dev&#x2F;propertieslilac path:&#x2F;proc&#x2F;stat  \n\n一般这前两个文件访问，不需要管，这是libc初始化的内部逻辑   文件访问处理好了，接下来用第二种的方式，是__system_property_get 这个函数的处理 ，此Unidbg 在src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;linux&#x2F;android 目录下有相 关类对它进行了Hook和封装，我们可以直接拿来用  \nSystemPropertyHook systemPropertyHook = new SystemPropertyHook(emulator);systemPropertyHook.setPropertyProvider(new SystemPropertyProvider() &#123;    @Override    public String getProperty(String key) &#123;        System.out.println(&quot;lilac Systemkey:&quot;+key);        switch (key)&#123;        &#125;        return &quot;&quot;;    &#125;;&#125;);memory.addHookListener(systemPropertyHook);\n\nlilac Systemkey:ro.serialnolilac Systemkey:ro.product.manufacturerlilac Systemkey:ro.product.brandlilac Systemkey:ro.product.model\n\n 通过adb shell 获取这些信息，一 一填入正确的值，建议使用Unidbg时，对应的测试机Android版本为 6.0，这样或许可以避免潜在的麻烦。  \nC:\\Users\\zsk&gt;adb shellangler:/ $ suangler:/ # getprop ro.serialno84B5T15A04002645angler:/ # getprop ro.product.manufacturerHuaweiangler:/ # getprop ro.product.brandgoogleangler:/ # getprop ro.product.modelNexus 6Pangler:/ #\n// 注册绑定IO重定向emulator.getSyscallHandler().addIOResolver(this);SystemPropertyHook systemPropertyHook = new SystemPropertyHook(emulator);systemPropertyHook.setPropertyProvider(new SystemPropertyProvider() &#123;    @Override    public String getProperty(String key) &#123;        System.out.println(&quot;lilac Systemkey:&quot;+key);        switch (key)&#123;            case &quot;ro.serialno&quot;: &#123;                return &quot;84B5T15A04002645&quot;;            &#125;            case &quot;ro.product.manufacturer&quot;:                return &quot;Huawei&quot;;            case &quot;ro.product.brand&quot;: &#123;                return &quot;google&quot;;            &#125;            case &quot;ro.product.model&quot;: &#123;                return &quot;Nexus 6P&quot;;            &#125;        &#125;        return &quot;&quot;;    &#125;;&#125;);memory.addHookListener(systemPropertyHook);// 创建Android虚拟机vm = emulator.createDalvikVM(new File(&quot;xxx.apk&quot;));\n\npopen的处理接下来是第四种和第五种， 管popen和getenv，它俩都是libc里的函数，所以放一起说。我的想法是Hook这两个函数， 如果产生调用就打印日志 ， 基于 Unidbg原生Hook封装的各种Hook。 \n\nHOOK时机要在什么时候？这个样本的popen调用发生在目标函数中，如果发生在init中呢？ \n我们通过HOOK得到了其参数，那怎么给它返回正确的值呢？\n\n避免so存在init_proc 函数，或者init_array非空，需要在Loadlibrary加载so文件前面开始Hook，为了实现这个目标，我们提前将libc加载进Unidbg内存中。\nDalvikModule dmLibc = vm.loadLibrary(new File(&quot;unidbg-android/src/main/resources/android/sdk23/lib/libc.so&quot;), true);Module moduleLibc = dmLibc.getModule();// HOOK popenint popenAddress = (int) moduleLibc.findSymbolByName(&quot;popen&quot;).getAddress();// 函数原型：FILE *popen(const char *command, const char *type);emulator.attach().addBreakPoint(popenAddress, new BreakPointCallback() &#123;    @Override    public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;        RegisterContext registerContext = emulator.getContext();        String command = registerContext.getPointerArg(0).getString(0);        System.out.println(&quot;lilac popen command:&quot;+command);        return true;    &#125;&#125;);\n addBreakPoint 我们一般用于下断点，添加回调，在命中断点时打印输出popen的参数1(即传给shell的 命令)，并设置返回值为true，即做完打印程序继续跑，不用真断下来。  \n第一个问题解决， 第二个问题，怎么给它合适的返回值呢？  \n\n 其实下面奇怪的报错就是popen导致的，popen返回的是文件描述符 。 NR &#x3D; 190，190是什么系统调用？Unidbg尚未实现  \n 查一下表 https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md#arm-32_bit_EABI而Unidbg提供了一种在底层修复和实现popen函数的法子。  接着是 uname -a\nangler:/ # uname -aLinux localhost 3.10.73-g33ace82f84b #1 SMP PREEMPT Fri Oct 13 04:41:33 UTC 2017 aarch64\n\n首先实现自己的ARM32SyscallHandler，完整代码如下，你可以把它当成固定讨论，它是针对 popen报错的官方解决方案。 \npackage com.bailong.qtt;import com.github.unidbg.Emulator;import com.github.unidbg.arm.context.EditableArm32RegisterContext;import com.github.unidbg.linux.ARM32SyscallHandler;import com.github.unidbg.linux.file.ByteArrayFileIO;import com.github.unidbg.linux.file.DumpFileIO;import com.github.unidbg.memory.SvcMemory;import com.github.unidbg.pointer.UnidbgPointer;import com.sun.jna.Pointer;import java.util.concurrent.ThreadLocalRandom;public class qttSyscallHandler extends ARM32SyscallHandler &#123;    public qttSyscallHandler(SvcMemory svcMemory) &#123;        super(svcMemory);    &#125;    @Override    protected boolean handleUnknownSyscall(Emulator&lt;?&gt; emulator, int NR) &#123;        switch (NR)&#123;            case 190:                vfork(emulator);                return true;            case 114:                wait4(emulator);                return true;        &#125;        return super.handleUnknownSyscall(emulator, NR);    &#125;    private void wait4(Emulator&lt;?&gt; emulator) &#123;        EditableArm32RegisterContext context = (EditableArm32RegisterContext) emulator.getContext();        int pid = context.getR0Int();        UnidbgPointer wstatus = context.getR1Pointer();        int options = context.getR2Int();        Pointer rusage = context.getR3Pointer();        System.out.println(&quot;wait4 pid=&quot; + pid + &quot;, wstatus=&quot; + wstatus + &quot;, options=0x&quot; + Integer.toHexString(options) + &quot;, rusage=&quot; + rusage);    &#125;    private void vfork(Emulator&lt;?&gt; emulator) &#123;        EditableArm32RegisterContext context = (EditableArm32RegisterContext) emulator.getContext();        int childPid = emulator.getPid() + ThreadLocalRandom.current().nextInt(256);        System.out.println(&quot;vfork pid=&quot; + childPid);        context.setR0(childPid);    &#125;    protected int pipe2(Emulator&lt;?&gt; emulator) &#123;        EditableArm32RegisterContext context = (EditableArm32RegisterContext) emulator.getContext();        Pointer pipefd = context.getPointerArg(0);        int flags = context.getIntArg(1);        int write = getMinFd();        this.fdMap.put(write, new DumpFileIO(write));        int read = getMinFd();        // stdout中写入popen command 应该返回的结果        String stdout = &quot;Linux localhost 3.10.73-g33ace82f84b #1 SMP PREEMPT Fri Oct 13 04:41:33 UTC 2017 aarch64&quot;;        this.fdMap.put(read, new ByteArrayFileIO(0, &quot;pipe2_read_side&quot;, stdout.getBytes()));        pipefd.setInt(0, read);        pipefd.setInt(4, write);        System.out.println(&quot;pipe2 pipefd=&quot; + pipefd + &quot;, flags=0x&quot; + flags + &quot;, read=&quot; + read + &quot;, write=&quot; + write + &quot;, stdout=&quot; + stdout);        context.setR0(0);        return 0;    &#125;&#125;\n解释一下为什么不直接补在ARM32SyscallHandler中？因为Unidbg并没有真正实现wait4和fork这两个 系统调用，只不过对于popen而言，用上述方式可以“凑合用”，既然不是完美的实现，自然不能放到 ARM32SyscallHandler中去，免得出大问题。  \n 在pipe2中注释下的stdout中传入正确返回值即可，比如uname -a就是，需要注意，结果都i要加换行 符，这是shell结果的返回习惯。\n 接下来让我们的emulator使用我们自己的syscallHandler，emulator &#x3D; new AndroidARMEmulator(new File(“target&#x2F;rootfs”)); 由如下洋洋洒洒十来行取代。    \n// 创建模拟器实例，要模拟32位或者64位，在这里区分//        emulator = AndroidEmulatorBuilder.for32Bit().build();AndroidEmulatorBuilder builder = new AndroidEmulatorBuilder(false) &#123;    public AndroidEmulator build() &#123;        return new AndroidARMEmulator(processName, rootDir,backendFactories) &#123;            @Override            protected UnixSyscallHandler&lt;AndroidFileIO&gt;            createSyscallHandler(SvcMemory svcMemory) &#123;                return new qttSyscallHandler(svcMemory);            &#125;        &#125;;    &#125;&#125;;emulator = builder.setRootDir(new File(&quot;target/rootfs&quot;)).build();\n 直接跑出了结果，但我们的任务其实还没有完成&#x3D; &#x3D;，tag中搜索lilac popen，发现一共调用了三次  \n\nlilac popen command:uname -alilac popen command:cd &#x2F;system&#x2F;bin &amp;&amp; ls -llilac popen command:stat &#x2F;root  \n\n 我们上面的代码，似乎只处理了uname -a应该返回的值，后面两次呢？怎么在pipe2中根据 popen输入的command返回合适的输出呢？  我们可以使用emulator的全局变量来完成这一点     对应的qttSyscallHandler代码，其中 cd &#x2F;system&#x2F;bin &amp;&amp; ls -l 和 stat &#x2F;root 的结果来自adb shell，大家 根据自己的测试机情况填入合适的结果。  \nprotected int pipe2(Emulator&lt;?&gt; emulator) &#123;    EditableArm32RegisterContext context = (EditableArm32RegisterContext) emulator.getContext();    Pointer pipefd = context.getPointerArg(0);    int flags = context.getIntArg(1);    int write = getMinFd();    this.fdMap.put(write, new DumpFileIO(write));    int read = getMinFd();    String stdout = &quot;&quot;;    // stdout中写入popen command 应该返回的结果    String command = emulator.get(&quot;command&quot;);    switch (command) &#123;        case &quot;uname -a&quot;: &#123;            stdout = &quot;Linux localhost 3.10.73-g33ace82f84b #1 SMP PREEMPT Fri Oct 13 04:41:33 UTC 2017 aarch64&quot;;        &#125;        break;        case &quot;cd /system/bin &amp;&amp; ls -l&quot;: &#123;            stdout = &quot;total 25152&quot; +                    &quot;-rwxr-xr-x 1 root shell 128688 2009-01-01 08:00 abb&quot; +                    &quot;lrwxr-xr-x 1 root shell 6 2009-01-01 08:00 acpi -&gt; toybox&quot; +                    &quot;-rwxr-xr-x 1 root shell 30240 2009-01-01 08:00 adbd&quot; +                    &quot;-rwxr-xr-x 1 root shell 207 2009-01-01 08:00 am&quot; +                    &quot;-rwxr-xr-x 1 root shell 456104 2009-01-01 08:00 apexd&quot; +                    &quot;lrwxr-xr-x 1 root shell 13 2009-01-01 08:00 app_process -&gt; app_process64&quot; +                    &quot;-rwxr-xr-x 1 root shell 25212 2009-01-01 08:00 app_process32&quot;;        &#125;        break;        case &quot;stat /root&quot;: &#123;            stdout = &quot;stat: &#x27;/root&#x27;: No such file or directory&quot;;        &#125;        break;        default:            System.out.println(&quot;command do not match!&quot;);    &#125;    this.fdMap.put(read, new ByteArrayFileIO(0, &quot;pipe2_read_side&quot;, stdout.getBytes()));    pipefd.setInt(0, read);    pipefd.setInt(4, write);    System.out.println(&quot;pipe2 pipefd=&quot; + pipefd + &quot;, flags=0x&quot; + flags + &quot;, read=&quot; + read + &quot;, write=&quot; + write + &quot;, stdout=&quot; + stdout);    context.setR0(0);    return 0;&#125;\n\ngetenv的处理 getenv的出现频率也挺高， 首先我们看一下当前测试机有哪些环境变量    \n\nangler:&#x2F;system&#x2F;bin $ exportANDROID_ASSETSANDROID_BOOTLOGOANDROID_DATAANDROID_ROOTANDROID_SOCKET_adbdANDROID_STORAGEASEC_MOUNTPOINTBOOTCLASSPATHDOWNLOAD_CACHEEXTERNAL_STORAGEHOMEHOSTNAMELOGNAMEPATHSHELLSYSTEMSERVERCLASSPATHTERMTMPDIRUSER\n\n 看一下PATH的内容  \n\nangler:&#x2F;system&#x2F;bin $ echo $PATH&#x2F;sbin:&#x2F;system&#x2F;sbin:&#x2F;system&#x2F;bin:&#x2F;system&#x2F;xbin:&#x2F;vendor&#x2F;bin:&#x2F;vendor&#x2F;xbin\n\n getValue取不到结果，原因就是getenv没有返回值，那么该怎么办呢？   这里给env返回正确的值有几种办法呢？  \n方法一 Unidbg提供了对环境变量的初始化，它在 src&#x2F;main&#x2F;java&#x2F;com&#x2F;github&#x2F;unidbg&#x2F;linux&#x2F;AndroidElfLoader.java中。   我们填上这一个就行，为了辨别不同方法是否生效，我们这里返回1  \nthis.environ = initializeTLS(new String[] &#123;        &quot;ANDROID_DATA=/data&quot;,        &quot;ANDROID_ROOT=/system&quot;,        //&quot;PATH=/sbin:/vendor/bin:/system/sbin:/system/bin:/system/xbin&quot;,        &quot;NO_ADDR_COMPAT_LAYOUT_FIXUP=1&quot;,        &quot;PATH=1&quot;,&#125;);\n方法二 libc 提供了setenv方法，可以设置环境变量。 在调用函数前先调用该方法 \n// setenv设置环境变量public void setEnv()&#123;    Symbol setenv = module.findSymbolByName(&quot;setenv&quot;, true);    setenv.call(emulator, &quot;PATH&quot;, &quot;2&quot;, 0);&#125;;\n\n\n方法三 通过HookZz hook函数，替换结果  \npublic void hookgetEnvByHookZz()&#123;    HookZz hookZz = HookZz.getInstance(emulator);    hookZz.wrap(module.findSymbolByName(&quot;getenv&quot;), new WrapCallback&lt;EditableArm32RegisterContext&gt;() &#123;        String name;        @Override        public void preCall(Emulator&lt;?&gt; emulator, EditableArm32RegisterContext ctx, HookEntryInfo info) &#123;            name = ctx.getPointerArg(0).getString(0);        &#125;        @Override        public void postCall(Emulator&lt;?&gt; emulator, EditableArm32RegisterContext ctx, HookEntryInfo info) &#123;            switch (name)&#123;                case &quot;PATH&quot;: &#123;                    MemoryBlock replaceBlock = emulator.getMemory().malloc(0x100, true);                    UnidbgPointer replacePtr = replaceBlock.getPointer();                    String pathValue = &quot;3&quot;;                    replacePtr.write(0, pathValue.getBytes(StandardCharsets.UTF_8), 0, pathValue.length());                    ctx.setR0(replacePtr.toIntPeer());                &#125;            &#125;            super.postCall(emulator, ctx, info);        &#125;    &#125;);&#125;\n\n方法四 也可以通过断点的方式hook  \npublic void hookgetEnvByBreakPointer() &#123;    emulator.attach().addBreakPoint(module.base + 0x7FE, new BreakPointCallback() &#123;        @Override        public boolean onHit(Emulator&lt;?&gt; emulator, long address) &#123;            EditableArm32RegisterContext registerContext =                    emulator.getContext();            registerContext.getPointerArg(0).setString(0, &quot;4&quot;);            emulator.getBackend().reg_write(ArmConst.UC_ARM_REG_PC,                    (address) + 5);            return true;        &#125;    &#125;);&#125;\n 直接让R0指针指向正确的值，并操纵PC寄存器跳过这条指令  \n方法五 仿照SystemPropertyHook写一下，代码如下  在 vm.loadLibrary 加载so文件之前\nEnvHook envHook = new EnvHook(emulator);memory.addHookListener(envHook);\n EnvHook.java  \nimport com.github.unidbg.Emulator;import com.github.unidbg.arm.ArmHook;import com.github.unidbg.arm.HookStatus;import com.github.unidbg.arm.context.RegisterContext;import com.github.unidbg.hook.HookListener;import com.github.unidbg.memory.SvcMemory;import com.github.unidbg.pointer.UnidbgPointer;public class EnvHook implements HookListener &#123;    private final Emulator&lt;?&gt; emulator;    public EnvHook(Emulator&lt;?&gt; emulator) &#123;        this.emulator = emulator;    &#125;    @Override    public long hook(SvcMemory svcMemory, String libraryName, String symbolName,                     final long old) &#123;        if (&quot;libc.so&quot;.equals(libraryName) &amp;&amp; &quot;getenv&quot;.equals(symbolName)) &#123;            if (emulator.is32Bit()) &#123;                return svcMemory.registerSvc(new ArmHook() &#123;                    @Override                    protected HookStatus hook(Emulator&lt;?&gt; emulator) &#123;                        return getenv(old);                    &#125;                &#125;).peer;            &#125;        &#125;        return 0;    &#125;    private HookStatus getenv(long old) &#123;        RegisterContext context = emulator.getContext();        UnidbgPointer pointer = context.getPointerArg(0);        String key = pointer.getString(0);        switch (key)&#123;            case &quot;PATH&quot;:&#123;                pointer.setString(0, &quot;5&quot;);                return HookStatus.LR(emulator, pointer.peer);            &#125;        &#125;        return HookStatus.RET(emulator, old);    &#125;&#125;\n","tags":["Unidbg"]},{"title":"unidbg踩坑记录，getobjectclass对象为null","url":"/posts/48808/","content":"package com.dongchedi;import com.github.unidbg.AndroidEmulator;import com.github.unidbg.Module;import com.github.unidbg.linux.android.AndroidEmulatorBuilder;import com.github.unidbg.linux.android.AndroidResolver;import com.github.unidbg.linux.android.dvm.*;import com.github.unidbg.memory.Memory;import com.github.unidbg.virtualmodule.android.AndroidModule;import org.apache.log4j.Level;import org.apache.log4j.Logger;import java.io.File;import java.util.ArrayList;import java.util.List;public class dongchedi extends AbstractJni &#123;    private final AndroidEmulator emulator;    private final VM vm;    private final Module module;    dongchedi() &#123;        Logger.getLogger(&quot;com.github.unidbg.linux.ARM32SyscallHandler&quot;).setLevel(Level.DEBUG);        Logger.getLogger(&quot;com.github.unidbg.unix.UnixSyscallHandler&quot;).setLevel(Level.DEBUG);        Logger.getLogger(&quot;com.github.unidbg.AbstractEmulator&quot;).setLevel(Level.DEBUG);        Logger.getLogger(&quot;com.github.unidbg.linux.android.dvm.DalvikVM&quot;).setLevel(Level.DEBUG);        Logger.getLogger(&quot;com.github.unidbg.linux.android.dvm.BaseVM&quot;).setLevel(Level.DEBUG);        Logger.getLogger(&quot;com.github.unidbg.linux.android.dvm&quot;).setLevel(Level.DEBUG);        emulator = AndroidEmulatorBuilder.for32Bit().build();        final Memory memory = emulator.getMemory();        memory.setLibraryResolver(new AndroidResolver(23));        vm = emulator.createDalvikVM(new File(&quot;unidbg-android\\\\src\\\\test\\\\java\\\\com\\\\dongchedi\\\\dongchedi_6_5_1.apk&quot;));        vm.setJni(this);        vm.setVerbose(true);        new AndroidModule(emulator, vm).register(memory);        DalvikModule dm = vm.loadLibrary(&quot;cjtfcc&quot;, true);        module = dm.getModule();        dm.callJNI_OnLoad(emulator);    &#125;    public String tfccDecrypt(int param1, int param2, String param3, String param4) &#123;        // com.bdcaijing.tfccsdk.Tfcc        // private native String tfccDecrypt(int i, int i2, String str, String str2);        List&lt;Object&gt; list = new ArrayList&lt;&gt;();        list.add(vm.getJNIEnv()); //第一个参数默认env        list.add(0); //第二个参数一般填0，一般用不到        list.add(param1);        list.add(param2);        StringObject stringObject1 = new StringObject(vm, param3);        list.add(vm.addLocalObject(stringObject1));        StringObject stringObject2 = new StringObject(vm, param4);        list.add(vm.addLocalObject(stringObject2));        Number number = module.callFunction(emulator, 0xa2ac, list.toArray());        System.out.println(vm.getObject(number.intValue()).getValue().toString());        return null;    &#125;    public static void main(String[] args) &#123;        dongchedi test = new dongchedi();        test.tfccDecrypt(9, 1, &quot;14zRM+40n2UGVx0DlI7hqDFjsxGR6eJsnnxUME5ZDT8=&quot;,                &quot;AQAAAIY8QCEBiAWgEHTCmugnR4hHWlbOmpfOHoYQ+gXQHXvSrCBlQtFmGM8T7eHljYYTD8vWOsQa8SuOaBwMTYOS03qjuUktB2dRu3+mWr4z5N3uMrb1Es/MTUrWx8JGHVoX1z7f6luarDvT9Wf0KKbfHRkqaJANlwVEqULsZU6HkJ0zkaFh3AnU5eQRsPoxttOPOhsVLv/kNjpm1&quot; +                &quot;qBHkENXSedO4MN+PGybTCOKH3Ri6dvoX9EXCUr41o2W0ujI46nYn7vUrRkHgHNOOrGkIL7Acn0wrU6nj3cZuFpxb+W+u6r+MFI8ScE9XQya3322RRqOQUr1xWXpCucv/zknN7pjyzptYk8iWRfeaCT+iSjkmwa+3EStu3U/TQakF1xh46hjPOczx7elte6qV9ztDyF61Eu&quot; +                &quot;Nrz4K+9O4TgqDeg9FGv7k+sNXg4M8L+Vx2BzJ/9MfaOFF5YXlI2oeMk0FReBTV8cBdXv2j23ju5HUpNo45dYF+tLihymL3maOiuWYviIAk8OKjNG+juruF4YuYoAqJoJSvuZ9Avujl3mqL66AdZmzG7vTa29S1MWIwu3XYj96lcbGSav9m5g4yRb6zXcQDIpqAmYHVgRjX&quot; +                &quot;7adt09SOuvrcuORpUh2jSt5smO+lpR7fuHk4tlCr6OlRr360IgJr82PmeAAKz1dV9tHGYlV+618tjgi36J4iLuWaw6Ix9iJ1R6cFJY6JIX8pU8NoGoUFDjK3Dm8Pm9j72J9cTQpEMR/HCT3BOw5YTTTQHl3eQgdZevUD8HFnECMvajFZxKe6obyPieE41WBk/EQ5WI2Bwtu&quot; +                &quot;rmyzxEq/VPIm1UfoqE78T4QOa2ey82Mw6TCIzMSMhCwiA2huzSnlus9RicQaPCX1isa0BitIISMHeHRFqab9ORMnHKVxEX3AhZN3OwcPKntx43yxZrTp5GLYwndyqchZCpTXhu/j/7WfUZRnIc2aOhKegFCLNdeml0Kha9FPSXE8AxTMr6ldw2p5vhPmzn5p2iRvgXoqdr5J&quot; +                &quot;6W6QgBCEb8fGCupV+gLibY5mcLabHBmcSEkdax1h341Qxyk6s8/LvUlpx6MZHPM+/NgWf8bUvvbPKLrD7xhKPtCaaaO1PSGiNTPrlRJaajiBpJcMwMkjRbKT76+kDCL00teodYNyFBEkYmGJM5Sg7fHY1f6e3FXRYny6bXnr0R/mTnxWDPDAc9gn2eiyHofLRaBjvtbdpMStn&quot; +                &quot;MolS5ybQt8GfaVifsjfQe3jwLmFNCtsXn6unDo189udnL9iOwtwIhLUtUvIU9IejQ33rKAMWQjrlvA99KTLzdk6ewItUa4mI9sFcpcR/uIbQiiHYs1qvfrQiAmvzY+Z4AArPV1X20cZiVX7rXy2OCLfoniIu5ZrDojH2InVHpwUljokhfylTw2gahQUOMrcObw+b2PvYn1xNC&quot; +                &quot;kQxH8cJPcE7DlhNNO1SUZeQb5H5IQYdROwNOj0gcN4YmN1P2S2PC6VQzGJu2x0+T9e7PeW2jjIl4qM0N23z+A9W3IX0+x4oUU/1MNdgaxMlucq9SRoPnuyW/LC+PkDTN1tk6oMbKoqQSYiKn0dVOZKma6PWO3UogNGhFJN+uzG8TN0Vh5YDTrpJ/AhzGdpNu0aDFGXrXqaCx5n&quot; +                &quot;Lcxfiq9XMzz47/nNbJ5GD/sBg2anQ25uYJQqueFTZsej5Buy+PpsZ9UCUlZ3QDdC8Z2dGfQCnnzvosx3vb3nZVUtkxruvGaDtTueshIcL6OFF+liJQ1N3hjfsom7F74c4NYZo3SbrUSlOOLWi9YALqszQq+s6XvUNBbKWzeCU236tn7MmtlBkdA+ZAe95f1JPy63XwxkK6wtfF&quot; +                &quot;n7uxDQKfv/HVeKjvzQ+IAHv3wQmGSSUuHtusWtwFzTMXKqur3KNdLDQZIo6UV74/uvG3/CQnX3JoK3AHydHKV+kkMd9W6Uzjy37PixjrW5IFST6+thqb/yrK1chGM9MPJ7AbNeq9Zfhi5igComglK+5n0C+6OXebfNiKoMkM2f/ezRyGcMxEkKmyG2g9cZwfeDjZjDVvPiMd8Jf&quot; +                &quot;6XOoXT47iq7JcWZ8PM8FELOWjegOP9hXUMPdkn2waqXbJ7eFwfb1vI/kSsX6QdTF5cXYcScuqFjft/hLd/a+JaSwEyFqIbWnZkHMMNuAqCmBmzk8ZEXzYkflQBKnTdiEgsXVrf4RokNgd//cFo6ZfrcdMdtbpiOEM3k9iD9HABFcsV4boY89g1Uqmx66emYxoD1UUI7XlDyGFgvY&quot; +                &quot;uRFN5vcANjq9wM4mIfNRx8xN5JNj5EIcZG6fE3mq0jEQlEQf8V89ngy2x/Klp7c8OHWV9YDy3v4QeSTmSCrg8EvCx71UD0mhOPjBoF0EsUt6JseIrcKH+ORtrfSyPjUPnhkCnkTLZpyidfqUCJz6YksBQ7Ak+tA9vKN7Y2xGkgy/8jpwMfRjnmERo3YMrgaawqhp5RZLB0V2ZPLUC&quot; +                &quot;s5MqqsJDnIp2KnCV8hJVDTUdz6/XlAPCWACEfZAZpX38dS7RTVw/KzJf903a7pdrsPJ+fW4MVIaMzF98w0GCRjFSPw8V44sbHQbrcFLgZ+7bF6G2Dm0eez6L5xIs0ptZcX8tN7UE24KxYJK8/THH47mRDs/gyMFE4r5r5XzB1vgtPPWURrjzCtODTxtcsxDaQ89e7WHuBA7IVBzRC2&quot; +                &quot;5+lKeAndp3VlHpeGLzzLfHkgMqva7KsGE3rMPYk+ioGPl3TuPWrqawjwSKlsUP/vf61f80Br42DugXL4RPAoE5b5P/8628TZVqYMzkC1hfKNOzxkAOsYCW+vLizurCPm8yeIqDYlZq/DcFVxHxPkAR9uOFZwlKNXZbMzaDEU+ebXX4g+WG6dpKK0GSFV4MZX5SvpZrvIZvTspyVYjpXHV&quot; +                &quot;Atr+wCzO0N5tg1kGJABoj+aZ4GWGFYv7kzTMBuk0hDeFXfDgp+Af7tMAkfmG67iqopLbNccfhlE6fXBwZail88u/6S9zhqAgZLclp3cPFDnZdGLF0pNqzsx6pk2j5tS+srUVHT+M5gGYOhC6iofm0ek0CQYsSwd6e8uUV627Cb00qLT1d0BGax0oQA2UE+dgCiR2jZaO0bnPsh6a6VC3P0&quot; +                &quot;vGdiWeNZyjTEHXD3YaUb9y49+bniXV7SpHcLiZj+voezbBQqCETrDTc1pLjicAgBtCJ4kPYUzDJBtB/NUQR+PHMwH4QrhgqaDKFPnCjFAOv63ob7aepyfMI/fWenLJmEuTQU/hWv7zxhvC3KX7hfcIPTtUYDRJofRS4F0UNTGY7wHf0nD+uqJPaxEamlsFMNtPLa2ZAskmEXy1tegY8sH8&quot; +                &quot;V8pFL7Gn0EbOAonzSLwQKZhlESxQ7MPTu3fgP7mnuEknJmhk3dwiCNNePtG6NftfjQSeJGHl+qtJNdWL22jONkATEgCZDQfYCAGkDPnI/svE9N80b83xT5K/+MQaLZGX/cyTWKLIlz21uaHGSRo0MaNBwYrRjNOZhoHbN2Cy0sgVLvlaMGTnkH4PJ/I09GQxsNAKLXz+vAKKNwbA36Kw4n&quot; +                &quot;21WRWDoSBJ5gPjFKWHR1S4BYUCxI90O51M9InW1G06saOk991lD9RH6A0ywH3Nw4Mkg7BGLvdIdqCoqAmrcvgYJ1h/RvJOt/h2ipzcDpz/qaZU2UZabYEn3V714z0d5LMvN690tCaaaO1PSGiNTPrlRJaajhMKjIj0sQ1U1K4To1wyvhN4rsSeR+QtEIKK1xOW8yj5nhlEvksrd3GULB+hL&quot; +                &quot;1ymx/tZgdQxe4ysd3cL9U/7tMmlPc9YWVtO22UO7iVrTfhTHmT0Rs9ttFNBjkyh/bPRTloBts7VeIUpze3ppRP4ncOJCaxxLOwtd0fA6iTvV4eAFeAcia29951yCHn91FjaNljJcPnRNy+u0VK+SlDptv5AcagR0luMfzGuIHOHdn9wIvb8/UDxAvxhwnieHQ7s1GdDUSq1T2xR5iHstyUu&quot; +                &quot;Ma/Gax0oQA2UE+dgCiR2jZaO5/TnlbXb9IKvNeQ1fAvHxiIwfpxozEMIvOzOrPbLwJjs8xXbkCH8GvEYiqQfMw2B3w6YIawzwVlcx+4CypfZvtYTatE+XCzs2j8rjFUZWUBv2olwN3ZfL3a0AfpAo0+LTSRIivoQSNEEuk7sIg2xU1lonGUe8JRYJovoyczZNNC/OUI5wD5kWCEM0v3A/kO&quot; +                &quot;Du50mX+Sl1LtmX8FQdy1q5nbS1BWFqfF6cibw4CL5yMH&quot;);    &#125;&#125;\n\n运行样本后报错：GetObjectClass 的 object 为 null\n\n当前报错位置已经断下来了，输入bt查看调用栈\n\n用ida打开样本so，跳到 0x092b8 地址\n\n先分析一下，查看GetObjectClass的文档\njclass GetObjectClass(JNIEnv *env, jobject obj);\n\n有两个参数，env和object，根据ARM函数调用约定采用，参数1参数4 分别保存到 R0R3 寄存器中\n所以往上看R1出现的地址位置，0x92A8，进行断点查看调用的位置\n\nida跳到0x0a554，转为汇编代码后，可以看到object是v24，也就是入参a2，\n\n\n查看该函数的地址为0xa2ac，这跟我们一开始调用的地址一样的，在看当时传递的第二个object，确实传的0\n\n可以通过jadx查看正确的对象\npublic String tfccDecrypt(int param1, int param2, String param3, String param4) &#123;    // com.bdcaijing.tfccsdk.Tfcc    // private native String tfccDecrypt(int i, int i2, String str, String str2);    List&lt;Object&gt; list = new ArrayList&lt;&gt;();    list.add(vm.getJNIEnv()); //第一个参数默认env//        list.add(0); //第二个参数一般填0，一般用不到    DvmClass Tfcc = vm.resolveClass(&quot;com/bdcaijing/tfccsdk/Tfcc&quot;);    DvmObject&lt;?&gt; TfccObject = Tfcc.newObject(null);    list.add(vm.addLocalObject(TfccObject));    list.add(param1);    list.add(param2);    StringObject stringObject1 = new StringObject(vm, param3);    list.add(vm.addLocalObject(stringObject1));    StringObject stringObject2 = new StringObject(vm, param4);    list.add(vm.addLocalObject(stringObject2));    Number number = module.callFunction(emulator, 0xa2ac, list.toArray());    System.out.println(vm.getObject(number.intValue()).getValue().toString());    return null;&#125;\n\n\n再次运行就可以了\n","tags":["Unidbg"]},{"title":"Unidbg操作说明","url":"/posts/24643/","content":"\n  \n  \n    \n      \n      \n        输入密码查看内容\n      \n    \n  \n\n","tags":["Unidbg"]},{"title":"对称加解密算法RC4原理过程及实现","url":"/posts/3538/","content":"介绍RC4是一种流密码，可实现短密钥到长密钥的转换，流密码的加密就是比特的异或，为了安全性，关键就是密钥的生成，RC4就是解决密钥生成问题的。\n流密码结构：\n\n\n流密码类似于”一次一密”，不同的是”一次一密”使用的是真正的随机数流，而流密码使用的是伪随机数流。设计流密码的主要因素1、加密序列的周期要长，若出现重复的周期过短，容易被破解2、密钥流应该尽可能地接近真正随机数流的特征3、密钥长度要长，以避免琼穷举攻击\n\n\n\n\n步骤1. 密钥编排，向量S和Y初始化RC4的实现需要三个向量，初始向量S，密钥K,临时向量T\n初始化向量S和T，将向量S填充为0到255的数值，根据密钥K，填充向量T。如果密钥K\n比向量S短，就依次重复填充密钥K，如果与向量S等长，那么向量T与密钥K相同。\nS = []  # 状态数组T = []  # 临时数组# 初始化S和Tfor i in range(256):    S.append(i)    T.append(key[i % len(key)])\n\n\n\n2. 向量S的初始置换，将原来有序的向量S重新排列从0遍历到255，每次 j&#x3D;(j+S[i]+ord(T[i]))%256，然后交换S[i] 和 S[j]，这样S盒顺序就被打乱了\n# 用T产生S的初始置换j = 0for i in range(256):    j = (j + S[i] + ord(T[i])) % 256    S[i], S[j] = S[j], S[i]  # 交换S[i] 和 S[j]    # print(S)\n\n\n3. 密钥生成，每加密一个字符，就需要生成一个字节的密钥根据明文长度生成密钥流\nKs = []i = j = 0for _ in range(len(M)):    i = (i + 1) % 256    j = (j + S[i]) % 256    S[i], S[j] = S[j], S[i]    t = (S[i] + S[j]) % 256    Ks.append(t)\n\n\n\n4. 循环明文长度，每一个字符跟向量S异或C = &quot;&quot;for i in range(len(M)):    C += chr(ord(M[i]) ^ S[Ks[i]])return C\n\n解密也就是把密文当成明文再把加密执行一次\n代码python# 密钥编排函数def KSA(key):    S = []  # 状态数组    T = []  # 临时数组    # 初始化S和T    for i in range(256):        S.append(i)        T.append(key[i % len(key)])        # print(S)        # print(T)    # 用T产生S的初始置换    j = 0    for i in range(256):        j = (j + S[i] + ord(T[i])) % 256        S[i], S[j] = S[j], S[i]  # 交换S[i] 和 S[j]        # print(S)        # print(T)    return S# 密钥流生成函数def generateKey(S, M):    Ks = []    i = j = 0    for _ in range(len(M)):        i = (i + 1) % 256        j = (j + S[i]) % 256        S[i], S[j] = S[j], S[i]        t = (S[i] + S[j]) % 256        Ks.append(t)    return Ks# 加密函数def Rc4_encode(M, key):    C = &quot;&quot;    S = KSA(key)  # 密钥编排    Ks = generateKey(S, M)    for i in range(len(M)):        C += chr(ord(M[i]) ^ S[Ks[i]])    return C# 解密函数def Rc4_decode(C, key):    M = &quot;&quot;    S = KSA(key)  # 密钥编排    Ks = generateKey(S, C)    for i in range(len(C)):        M += chr(ord(C[i]) ^ S[Ks[i]])    return Mkey = &#x27;123456789&#x27;m = &#x27;hello&#x27;C = Rc4_encode(m, key)print(&quot;加密后密文：&quot;, C)M = Rc4_decode(C, key)print(&quot;解密后明文：&quot;, M)\n\n\n\nc++#include &lt;iostream&gt;#include &lt;cstring&gt;using namespace std;void rc4_init(unsigned char *S, char *key, int key_len) &#123;    unsigned char T[256] = &#123;0&#125;;    for (int i = 0; i &lt; 256; i++) &#123;        S[i] = i;        T[i] = key[i % key_len];    &#125;    int j = 0;    for (int i = 0; i &lt; 256; i++) &#123;        j = (j + S[i] + T[i]) % 256;        swap(S[i], S[j]);    &#125;&#125;void rc4_crypto(unsigned char *S, char *text, int text_len) &#123;    int i = 0, j = 0, t = 0;    for (int k = 0; k &lt; text_len; k++) &#123;        i = (i + 1) % 256;        j = (j + S[i]) % 256;        swap(S[i], S[j]);        t = (S[i] + S[j]) % 256;        text[k] ^= S[t];    &#125;&#125;string rc4_main(char *text, int text_len, char *key) &#123;    int key_len = sizeof key - 1;    unsigned char S[256] = &#123;0&#125;;    rc4_init(S, key, key_len);    rc4_crypto(S, text, text_len);    printf(&quot;result =&gt; %s\\n&quot;, text);    //    char out[100] = &#123;0&#125;;    //    base64_encode(text,out);    //    printf(&quot;result(base64) =&gt; %s&quot;, out);    return text;&#125;int main() &#123;    char key[] = &quot;12345&quot;;    char text[] = &quot;hello&quot;;    int text_len = sizeof(text) - 1;    string aa = rc4_main(text, text_len, key);    cout&lt;&lt;aa&lt;&lt;endl;    return 0;&#125;","tags":["算法"]},{"title":"HMAC-MD5,HMAC-SHA1算法流程","url":"/posts/40655/","content":"每种哈希函数的特征\n1.MD5初始化魔数：A &#x3D; 0x67452301;B &#x3D; 0xEFCDAB89;C &#x3D; 0x98BADCFE;D &#x3D; 0x10325476;K表K1 &#x3D; 0xd76aa478K2 &#x3D; 0xe8c7b756K3 &#x3D; 0x242070dbK表来自sin函数输出长度16个字节，或者说32个十六进制数，有时候输出16个十六进制数。\n2.SHA1A &#x3D; 0x67452301B &#x3D; 0xEFCDAB89C &#x3D; 0x98BADCFED &#x3D; 0x10325476E &#x3D; 0xC3D2E1F0和MD5相比，有五个初始化链接变量，而且前四个链接变量完全相同。输出长度20个字节，或者说40个十六进制数。只有四个K值，每20轮用同一个K作变换K1 &#x3D; 0x5a827999K2 &#x3D; 0x6ed9eba1K3 &#x3D; 0x8f1bbcdcK4 &#x3D; 0xca62c1d6\n3.SHA256A &#x3D; 0x6A09E667;B &#x3D; 0xBB67AE85;C &#x3D; 0x3C6EF372;D &#x3D; 0xA54FF53A;E &#x3D; 0x510E527F;F &#x3D; 0x9B05688C;G &#x3D; 0x1F83D9AB;H &#x3D; 0x5BE0CD19;八个初始化链接变量输出长度为32个字节，或者说64个十六进制数有64个K值，每轮1个K值K1 &#x3D; 0x428a2f98K2 &#x3D; 0x71374491K3 &#x3D; 0xb5c0fbcfK4 &#x3D; 0xe9b5dba5K值来自素数\n4.SHA 512A &#x3D; 0x6a09e667f3bcc908;B &#x3D; 0xbb67ae8584caa73b;C &#x3D; 0x3c6ef372fe94f82b;D &#x3D; 0xa54ff53a5f1d36f1;E &#x3D; 0x510e527fade682d1;F &#x3D; 0x9b05688c2b3e6c1f;G &#x3D; 0x1f83d9abfb41bd6b;H &#x3D; 0x5be0cd19137e2179;八个初始化链接变量，IDA反编译也时常显示为16个。输出长度为64字节，或者说128个十六进制数有80个K，每一轮一个K，K值来自素数。K1 &#x3D; 0x428a2f98d728ae22K2 &#x3D; 0x7137449123ef65cdK3 &#x3D; 0xb5c0fbcfec4d3b2fK4 &#x3D; 0xe9b5dba58189dbbc和SHA256的K有关联。\nHMACHMAC-MD5HMAC-SHA1HMAX-XXX 加盐+双重哈希方案\nHMAC MD5CyberchefHMAC-MD5明文：123456(utf-8)密文：111111(utf-8)结果：5542af910b1ff3f554dcdfb7ceccebc8\n公式：\n第一步（让密钥的长度达到分组长度）：如果密钥长度超过512bit，先进行一次MD5后：16个字节+00000…k &#x3D; 0x313131313131密钥进行扩展MD5: 512比特–64字节–128hex 分组长度（十六进制，128长度）k’&#x3D;0x31313131313100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n第二步（k’⊕opad）：先对opad填充到分组长度0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c进行异或k’⊕opad&#x3D;0x6d6d6d6d6d6d5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c\n第三步（k’⊕ipad）：先对ipad填充到分组长度0x36363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636进行异或k’⊕ipad&#x3D;0x07070707070736363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636\n第四步级联明文（(k’⊕ipad)||m）:(k’⊕ipad)||m&#x3D;0x07070707070736363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636313233343536\n第五步级联后进行md5（H((k’⊕ipad)||m)）:级联后进行一次md5（不需要转hex）H((k’⊕ipad)||m)&#x3D;873883125b81d8d9b483f29cffeeea37\n第六步（第二步级联第五步后进行md5，H((k’⊕opad)||H((k’⊕ipad)||m)）0x6d6d6d6d6d6d5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c873883125b81d8d9b483f29cffeeea37结果：5542af910b1ff3f554dcdfb7ceccebc8结果跟Cyberchef的HMAC-MD5一致\nHMAC SHA1CyberchefHMAC-SHA1明文：helloword(utf-8)密文：1111(hex)结果：4ea30551db501b285a03a197c65fea249131b808\n第一步（让密钥的长度达到分组长度）：如果密钥长度超过512bit，先进行一次SHA1后：16个字节+00000…k &#x3D; 0x1111密钥进行扩展SHA1: 512比特–64字节–128hex 分组长度（十六进制，128长度）k’&#x3D;0x11110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n第二步（k’⊕opad）：异或0x5c先对opad填充到分组长度0x5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c然后进行异或k’⊕opad&#x3D;0x4d4d5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c\n第三步（k’⊕ipad）：异或0x36先对ipad填充到分组长度0x3636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636进行异或k’⊕ipad&#x3D;0x27273636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636\n第四步级联明文（(k’⊕ipad)||m）:(k’⊕ipad)||m&#x3D;0x2727363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363668656c6c6f776f7264\n第五步级联后进行sha1（H((k’⊕ipad)||m)）:级联后进行一次sha1（不需要转hex）H((k’⊕ipad)||m)&#x3D;aea39b30d6922fdbb1848fe3a49bd130ed337f77\n第六步（第二步级联第五步后进行sha1，H((k’⊕opad)||H((k’⊕ipad)||m)）级联(k’⊕opad)||H((k’⊕ipad)||m)&#x3D;0x4d4d5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5caea39b30d6922fdbb1848fe3a49bd130ed337f774ea30551db501b285a03a197c65fea249131b808\n总结第一步k值填充到块长度(md5和sha1是512bit，128hex)称为k’第二步k’与0x36异或后拼接明文的hex，进行原函数哈希（如hmac md5就进行一次md5，hmac sha1就进行一次sha1）第三步k’与0x5c异或后拼接第二步再进行一次原函数哈希\n","tags":["算法"]},{"title":"SHA1原理分析及流程","url":"/posts/34274/","content":"SHA1介绍SHA实际上是一系列算法的统称，分别包括：SHA-1、SHA-224、SHA-256、SHA-384以及SHA-512。后面4中统称为SHA-2，事实上SHA-224是SHA-256的缩减版，SHA-384是SHA-512的缩减版。各中SHA算法的数据比较如下表，其中的长度单位均为位：\n\n\n\n类别\nMD5\nSHA-1\nSHA-224\nSHA-256\nSHA-384\nSHA-512\n\n\n\n消息摘要长度\n128位(bit) 或 32字节\n160位(bit)或40字节\n224位(bit)或56字节\n256位(bit)或64字节\n384位(bit)或96字节\n512位(bit)或128字节\n\n\n消息长度\n&#x2F;\n小于264位\n小于264位\n小于264位\n小于2128位\n小于2128位\n\n\n分组长度\n512bit\n512bit\n512bit\n512bit\n1024bit\n1024bit\n\n\n计算字长度\n32bit\n32bit\n32bit\n32bit\n64bit\n64bit\n\n\n计算步骤数\n64\n80\n64\n64\n80\n80\n\n\n\n\nSHA1哈希算法流程消息填充对于任意长度的明文，SHA1的明文分组过程与MD5相类似，首先需要对明文添加位数，使明文总长度为448（mod512）位。在明文后添加位的方法是第一个添加位是l，其余都是0。然后将真正明文的长度（没有添加位以前的明文长度）以64位表示，附加于前面已添加过位的明文后，此时的明文长度正好是512位的倍数。M的长度 mod 512 &#x3D; R，考虑R（R为输入消息长度按512bit进行分组后，最后一组的长度） \n\nR &lt; 448，在最后一组的末尾填充1个“1”及若干个“0”，使最后一组的位数达到448位；再在这448位的基础上填充64位，这64位是M的原始长度的[二进制]\n\n\n\n\n\n\n\nR &gt;&#x3D; 448，在最后一组的末尾填充1个“1”及若干个“0”，使最后一组位数达到512；再新增一组，添加448个“0”和64位M的原始长度的二进制表示。\n\n\n\n\n\n初始化模值A&#x3D;0x67452301B&#x3D;0xEFCDAB89C&#x3D;0x98BADCFED&#x3D;0x10325476E&#x3D;0xC3D2E1F0\n分组第一个512位分组进来后，以32位为一组，分别存储在W0 ，……，W15 中之后还要将这16份子明文分组扩充到80份子明文分组，我们记为W[k]（k&#x3D; 0, 1,……79），扩充的方法如下。\n分组扩展为80份Wt &#x3D; Mt , 当0≤t≤15Wt&#x3D;(Wt −16 ⊕ Wt −14 ⊕ Wt −8 ⊕ Wt −3)&lt;&lt;&lt;1    (16≤t≤79)“&lt;&lt;&lt;” 表示循环左移符号，上述中是循环左移1位。\n\n\n计算信息摘要Kt (0≤t≤19) &#x3D; 0x5A827999Kt (20≤t≤39) &#x3D; 0x6ED9EBA1Kt (40≤t≤59) &#x3D; 0x0x8F188CDCKt (60≤t≤79) &#x3D; 0x0xCA62C1D64轮80步的计算中使用到的函数和固定常熟如下表所示：\n\n\n\n计算轮次\n计算的步数\n计算函数\n计算常数\n\n\n\n第一轮\n0≤t≤19步\nft(B,C,D)&#x3D;(B&amp;C)&amp;#124;(~B&amp;D)\n_K_t&#x3D;0x5A827999\n\n\n第二轮\n20≤t≤39步\nft(B,C,D)&#x3D;B⊕C⊕D\n_K_t&#x3D;0x6ED9EBA1\n\n\n第三轮\n40≤t≤59步\nft(B,C,D)&#x3D;(B&amp;C)&amp;#124;(B&amp;D)&amp;#124;(C&amp;D)\n_K_t&#x3D;0x8F188CDC\n\n\n第四轮\n60≤t≤79步\nft(B,C,D)&#x3D;B⊕C⊕D\n_K_t&#x3D;0xCA62C1D6\n\n\n（&amp;是与（And），|是或（Or），~是非（Not），^是异或（Xor））\n\n\n\n\n\n\n\n\n\n&amp;\n与\n两个位都为1时，结果才为1\n\n\n|\n或\n两个位都为0时，结果才为0\n\n\n^\n异或\n两个位相同为0，相异为1\n\n\n~\n取反\n0变1，1变0\n\n\n&lt;&lt;&lt;\n循环左移\n将移出的低位放到该数的高位\n\n\n\n\n链接变量与初始链接变量进行求和运算SHA1有4轮运算，每一轮包括20个步骤，一共80步，最终产生160位的信息摘要，这160位的摘要存放在5个32位的链接变量中。在SHA1的4论运算中，虽然进行的就具体操作函数不同，但逻辑过程却是一致的。首先，定义5个变量，假设为H0、H1、H2、H3、H4，对其分别进行如下操作：（A）、将A左移5为与 函数的结果求和，再与对应的子明文分组、E以及计算常数求和后的结果赋予H0。（B）、将A的值赋予H1。（C）、将B左移30位，并赋予H2。（D）、将C的值赋予H3。（E）、将D的值赋予H4。（F）、最后将H0、H1、H2、H3、H4的值分别赋予A、B、C、DA &#x3D; H0 &#x3D; A&lt;&lt;&lt;5+ft(B,C,D)+E+Wt+KtB &#x3D; H1 &#x3D; AC &#x3D; H2 &#x3D; B&lt;&lt;&lt;30D &#x3D; H3 &#x3D; CE &#x3D; H4 &#x3D; D这一过程表示如下：\n\n\n加上初始化模值a &#x3D; H0+Ab &#x3D; H1+Bc &#x3D; H2+Cd &#x3D; H3+De &#x3D; H4+Eresult &#x3D; abcde经过4论80步计算后得到的结果，再与各链接变量的初始值求和，就得到了我们最终的信息摘要。而对于有多个明文分组的，则将前面所得到的结果作为初始值进行下一明文分组的计算，最后一组的512位分组经过80轮的操作后，最终产生的H0、H1、H2、H3、H4要加上一开始的A、B、C、D、E，及加完后最终的abcde即为消息M的hash值。\n整个sha1加密简要过程如下：（1） 将512位的明文分组划分为16个子明文分组，每个子明文分组为32位。（2） 申请5个32位的链接变量，记为A、B、C、D、E。（3） 16份子明文分组扩展为80份。（4） 80份子明文分组进行4轮运算。（5） 链接变量与初始链接变量进行求和运算。（6） 链接变量作为下一个明文分组的输入重复进行以上操作。（7） 最后，5个链接变量要加上一开始的模值，最终级联起来的数据就是SHA1摘要。\n\n\n例子：对409732112进行sha1409732112&#x3D;&#x3D;&gt;ASCII   34 30 39 37 33 32 31 31 32转为二进制就是 4*18 &#x3D; 72bit34 &#x3D;&#x3D;&gt; 0011 010030 &#x3D;&#x3D;&gt; 0011 000039 &#x3D;&#x3D;&gt; 0011 100137 &#x3D;&#x3D;&gt; 0011 011133 &#x3D;&#x3D;&gt; 0011 001132 &#x3D;&#x3D;&gt; 0011 001031 &#x3D;&#x3D;&gt; 0011 000131 &#x3D;&#x3D;&gt; 0011 000132 &#x3D;&#x3D;&gt; 0011 001072bit填充1000….到448bit， 填充1个1和375个00011 0100 0011 0000 0011 1001 0011 0111 0011 0011 0011 0010 0011 0001 0011 0001 0011 0010 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000对应16进制34 30 39 37 33 32 31 31 32 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00512bit - 448bit &#x3D; 64bit留的那64比特长度，用于填充长度信息，长度单位为比特64bit附加长度信息 （就是明文对应16进制的长度）00  …. 00 72（中间58个0, 明文72是十进制，需要转为十六进制）明文72bit+填充（10…）376bit+长度信息（00 00 …48）64bit &#x3D; 512bit34 30 39 37 33 32 31 31 32 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 48512bit &#x2F; 4 &#x3D; 128位16进制128分16组 &#x3D; 8位 （每组8位）W0 &#x3D; 0x 34 30 39 37W1 &#x3D; 0x 33 32 31 31 W2 &#x3D; 0x 32 80 00 00 W3 &#x3D; 0x 00 00 00 00…W14 &#x3D; 0x 00 00 00 00W15 &#x3D; 0x 00 00 00 48 扩展分组到80份\nWt&#x3D;( Wt − 16 ⊕ Wt −14 ⊕ Wt −8 ⊕ Wt −3)&lt;&lt;1    (16≤_t_≤79)这里手算前3个，最终80份程序生成W16 &#x3D; (W0⊕W2⊕W8⊕W13)&lt;&lt;1W17 &#x3D; (W1⊕W3⊕W9⊕W14)&lt;&lt;1W18 &#x3D; (W2⊕W4⊕W10⊕W15)&lt;&lt;1\nW0 &#x3D; 0011 0100 0011 0000 0011 1001 0011 0111W1 &#x3D; 0011 0011 0011 0010 0011 0001 0011 0001W2 &#x3D; 0011 0010 1000 0000 0000 0000 0000 0000W3&#x3D;0，W4&#x3D;0，W8&#x3D;0，W9&#x3D;0，W10&#x3D;0，W13&#x3D;0，W14 &#x3D; 0W15&#x3D; 0000 0000 0000 0000 0000 0000 0100 1000W16 &#x3D; (W0⊕W2)&lt;&lt;1&#x3D; 0000 1101 0110 0000 0111 0010 0110 1110 &#x3D; 0x 0D60726EW17 &#x3D; W1&lt;&lt;1&#x3D; 0110 0110 0110 0100 0110 0010 0110 0010 &#x3D; 0x 66646262W18 &#x3D; (W2⊕W15)&lt;&lt;1&#x3D; 0110 0101 0000 0000 0000 0000 1001 0000 &#x3D; 0x 65000090\n\n跟程序结果一致，下面直接输出结果W0 &#x3D; 0x34303937W1 &#x3D; 0x33323131W2 &#x3D; 0x32800000W3 &#x3D; 0x0W4 &#x3D; 0x0W5 &#x3D; 0x0W6 &#x3D; 0x0W7 &#x3D; 0x0W8 &#x3D; 0x0W9 &#x3D; 0x0W10 &#x3D; 0x0W11 &#x3D; 0x0W12 &#x3D; 0x0W13 &#x3D; 0x0W14 &#x3D; 0x0W15 &#x3D; 0x48W16 &#x3D; 0xd60726eW17 &#x3D; 0x66646262W18 &#x3D; 0x65000090W19 &#x3D; 0x1ac0e4dcW20 &#x3D; 0xccc8c4c4W21 &#x3D; 0xca000120W22 &#x3D; 0x3581c9b8W23 &#x3D; 0x99918919W24 &#x3D; 0x8ec0e69dW25 &#x3D; 0xa7cb57b4W26 &#x3D; 0xf9231313W27 &#x3D; 0x28000483W28 &#x3D; 0xd60726e0W29 &#x3D; 0x664624f6W30 &#x3D; 0x21c37eaaW31 &#x3D; 0x53e59ba6W32 &#x3D; 0x1cd612bW33 &#x3D; 0xf5595f41W34 &#x3D; 0x61c99c2W35 &#x3D; 0xf21b00a9W36 &#x3D; 0xb42ee9bbW37 &#x3D; 0x67966a1aW38 &#x3D; 0xd132a24cW39 &#x3D; 0xb3235961W40 &#x3D; 0x2371fd7eW41 &#x3D; 0x57415c75W42 &#x3D; 0x3437eaa1W43 &#x3D; 0x3e59bb45W44 &#x3D; 0x2957db08W45 &#x3D; 0xcc047fd6W46 &#x3D; 0x9eca0d11W47 &#x3D; 0x79908d1cW48 &#x3D; 0xd148f483W49 &#x3D; 0x9d921d19W50 &#x3D; 0xff2a2f89W51 &#x3D; 0xf5384aeaW52 &#x3D; 0xa3b31bcdW53 &#x3D; 0xcf36c649W54 &#x3D; 0x33623193W55 &#x3D; 0x7c83278aW56 &#x3D; 0x12704a2aW57 &#x3D; 0x8fd19775W58 &#x3D; 0x3d927355W59 &#x3D; 0x2a2b88a6W60 &#x3D; 0x37feb543W61 &#x3D; 0x8e608facW62 &#x3D; 0xad96814eW63 &#x3D; 0x5efe0599W64 &#x3D; 0x64e43d19W65 &#x3D; 0x95da8390W66 &#x3D; 0x7fea8510W67 &#x3D; 0xe9827238W68 &#x3D; 0x65ea391aW69 &#x3D; 0x847fd6feW70 &#x3D; 0xca0d119eW71 &#x3D; 0x908d18f9W72 &#x3D; 0x9ef3a531W73 &#x3D; 0xf45b1bbbW74 &#x3D; 0xca16b7ffW75 &#x3D; 0xa675a007W76 &#x3D; 0x17b22d58W77 &#x3D; 0x3defd669W78 &#x3D; 0x4a141b9dW79 &#x3D; 0x98376750\n80轮运算A &#x3D; 0x67452301 &#x3D; 0110 0111 0100 0101 0010 0011 0000 0001B &#x3D; 0xEFCDAB89 &#x3D; 1110 1111 1100 1101 1010 1011 1000 1001C &#x3D; 0x98BADCFE &#x3D; 1001 1000 1011 1010 1101 1100 1111 1110D &#x3D; 0x10325476 &#x3D; 0001 0000 0011 0010 0101 0100 0111 0110E &#x3D; 0xC3D2E1F0 &#x3D; 1100 0011 1101 0010 1110 0001 1111 0000\n\n\n\n计算轮次\n计算的步数\n计算函数\n计算常数\n\n\n\n第一轮\n0≤t≤19步\nft(B,C,D)&#x3D;(B&amp;C)&amp;#124;(~B&amp;D)\n_K_t&#x3D;0x5A827999\n\n\n第二轮\n20≤t≤39步\nft(B,C,D)&#x3D;B⊕C⊕D\n_K_t&#x3D;0x6ED9EBA1\n\n\n第三轮\n40≤t≤59步\nft(B,C,D)&#x3D;(B&amp;C)&amp;#124;(B&amp;D)&amp;#124;(C&amp;D)\n_K_t&#x3D;0x8F188CDC\n\n\n第四轮\n60≤t≤79步\nft(B,C,D)&#x3D;B⊕C⊕D\n_K_t&#x3D;0xCA62C1D6\n\n\n第一轮第一步A&lt;&lt;&lt;5 &#x3D;&#x3D;&gt; 1110 1000 1010 0100 0110 0000 0010 1100B&amp;C &#x3D; 1000 1000 1000 1000 1000 1000 1000 1000B&amp;D&#x3D; 0001 0000 0011 0010 0101 0100 0111 0110ft(B,C,D) &#x3D; (B&amp;C)|(B&amp;D) &#x3D; 1001 1000 1011 1010 1101 1100 1111 1110H0 &#x3D; 0x2D3E4D1EA（保留末8位）&#x3D; 0x D3E4D1EAH1 &#x3D; 0x67452301H2 &#x3D; 0x7BF36AE2H3 &#x3D; 0x98BADCFEH4 &#x3D; 0x10325476把H0-H4重新赋值给A,B,C,D,EA &#x3D; H0B &#x3D; H1C &#x3D; H2D &#x3D; H3E &#x3D; H4…第80轮A &#x3D; 0x135B4514 &#x3D; 0001 0011 0101 1011 0100 0101 0001 0100B &#x3D; 0xCE03E912 &#x3D; 1100 1110 0000 0011 1110 1001 0001 0010C &#x3D; 0xD50D5F9A &#x3D; 1101 0101 0000 1101 0101 1111 1001 1010D &#x3D; 0xD940C253 &#x3D; 1101 1001 0100 0000 1100 0010 0101 0011E &#x3D; 0x36F72811 &#x3D; 0011 0110 1111 0111 0010 1000 0001 0001\nA&lt;&lt;&lt;5 &#x3D; 0110 1011 0110 1000 1010 0010 1000 0010ft(B,C,D)&#x3D;B⊕C⊕D &#x3D; 1100 0010 0100 1110 0111 0100 1101 1011W79 &#x3D; 0x98376750K79 &#x3D; 0xCA62C1D6H0 &#x3D; 0xC7486894H1 &#x3D;  0x135B4514H2 &#x3D; 1011 0011 1000 0000 1111 1010 0100 0100 &#x3D; 0xB380FA44H3 &#x3D; 0xD50D5F9AH4 &#x3D; 0xD940C253 \n最后的H0-H4要加上一开始的模值a &#x3D; H0+A &#x3D; 0x2E8D8B95b &#x3D; H1+B &#x3D;0x0328F09Dc &#x3D; H2+C &#x3D; 0x4C3BD742d &#x3D; H3+D &#x3D; 0xE53FB410e &#x3D; H4+E &#x3D; 0x9D13A443abcde &#x3D; 2E8D8B950328F09D4C3BD742E53FB4109D13A443              2e8d8b950328f09d4c3bd742e53fb4109d13a443结果一致\npython实现sha1# 0xffffffff is used to make sure numbers dont go over 32def chunks(messageLength, chunkSize):    chunkValues = []    for i in range(0, len(messageLength), chunkSize):        chunkValues.append(messageLength[i:i + chunkSize])    return chunkValuesdef leftRotate(chunk, rotateLength):    return ((chunk &lt;&lt; rotateLength) | (chunk &gt;&gt; (32 - rotateLength))) &amp; 0xffffffffdef sha1Function(message):    # initial hash values    h0 = 0x67452301    h1 = 0xEFCDAB89    h2 = 0x98BADCFE    h3 = 0x10325476    h4 = 0xC3D2E1F0    messageLength = &quot;&quot;    # preprocessing    for char in range(len(message)):        messageLength += &#x27;&#123;0:08b&#125;&#x27;.format(ord(message[char]))    temp = messageLength    messageLength += &#x27;1&#x27;    while (len(messageLength) % 512 != 448):        messageLength += &#x27;0&#x27;    messageLength += &#x27;&#123;0:064b&#125;&#x27;.format(len(temp))    chunk = chunks(messageLength, 512)    for eachChunk in chunk:        words = chunks(eachChunk, 32)        w = [0] * 80        for n in range(0, 16):            w[n] = int(words[n], 2)        for i in range(16, 80):            # sha1            w[i] = leftRotate((w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16]), 1)            # sha0            # w[i] = (w[i - 3] ^ w[i - 8] ^ w[i - 14] ^ w[i - 16])            # Initialize hash value for this chunk:        a = h0        b = h1        c = h2        d = h3        e = h4        # main loop:        for i in range(0, 80):            if 0 &lt;= i &lt;= 19:                f = (b &amp; c) | ((~b) &amp; d)                k = 0x5A827999            elif 20 &lt;= i &lt;= 39:                f = b ^ c ^ d                k = 0x6ED9EBA1            elif 40 &lt;= i &lt;= 59:                f = (b &amp; c) | (b &amp; d) | (c &amp; d)                k = 0x8F1BBCDC            elif 60 &lt;= i &lt;= 79:                f = b ^ c ^ d                k = 0xCA62C1D6            a, b, c, d, e = ((leftRotate(a, 5) + f + e + k + w[i]) &amp; 0xffffffff, a, leftRotate(b, 30), c, d)        h0 = h0 + a &amp; 0xffffffff        h1 = h1 + b &amp; 0xffffffff        h2 = h2 + c &amp; 0xffffffff        h3 = h3 + d &amp; 0xffffffff        h4 = h4 + e &amp; 0xffffffff    return &#x27;%08x%08x%08x%08x%08x&#x27; % (h0, h1, h2, h3, h4)if __name__ == &#x27;__main__&#x27;:    plainText = &quot;409732112&quot;    sha1Hash = sha1Function(plainText)    print(sha1Hash)\n","tags":["算法"]},{"title":"MD5源码分析及流程","url":"/posts/14604/","content":"MD5算法实现：输入：不定长度信息（要加密的信息）\n输出：固定长度128-bits。由四个32位分组组成，将这四个32位分组级联后将生成一个128位散列值。\n基本方式为：求余、取余、调整长度、与链接变量进行循环运算。得出结果。\n\n\n\n填充在MD5算法中，首先需要对输入信息进行填充，使其位长对512求余的结果等于448，并且填充必须进行，即使其位长对512求余的结果等于448。因此，信息的位长（Bits Length）将被扩展至N*512+448，N为一个非负整数，N可以是零。\n填充的方法如下：\n\n在信息的后面填充一个1和无数个0，直到满足上面的条件时才停止用0对信息的填充。\n在这个结果后面附加一个以64位二进制表示的填充前信息长度（明文的长度，单位为Bit），如果二进制表示的填充前信息长度超过64位，则取低64位\n\n经过这两步的处理，信息的位长&#x3D;N512+448+64&#x3D;(N+1）512，即长度恰好是512的整数倍。这样做的原因是为满足后面处理中对信息长度的要求。\n\n\n初始化变量（变量值一般不变）初始的128位值为初试链接变量，这些参数用于第一轮的运算，以大端字节序来表示，他们分别为： \nA&#x3D;0x01234567，\nB&#x3D;0x89ABCDEF，\nC&#x3D;0xFEDCBA98，\nD&#x3D;0x76543210。\n（每一个变量给出的数值是高字节存于内存低地址，低字节存于内存高地址，即大端字节序。在程序中变量A、B、C、D的值分别为0x67452301，0xEFCDAB89，0x98BADCFE，0x10325476）\n\n\n处理分组数据\n\n消息分以512位为一分组进行处理，每一个分组进行上述4轮共64次计算后，将A，B，C，D分别加上计算得到的a，b，c，d。当做新的A，B，C，D，并将这4个变量赋值给a,b,c,d再进行下一分组的运算。由于填充后的消息长度为(N+1)*512，则共需计算N+1个分组。计算所有数据分组后，这4个变量为最后的结果，即MD5值。\n\n\n每一分组的算法流程如下：\n（1）第一分组需要将上面四个链接变量复制到另外四个变量中：A到a，B到b，C到c，D到d。\n（2）从第二分组开始的变量为上一分组的运算结果，即A &#x3D; a， B &#x3D; b， C &#x3D; c， D &#x3D; d。\n主循环有四轮（MD4只有三轮），每轮循环都很相似。第一轮进行16次操作。每次操作对a、b、c和d中的其中三个作一次非线性函数运算，然后将所得结果加上第四个变量，文本的一个子分组和一个常数。再将所得结果向左环移一个不定的数，并加上a、b、c或d中之一。最后用该结果取代a、b、c或d中之一。\n\n\n一个MD5运算由类似的64次循环构成，分成4组16次。\nF ：一个非线性函数，一个函数运算一次\nMi ：表示一个 32-bits 的输入数据\nKi：表示一个 32-bits 常数，用来完成每次不同的计算。\n\n说明：\n\n\n( (a + 线性函数(b,c,d) + Mj + Ki) &lt;&lt; s) + a &#x3D;&#x3D; B\n\n\n以下是每次操作中用到的四个非线性函数（每轮一个）。\nF( X ,Y ,Z ) &#x3D; ( X &amp; Y ) | ( (~X) &amp; Z )  &#x3D;&#x3D;&gt; If X then Y else Z\nG( X ,Y ,Z ) &#x3D; ( X &amp; Z ) | ( Y &amp; (~Z) )  &#x3D;&#x3D;&gt; If Z then X else Y\nH( X ,Y ,Z ) &#x3D;X ^ Y ^ Z  &#x3D;&#x3D;&gt; If X&#x3D;Y then Z else ~Z\nI( X ,Y ,Z ) &#x3D;Y ^ ( X | (~Z) )\n（&amp;是与（And），|是或（Or），~是非（Not），^是异或（Xor））\n\n\n\n\n\n\n\n\n\n&amp;\n与\n两个位都为1时，结果才为1\n\n\n|\n或\n两个位都为0时，结果才为0\n\n\n^\n异或\n两个位相同为0，相异为1\n\n\n~\n取反\n0变1，1变0\n\n\n&lt;&lt;&lt;\n循环左移\n将移出的低位放到该数的高位\n\n\n循环左移:\n\n这四个函数的说明：如果X、Y和Z的对应位是独立和均匀的，那么结果的每一位也应是独立和均匀的。F是一个逐位运算的函数。即，如果X，那么Y，否则Z。函数H是逐位奇偶操作符。假设Mj表示消息的第j个子分组（从0到15），常数ti是4294967296*abs( sin(i) ）的整数部分，i 取值从1到64，单位是弧度。（4294967296&#x3D;2^(32)）\n\n现定义：\nFF(a ,b ,c ,d ,Mj ,s ,ti ) 操作为 a = b + ( (a + F(b,c,d) + Mj + ti) < s)","tags":["算法"]},{"title":"Base64编码与解码源码分析","url":"/posts/51977/","content":"介绍Base64是一种基于64个可打印字符来表示二进制数据的表示方法，是一种编码方式，提及编码方式，必然有其对应的字符集合。在Base64编码中，相互映射的两个集合是：\n\n二进制数据{0, 1}\n\n{A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, +, &#x2F;}\n\n\nBase64编码方式可使得信息在这两种字符集表示法之间相互等价转换。\n\n\nBase64编码过程由于base64的字符集大小为64，那么，需要6个比特的二进制数作为一个基本单元表示一个base64字符集中的字符。因为6个比特有2^6&#x3D;64种排列组合。\n具体来说，编码过程如下：\n\n将每三个字节作为一组，共24bit，若不足24bit在其后补充0；\n将这24个bit分为4组，每一组6个bit；\n在每组前加00扩展为8个bit，形成4个字节，每个字节表示base64字符集索引；\n扩展后的8bit表示的整数作为索引，对应base64字符集的一个字符，这就是base64编码值；在处理最后的不足3字节时，缺一个字节索引字节取3个，最后填充一个&#x3D;，；缺两个字节取2个索引字节，最后填充&#x3D;&#x3D;。\n\n解码时将过程逆向即可。\nBase64索引表：\n\n\n\nASCII码表\n\n\n\n\n\n\n编码示例示例一Man的base64编码\n\n\n第一步，’M’, ‘a’, ‘n’的ASCII值分别为77, 97, 110，对应的二进制值分别为：01001101, 01100001, 01101110；取三个字节共24bit：010011010110000101101110\n第二步，将这24bit分为4组，每组6个bit：010011, 010110, 000101, 101110\n每组前面加00，形成4个字节的，00010011, 00010110, 00000101, 00101110, 即19, 22, 5, 46\n根据索引表，对应的base64字符分别是T, W, F, u最后的base64字符串是: TWFu。\n\n解码时将过程逆向即可。\n\n\n示例二剩余两个字节，BC的base64编码 \n\n\n第一步，’B’, ‘C’的ASCII值分别为66, 64, 对应二进制值分别为：01000010, 01000011；取三个字节，不足不0，共24bit：01000010, 01000011, 00000000\n第二步，将这24bit分为4组，每组6个bit：010000, 100100, 001100, 000000\n每组前面加00，形成4个字节的，00010000, 00100100, 00001100, 00000000，即16, 36, 12, 0\n由于’B’, ‘C’只有两个字节，缺一个字节，因此取3个索引；根据索引表，对应的base64字符分别是Q, k, M，最后填充一个&#x3D;\n\n最后的base64字符串是：QkM&#x3D;\n\n\n示例三剩余一个字节，A的base64编码 \n\n\n第一步，’A’的ASCII值65, 对应二进制值为：01000001; 取三个字节，不足不0，共24bit：01000001, 00000000, 00000000\n第二步，将这24bit分为4组，每组6个bit：010000, 010000, 000000, 000000\n每组前面加00，形成4个字节的，00010000, 00010000, 00000000, 00000000，即16, 16, 0, 0\n由于’A’只有一个字节，缺两个字节，因此取2个索引；根据索引表，对应的base64字符分别是Q, Q，最后填充&#x3D;&#x3D;\n\n 最后的base64字符串是：QQ&#x3D;&#x3D;\n\n\nPython实现base64编码方式一：&quot;&quot;&quot;base64实现encode: 先编码，十进制化(汉字在utf-8编码下占三个字节，在gbk编码下占两个字节)，再转二进制进行+0填充后合并，不足6的倍数继续填充，切片，十进制化查表，拼接,不足4的倍数填充=&quot;&quot;&quot;def fillIt(string, factor, item):    &quot;&quot;&quot;    指定倍数填充指定字符    string：原字符串    factor：倍数    item：填充字符    &quot;&quot;&quot;    length = len(string)    remainder = length % factor    if remainder:        times = factor - remainder        string = string + times * item    return stringdef splitIt(string, bits):    &quot;&quot;&quot;    指定位数切片    string：原字符串    bits：每次切片数量    &quot;&quot;&quot;    length = len(string)    new_list = []    for i in range(bits, length + 1, bits):        new_list.append(string[i - bits:i])        remain = length % bits        if remain != 0:            new_list.append(string[-remain:])    return new_listdef encode(string):    string_temp = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;    # 索引编码表    base64_dict = &#123;&#125;    for i in range(2 ** 6):        base64_dict[i] = string_temp[i]        # 编码    string_encode_byte = string.encode(&#x27;utf-8&#x27;)    # 十进制化    string_digit_list = list(string_encode_byte)    # 二进制化 + 0填充到8位    string_bin_list = []    for item in string_digit_list:        string_bin_list.append(str(bin(item))[2:].zfill(8))        # 字符串合并    string_sum = &#x27;&#x27;.join(string_bin_list)    # 6 的倍数，不足 0 填充    string_fill = fillIt(string_sum, factor=6, item=&#x27;0&#x27;)    # 切片，6位一个单位    string_bin_list2 = splitIt(string_fill, bits=6)    # 十进制化    string_digit_list2 = []    for item in string_bin_list2:        string_digit_list2.append(int(item, 2))        # 查表    string_base64_list = []    for item in string_digit_list2:        string_base64_list.append(base64_dict[item])        # 拼接    string_sum2 = &#x27;&#x27;.join(string_base64_list)    # 4 的倍数，不足填充 =    string_convert = fillIt(string_sum2, factor=4, item=&#x27;=&#x27;)    return string_convertif __name__ == &#x27;__main__&#x27;:    print(encode(&quot;123啊a&quot;))\n\n\n\nbase64编码方式二：base64_charset = &#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;def encode(string):    &quot;&quot;&quot;    将bytes类型编码为base64    :param string:需要编码的字符串    :return:base64字符串    &quot;&quot;&quot;    # 对字符串转字节    origin_bytes = string.encode()    # 将每一位bytes转换为二进制字符串, &#x27;&#123;:0&gt;8&#125;&#x27;.format(str) 填充到8位    base64_bytes = [&#x27;&#123;:0&gt;8&#125;&#x27;.format(str(bin(b)).replace(&#x27;0b&#x27;, &#x27;&#x27;)) for b in origin_bytes]    resp = &#x27;&#x27;    nums = len(base64_bytes) // 3    remain = len(base64_bytes) % 3  # 余数    integral_part = base64_bytes[0:3 * nums]  # 取3的倍数分组    while integral_part:        # 取三个字节，以每6比特，转换为4个整数（直接转换位十进制，不填充到8位在转十进制）, 对码表进行查找        tmp_unit = &#x27;&#x27;.join(integral_part[0:3])        tmp_unit = [int(tmp_unit[x: x + 6], 2) for x in [0, 6, 12, 18]]        # 取对应base64字符        resp += &#x27;&#x27;.join([base64_charset[i] for i in tmp_unit])        integral_part = integral_part[3:]    if remain:        # 补齐三个字节，每个字节补充 0000 0000        remain_part = &#x27;&#x27;.join(base64_bytes[3 * nums:]) + (3 - remain) * &#x27;0&#x27; * 8        # 取三个字节，以每6比特，转换为4个整数        # 剩余1字节可构造2个base64字符，补充==；剩余2字节可构造3个base64字符，补充=        tmp_unit = [int(remain_part[x: x + 6], 2) for x in [0, 6, 12, 18]][:remain + 1]        resp += &#x27;&#x27;.join([base64_charset[i] for i in tmp_unit]) + (3 - remain) * &#x27;=&#x27;    return respif __name__ == &#x27;__main__&#x27;:    s = &quot;123啊a&quot;print(encode(s))\n\n\n\nbase64解码方式三：def decode(base64_str):    &quot;&quot;&quot;    解码base64字符串    :param base64_str:base64字符串    :return:解码后的bytearray；若入参不是合法base64字符串，返回空bytearray    &quot;&quot;&quot;    # 判断是否符合base64的格式    if len(base64_str) % 4:        return        # 去除末尾=    while True:        if base64_str[len(base64_str)-1:] == &quot;=&quot;:            base64_str = base64_str[:len(base64_str)-1]            continue        break        # 遍历判断字符串元素是否在编码表里    for m in base64_str:        if m not in base64_str:            return            # 对每一个base64字符取下标索引，并转换为6为二进制字符串    base64_bytes = [&#x27;&#123;:0&gt;6&#125;&#x27;.format(str(bin(base64_charset.index(s))).replace(&#x27;0b&#x27;, &#x27;&#x27;)) for s in base64_str if s != &#x27;=&#x27;]    resp = bytearray()    nums = len(base64_bytes) // 4    remain = len(base64_bytes) % 4    # 截取4的整数倍    integral_part = base64_bytes[0:4 * nums]    while integral_part:        # 取4个6位base64字符，作为3个字节        tmp_unit = &#x27;&#x27;.join(integral_part[0:4])        tmp_unit = [int(tmp_unit[x: x+8], 2) for x in [0, 8, 16]]        for i in tmp_unit:            resp.append(i)        integral_part = integral_part[4:]        # 取剩余的    if remain:        remain_part = &#x27;&#x27;.join(base64_bytes[nums*4:])        tmp_unit = [int(remain_part[i*8:(i+1)*8], 2) for i in range(remain-1)]        for i in tmp_unit:            resp.append(i)    return resp.decode()\n\n\n\nc++实现//// Created by zsk on 2022/9/13.//#include &lt;iostream&gt;#include &lt;cstring&gt;class Base64 &#123;public://base64 加密static void encode(const char *data, char *out) &#123;    char Base64Code[] = &#123;    &#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;, &#x27;D&#x27;, &#x27;E&#x27;, &#x27;F&#x27;, &#x27;G&#x27;, &#x27;H&#x27;, &#x27;I&#x27;, &#x27;J&#x27;, &#x27;K&#x27;, &#x27;L&#x27;, &#x27;M&#x27;, &#x27;N&#x27;, &#x27;O&#x27;, &#x27;P&#x27;,    &#x27;Q&#x27;, &#x27;R&#x27;, &#x27;S&#x27;, &#x27;T&#x27;, &#x27;U&#x27;, &#x27;V&#x27;, &#x27;W&#x27;, &#x27;X&#x27;, &#x27;Y&#x27;, &#x27;Z&#x27;, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;,    &#x27;g&#x27;, &#x27;h&#x27;, &#x27;i&#x27;, &#x27;j&#x27;, &#x27;k&#x27;, &#x27;l&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;o&#x27;, &#x27;p&#x27;, &#x27;q&#x27;, &#x27;r&#x27;, &#x27;s&#x27;, &#x27;t&#x27;, &#x27;u&#x27;, &#x27;v&#x27;,    &#x27;w&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, &#x27;0&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;9&#x27;, &#x27;+&#x27;, &#x27;/&#x27;,&#125;;    // 计算长度    int data_len = strlen(data);    if (data_len == 0) &#123;        out[0] = &#x27;\\0&#x27;;        return;    &#125;    int i;    //主编码循环, &amp; 同为 1 的位，结果为 1，否则结果为 0。 | 只要有1个是1的位，结果为1，否则为0    for (i = 0; i &lt; data_len / 3; ++i) &#123;        out[i * 4] = Base64Code[data[i * 3] &gt;&gt; 2];        out[i * 4 + 1] = Base64Code[((data[i * 3] &amp; 0x03) &lt;&lt; 4) | (data[i * 3 + 1] &gt;&gt; 4)];        out[i * 4 + 2] = Base64Code[((data[i * 3 + 1] &amp; 0x0F) &lt;&lt; 2) | (data[i * 3 + 2]) &gt;&gt; 6];        out[i * 4 + 3] = Base64Code[data[i * 3 + 2] &amp; 0x3F];    &#125;    //长度不为3的倍数    if (data_len % 3 == 1) &#123;        out[i * 4] = Base64Code[data[i * 3] &gt;&gt; 2];        out[i * 4 + 1] = Base64Code[((data[i * 3] &amp; 0x03) &lt;&lt; 4)];        out[i * 4 + 2] = &#x27;=&#x27;;        out[i * 4 + 3] = &#x27;=&#x27;;    &#125;    if (data_len % 3 == 2) &#123;        out[i * 4] = Base64Code[data[i * 3] &gt;&gt; 2];        out[i * 4 + 1] = Base64Code[((data[i * 3] &amp; 0x03) &lt;&lt; 4) | (data[i * 3 + 1] &gt;&gt; 4)];        out[i * 4 + 2] = Base64Code[((data[i * 3 + 1] &amp; 0x0F) &lt;&lt; 2)];        out[i * 4 + 3] = &#x27;=&#x27;;    &#125;&#125;//base64 解密static void decode(const char *data, char *out) &#123;    static char _ucode[] = &#123;    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 0, 0, 0, 63,    52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 64, 0, 0,    0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,    15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 0, 0, 0, 0,    0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,    41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 0, 0, 0, 0, 0,&#125;;    int i;    int len = strlen(data);    ptrdiff_t len2 = len / 4 * 3;    //判断末位是否有等号、有几个等号    if (&#x27;=&#x27; == data[len - 2])        len2 -= 2;    else if (&#x27;=&#x27; == data[len - 1])        len2--;    else if (len % 4)        len2 += (len % 4 - 1);    //主解密循环    for (i = 0; i &lt; len2 / 3; ++i) &#123;        out[i * 3] = (_ucode[data[i * 4]] &lt;&lt; 2) | (_ucode[data[i * 4 + 1]] &gt;&gt; 4);        out[i * 3 + 1] = ((_ucode[data[i * 4 + 1]] &amp; 0x0F) &lt;&lt; 4) | (_ucode[data[i * 4 + 2]] &gt;&gt; 2);        out[i * 3 + 2] = ((_ucode[data[i * 4 + 2]] &amp; 0x03) &lt;&lt; 6) | (_ucode[data[i * 4 + 3]]);            &#125;            //末位为一个或两个等号的情况，这时候不能通过主解密循环进行解密            if (len2 % 3 == 1) &#123;            out[i * 3] = (_ucode[data[i * 4]] &lt;&lt; 2) | (_ucode[data[i * 4 + 1]] &gt;&gt; 4);            &#125;            if (len2 % 3 == 2) &#123;            out[i * 3] = (_ucode[data[i * 4]] &lt;&lt; 2) | (_ucode[data[i * 4 + 1]] &gt;&gt; 4);            out[i * 3 + 1] = ((_ucode[data[i * 4 + 1]] &amp; 0x0F) &lt;&lt; 4) | (_ucode[data[i * 4 + 2]] &gt;&gt; 2);            &#125;            &#125;            &#125;;            int main() &#123;            const char *text = &quot;12345&quot;;            char out[100] = &#123;0&#125;;            char out2[100] = &#123;0&#125;;            Base64::encode(text, out);            printf(&quot;encode==&gt;%s\\n&quot;, out);            Base64::decode(out, out2);            printf(&quot;decode==&gt;%s&quot;, out2);            &#125;\n\n\n\n中文的base64编码\n\n其实base64编码只是在二进制与base64字符集之间映射的编码，与其他字符集毫无关系。其他字符集想要转换为base64编码，只需先将其转换为二进制，再做base64编码即可。\n\n\n那么对于Unicode字符集而言，有多种编码方式将其装换为二进制，所以在编码过程中就需要统一编码，以免造成乱码。上述Python示例就将中文转换为base64，首先使用默认编码utf-8将字符串转换为二进制（使用Python的str.encode()），再做base64编码；解码时候同样如此，先将base64字符串解码为二进制，再将二进制转换为字符串（使用Python的str.decode()）\n","tags":["算法"]},{"title":"jni接口比较(Jnitrace/Frida/ExAndroidNativeEmu/Unidbg)","url":"/posts/22516/","content":"\n它们是如何处理&#x2F;实现jni几百个接口函数的？\n\n它们能hook&#x2F;主动调用JNI接口函数么？\n\n它们是如何找到jni(动)静态注册的Native函数的？\n\n它们能hook动(静)态注册的Native函数么？\n\n它们能主动调用动(静)态注册的Native函数么？\n\n首先定义：\n\nJava层的Native函数\nenv、vm → jni接口函数\njni静态函数、jni动态函数\n纯native函数\n\n\n\nFrida\njnitrace\nExAndroidNativeEmu\nUnidbg\n\n\n\n可以跑完整的apk么？\n⚪\n⚪\n×\n×\n\n\n可以hook Java么？查看参调返\n⚪\nx\nx\n×\n\n\n可以hook JNI接口函数么？查看参调返\n⚪\n⚪\n⚪\n⚪\n\n\n可以主动调用JNI接口函数么？获取返回值\n⚪\nx\n⚪\n⚪\n\n\n如何找到静态绑定的Native函数？\ndlopen&#x2F;dlsym\ndlsym\nModule\nModule\n\n\n如何找到动态绑定的Native函数？\nhook RegisterNatives\nhook RegisterNatives\nhook RegisterNatives\nhook RegisterNatives\n\n\n如何hook(动)静态注册的Native函数？\n⚪\n⚪\nx\n⚪\n\n\n如何主动调用(动)静态注册的Native函数？\n⚪\nx\n⚪\n⚪\n\n\n\n\n\nFrida中JNI接口的实现细节\n\n\nhttps://github.com/frida/frida-java-bridge/blob/master/lib/env.js#L362linux动态库函数dlopen与dlsym使用https://blog.csdn.net/lanhuazui10/article/details/117849995\nfrida hook javafunction hookJava()&#123;    Java.perform(function()&#123;        Java.use(&quot;com.roysue.easyso1.MainActivity&quot;).method01.implementation = function(str)&#123;            console.log(&quot;str:&quot;, str)            var result = this.method01(str);            console.log(&quot;result:&quot;, result);            return result;        &#125;    &#125;)&#125;\n\nfrida invoke javafunction invokeJava()&#123;    Java.perform(function()&#123;        var result = Java.use(&quot;com.roysue.easyso1.MainActivity&quot;).decrypt(&quot;82e8edd5b05654bf0fedcdfc1c9b4b0f&quot;);        console.log(&quot;result:&quot;, result)    &#125;)&#125;\n\nfrida hook jnifunction find_RegisterNatives(params) &#123;    var symbols = Module.enumerateSymbolsSync(&quot;libart.so&quot;);    var addrRegisterNatives = null;    for (var i = 0; i &lt; symbols.length; i++) &#123;        var symbol = symbols[i];        //_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi        if (symbol.name.indexOf(&quot;art&quot;) &gt;= 0 &amp;&amp;                symbol.name.indexOf(&quot;JNI&quot;) &gt;= 0 &amp;&amp;                 symbol.name.indexOf(&quot;RegisterNatives&quot;) &gt;= 0 &amp;&amp;                 symbol.name.indexOf(&quot;CheckJNI&quot;) &lt; 0) &#123;            addrRegisterNatives = symbol.address;            console.log(&quot;RegisterNatives is at &quot;, symbol.address, symbol.name);            hook_RegisterNatives(addrRegisterNatives)        &#125;    &#125;&#125;function hook_RegisterNatives(addrRegisterNatives) &#123;    if (addrRegisterNatives != null) &#123;        Interceptor.attach(addrRegisterNatives, &#123;            onEnter: function (args) &#123;                console.log(&quot;[RegisterNatives] method_count:&quot;, args[3]);                var env = args[0];                var java_class = args[1];                var class_name = Java.vm.tryGetEnv().getClassName(java_class);                //console.log(class_name);                var methods_ptr = ptr(args[2]);                var method_count = parseInt(args[3]);                for (var i = 0; i &lt; method_count; i++) &#123;                    var name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3));                    var sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize));                    var fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize * 2));                    var name = Memory.readCString(name_ptr);                    var sig = Memory.readCString(sig_ptr);                    var find_module = Process.findModuleByAddress(fnPtr_ptr);                    console.log(&quot;[RegisterNatives] java_class:&quot;, class_name, &quot;name:&quot;, name, &quot;sig:&quot;, sig, &quot;fnPtr:&quot;, fnPtr_ptr,  &quot; fnOffset:&quot;, ptr(fnPtr_ptr).sub(find_module.base), &quot; callee:&quot;, DebugSymbol.fromAddress(this.returnAddress));                &#125;            &#125;        &#125;);    &#125;&#125;setImmediate(find_RegisterNatives);\n\nfrida hook  纯native静态，动态函数（dlopen）动态函数初始化只执行一次，需要hook dlopen（来判断so是否加载）\nfunction hook_Native_JNi()&#123;    Java.perform(function()&#123;        var method01 = Module.findExportByName(&quot;libroysue.so&quot;, &quot;Java_com_roysue_easyso1_MainActivity_method01&quot;);        var method02 = Module.findExportByName(&quot;libroysue.so&quot;, &quot;_Z8method02P7_JNIEnvP7_jclassP8_jstring&quot;);        console.log(&quot;method01 address:&quot;, method01)        console.log(&quot;method02 address:&quot;, method02)        if(method01)&#123;            Interceptor.attach(method01, &#123;                onEnter: function(args)&#123;                    // env-&gt;GetStringUTFChars(str_, JNI_FALSE)                    console.log(&quot;method01 args[2] ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(args[2], null).readCString())                &#125;,                onLeave: function(retval)&#123;                    console.log(&quot;method01 retval ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(retval, null).readCString())                &#125;            &#125;)        &#125;        if(method02)&#123;            Interceptor.attach(method02, &#123;                onEnter: function(args)&#123;                    console.log(&quot;method02 args[2] ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(args[2], null).readCString())                &#125;,                onLeave: function(retval)&#123;                    console.log(&quot;method02 retval ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(retval, null).readCString())                &#125;            &#125;)        &#125;    &#125;)&#125;function hook_dlopen(module_name, fun) &#123;    //安卓高版本需要同时hook android_dlopen_ext    var android_dlopen_ext = Module.findExportByName(null, &quot;android_dlopen_ext&quot;);    if (android_dlopen_ext) &#123;        Interceptor.attach(android_dlopen_ext, &#123;            onEnter: function (args) &#123;                var pathptr = args[0];                if (pathptr) &#123;                    this.path = (pathptr).readCString();                    if (this.path.indexOf(module_name) &gt;= 0) &#123;                        this.canhook = true;                        console.log(&quot;android_dlopen_ext:&quot;, this.path);                    &#125;                &#125;            &#125;,            onLeave: function (retval) &#123;                if (this.canhook) &#123;                    fun();                &#125;            &#125;        &#125;);    &#125;    var dlopen = Module.findExportByName(null, &quot;dlopen&quot;);    if (dlopen) &#123;        Interceptor.attach(dlopen, &#123;            onEnter: function (args) &#123;                var pathptr = args[0];                if (pathptr) &#123;                    this.path = (pathptr).readCString();                    console.log(&quot;dlopen:&quot;, this.path)                    if (this.path.indexOf(module_name) &gt;= 0) &#123;                        this.canhook = true;                        console.log(&quot;dlopen:&quot;, this.path);                    &#125;                &#125;            &#125;,            onLeave: function (retval) &#123;                if (this.canhook) &#123;                    fun();                &#125;            &#125;        &#125;);    &#125;    console.log(&quot;android_dlopen_ext:&quot;, android_dlopen_ext, &quot;dlopen:&quot;, dlopen);&#125;function main()&#123;    // hookJava()    hook_dlopen(&quot;libroysue.so&quot;, hook_Native_JNi)&#125;\n\nfrida hook 纯native静态，动态函数（libart，RegisterNatives）通过hook libart下的RegisterNatives来hook动态函数，动态函数加载后，静态函数已经加载了.init .init_array, so feature - dlopen dlsymjni JNI_Onload &#x3D; RegisterNatives\nfunction find_RegisterNatives() &#123;    var symbols = Module.enumerateSymbolsSync(&quot;libart.so&quot;);    var addrRegisterNatives = null;    for (var i = 0; i &lt; symbols.length; i++) &#123;        var symbol = symbols[i];                //_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi        if (symbol.name.indexOf(&quot;art&quot;) &gt;= 0 &amp;&amp;                symbol.name.indexOf(&quot;JNI&quot;) &gt;= 0 &amp;&amp;                 symbol.name.indexOf(&quot;RegisterNatives&quot;) &gt;= 0 &amp;&amp;                 symbol.name.indexOf(&quot;CheckJNI&quot;) &lt; 0) &#123;            addrRegisterNatives = symbol.address;            console.log(&quot;RegisterNatives is at &quot;, symbol.address, symbol.name);            hook_RegisterNatives(addrRegisterNatives)        &#125;    &#125;&#125;function hook_RegisterNatives(addrRegisterNatives) &#123;    if (addrRegisterNatives != null) &#123;        Interceptor.attach(addrRegisterNatives, &#123;            onEnter: function (args) &#123;                console.log(&quot;[RegisterNatives] method_count:&quot;, args[3]);                var env = args[0];                var java_class = args[1];                var class_name = Java.vm.tryGetEnv().getClassName(java_class);                //console.log(class_name);                var methods_ptr = ptr(args[2]);                var method_count = parseInt(args[3]);                for (var i = 0; i &lt; method_count; i++) &#123;                    var name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3));                    var sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize));                    var fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize * 2));                    var name = Memory.readCString(name_ptr);                    var sig = Memory.readCString(sig_ptr);                    var find_module = Process.findModuleByAddress(fnPtr_ptr);                    console.log(&quot;[RegisterNatives] java_class:&quot;, class_name, &quot;name:&quot;, name, &quot;sig:&quot;, sig, &quot;fnPtr:&quot;, fnPtr_ptr,  &quot; fnOffset:&quot;, ptr(fnPtr_ptr).sub(find_module.base), &quot; callee:&quot;, DebugSymbol.fromAddress(this.returnAddress));                    if (name.indexOf(&quot;decrypt&quot;) &gt;= 0)&#123;                        var method02addr = fnPtr_ptr;                        var method01addr = Module.findExportByName(&quot;libroysue.so&quot;, &quot;Java_com_roysue_easyso1_MainActivity_method01&quot;);                        console.log(&quot;method01 address:&quot;, method02addr)                        console.log(&quot;method02 address:&quot;, method01addr)                        if(method01addr)&#123;                            Interceptor.attach(method01addr, &#123;                                onEnter: function(args)&#123;                                    // env-&gt;GetStringUTFChars(str_, JNI_FALSE)                                    console.log(&quot;method01 args[2] ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(args[2], null).readCString())                                &#125;,                                onLeave: function(retval)&#123;                                    console.log(&quot;method01 retval ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(retval, null).readCString())                                &#125;                            &#125;)                        &#125;                        if(method02addr)&#123;                            Interceptor.attach(method02addr, &#123;                                onEnter: function(args)&#123;                                    console.log(&quot;method02 args[2] ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(args[2], null).readCString())                                &#125;,                                onLeave: function(retval)&#123;                                    console.log(&quot;method02 retval ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(retval, null).readCString())                                &#125;                            &#125;)                        &#125;                    &#125;                &#125;            &#125;        &#125;);    &#125;&#125;\n\nfrida invoke  纯native(动态，静态)（基于dlopen）var method01_addr = null;var method02_addr = null;var addrNewStringUTF = null;function hook_dlopen(module_name, fun) &#123;    //安卓高版本需要同时hook android_dlopen_ext    var android_dlopen_ext = Module.findExportByName(null, &quot;android_dlopen_ext&quot;);    if (android_dlopen_ext) &#123;        Interceptor.attach(android_dlopen_ext, &#123;            onEnter: function (args) &#123;                var pathptr = args[0];                if (pathptr) &#123;                    this.path = (pathptr).readCString();                    if (this.path.indexOf(module_name) &gt;= 0) &#123;                        this.canhook = true;                        console.log(&quot;android_dlopen_ext:&quot;, this.path);                    &#125;                &#125;            &#125;,            onLeave: function (retval) &#123;                if (this.canhook) &#123;                    fun();                &#125;            &#125;        &#125;);    &#125;    var dlopen = Module.findExportByName(null, &quot;dlopen&quot;);    if (dlopen) &#123;        Interceptor.attach(dlopen, &#123;            onEnter: function (args) &#123;                var pathptr = args[0];                if (pathptr) &#123;                    this.path = (pathptr).readCString();                    // console.log(&quot;dlopen:&quot;, this.path)                    if (this.path.indexOf(module_name) &gt;= 0) &#123;                        this.canhook = true;                        // console.log(&quot;dlopen:&quot;, this.path);                    &#125;                &#125;            &#125;,            onLeave: function (retval) &#123;                if (this.canhook) &#123;                    fun();                &#125;            &#125;        &#125;);    &#125;    console.log(&quot;android_dlopen_ext:&quot;, android_dlopen_ext, &quot;dlopen:&quot;, dlopen);&#125;function hook_Native_JNi()&#123;    Java.perform(function()&#123;        method01_addr = Module.findExportByName(&quot;libroysue.so&quot;, &quot;Java_com_roysue_easyso1_MainActivity_method01&quot;);        method02_addr = Module.findExportByName(&quot;libroysue.so&quot;, &quot;_Z8method02P7_JNIEnvP7_jclassP8_jstring&quot;);        addrNewStringUTF = Module.findExportByName(&quot;libroysue.so&quot;, &quot;_ZN7_JNIEnv12NewStringUTFEPKc&quot;);        console.log(&quot;method01 address:&quot;, method01_addr)        console.log(&quot;method02 address:&quot;, method02_addr)        console.log(&quot;addrNewStringUTF address:&quot;, addrNewStringUTF)    &#125;)&#125;function invoke_method01(contents)&#123;    var method01_addr = Module.findExportByName(&quot;libroysue.so&quot;, &quot;Java_com_roysue_easyso1_MainActivity_method01&quot;)    if(method01_addr &amp;&amp; addrNewStringUTF)&#123;        console.log(&quot;method01_addr is =&gt;&quot;,method01_addr)        var method01 = new NativeFunction(method01_addr, &#x27;pointer&#x27;,[&#x27;pointer&#x27;,&#x27;pointer&#x27;,&#x27;pointer&#x27;])        var NewStringUTF = new NativeFunction(addrNewStringUTF, &quot;pointer&quot;, [&quot;pointer&quot;, &quot;pointer&quot;]);        var result = null;        Java.perform(function()&#123;            var Jstring = Java.vm.getEnv().newStringUtf(contents)            // var Jstring = NewStringUTF(Java.vm.getEnv(), Memory.allocUtf8String(contents));            result = method01(Java.vm.getEnv(), Jstring, Jstring)            console.log(&quot;result is =&gt;&quot;,result)            console.log(&quot;result is &quot;, Java.vm.getEnv().getStringUtfChars(result, null).readCString())            result = Java.vm.getEnv().getStringUtfChars(result, null).readCString();        &#125;)        return result;    &#125;&#125;function invoke_method02(contents)&#123;    if(method02_addr &amp;&amp; addrNewStringUTF)&#123;        console.log(&quot;method02_addr is =&gt;&quot;, method02_addr)        var method02 = new NativeFunction(method02_addr, &#x27;pointer&#x27;,[&#x27;pointer&#x27;,&#x27;pointer&#x27;,&#x27;pointer&#x27;])        var NewStringUTF = new NativeFunction(addrNewStringUTF,&#x27;pointer&#x27;,[&#x27;pointer&#x27;,&#x27;pointer&#x27;])        var result = null;        Java.perform(function()&#123;            var Jstring = Java.vm.getEnv().newStringUtf(contents)            // var Jstring = NewStringUTF(Java.vm.getEnv(), Memory.allocUtf8String(contents));            result = method02(Java.vm.getEnv(), Jstring, Jstring)            console.log(&quot;result is =&gt;&quot;,result)            console.log(&quot;result is &quot;, Java.vm.getEnv().getStringUtfChars(result, null).readCString())            result = Java.vm.getEnv().getStringUtfChars(result, null).readCString();        &#125;)        return result;    &#125;&#125;rpc.exports = &#123;    invoke1:invoke_method01,    invoke2:invoke_method02&#125;function main()&#123;    hook_dlopen(&quot;libroysue.so&quot;, hook_Native_JNi)&#125;setImmediate(main)\n\nfrida invoke  纯native(动态，静态)（基于RegisterNatives）通过RegisterNatives获取到jni函数地址，进行调用\nvar addrNewStringUTF = null;var method02addr = null;function find_RegisterNatives() &#123;    var symbols = Module.enumerateSymbolsSync(&quot;libart.so&quot;);    var addrRegisterNatives = null;    for (var i = 0; i &lt; symbols.length; i++) &#123;        var symbol = symbols[i];        if (symbol.name.indexOf(&quot;art&quot;) &gt;= 0 &amp;&amp;                symbol.name.indexOf(&quot;JNI&quot;) &gt;= 0 &amp;&amp;                 symbol.name.indexOf(&quot;NewStringUTF&quot;) &gt;= 0 &amp;&amp;                 symbol.name.indexOf(&quot;CheckJNI&quot;) &lt; 0) &#123;            addrNewStringUTF = symbol.address;            console.log(&quot;NewStringUTF is at &quot;, symbol.address, symbol.name);        &#125;        //_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi        if (symbol.name.indexOf(&quot;art&quot;) &gt;= 0 &amp;&amp;                symbol.name.indexOf(&quot;JNI&quot;) &gt;= 0 &amp;&amp;                 symbol.name.indexOf(&quot;RegisterNatives&quot;) &gt;= 0 &amp;&amp;                 symbol.name.indexOf(&quot;CheckJNI&quot;) &lt; 0) &#123;            addrRegisterNatives = symbol.address;            console.log(&quot;RegisterNatives is at &quot;, symbol.address, symbol.name);            hook_RegisterNatives(addrRegisterNatives)        &#125;    &#125;&#125;function hook_RegisterNatives(addrRegisterNatives) &#123;    if (addrRegisterNatives != null) &#123;        Interceptor.attach(addrRegisterNatives, &#123;            onEnter: function (args) &#123;                console.log(&quot;[RegisterNatives] method_count:&quot;, args[3]);                var env = args[0];                var java_class = args[1];                var class_name = Java.vm.tryGetEnv().getClassName(java_class);                //console.log(class_name);                var methods_ptr = ptr(args[2]);                var method_count = parseInt(args[3]);                for (var i = 0; i &lt; method_count; i++) &#123;                    var name_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3));                    var sig_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize));                    var fnPtr_ptr = Memory.readPointer(methods_ptr.add(i * Process.pointerSize * 3 + Process.pointerSize * 2));                    var name = Memory.readCString(name_ptr);                    var sig = Memory.readCString(sig_ptr);                    var find_module = Process.findModuleByAddress(fnPtr_ptr);                    console.log(&quot;[RegisterNatives] java_class:&quot;, class_name, &quot;name:&quot;, name, &quot;sig:&quot;, sig, &quot;fnPtr:&quot;, fnPtr_ptr,  &quot; fnOffset:&quot;, ptr(fnPtr_ptr).sub(find_module.base), &quot; callee:&quot;, DebugSymbol.fromAddress(this.returnAddress));                    if (name.indexOf(&quot;decrypt&quot;) &gt;= 0)&#123;                        method02addr = fnPtr_ptr;                        var method01addr = Module.findExportByName(&quot;libroysue.so&quot;, &quot;Java_com_roysue_easyso1_MainActivity_method01&quot;);                        console.log(&quot;method01 address:&quot;, method02addr)                        console.log(&quot;method02 address:&quot;, method01addr)                        // if(method01addr)&#123;                        //     Interceptor.attach(method01addr, &#123;                        //         onEnter: function(args)&#123;                        //             // env-&gt;GetStringUTFChars(str_, JNI_FALSE)                        //             console.log(&quot;method01 args[2] ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(args[2], null).readCString())                        //         &#125;,                        //         onLeave: function(retval)&#123;                        //             console.log(&quot;method01 retval ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(retval, null).readCString())                        //         &#125;                        //     &#125;)                        // &#125;                        if(method02addr)&#123;                            Interceptor.attach(method02addr, &#123;                                onEnter: function(args)&#123;                                    console.log(&quot;method02 args[2] ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(args[2], null).readCString())                                &#125;,                                onLeave: function(retval)&#123;                                    console.log(&quot;method02 retval ==&gt; &quot;, Java.vm.getEnv().getStringUtfChars(retval, null).readCString())                                &#125;                            &#125;)                        &#125;                    &#125;                &#125;            &#125;        &#125;);    &#125;&#125;function invoke_method01(contents)&#123;    var method01_addr = Module.findExportByName(&quot;libroysue.so&quot;, &quot;Java_com_roysue_easyso1_MainActivity_method01&quot;)    if(method01_addr &amp;&amp; addrNewStringUTF)&#123;        console.log(&quot;method01_addr is =&gt;&quot;,method01_addr)        var method01 = new NativeFunction(method01_addr, &#x27;pointer&#x27;,[&#x27;pointer&#x27;,&#x27;pointer&#x27;,&#x27;pointer&#x27;])        var NewStringUTF = new NativeFunction(addrNewStringUTF, &quot;pointer&quot;, [&quot;pointer&quot;, &quot;pointer&quot;]);        var result = null;        Java.perform(function()&#123;            var Jstring = NewStringUTF(Java.vm.getEnv(), Memory.allocUtf8String(contents));            result = method01(Java.vm.getEnv(), Jstring, Jstring)            console.log(&quot;result is =&gt;&quot;,result)            console.log(&quot;result is &quot;, Java.vm.getEnv().getStringUtfChars(result, null).readCString())            result = Java.vm.getEnv().getStringUtfChars(result, null).readCString();        &#125;)        return result;    &#125;&#125;function invoke_method02(contents)&#123;    if(method02addr &amp;&amp; addrNewStringUTF)&#123;        console.log(&quot;method02_addr is =&gt;&quot;, method02addr)        var method02 = new NativeFunction(method02addr, &#x27;pointer&#x27;,[&#x27;pointer&#x27;,&#x27;pointer&#x27;,&#x27;pointer&#x27;])        var NewStringUTF = new NativeFunction(addrNewStringUTF,&#x27;pointer&#x27;,[&#x27;pointer&#x27;,&#x27;pointer&#x27;])        var result = null;        Java.perform(function()&#123;            var Jstring = NewStringUTF(Java.vm.getEnv(), Memory.allocUtf8String(contents));            result = method02(Java.vm.getEnv(), Jstring, Jstring)            console.log(&quot;result is =&gt;&quot;,result)            console.log(&quot;result is &quot;, Java.vm.getEnv().getStringUtfChars(result, null).readCString())            result = Java.vm.getEnv().getStringUtfChars(result, null).readCString();        &#125;)        return result;    &#125;&#125;rpc.exports = &#123;    invoke1:invoke_method01,    invoke2:invoke_method02&#125;function main()&#123;    // hookJava()    // hook_dlopen(&quot;libroysue.so&quot;, hook_Native_JNi)    find_RegisterNatives(&quot;libroysue.so&quot;)&#125;setImmediate(main)\n\n\n\n\n注：可以获取jni的NewStringUTF的地址，然后创建函数自动调用。或者直接使用Java.vm.getEnv().newStringUtf(contents)作用：将java的string转jni的Jsting\n","tags":["frida"]},{"title":"frida备忘录","url":"/posts/37757/","content":"frida hook某个类下所有方法Java.perform(function () &#123;    travel(&#x27;com.xxx.xxx&#x27;)&#125;)function printstack() &#123;    console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()))&#125;function travel(className) &#123;    var NetContent = Java.use(className)    //1.得到这个类下面的所有方法    var Methods = NetContent.class.getDeclaredMethods()    //2.遍历所有的方法    Methods.forEach(function (Method) &#123;        //得到这个方法的所有重载 ovelroads        var methodName = Method.getName()        var overloads = NetContent[methodName].overloads        //遍历重载        overloads.forEach(function (overload) &#123;            var prot = &#x27;(&#x27;            overload.argumentTypes.forEach(function (argumentType) &#123;                prot += argumentType.className + &#x27;,&#x27;            &#125;)            prot += &#x27;)&#x27;            overload.implementation = function () &#123;                console.log(&#x27;----------------------------------&#x27;)                console.log(className + &#x27;.&#x27; + methodName + prot)                printstack()                for (var i = 0; i &lt; arguments.length; i++) &#123;                    console.log(&#x27;argument:&#x27; + JSON.stringify(arguments[i]))                &#125;                var ret = this[methodName].apply(this, arguments)                console.log(methodName + &#x27;return:&#x27; + JSON.stringify(ret))                return ret            &#125;        &#125;)    &#125;)&#125;\n\nhookEventtrace所有的mOnClickListener，hook它们的onClick函数，实现点到哪里，定位到哪个类的功能。\nvar jclazz = null;var jobj = null;function getObjClassName(obj) &#123;    if (!jclazz) &#123;        var jclazz = Java.use(&quot;java.lang.Class&quot;);    &#125;    if (!jobj) &#123;        var jobj = Java.use(&quot;java.lang.Object&quot;);    &#125;    return jclazz.getName.call(jobj.getClass.call(obj));&#125;function watch(obj, mtdName) &#123;    var listener_name = getObjClassName(obj);    var target = Java.use(listener_name);    if (!target || !mtdName in target) &#123;        return;    &#125;    // send(&quot;[WatchEvent] hooking &quot; + mtdName + &quot;: &quot; + listener_name);    target[mtdName].overloads.forEach(function (overload) &#123;        overload.implementation = function () &#123;            //send(&quot;[WatchEvent] &quot; + mtdName + &quot;: &quot; + getObjClassName(this));            console.log(&quot;[WatchEvent] &quot; + mtdName + &quot;: &quot; + getObjClassName(this))            return this[mtdName].apply(this, arguments);        &#125;;    &#125;)&#125;function OnClickListener() &#123;    Java.perform(function () &#123;        //以spawn启动进程的模式来attach的话        Java.use(&quot;android.view.View&quot;).setOnClickListener.implementation = function (listener) &#123;            if (listener != null) &#123;                watch(listener, &#x27;onClick&#x27;);            &#125;            return this.setOnClickListener(listener);        &#125;;        //如果frida以attach的模式进行attch的话        Java.choose(&quot;android.view.View$ListenerInfo&quot;, &#123;            onMatch: function (instance) &#123;                instance = instance.mOnClickListener.value;                if (instance) &#123;                    console.log(&quot;mOnClickListener name is :&quot; + getObjClassName(instance));                    watch(instance, &#x27;onClick&#x27;);                &#125;            &#125;,            onComplete: function () &#123;            &#125;        &#125;)    &#125;)&#125;setImmediate(OnClickListener);\n\n系统库常用算法hookfunction printstack() &#123;    console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()))&#125;Java.perform(function () &#123;    console.log(&#x27;enter&#x27;)    var Base64 = Java.use(&#x27;android.util.Base64&#x27;)    var ByteString = Java.use(&quot;com.android.okhttp.okio.ByteString&quot;);    var secretKeySpec = Java.use(&#x27;javax.crypto.spec.SecretKeySpec&#x27;);    secretKeySpec.$init.overload(&#x27;[B&#x27;, &#x27;java.lang.String&#x27;).implementation = function (a, b) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.$init(a, b);        console.log(&quot;算法名：&quot; + b + &quot;|str密钥:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a));        console.log(&quot;算法名：&quot; + b + &quot;|Hex密钥:&quot; + ByteString.of(a).hex());        return result;    &#125;    var DESKeySpec = Java.use(&#x27;javax.crypto.spec.DESKeySpec&#x27;);    DESKeySpec.$init.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.$init(a);        var bytes_key_des = this.getKey();        console.log(&quot;des密钥  |str &quot; + Java.use(&#x27;java.lang.String&#x27;).$new(bytes_key_des));        console.log(&quot;des密钥  |hex &quot; + ByteString.of(bytes_key_des).hex());        return result;    &#125;    DESKeySpec.$init.overload(&#x27;[B&#x27;, &#x27;int&#x27;).implementation = function (a, b) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.$init(a, b);        var bytes_key_des = this.getKey();        console.log(&quot;des密钥  |str &quot; + Java.use(&#x27;java.lang.String&#x27;).$new(bytes_key_des));        console.log(&quot;des密钥  |hex &quot; + ByteString.of(bytes_key_des).hex());        return result;    &#125;    var mac = Java.use(&#x27;javax.crypto.Mac&#x27;);    mac.getInstance.overload(&#x27;java.lang.String&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.getInstance(a);        console.log(&quot;算法名：&quot; + a);        return result;    &#125;    mac.update.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        this.update(a);        console.log(&quot;update:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a))    &#125;    mac.update.overload(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;).implementation = function (a, b, c) &#123;        console.log(&quot;======================================&quot;);        printstack();        this.update(a, b, c)        console.log(&quot;update:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a) + &quot;|&quot; + b + &quot;|&quot; + c);    &#125;    mac.doFinal.overload().implementation = function () &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.doFinal();        console.log(&quot;mac doFinal结果: |str  :&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(result));        console.log(&quot;mac doFinal结果: |hex  :&quot; + ByteString.of(result).hex());        console.log(&quot;mac doFinal结果: |base64  :&quot; + Base64.encodeToString(result, 0));        return result;    &#125;    mac.doFinal.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.doFinal(a);        console.log(&quot;doFinal参数: |str  :&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a));        console.log(&quot;doFinal结果: |str  :&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(result));        console.log(&quot;doFinal结果: |hex  :&quot; + ByteString.of(result).hex());        console.log(&quot;doFinal结果: |base64  :&quot; + Base64.encodeToString(result, 0));        return result;    &#125;    var md = Java.use(&#x27;java.security.MessageDigest&#x27;);    md.getInstance.overload(&#x27;java.lang.String&#x27;, &#x27;java.lang.String&#x27;).implementation = function (a, b) &#123;        console.log(&quot;======================================&quot;);        printstack();        console.log(&quot;算法名：&quot; + a);        return this.getInstance(a, b);    &#125;    md.getInstance.overload(&#x27;java.lang.String&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        console.log(&quot;算法名：&quot; + a);        return this.getInstance(a);    &#125;    md.update.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        console.log(&quot;update:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a))        return this.update(a);    &#125;    md.update.overload(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;).implementation = function (a, b, c) &#123;        console.log(&quot;======================================&quot;);        printstack();        console.log(&quot;update:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a) + &quot;|&quot; + b + &quot;|&quot; + c);        return this.update(a, b, c);    &#125;    md.digest.overload().implementation = function () &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.digest();        console.log(&quot;digest11结果:&quot; + ByteString.of(result).hex());        console.log(&quot;digest结果:&quot; + Base64.encodeToString(result, 0));        return result;    &#125;    md.digest.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        console.log(&quot;digest参数:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a));        var result = this.digest(a);        console.log(&quot;digest结果:&quot; + ByteString.of(result).hex());        console.log(&quot;digest结果:&quot; + Base64.encodeToString(result, 0));        return result;    &#125;    var ivParameterSpec = Java.use(&#x27;javax.crypto.spec.IvParameterSpec&#x27;);    ivParameterSpec.$init.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.$init(a);        console.log(&quot;iv向量: |str:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a));        console.log(&quot;iv向量: |hex:&quot; + ByteString.of(a).hex());        return result;    &#125;    var cipher = Java.use(&#x27;javax.crypto.Cipher&#x27;);    cipher.getInstance.overload(&#x27;java.lang.String&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.getInstance(a);        console.log(&quot;模式填充:&quot; + a);        return result;    &#125;    cipher.init.overload(&#x27;int&#x27;, &#x27;java.security.Key&#x27;).implementation = function (a, b) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.init(a, b);        if (N_ENCRYPT_MODE == a) &#123;            console.log(&quot;init  | 加密模式&quot;);        &#125; else if (N_DECRYPT_MODE == a) &#123;            console.log(&quot;init  | 解密模式&quot;);        &#125;        var bytes_key = b.getEncoded();        console.log(&quot;init key:&quot; + &quot;|str密钥:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(bytes_key));        console.log(&quot;init key: |base64  :&quot; + Base64.encodeToString(bytes_key, 0));        console.log(&quot;init key:&quot; + &quot;|Hex密钥:&quot; + ByteString.of(bytes_key).hex());        return result;    &#125;    cipher.init.overload(&#x27;int&#x27;, &#x27;java.security.cert.Certificate&#x27;).implementation = function (a, b) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.init(a, b);        if (N_ENCRYPT_MODE == a) &#123;            console.log(&quot;init  | 加密模式&quot;);        &#125; else if (N_DECRYPT_MODE == a) &#123;            console.log(&quot;init  | 解密模式&quot;);        &#125;        return result;    &#125;    cipher.init.overload(&#x27;int&#x27;, &#x27;java.security.Key&#x27;, &#x27;java.security.spec.AlgorithmParameterSpec&#x27;).implementation = function (a, b, c) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.init(a, b, c);        if (N_ENCRYPT_MODE == a) &#123;            console.log(&quot;init  | 加密模式&quot;);        &#125; else if (N_DECRYPT_MODE == a) &#123;            console.log(&quot;init  | 解密模式&quot;);        &#125;        var bytes_key = b.getEncoded();        console.log(&quot;init key:&quot; + &quot;|str密钥:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(bytes_key));        console.log(&quot;init key: |base64  :&quot; + Base64.encodeToString(bytes_key, 0));        console.log(&quot;init key:&quot; + &quot;|Hex密钥:&quot; + ByteString.of(bytes_key).hex());        return result;    &#125;    cipher.init.overload(&#x27;int&#x27;, &#x27;java.security.cert.Certificate&#x27;, &#x27;java.security.SecureRandom&#x27;).implementation = function (a, b, c) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.init(a, b, c);        if (N_ENCRYPT_MODE == a) &#123;            console.log(&quot;init  | 加密模式&quot;);        &#125; else if (N_DECRYPT_MODE == a) &#123;            console.log(&quot;init  | 解密模式&quot;);        &#125;        return result;    &#125;    cipher.init.overload(&#x27;int&#x27;, &#x27;java.security.Key&#x27;, &#x27;java.security.SecureRandom&#x27;).implementation = function (a, b, c) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.init(a, b, c);        if (N_ENCRYPT_MODE == a) &#123;            console.log(&quot;init  | 加密模式&quot;);        &#125; else if (N_DECRYPT_MODE == a) &#123;            console.log(&quot;init  | 解密模式&quot;);        &#125;        var bytes_key = b.getEncoded();        console.log(&quot;init key:&quot; + &quot;|str密钥:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(bytes_key));        console.log(&quot;init key: |base64  :&quot; + Base64.encodeToString(bytes_key, 0));        console.log(&quot;init key:&quot; + &quot;|Hex密钥:&quot; + ByteString.of(bytes_key).hex());        return result;    &#125;    cipher.init.overload(&#x27;int&#x27;, &#x27;java.security.Key&#x27;, &#x27;java.security.AlgorithmParameters&#x27;).implementation = function (a, b, c) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.init(a, b, c);        if (N_ENCRYPT_MODE == a) &#123;            console.log(&quot;init  | 加密模式&quot;);        &#125; else if (N_DECRYPT_MODE == a) &#123;            console.log(&quot;init  | 解密模式&quot;);        &#125;        var bytes_key = b.getEncoded();        console.log(&quot;init key:&quot; + &quot;|str密钥:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(bytes_key));        console.log(&quot;init key: |base64  :&quot; + Base64.encodeToString(bytes_key, 0));        console.log(&quot;init key:&quot; + &quot;|Hex密钥:&quot; + ByteString.of(bytes_key).hex());        return result;    &#125;    cipher.init.overload(&#x27;int&#x27;, &#x27;java.security.Key&#x27;, &#x27;java.security.AlgorithmParameters&#x27;, &#x27;java.security.SecureRandom&#x27;).implementation = function (a, b, c, d) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.init(a, b, c, d);        if (N_ENCRYPT_MODE == a) &#123;            console.log(&quot;init  | 加密模式&quot;);        &#125; else if (N_DECRYPT_MODE == a) &#123;            console.log(&quot;init  | 解密模式&quot;);        &#125;        var bytes_key = b.getEncoded();        console.log(&quot;init key:&quot; + &quot;|str密钥:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(bytes_key));        console.log(&quot;init key: |base64  :&quot; + Base64.encodeToString(bytes_key, 0));        console.log(&quot;init key:&quot; + &quot;|Hex密钥:&quot; + ByteString.of(bytes_key).hex());        return result;    &#125;    cipher.init.overload(&#x27;int&#x27;, &#x27;java.security.Key&#x27;, &#x27;java.security.spec.AlgorithmParameterSpec&#x27;, &#x27;java.security.SecureRandom&#x27;).implementation = function (a, b, c, d) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.update(a, b, c, d);        if (N_ENCRYPT_MODE == a) &#123;            console.log(&quot;init  | 加密模式&quot;);        &#125; else if (N_DECRYPT_MODE == a) &#123;            console.log(&quot;init  | 解密模式&quot;);        &#125;        var bytes_key = b.getEncoded();        console.log(&quot;init key:&quot; + &quot;|str密钥:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(bytes_key));        console.log(&quot;init key: |base64  :&quot; + Base64.encodeToString(bytes_key, 0));        console.log(&quot;init key:&quot; + &quot;|Hex密钥:&quot; + ByteString.of(bytes_key).hex());        return result;    &#125;    cipher.update.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.update(a);        console.log(&quot;======================================&quot;);        console.log(&quot;update:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a));        return result;    &#125;    cipher.update.overload(&#x27;[B&#x27;, &#x27;int&#x27;, &#x27;int&#x27;).implementation = function (a, b, c) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.update(a, b, c);        console.log(&quot;update:&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a) + &quot;|&quot; + b + &quot;|&quot; + c);        return result;    &#125;    cipher.doFinal.overload().implementation = function () &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.doFinal();        console.log(&quot;doFinal结果: |str  :&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(result));        console.log(&quot;doFinal结果: |hex  :&quot; + ByteString.of(result).hex());        console.log(&quot;doFinal结果: |base64  :&quot; + Base64.encodeToString(result, 0));        return result;    &#125;    cipher.doFinal.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.doFinal(a);        console.log(&quot;doFinal参数: |str  :&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(a));        console.log(&quot;doFinal参数: |base64  :&quot; + Base64.encodeToString(a, 0));        console.log(&quot;doFinal结果: |str  :&quot; + Java.use(&#x27;java.lang.String&#x27;).$new(result));        console.log(&quot;doFinal结果: |hex  :&quot; + ByteString.of(result).hex());        console.log(&quot;doFinal结果: |base64  :&quot; + Base64.encodeToString(result, 0));        return result;    &#125;    var x509EncodedKeySpec = Java.use(&#x27;java.security.spec.X509EncodedKeySpec&#x27;);    x509EncodedKeySpec.$init.overload(&#x27;[B&#x27;).implementation = function (a) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.$init(a);        console.log(&quot;RSA密钥:&quot; + Base64.encodeToString(a, 0));        return result;    &#125;    var rSAPublicKeySpec = Java.use(&#x27;java.security.spec.RSAPublicKeySpec&#x27;);    rSAPublicKeySpec.$init.overload(&#x27;java.math.BigInteger&#x27;, &#x27;java.math.BigInteger&#x27;).implementation = function (a, b) &#123;        console.log(&quot;======================================&quot;);        printstack();        var result = this.$init(a, b);        console.log(&quot;RSA密钥N:&quot; + a.toString(16));        console.log(&quot;RSA密钥E:&quot; + b.toString(16));        return result;    &#125;&#125;)","tags":["frida"]},{"title":"flutter案例抓包-猿人学app","url":"/posts/39224/","content":"这是猿人学App第七题flutter案例直接抓包看一下，直接抓不到。关闭抓包就正常\n既然说了是flutter，可以参考这两篇文章\n\n一种基于frida和drony的针对flutter抓包的方法\nBypass SSL pinning on flutter app\n\n文章里面也说了Flutter是Google使用Dart语言开发的移动应用开发框架，由于Dart使用Mozilla的NSS库生成并编译自己的Keystore，导致我们就不能通过将代理CA添加到系统CA存储来绕过SSL验证。为了解决这个问题，就必需要研究libflutter.so。写脚本，在运行时将返回函数改为true即可绕过证书链检查实现抓包。文章内容各位就自己看，我们直接上手解压apk，用ida打开libflutter.so在ida中的strings搜索字符串ssl_client跟进去可以找到并定位函数为sub_393DA4，也可以按x看它的引用，也是函数sub_393DA4，跟进去找到ssl_client的引用位置，往上找到函数sub_393DA4头部字节定位，针对64位flutter.so的hook代码示例如下，地址不再需要+1。把上面的头部字节替换到pattern里\nfunction hook_ssl_verify_result(address) &#123;    Interceptor.attach(address, &#123;        onEnter: function (args) &#123;            console.log(&quot;Disabling SSL validation&quot;)        &#125;,        onLeave: function (retval) &#123;            console.log(&quot;Retval: &quot; + retval);            retval.replace(0x1);        &#125;    &#125;);&#125;function hookFlutter() &#123;    var m = Process.findModuleByName(&quot;libflutter.so&quot;);    var pattern = &quot;FF C3 01 D1 FD 7B 01 A9 FC 6F 02 A9 FA 67 03 A9 F8 5F 04 A9 F6 57 05 A9 F4 4F 06 A9 08 0A 80 52&quot;;    var res = Memory.scan(m.base, m.size, pattern, &#123;        onMatch: function (address, size) &#123;            console.log(&#x27;[+] ssl_verify_result found at: &#x27; + address.toString());            hook_ssl_verify_result(address);        &#125;,        onError: function (reason) &#123;            console.log(&#x27;[!] There was an error scanning memory&#x27;);        &#125;,        onComplete: function () &#123;            console.log(&quot;All done&quot;)        &#125;    &#125;);&#125;\n开启脚本后，抓包就正常了\n","tags":["抓包"]},{"title":"动静态SO层算法还原和脱机(吾爱论坛2021春节安卓题目)","url":"/posts/29413/","content":"文章的案例来自吾爱论坛2021春节安卓题目链接：案例链接\njava用的是unicode编码，c语言用的是ASCII编码\n明文限制的长度是30，检测函数在nativel-lib文件里\n解压apk并用ida打开so文件大概分析一下，传进来的参数判断是否为30位，然后进入sub_B90进行处理后，再进入sub_D90处理，结果为v9，最后v9和v19作比较，相等返回1，不等返回0；\n用ida动态调试调试前先把ida目录下的dbgsrv、android-server拷贝到手机上并修改权限 777这里需要开启frida去获取so的基址+sub_B90的偏移量&#x3D;sub_B90的绝对地址先运行frida，再运行android-serverfrida代码\nfunction hook_KeyStore_load() &#123;    Java.perform(function () &#123;        var addr_libnatuve = Module.findBaseAddress(&quot;libnative-lib.so&quot;)        if(addr_libnatuve) &#123;            console.log(&quot;so基址：&quot;, addr_libnatuve)                    &#125;    &#125;);&#125;setImmediate(hook_KeyStore_load)\n打印结果so基址： 0x76133130000x7613313000+8AC所以需要在动调调试的时候在位置打上断点没显示汇编按空格\n以go方式打开ida\n选择Debugger–》Attach–》Remote ARM Linux&#x2F;Android debugger输入手机IP，选择进程\n加载好后跳到指定位置，或者快捷键G\n打上断点后，点击绿色小箭头继续运行，app点击验证，会断到当前位置可以转为汇编跟静态ida的作比较，Edit–》Code，或者快捷键C按F8单步调试打开寄存器，进入\n用Frida这里直接用fridahook 函数，sub_B90sub_B90的偏移量为B90这就是第一轮加密后的\nhook 第二个函数这是明文经两轮加密后的结果\nfunction hook_KeyStore_load() &#123;    Java.perform(function () &#123;        var addr_libnatuve = Module.findBaseAddress(&quot;libnative-lib.so&quot;)        if(addr_libnatuve) &#123;            console.log(&quot;so基址：&quot;, addr_libnatuve)            var sub_B90 = addr_libnatuve.add(0xB90)            Interceptor.attach(sub_B90, &#123;                onEnter: function(args)&#123;                    this.arg0 = args[0]                    this.arg1 = args[1]                    this.arg2 = args[2]                    // console.log(&quot;&quot;,hexdump(this.arg0))                    // console.log(&quot;&quot;,this.arg1);                    // console.log(&quot;&quot;,hexdump(this.arg2));                    console.log(&quot;参数一：&quot;,Memory.readCString(this.arg0))                    console.log(&quot;参数二：&quot;,this.arg1.toInt32());                    console.log(&quot;参数三&quot;,Memory.readCString(this.arg2))                &#125;,                onLeave: function(retval)&#123;                    console.log(&quot;sub_B90 onLeave&quot;);                    console.log(&quot;运算结果&quot;);                    console.log(Memory.readByteArray(this.arg0, 30)); // 这里把结果赋值给了第一个参数                &#125;            &#125;)            var sub_D90 = addr_libnatuve.add(0xD90)            Interceptor.attach(sub_D90, &#123;                onEnter: function(args)&#123;                    console.log(&quot;sub_D90 onEnter&quot;);                    this.arg0 = args[0]                    this.arg1 = args[1]                    console.log(&quot;参数一：&quot;,Memory.readByteArray(args[0], 30))                    console.log(&quot;参数二：&quot;, this.arg1.toInt32())                &#125;,                onLeave: function(retval)&#123;                    console.log(&quot;sub_D90 onLeave&quot;);                    console.log(&quot;运算结果&quot;);                    console.log(Memory.readCString(retval));                &#125;            &#125;)        &#125;    &#125;);&#125;setImmediate(hook_KeyStore_load)\n\n主动调用# -*- coding: UTF-8 -*- import frida, sys jscode = &#x27;&#x27;&#x27; var destAddr = &#x27;&#x27;;  //定位xsp地址  function inline_hook() &#123;    var so_addr = Module.findBaseAddress(&quot;libnative-lib.so&quot;);              if (so_addr) &#123;        console.log(&quot;so_addr:&quot;, so_addr);                 var addr_b90 = so_addr.add(0xB90);        var sub_b90 = new NativeFunction(addr_b90 , &#x27;int&#x27;, [&#x27;pointer&#x27;, &#x27;int&#x27;, &#x27;pointer&#x27;]);        Interceptor.attach(sub_b90, &#123;            onEnter: function(args)            &#123;             destAddr = args[0];            console.log(&#x27;onEnter B90&#x27;);            &#125;,            //在hook函数之后执行的语句            onLeave:function(retval)            &#123;            console.log(&#x27;onLeave B90&#x27;);            &#125;        &#125;);               var addr_b2c = so_addr.add(0xb2c);        console.log(&quot;The addr_b2c:&quot;, addr_b2c);        Java.perform(function() &#123;            Interceptor.attach(addr_b2c, &#123;                onEnter: function(args) &#123;                console.log(&quot;addr_b2c OnEnter :&quot;,  Memory.readByteArray(destAddr.sub(0x38),64) );                &#125;            &#125;)        &#125;)    &#125;&#125;setImmediate(inline_hook)      &#x27;&#x27;&#x27;def on_message(message, data):    if message[&#x27;type&#x27;] == &#x27;send&#x27;:        print(&quot; &#123;0&#125;&quot;.format(message[&#x27;payload&#x27;]))    else:        print(message)pass#print(frida.enumerate_devices())# 查找USB设备并附加到目标进程device =  frida.get_usb_device()#pid = device.spawn([&quot;com.live.xctv&quot;])  #session = device.attach(pid)session =device.attach(&#x27;cn.pojie52.cm01&#x27;) #这里是要注入的apk包名# 在目标进程里创建脚本script = session.create_script(jscode)# 注册消息回调script.on(&#x27;message&#x27;, on_message)print(&#x27; Start attach&#x27;)# 加载创建好的javascript脚本script.load()# 读取系统输入sys.stdin.read()\n\n异或大概分析一下sub_b90，是根据传入的第三个参数s把v20进行了一个初始化，然后再把参数a1和v20进行了异或运算，主要看这个异或运算，先设想一下，如果是把a1进行了异或，那么得到的结果和a1之前的数据再异或就可以计算出异或的key，这里我们把它叫做xorkey，那么先看一下我们传入的参数，是30个1，也就是30个0x31 ，然后看结果，第一位是0xe0，0x31^0xe0 &#x3D; 209，然后把参数改为30个2，即0x32，得出首位的结果是0xe3，0xe3^0x32结果也是209，证明我们的思路是正确的，然后依次求出所有的xorkey，\n这里的值是输入，30个1加密后异或来的明文 ^ 密钥 &#x3D; 密文# 拿到密钥明文 ^ 密文 &#x3D; 密钥\na = [0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,     0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31]b = [0xe0, 0x6b, 0x37, 0xa1, 0x75, 0xd7, 0xf6, 0xd4, 0xef, 0x19, 0xc6, 0xc3, 0x57, 0xa0, 0xf9, 0xb4, 0x73, 0xee, 0xc8,     0xd1, 0xb3, 0x30, 0x1a, 0x0a, 0x09, 0x52, 0x06, 0x8c, 0x1f, 0x7c]c = []for i in range(0, 30):    c.append(a[i] ^ b[i])print(c)\n结果：\n[209, 90, 6, 144, 68, 230, 199, 229, 222, 40, 247, 242, 102, 145, 200, 133, 66, 223, 249, 224, 130, 1, 43, 59, 56, 99, 55, 189, 46, 77]\n\n\n异或的key找到了，现在要找异或后的正确值，才能算出答案明文1.调试![image.png]调试到这里，要在寄存器钟拿到v19这里就是判断的地方，偏移量为B2C\n调试没计算前计算后这就是要的密文了“5Gh2&#x2F;y6Poq2&#x2F;WIeLJfmh6yesnK7ndnJeWREFjRx8”\n另一种方式hook寄存器基地址加B30就是结果寄存器的位置，同时我们需要的是x9寄存器的值\nfunction hook_KeyStore_load() &#123;    Java.perform(function () &#123;        var addr_libnatuve = Module.findBaseAddress(&quot;libnative-lib.so&quot;)        if(addr_libnatuve) &#123;            console.log(&quot;so基址：&quot;, addr_libnatuve)            var LDRB = addr_libnatuve.add(0xB30)            console.log(&quot;LDRB&quot;, LDRB)            Interceptor.attach(LDRB, &#123;                onEnter: function(args)&#123;                    console.log(Memory.readCString(this.context.x9))  // 上下文获取x9寄存器                &#125;,                onLeave: function(retval)&#123;                    console.log(&quot;运算结果&quot;);                    console.log(Memory.readCString(retval));                 &#125;            &#125;)        &#125;    &#125;);&#125;setImmediate(hook_KeyStore_load)\n\n异或出答案密钥：[‘0xd1’, ‘0x5a’, ‘0x6’, ‘0x90’, ‘0x44’, ‘0xe6’, ‘0xc7’, ‘0xe5’, ‘0xde’, ‘0x28’, ‘0xf7’, ‘0xf2’, ‘0x66’, ‘0x91’, ‘0xc8’, ‘0x85’, ‘0x42’, ‘0xdf’, ‘0xf9’, ‘0xe0’, ‘0x82’, ‘0x1’, ‘0x2b’, ‘0x3b’, ‘0x38’, ‘0x63’, ‘0x37’, ‘0xbd’, ‘0x2e’, ‘0x4d’]结果：“5Gh2&#x2F;y6Poq2&#x2F;WIeLJfmh6yesnK7ndnJeWREFjRx8”结果^密钥&#x3D;答案\nimport base64a = [0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31,     0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31]b = [0xe0, 0x6b, 0x37, 0xa1, 0x75, 0xd7, 0xf6, 0xd4, 0xef, 0x19, 0xc6, 0xc3, 0x57, 0xa0, 0xf9, 0xb4, 0x73, 0xee, 0xc8,     0xd1, 0xb3, 0x30, 0x1a, 0x0a, 0x09, 0x52, 0x06, 0x8c, 0x1f, 0x7c]c = []for i in range(0, 30):    c.append(a[i] ^ b[i])print(c) # [209, 90, 6, 144, 68, 230, 199, 229, 222, 40, 247, 242, 102, 145, 200, 133, 66, 223, 249, 224, 130, 1, 43, 59, 56, 99, 55, 189, 46, 77]d = [0xd1, 0x5a, 0x6, 0x90, 0x44, 0xe6, 0xc7, 0xe5, 0xde, 0x28, 0xf7, 0xf2, 0x66, 0x91, 0xc8, 0x85, 0x42, 0xdf, 0xf9, 0xe0, 0x82, 0x1, 0x2b, 0x3b, 0x38, 0x63, 0x37, 0xbd, 0x2e, 0x4d]data = base64.b64decode(&#x27;5Gh2/y6Poq2/WIeLJfmh6yesnK7ndnJeWREFjRx8&#x27;.encode())flag = bytes([d[i] ^ data[i] for i in range(len(d))]).decode()print(flag)\n\n\n运行结果为：\n52pojieHappyChineseNewYear2021\n","tags":["frida","安卓逆向"]},{"title":"抓包进阶之SSL unpinning","url":"/posts/36427/","content":"SSL Pinning Bypass客户端的证书绑定（pinning）。一种情况没有分析，就是客户端并不会默认信任系统根证书目录中的证书，而是在代码里再加一层校验，这就是证书绑定机制——SSL pinning，如果这段代码的校验过不了，那么客户端还是会报证书错误。两层校验，第一种不信任系统证书，使用自己的证书。第二种在自己证书上再做一层判断● Https客户端代码校验服务器证书案例是自己配置的证书，不是ca机构签发的。这段代码放了自己的证书，一段检验机制\n\n打开charles抓包，抓包失败\n\n信任所有证书，都为空表示都信任\n\n因为图片是https的，修改一下ssl\n\n成功抓包\n让客户端信任系统根证书目录中的证书把证书校验重新开起来\nhook住checkServerTrusted，将其所有重载都置空；使用spawn模式运行\nfunction main()&#123;    Java.perform(function ()&#123;        // 检查一个类是否继承某一个接口        function checkIsImplementeInterFace(clsName, interface_)&#123;            try&#123;              var cls = Java.use(clsName)              if(cls.class.isInterface())&#123;                return false              &#125;              if(cls.class != undefined)                if(interface_.class.isAssignableFrom(cls.class))&#123;                  return true                &#125;              return false            &#125;catch(e)&#123;              return false            &#125;          &#125;        var TrustManagerInterface = Java.use(&quot;javax.net.ssl.TrustManager&quot;)        Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;[Ljava.security.cert.Certificate;&#x27;).implementation = function()&#123;            console.log(&quot;CertificatePinner check called!&quot;)        &#125;        Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;java.util.List&#x27;).implementation = function()&#123;            console.log(&quot;CertificatePinner check called!&quot;)        &#125;        Java.enumerateLoadedClasses(&#123;            onMatch: function(clsName,handle)&#123;                if(checkIsImplementeInterFace(clsName,TrustManagerInterface))&#123;                    console.log(clsName)                    var targetClass = Java.use(clsName)                    var len = targetClass[&quot;checkServerTrusted&quot;].overloads.length                    for (var i = 0; i &lt; len; i++)&#123;                        targetClass[&quot;checkServerTrusted&quot;].overloads[i].implementation = function()&#123;                                                        console.log(clsName + i + &quot;checkServerTrusted Called!&quot;)                            //return targetClass[&quot;checkServerTrusted&quot;].overloads[i].apply(this,arguments)                                                    &#125;                    &#125;                &#125;            &#125;,            onComplete: function()&#123;                console.log(&quot;Search Classes Completed!&quot;)            &#125;        &#125;)            &#125;)&#125;setImmediate(main)\n成功抓到包\n\n过检验证书把证书检验开启\n\nobjection绕过检测使用objection，直接将SSL pinning给disable掉\nandroid sslpinning disable\n\nssl pinning+服务器检验客户端证书注册页面抓包，证书不信任\n用frida hook掉他的一些检测，\nssl pinning（hook掉证书验证(自定义证书)）方式一function main()&#123;    Java.perform(function ()&#123;        // 检查一个类是否继承某一个接口        function checkIsImplementeInterFace(clsName, interface_)&#123;            try&#123;              var cls = Java.use(clsName)              if(cls.class.isInterface())&#123;                return false              &#125;              if(cls.class != undefined)                if(interface_.class.isAssignableFrom(cls.class))&#123;                  return true                &#125;              return false            &#125;catch(e)&#123;              return false            &#125;          &#125;        var TrustManagerInterface = Java.use(&quot;javax.net.ssl.TrustManager&quot;)        // Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;[Ljava.security.cert.Certificate;&#x27;).implementation = function()&#123;        //     console.log(&quot;CertificatePinner check called!&quot;)        // &#125;        // Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;java.util.List&#x27;).implementation = function()&#123;        //     console.log(&quot;CertificatePinner check called!&quot;)        // &#125;        Java.enumerateLoadedClasses(&#123;            onMatch: function(clsName,handle)&#123;                if(checkIsImplementeInterFace(clsName,TrustManagerInterface))&#123;                    console.log(clsName)                    var targetClass = Java.use(clsName)                    var len = targetClass[&quot;checkServerTrusted&quot;].overloads.length                    for (var i = 0; i &lt; len; i++)&#123;                        targetClass[&quot;checkServerTrusted&quot;].overloads[i].implementation = function()&#123;                                                        console.log(clsName + i + &quot;checkServerTrusted Called!&quot;)                            //return targetClass[&quot;checkServerTrusted&quot;].overloads[i].apply(this,arguments)                                                    &#125;                    &#125;                &#125;            &#125;,            onComplete: function()&#123;                console.log(&quot;Search Classes Completed!&quot;)            &#125;        &#125;)            &#125;)&#125;setImmediate(main)\n\n方式二function main()&#123;    Java.perform(function ()&#123;        function checkIsImplementeInterFace(clsName, interface_)&#123;            try&#123;              var cls = Java.use(clsName)              if(cls.class.isInterface())&#123;                return false              &#125;              if(cls.class != undefined)                if(interface_.class.isAssignableFrom(cls.class))&#123;                  return true                &#125;              return false            &#125;catch(e)&#123;              return false            &#125;          &#125;        var TrustManagerInterface = Java.use(&quot;javax.net.ssl.TrustManager&quot;)        // Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;[Ljava.security.cert.Certificate;&#x27;).implementation = function()&#123;        //     console.log(&quot;CertificatePinner check called!&quot;)        // &#125;        // Java.use(&quot;okhttp3.CertificatePinner&quot;).check.overload(&#x27;java.lang.String&#x27;, &#x27;java.util.List&#x27;).implementation = function()&#123;        //     console.log(&quot;CertificatePinner check called!&quot;)        // &#125;        // Java.enumerateClassLoaders(&#123;        //   onMatch: function(loader)&#123;        //       try&#123;        //           if(loader.findClass(&quot;okhttp3.OkHttpClient$Builder&quot;))&#123;        //             console.log(&quot;Found the really Classloader&quot;)        //             Java.classFactory.loader = loader        //           &#125;        //       &#125;catch(e)&#123;        //       &#125;        //   &#125;,        //   onComplete: function()&#123;        //     console.log(&quot;Search Loaders Completed!&quot;)        //   &#125;        // &#125;)        // Java.use(&quot;okhttp3.OkHttpClient$Builder&quot;).certificatePinner.implementation = function(certificatePinner)&#123;        //   return this.certificatePinner(Java.use(&quot;okhttp3.CertificatePinner&quot;).DEFAULT.value) //CertificatePinner.DEFAULT        // &#125;        Java.enumerateLoadedClasses(&#123;            onMatch: function(clsName,handle)&#123;                if(checkIsImplementeInterFace(clsName,TrustManagerInterface))&#123;                    console.log(clsName)                    var targetClass = Java.use(clsName)                    var len = targetClass[&quot;checkServerTrusted&quot;].overloads.length                    for (var i = 0; i &lt; len; i++)&#123;                      //console.log(targetClass[&quot;checkServerTrusted&quot;].overloads[i].returnType.name)                      if(targetClass[&quot;checkServerTrusted&quot;].overloads[i].returnType.name == &#x27;V&#x27;)&#123;                        targetClass[&quot;checkServerTrusted&quot;].overloads[i].implementation = function()&#123;                          console.log(clsName + i + &quot;checkServerTrusted Called!&quot;)                          //return targetClass[&quot;checkServerTrusted&quot;].overloads[i].apply(this,arguments)                        &#125;                      &#125;else&#123;                        targetClass[&quot;checkServerTrusted&quot;].overloads[i].implementation = function()&#123;                          console.log(clsName + i + &quot;checkServerTrusted Called!&quot;)                          //return targetClass[&quot;checkServerTrusted&quot;].overloads[i].apply(this,arguments)                          return null                        &#125;                      &#125;                    &#125;                &#125;            &#125;,            onComplete: function()&#123;                console.log(&quot;Search Classes Completed!&quot;)            &#125;        &#125;)            &#125;)&#125;setImmediate(main)\n现在可以抓到包，证明请求发出去，那就是证书不对\ndump 证书先关掉vpn，让它正常发请求，并用脚本把证书导出\n方法一把证书密码dump出来，手动解压apk搜索证书导入charles即可\nfunction main()&#123;    Java.perform(function ()&#123;        function print_stack(p) &#123;            console.log(&quot;=====&gt;&quot;, p)            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()));        &#125;                var StringClass = Java.use(&quot;java.lang.String&quot;);        var KeyStore = Java.use(&quot;java.security.KeyStore&quot;);        KeyStore.load.overload(&#x27;java.security.KeyStore$LoadStoreParameter&#x27;).implementation = function (arg0) &#123;            // print_stack(&quot;KeyStore.load1&quot;);            console.log(&quot;KeyStore.load1:&quot;, arg0);            this.load(arg0);        &#125;;        KeyStore.load.overload(&#x27;java.io.InputStream&#x27;, &#x27;[C&#x27;).implementation = function (arg0, arg1) &#123;            // print_stack(&quot;KeyStore.load2&quot;);            console.log(&quot;KeyStore.load2:&quot;, arg0, arg1 ? StringClass.$new(arg1) : null);            this.load(arg0, arg1);        &#125;;        console.log(&quot;hook_KeyStore_load...&quot;);    &#125;)&#125;setImmediate(main)\n\n方法二dump出证书到手机，并修改证书密码 \nfunction main()&#123;    Java.perform(function ()&#123;        console.log(&quot;Enter!&quot;)        function storeP12(pri, p7, p12Path, p12Password) &#123;            var X509Certificate = Java.use(&quot;java.security.cert.X509Certificate&quot;)            var p7X509 = Java.cast(p7, X509Certificate);            var chain = Java.array(&quot;java.security.cert.X509Certificate&quot;, [p7X509])            var ks = Java.use(&quot;java.security.KeyStore&quot;).getInstance(&quot;PKCS12&quot;, &quot;BC&quot;);            ks.load(null, null);            ks.setKeyEntry(&quot;client&quot;, pri, Java.use(&#x27;java.lang.String&#x27;).$new(p12Password).toCharArray(), chain);            try &#123;              var out = Java.use(&quot;java.io.FileOutputStream&quot;).$new(p12Path);              ks.store(out, Java.use(&#x27;java.lang.String&#x27;).$new(p12Password).toCharArray())            &#125; catch (exp) &#123;              console.log(exp)            &#125;          &#125;          //在服务器校验客户端的情形下，帮助dump客户端证书，并保存为p12的格式，证书密码为r0ysue          Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getPrivateKey.implementation = function () &#123;            var result = this.getPrivateKey()            var packageName = Java.use(&quot;android.app.ActivityThread&quot;).currentApplication().getApplicationContext().getPackageName();            storeP12(this.getPrivateKey(), this.getCertificate(), &#x27;/sdcard/Download/&#x27; + packageName + &#x27;.p12&#x27;, &#x27;r0ysue&#x27;);            console.log(&quot;dumpClinetCertificate=&gt;&quot; + &#x27;/sdcard/Download/&#x27; + packageName + &#x27;.p12&#x27; + &#x27;   pwd: r0ysue&#x27;);                        return result;          &#125;          Java.use(&quot;java.security.KeyStore$PrivateKeyEntry&quot;).getCertificateChain.implementation = function () &#123;            var result = this.getCertificateChain()            var packageName = Java.use(&quot;android.app.ActivityThread&quot;).currentApplication().getApplicationContext().getPackageName();            storeP12(this.getPrivateKey(), this.getCertificate(), &#x27;/sdcard/Download/&#x27; + packageName + &#x27;.p12&#x27;, &#x27;r0ysue&#x27;);            console.log(&quot;dumpClinetCertificate=&gt;&quot; + &#x27;/sdcard/Download/&#x27; + packageName + &#x27;.p12&#x27; + &#x27;   pwd: r0ysue&#x27;);            return result;          &#125;    &#125;)&#125;setImmediate(main)\n\ncharles导入证书adb pull /sdcard/Download/com.ninemax.ncsearchnew.p12 /root/Desktop/\n再运行绕过本地校验脚本，成功抓包\n混淆的okhhtp3抓包\n通过它的官网知道是https，用的ca机构证书。不需要hook证书校验这一步jadx打开搜索 CertificatePinner\n\n通过查看的CertificatePinner源码，和该app的代码对比，基本一样的逻辑，证书校验不通过就会抛异常\n\n使用frida对其hook，置空\nfunction main()&#123;    Java.perform(function ()&#123;        Java.use(&quot;q.g&quot;).a.implementation = function()&#123;            console.log(&quot;check called!&quot;)        &#125;    &#125;)&#125;setImmediate(main)\ncharles设置443端口\n成功抓包\n\n","tags":["抓包"]},{"title":"检测vpn抓包","url":"/posts/21585/","content":"这是肉师傅知识星球的一道检测vpn抓包的练习题，当检测到开启vpn就会闪退软件我放在网盘了，需要的自取链接：https://pan.baidu.com/s/1h4QkrLyDlz8Wb1XylzYLWA提取码：jjrh既然已经知道是检测vpn了，通过查询资料以下4个类跟网络相关\n\n通过百度知道java.net.NetworkInterface.getName()是检测vpn的api，用objection来hook查看一下\n\n发现当开关vpn时，会检测到tun0的网卡，可以用来监测是否开启vpn。那用frida来hook修改tun0的返回值看看能不能绕过\n\n还是会闪退，怀疑检测点不止一个NetworkCapabilities 也有检测vpn的用objection hook一下 android.net.ConnectivityManager.getNetworkCapabilities\n\n通过查看文档知道，返回null即可\n\n用frida hook返回为null，还是闪退，用jadx打开查看报错位置\n\n这里返回null的话就无法调用后面的hasTransport方法，直接hook hasTransport修改返回值为false绕过\n\n开启vpn后app不闪退了，成功绕过\n\n完整代码\nfunction main() &#123;    Java.perform(function () &#123;        Java.use(&quot;java.net.NetworkInterface&quot;).getName.implementation = function()&#123;            var string_class = Java.use(&quot;java.lang.String&quot;);            var gname = this.getName();            if(gname == string_class.$new(&quot;tun0&quot;))&#123;                console.log(&quot;find ===&gt; &quot;, gname);                return string_class.$new(&quot;rmnet_data0&quot;)            &#125; else&#123;                console.log(&quot;gname ===&gt; &quot;, gname)            &#125;            return gname;        &#125;        // Java.use(&quot;android.net.ConnectivityManager&quot;).getNetworkCapabilities.implementation = function(v)&#123;        //     console.log(v)        //     var res = this.getNetworkCapabilities(v)        //     console.log(&quot;res ==&gt; &quot;, res)        //     return null;        // &#125;        Java.use(&quot;android.net.NetworkCapabilities&quot;).hasTransport.implementation = function(v)&#123;            console.log(v)            var res = this.hasTransport(v)            console.log(&quot;res ==&gt; &quot;, res)            return false;        &#125;    &#125;)&#125;setImmediate(main);","tags":["抓包"]},{"title":"抓包进阶之通杀okhttp证书","url":"/posts/2012/","content":"三层检验okhttp在客户端有三种检验证书方法证书验证sslSocketFactory证书锁定certificatePinner域名验证hostmaneVerfier\n\n如何做到通杀？三个检验方法都基于 OkHttpClient.Builder()要先找到 OkHttpClient，由于经过混淆的，无法直接定位\n步骤先把内存中的类的存到数组var classesNames = new Array()   // 存放加载的类// 1.把已经加载内存中的类枚举出来，存到一个数组里function loadClasses()&#123;    Java.perform(function ()&#123;        Java.enumerateLoadedClasses(&#123;            onMatch: function(clsName, handle)&#123;                classesNames.push(clsName);                console.log(clsName)            &#125;,            onComplete: function()&#123;                console.log(&quot;Search Class Completed!&quot;);            &#125;        &#125;)    &#125;)&#125;function main()&#123;    loadClasses()&#125;setImmediate(main)\n\n查找 okhttp3.OkHttpClient类和证书CertificatePinner类function findOkhttpClass()&#123;    Java.perform(function ()&#123;        var Modifier = Java.use(&quot;java.lang.reflect.Modifier&quot;)  // 反射框架，可以提供类的一些属性，例如是不是final，sttic等\t\t// 判断类是否是OkhttpClient        function isOkhttpClient(clsName)&#123;\t\t\t// Okhttp3.OkHttpClient            if(clsName.split(&#x27;.&#x27;).length != 2)&#123;                return false;            &#125;                        try&#123;                var cls = Java.use(clsName)                var interfaces = cls.class.getInterfaces()  // 通过反射获得当前类的一些接口                const count = interfaces.length                //console.log(count)\t\t\t\t// 当前类如果实现的接口小于2，就不是，okhttp实现的接口Cloneable, Call.Factory, WebSocket.Factory                 if(count &lt; 2)&#123;                    return false                &#125;                var flag = false\t\t\t\t// 对实现的接口进行遍历，进行判断                for(var i = 0; i &lt; count; i++)&#123;                    var interface_ = interfaces[i]                    var interface_name = interface_.getName()                                        if(interface_name.indexOf(&quot;Cloneable&quot;) &gt; 0)&#123;                        flag = true                    &#125;else&#123;                        if(interface_name.indexOf(&quot;$&quot;) &lt;= 0)&#123;  // 内部类Call.Factory                            return false                        &#125;                    &#125;                &#125;                if(!flag) return false;                \t\t\t\t// 过滤当前类没有内部类                if(cls.class.getDeclaredClasses().length &lt; 1)&#123;                    return false                &#125;\t\t\t\t// 过滤父类不是Object，OkHttpClient没有继承其他类                if(cls.class.getSuperclass().getName() != &#x27;java.lang.Object&#x27;)&#123;                    return false                &#125;                            &#125;catch(e)&#123;                return false            &#125;            return true;        &#125;        function isCertificatePinner(clsName,prefix)&#123;            // prefix=Okhttp3.\t\t\t// CertificatePinner类            if(!clsName.startsWith(prefix))&#123;                return false            &#125;            if(clsName.indexOf(&quot;$&quot;) &gt; 0)&#123;                return false            &#125;                        if(clsName.split(&#x27;.&#x27;).length != 2)&#123;                return false;            &#125;            var cls = Java.use(clsName)            if(cls.class.isInterface())&#123;                return false            &#125;                        if(cls.class.getInterfaces().length &gt; 0)&#123;                return false            &#125;                     if(cls.class.getDeclaredClasses().length &lt; 1)&#123;                return false            &#125;                        if(cls.class.getSuperclass().getName() != &quot;java.lang.Object&quot;)&#123;                return false            &#125;\t\t\t// 类属性是否有Final            if(!Modifier.isFinal(cls.class.getModifiers()))&#123;                return false            &#125;            var flag = false\t\t\t// 获得所有方法，然后遍历            var methods = cls.class.getDeclaredMethods()            for(var i = 0; i &lt; methods.length; i++)&#123;                var method = methods[i]\t\t\t\t// 过滤方法没有参数的                if(method.getParameterCount() &lt; 1)&#123;                    continue                &#125;\t\t\t\t// 方法的第一个参数是java.security.cert.Certificate                if(method.getParameterTypes()[0].getName() == &quot;java.security.cert.Certificate&quot;)&#123;                    flag = true                    break                &#125;            &#125;            if(!flag) return false            flag = false\t\t\t// 获取类的所有成员变量            var fields = cls.class.getDeclaredFields()\t\t\t// 类包含set集合            for(var k = 0; k &lt; fields.length; k++)&#123;                var field = fields[k];                if(field.getType().getName() == &quot;java.util.Set&quot;)&#123;                    flag = true                    break                &#125;            &#125;            if(!flag) return false            console.log(clsName)            return true        &#125;            for(var i = 0; i &lt; classesNames.length; i++)&#123;\t\t\t// 如果类名是OkhttpClient，就保存为变量            if(isOkhttpClient(classesNames[i]))&#123;                OkhttpClientClassName = classesNames[i]                //console.log(OkhttpClientClassName)                var splits = classesNames[i].split(&#x27;.&#x27;)                var len = splits.length                for(var j = 0; j &lt; len-1; j++)&#123;\t\t\t\t\t// Okhttp3.OkHttpClient                    prefix = prefix + splits[j] + &#x27;.&#x27;  // 当前包名的一个前缀，prefix=Okhttp3.                &#125;            &#125;        &#125;        // 找CertificatePinner类        for(var i = 0; i &lt; classesNames.length; i++)&#123;            if(isCertificatePinner(classesNames[i],prefix))&#123;                CertificatePinnerClassName = classesNames[i]                //console.log(CertificatePinnerClassName)            &#125;        &#125;        console.error(&quot;Found Class: &quot;+classesNames.length)        console.error(&quot;Okhttp&#x27;s package prefix: &quot;+prefix)        console.error(&quot;Find the OkhttpClient: &quot;+OkhttpClientClassName)        console.error(&quot;Find the OkhttpCertificatePinner: &quot;+CertificatePinnerClassName)        if(OkhttpClientClassName == &quot;&quot; || CertificatePinnerClassName == &quot;&quot; || prefix == &quot;&quot;)&#123;            console.error(&quot;Can&#x27;t find the okhttp class&quot;)        &#125;    &#125;)&#125;\n\nattach模式运行\n\n找到之后进行hook找builder内部类\nfunction hook()&#123;    Java.perform(function ()&#123;        var Modifier = Java.use(&quot;java.lang.reflect.Modifier&quot;)        //TrustAllManager，自定义类，hook方法置空，什么都不干        var TrustAllManagerClass = Java.registerClass(&#123;            name: &quot;TrustAllManager&quot;,            implements:[Java.use(&quot;javax.net.ssl.X509TrustManager&quot;)],            methods: &#123;                checkClientTrusted(chain, authType) &#123;                    console.log(&quot;checkClientTrusted Called!!&quot;)                &#125;,                checkServerTrusted(chain, authType) &#123;                    console.log(&quot;checkServerTrusted Called!!&quot;)                &#125;,                getAcceptedIssuers() &#123;                  return [];                &#125;,              &#125;        &#125;)        var trustAllManagerHandle = TrustAllManagerClass.$new()\t\t// 仿造\t\t// SSLContext context = SSLContext.getInstance(&quot;TLS&quot;);        // context.init(null, trustManagers ,new SecureRandom());        // SSLSocketFactory factory = context.getSocketFactory();        var sslContext = Java.use(&quot;javax.net.ssl.SSLContext&quot;).getInstance(&quot;TLS&quot;)        sslContext.init(null,Java.array(&quot;Ljavax.net.ssl.X509TrustManager;&quot;,[trustAllManagerHandle]),null)        var sslSocketFactory = sslContext.getSocketFactory()        //HostnameVerify，自定义类        var MyHostnameVerify = Java.registerClass(&#123;            name: &quot;MyHostnameVerify&quot;,            implements:[Java.use(&quot;javax.net.ssl.HostnameVerifier&quot;)],            methods: &#123;                verify(hostname, session)&#123;                    console.log(hostname)                    return true                &#125;            &#125;        &#125;)        var myHostnameVerifyHandle = MyHostnameVerify.$new()\t\t\t\t// 已经拿到okhttp3.OkHttpClient，拿它的内部类builder        var BuilderClassName = Java.use(OkhttpClientClassName).class.getDeclaredClasses()[0].getName()        var OkhttpClient$Buidler = Java.use(BuilderClassName)\t\t// 通过反射获取builder的所有方法        var methods = OkhttpClient$Buidler.class.getDeclaredMethods()                for(var i = 0; i &lt; methods.length; i++)&#123;            var method = methods[i]\t\t\t// 过滤方法没有参数的，目标方法都有参数\t\t\t// builder.sslSocketFactory(factory, (X509TrustManager) trustManagers[0]);\t\t\t// builder.certificatePinner(cerBuilder.build());\t\t\t// builder.hostnameVerifier(new HostnameVerifier()&#123;&#125;)；            if(method.getParameterCount() &lt; 1)&#123;                continue            &#125;\t\t\t// 第一道校验，第一个参数的类名是javax.net.ssl.SSLSocketFactory就进行hook，参数替换为自定义参数            if(method.getParameterTypes()[0].getName() == &quot;javax.net.ssl.SSLSocketFactory&quot;)&#123;                var sslSocketFacotryMethodName  = method.getName()\t\t\t\t// 获取该方法的重载个数                var len = OkhttpClient$Buidler[sslSocketFacotryMethodName].overloads.length\t\t\t\t// 遍历重载                for(var j = 0; j &lt; len; j++)&#123;                    OkhttpClient$Buidler[sslSocketFacotryMethodName].overloads[j].implementation = function(SSLSocketFactory)&#123;\t\t\t\t\t\t// 把参数替换为自定义的类                        arguments[0] = sslSocketFactory                        return this[sslSocketFacotryMethodName].apply(this,arguments)                    &#125;                &#125;                console.log(sslSocketFacotryMethodName,&quot;Hooked!&quot;)            &#125;\t\t\t// 第三道校验，第一个参数是javax.net.ssl.HostnameVerifier就进行hook，参数替换为自定义参数            if(method.getParameterTypes()[0].getName() == &quot;javax.net.ssl.HostnameVerifier&quot;)&#123;                var hostnameVerifierMethodName = method.getName()                                var len = OkhttpClient$Buidler[hostnameVerifierMethodName].overloads.length                for(var j = 0; j &lt; len; j++)&#123;                    OkhttpClient$Buidler[hostnameVerifierMethodName].overloads[j].implementation = function(hostnameVerifier)&#123;                        arguments[0] = myHostnameVerifyHandle                        return this[hostnameVerifierMethodName].apply(this,arguments)                    &#125;                &#125;                console.log(hostnameVerifierMethodName, &quot;Hooked!&quot;)            &#125;\t\t\t// 第二到校验，参数替换为它默认的，builder.certificatePinner(cerBuilder.build());\t\t\t// 默认public static final CertificatePinner DEFAULT = new Builder().build();            if(method.getParameterTypes()[0].getName() == CertificatePinnerClassName)&#123;                var CertificatePinnerClass = Java.use(CertificatePinnerClassName)                var certificatePinnerMethodName = method.getName()                var len = OkhttpClient$Buidler[certificatePinnerMethodName].overloads.length                for(var j = 0; j &lt; len; j++)&#123;                    OkhttpClient$Buidler[certificatePinnerMethodName].overloads[j].implementation = function()&#123;                        console.log(&quot;certificatePinner add called!&quot;)\t\t\t\t\t\t// 拿到所有的域，遍历                        var fields = CertificatePinnerClass.class.getDeclaredFields()                        for(var k = 0; k &lt; fields.length; k++)&#123;                            var field = fields[k];                            var modifiers = field.getModifiers()\t\t\t\t\t\t\t// public static final CertificatePinner DEFAULT = new Builder().build();                            if(Modifier.isFinal(modifiers) &amp;&amp; Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))&#123;                                arguments[0] = field.get(CertificatePinnerClass.class)                            &#125;                        &#125;                        return this[certificatePinnerMethodName].apply(this,arguments)                    &#125;                &#125;                console.log( method.getName(),&quot;Hooked!&quot;)            &#125;        &#125;        var CertificatePinnerClass = Java.use(CertificatePinnerClassName)        var methods = CertificatePinnerClass.class.getDeclaredMethods()        for (var i = 0; i &lt; methods.length; i++)&#123;            var method = methods[i]            if(method.getReturnType().getName() == &#x27;void&#x27;)&#123;                var methodName = method.getName()                console.log(methodName+&quot; Hooked!&quot;)                var m_len = CertificatePinnerClass[methodName].overloads.length                                for (var j = 0; j &lt; m_len; j++)&#123;                    if(CertificatePinnerClass[methodName].overloads[j].returnType.name == &#x27;V&#x27;)&#123;                        CertificatePinnerClass[methodName].overloads[j].implementation = function()&#123;                            console.log(&quot;certificatePinner check called!&quot;)                        &#125;                       &#125;                &#125;            &#125;        &#125;\t\t    &#125;)&#125;\n运行\n\n使用spwan模式主动加载类名function loadOkhttpClient()&#123;    Java.perform(function ()&#123;        try&#123;            // 把找到的类名替换这里            Java.use(&quot;okhttp3.OkHttpClient&quot;)        &#125;catch(e)&#123;            //console.error(e)        &#125;    &#125;)    &#125;\n测试滴答清单app\n完整代码var classesNames = new Array()  // 存放加载的类var OkhttpClientClassName = &quot;&quot;var CertificatePinnerClassName = &quot;&quot;var prefix = &quot;&quot;function loadOkhttpClient()&#123;    Java.perform(function ()&#123;        try&#123;            Java.use(&quot;q.x&quot;)        &#125;catch(e)&#123;            //console.error(e)        &#125;    &#125;)    &#125;// 1.把已经加载内存中的类枚举出来，存到一个数组里function loadClasses()&#123;    Java.perform(function ()&#123;        Java.enumerateLoadedClasses(&#123;            onMatch: function(clsName, handle)&#123;                classesNames.push(clsName)            &#125;,            onComplete: function()&#123;                console.log(&quot;Search Class Completed!&quot;)            &#125;        &#125;)    &#125;)&#125;function findOkhttpClass()&#123;    Java.perform(function ()&#123;        var Modifier = Java.use(&quot;java.lang.reflect.Modifier&quot;)  // 反射框架，可以提供类的一些属性，例如是不是final，sttic等\t\t// 判断类是否是OkhttpClient        function isOkhttpClient(clsName)&#123;\t\t\t// Okhttp3.OkHttpClient            if(clsName.split(&#x27;.&#x27;).length != 2)&#123;                return false;            &#125;                        try&#123;                var cls = Java.use(clsName)                var interfaces = cls.class.getInterfaces()  // 通过反射获得当前类的一些接口                const count = interfaces.length                //console.log(count)\t\t\t\t// 当前类如果实现的接口小于2，就不是，okhttp实现的接口Cloneable, Call.Factory, WebSocket.Factory                 if(count &lt; 2)&#123;                    return false                &#125;                var flag = false\t\t\t\t// 对实现的接口进行遍历，进行判断                for(var i = 0; i &lt; count; i++)&#123;                    var interface_ = interfaces[i]                    var interface_name = interface_.getName()                                        if(interface_name.indexOf(&quot;Cloneable&quot;) &gt; 0)&#123;                        flag = true                    &#125;else&#123;                        if(interface_name.indexOf(&quot;$&quot;) &lt;= 0)&#123;  // 内部类Call.Factory                            return false                        &#125;                    &#125;                &#125;                if(!flag) return false;                \t\t\t\t// 过滤当前类没有内部类                if(cls.class.getDeclaredClasses().length &lt; 1)&#123;                    return false                &#125;\t\t\t\t// 过滤父类不是Object，OkHttpClient没有继承其他类                if(cls.class.getSuperclass().getName() != &#x27;java.lang.Object&#x27;)&#123;                    return false                &#125;                            &#125;catch(e)&#123;                return false            &#125;            return true;        &#125;        function isCertificatePinner(clsName,prefix)&#123;            // prefix=Okhttp3.\t\t\t// CertificatePinner类            if(!clsName.startsWith(prefix))&#123;                return false            &#125;            if(clsName.indexOf(&quot;$&quot;) &gt; 0)&#123;                return false            &#125;                        if(clsName.split(&#x27;.&#x27;).length != 2)&#123;                return false;            &#125;            var cls = Java.use(clsName)            if(cls.class.isInterface())&#123;                return false            &#125;                        if(cls.class.getInterfaces().length &gt; 0)&#123;                return false            &#125;                     if(cls.class.getDeclaredClasses().length &lt; 1)&#123;                return false            &#125;                        if(cls.class.getSuperclass().getName() != &quot;java.lang.Object&quot;)&#123;                return false            &#125;\t\t\t// 类属性是否有Final            if(!Modifier.isFinal(cls.class.getModifiers()))&#123;                return false            &#125;            var flag = false\t\t\t// 获得所有方法，然后遍历            var methods = cls.class.getDeclaredMethods()            for(var i = 0; i &lt; methods.length; i++)&#123;                var method = methods[i]\t\t\t\t// 过滤方法没有参数的                if(method.getParameterCount() &lt; 1)&#123;                    continue                &#125;\t\t\t\t// 方法的第一个参数是java.security.cert.Certificate                if(method.getParameterTypes()[0].getName() == &quot;java.security.cert.Certificate&quot;)&#123;                    flag = true                    break                &#125;            &#125;            if(!flag) return false            flag = false\t\t\t// 获取类的所有成员变量            var fields = cls.class.getDeclaredFields()\t\t\t// 类包含set集合            for(var k = 0; k &lt; fields.length; k++)&#123;                var field = fields[k];                if(field.getType().getName() == &quot;java.util.Set&quot;)&#123;                    flag = true                    break                &#125;            &#125;            if(!flag) return false            console.log(clsName)            return true        &#125;            for(var i = 0; i &lt; classesNames.length; i++)&#123;\t\t\t// 如果类名是OkhttpClient，就保存为变量            if(isOkhttpClient(classesNames[i]))&#123;                OkhttpClientClassName = classesNames[i]                //console.log(OkhttpClientClassName)                var splits = classesNames[i].split(&#x27;.&#x27;)                var len = splits.length                for(var j = 0; j &lt; len-1; j++)&#123;\t\t\t\t\t// Okhttp3.OkHttpClient                    prefix = prefix + splits[j] + &#x27;.&#x27;  // 当前包名的一个前缀，prefix=Okhttp3.                &#125;            &#125;        &#125;        // 找CertificatePinner类        for(var i = 0; i &lt; classesNames.length; i++)&#123;            if(isCertificatePinner(classesNames[i],prefix))&#123;                CertificatePinnerClassName = classesNames[i]                //console.log(CertificatePinnerClassName)            &#125;        &#125;        console.error(&quot;Found Class: &quot;+classesNames.length)        console.error(&quot;Okhttp&#x27;s package prefix: &quot;+prefix)        console.error(&quot;Find the OkhttpClient: &quot;+OkhttpClientClassName)        console.error(&quot;Find the OkhttpCertificatePinner: &quot;+CertificatePinnerClassName)        if(OkhttpClientClassName == &quot;&quot; || CertificatePinnerClassName == &quot;&quot; || prefix == &quot;&quot;)&#123;            console.error(&quot;Can&#x27;t find the okhttp class&quot;)        &#125;    &#125;)&#125;function hook()&#123;    Java.perform(function ()&#123;        var Modifier = Java.use(&quot;java.lang.reflect.Modifier&quot;)        //TrustAllManager，自定义类，hook方法置空，什么都不干        var TrustAllManagerClass = Java.registerClass(&#123;            name: &quot;TrustAllManager&quot;,            implements:[Java.use(&quot;javax.net.ssl.X509TrustManager&quot;)],            methods: &#123;                checkClientTrusted(chain, authType) &#123;                    console.log(&quot;checkClientTrusted Called!!&quot;)                &#125;,                checkServerTrusted(chain, authType) &#123;                    console.log(&quot;checkServerTrusted Called!!&quot;)                &#125;,                getAcceptedIssuers() &#123;                  return [];                &#125;,              &#125;        &#125;)        var trustAllManagerHandle = TrustAllManagerClass.$new()\t\t// 仿造\t\t// SSLContext context = SSLContext.getInstance(&quot;TLS&quot;);        // context.init(null, trustManagers ,new SecureRandom());        // SSLSocketFactory factory = context.getSocketFactory();        var sslContext = Java.use(&quot;javax.net.ssl.SSLContext&quot;).getInstance(&quot;TLS&quot;)        sslContext.init(null,Java.array(&quot;Ljavax.net.ssl.X509TrustManager;&quot;,[trustAllManagerHandle]),null)        var sslSocketFactory = sslContext.getSocketFactory()        //HostnameVerify，自定义类        var MyHostnameVerify = Java.registerClass(&#123;            name: &quot;MyHostnameVerify&quot;,            implements:[Java.use(&quot;javax.net.ssl.HostnameVerifier&quot;)],            methods: &#123;                verify(hostname, session)&#123;                    console.log(hostname)                    return true                &#125;            &#125;        &#125;)        var myHostnameVerifyHandle = MyHostnameVerify.$new()\t\t\t\t// 已经拿到okhttp3.OkHttpClient，拿它的内部类builder        var BuilderClassName = Java.use(OkhttpClientClassName).class.getDeclaredClasses()[0].getName()        var OkhttpClient$Buidler = Java.use(BuilderClassName)\t\t// 通过反射获取builder的所有方法        var methods = OkhttpClient$Buidler.class.getDeclaredMethods()                for(var i = 0; i &lt; methods.length; i++)&#123;            var method = methods[i]\t\t\t// 过滤方法没有参数的，目标方法都有参数\t\t\t// builder.sslSocketFactory(factory, (X509TrustManager) trustManagers[0]);\t\t\t// builder.certificatePinner(cerBuilder.build());\t\t\t// builder.hostnameVerifier(new HostnameVerifier()&#123;&#125;)；            if(method.getParameterCount() &lt; 1)&#123;                continue            &#125;\t\t\t// 第一道校验，第一个参数的类名是javax.net.ssl.SSLSocketFactory就进行hook，参数替换为自定义参数            if(method.getParameterTypes()[0].getName() == &quot;javax.net.ssl.SSLSocketFactory&quot;)&#123;                var sslSocketFacotryMethodName  = method.getName()\t\t\t\t// 获取该方法的重载个数                var len = OkhttpClient$Buidler[sslSocketFacotryMethodName].overloads.length\t\t\t\t// 遍历重载                for(var j = 0; j &lt; len; j++)&#123;                    OkhttpClient$Buidler[sslSocketFacotryMethodName].overloads[j].implementation = function(SSLSocketFactory)&#123;\t\t\t\t\t\t// 把参数替换为自定义的类                        arguments[0] = sslSocketFactory                        return this[sslSocketFacotryMethodName].apply(this,arguments)                    &#125;                &#125;                console.log(sslSocketFacotryMethodName,&quot;Hooked!&quot;)            &#125;\t\t\t// 第三道校验，第一个参数是javax.net.ssl.HostnameVerifier就进行hook，参数替换为自定义参数            if(method.getParameterTypes()[0].getName() == &quot;javax.net.ssl.HostnameVerifier&quot;)&#123;                var hostnameVerifierMethodName = method.getName()                                var len = OkhttpClient$Buidler[hostnameVerifierMethodName].overloads.length                for(var j = 0; j &lt; len; j++)&#123;                    OkhttpClient$Buidler[hostnameVerifierMethodName].overloads[j].implementation = function(hostnameVerifier)&#123;                        arguments[0] = myHostnameVerifyHandle                        return this[hostnameVerifierMethodName].apply(this,arguments)                    &#125;                &#125;                console.log(hostnameVerifierMethodName, &quot;Hooked!&quot;)            &#125;\t\t\t// 第二到校验，参数替换为它默认的，builder.certificatePinner(cerBuilder.build());\t\t\t// 默认public static final CertificatePinner DEFAULT = new Builder().build();            if(method.getParameterTypes()[0].getName() == CertificatePinnerClassName)&#123;                var CertificatePinnerClass = Java.use(CertificatePinnerClassName)                var certificatePinnerMethodName = method.getName()                var len = OkhttpClient$Buidler[certificatePinnerMethodName].overloads.length                for(var j = 0; j &lt; len; j++)&#123;                    OkhttpClient$Buidler[certificatePinnerMethodName].overloads[j].implementation = function()&#123;                        console.log(&quot;certificatePinner add called!&quot;)\t\t\t\t\t\t// 拿到所有的域，遍历                        var fields = CertificatePinnerClass.class.getDeclaredFields()                        for(var k = 0; k &lt; fields.length; k++)&#123;                            var field = fields[k];                            var modifiers = field.getModifiers()\t\t\t\t\t\t\t// public static final CertificatePinner DEFAULT = new Builder().build();                            if(Modifier.isFinal(modifiers) &amp;&amp; Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))&#123;                                arguments[0] = field.get(CertificatePinnerClass.class)                            &#125;                        &#125;                        return this[certificatePinnerMethodName].apply(this,arguments)                    &#125;                &#125;                console.log( method.getName(),&quot;Hooked!&quot;)            &#125;        &#125;        var CertificatePinnerClass = Java.use(CertificatePinnerClassName)        var methods = CertificatePinnerClass.class.getDeclaredMethods()        for (var i = 0; i &lt; methods.length; i++)&#123;            var method = methods[i]            if(method.getReturnType().getName() == &#x27;void&#x27;)&#123;                var methodName = method.getName()                console.log(methodName+&quot; Hooked!&quot;)                var m_len = CertificatePinnerClass[methodName].overloads.length                                for (var j = 0; j &lt; m_len; j++)&#123;                    if(CertificatePinnerClass[methodName].overloads[j].returnType.name == &#x27;V&#x27;)&#123;                        CertificatePinnerClass[methodName].overloads[j].implementation = function()&#123;                            console.log(&quot;certificatePinner check called!&quot;)                        &#125;                       &#125;                &#125;            &#125;        &#125;\t\t    &#125;)&#125;function main()&#123;    loadOkhttpClient()    loadClasses()    findOkhttpClass()    hook()        &#125;setImmediate(main)","tags":["抓包"]},{"title":"抓包进阶之双端校验","url":"/posts/39138/","content":"挂上vpn，打开charles抓包可以看到没网络，但是可以抓到包，怀疑是服务器校验客户端证书了这里推荐一下肉老师的文章 https://www.anquanke.com/post/id/197657引用里面一张图原本服务器校验的是app的证书，但是挂上charles，服务器校验的是charles的证书，一匹配发现不是app的证书，就返回网络失败，所以我们要将app中内置的证书导入到Charles中去。这个操作通常需要完成两项内容：\n\n找到证书文件\n找到证书密码首先找证书文件，直接对apk进行解包，直接过滤搜索后缀名为p12的文件即可，一般常用的命令为tree -NCfhl |grep -i p12，直接打印出p12文件的路径\n\n找证书密码一般解密会调用现成的API，java.security.KeyStore ，直接使用frida打印出来，也可以hook系统文件库，这里直接使用现成的代码，\nfunction hook_KeyStore_load() &#123;    Java.perform(function () &#123;        var StringClass = Java.use(&quot;java.lang.String&quot;);        var KeyStore = Java.use(&quot;java.security.KeyStore&quot;);        KeyStore.load.overload(&#x27;java.security.KeyStore$LoadStoreParameter&#x27;).implementation = function (arg0) &#123;            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));            console.log(&quot;KeyStore.load1:&quot;, arg0);            this.load(arg0);        &#125;;        KeyStore.load.overload(&#x27;java.io.InputStream&#x27;, &#x27;[C&#x27;).implementation = function (arg0, arg1) &#123;            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Throwable&quot;).$new()));            console.log(&quot;KeyStore.load2:&quot;, arg0, arg1 ? StringClass.$new(arg1) : null);            this.load(arg0, arg1);        &#125;;        console.log(&quot;hook_KeyStore_load...&quot;);    &#125;);&#125;setImmediate(hook_KeyStore_load)\n使用spawn的模式启动，密码一下子就吐出来了把证书导入到charles，并输入刚才的密码再次抓包试试，这次页面跳转了，请求也是正常了\n","tags":["抓包"]},{"title":"Hook抓包","url":"/posts/27616/","content":"Hook抓包核心思想：数据包在明文状态下的一切时机进行dump\nHTTPrequest使用socket实现原生的请求新建一个安卓项目，在mainactivity里添加\npublic class MainActivity extends AppCompatActivity &#123;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        new Thread(new Runnable() &#123;            @Override            public void run() &#123;                httpsock();            &#125;        &#125;).start();    &#125;    private static void httpsock()&#123;        try &#123;            final String host = &quot;www.httpbin.org&quot;;            final int port = 80;            final String path = &quot;/get&quot;;            Socket socket = new Socket(host, port);            StringBuilder sb = new StringBuilder();            sb.append(&quot;GET &quot; + path + &quot; HTTP/1.1\\r\\n&quot;);            sb.append(&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\\r\\n&quot;);            sb.append(&quot;Host: &quot;+ host+&quot;\\r\\n&quot;);            sb.append(&quot;\\r\\n&quot;);            OutputStream outputStream = socket.getOutputStream();            outputStream.write(sb.toString().getBytes());            InputStream inputStream = socket.getInputStream();            byte[] buffer = new byte[1024];            int len;            while ((len = inputStream.read(buffer, 0, buffer.length)) != -1)&#123;                Log.d(&quot;response==&gt;&quot;, new String(Arrays.copyOf(buffer, len)));            &#125;        &#125; catch (IOException e) &#123;            e.printStackTrace();        &#125;    &#125;&#125;\n\n运行一下\n分析这是socket发送http请求的数据包，把数据包写进outputStream后进行发送，outputStream是socket对象的方法，先看一下socket的实现。跟进一下socket的实现\n\n这些都是实现的接口，要找到实现的地方，跟进setImpl方法\n\n可以看到impl是实例对象，这里有分支，先看一下factory，在该文件搜索factory &#x3D; ，看被什么赋值了，\n看到两次赋值的值都是null，所以走else，跟进 SocksSocketImpl();，这里就到socket实现的地方。\n\n进行搜索getOutputStream()方法实现的地方，发现没有找到，那就是存在父类了，跟进父类PlainSocketImpl。再次搜索没有，再跟进它的父类AbstractPlainSocketImpl\n\n再搜索，发现找到了getOutputStream()实现的地方，两个if都是抛出异常，看第三个if，跟进SocketOutputStream()，\n找到了SocketOutputStream()对象的地方，搜索write()方法，参数是字节\n跟进socketWrite()，调用了socketWrite0()方法，跟进\n可以看到该方法在native层。\nfrida抓包跟到socketWrite0()这里，应该是java层最底层了，hook socketWrite0尝试下\nfunction main()&#123;    Java.perform(function()&#123;        //Http request        Java.use(&quot;java.net.SocketOutputStream&quot;).socketWrite0.implementation = function(fd,bytes,off,len)&#123;            hexdump(bytes,off,len)            this.socketWrite0(fd,bytes,off,len)        &#125;        \t\t// 打印字节数组        function hexdump(bytearry,offset,length)&#123;            var HexDump = Java.use(&quot;com.android.internal.util.HexDump&quot;)            console.log(HexDump.dumpHexString(bytearry,offset,length))        &#125;    &#125;)&#125;setImmediate(main)\n运行frida，运行脚本，成功抓到包再完善一下，添加请求地址，堆栈\nfunction main()&#123;    Java.perform(function()&#123;        //Http request        Java.use(&quot;java.net.SocketOutputStream&quot;).socketWrite0.implementation = function(fd,bytes,off,len)&#123;            // 地址            printAddress(this.socket, true)            // 请求            hexdump(bytes,off,len)            // 堆栈            showStacks()            this.socketWrite0(fd,bytes,off,len)        &#125;                function printAddress(socket, isSend)&#123;            var localAddress = socket.value.getLocalAddress().toString()            var remoteAddress = socket.value.getRemoteSocketAddress().toString()            if(isSend)&#123;                console.log(localAddress +&quot;====&gt;&quot;+ remoteAddress)            &#125;else&#123;                console.log(remoteAddress +&quot;====&gt;&quot;+ localAddress)            &#125;        &#125;        function hexdump(bytearry,offset,length)&#123;            var HexDump = Java.use(&quot;com.android.internal.util.HexDump&quot;)            console.log(HexDump.dumpHexString(bytearry,offset,length))        &#125;        function showStacks() &#123;            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()));        &#125;    &#125;)&#125;setImmediate(main)\n请求地址，堆栈都打印了现在知识完成request部分，还有response\nresponse分析接受数据是InputStream，调用的是socket的getInputStream，getInputStream和getOuputStream是成对出现的，按着刚才的思路可以找到。或者，socketWrite0()是在SocketOutputStream，那么socketRead0()就是在SocketInputStream里。\nfrida抓包用Frida hook试试，再之前的代码上添加\n//Http responseJava.use(&quot;java.net.SocketInputStream&quot;).socketRead0.implementation = function(fd,bytes,off,len,timeout)&#123;    printAddress(this.socket, true)    hexdump(bytes,off,len)    showStacks()    return this.socketRead0(fd,bytes,off,len,timeout)&#125;\n也是成功抓到返回的数据HTTP通用的收发包都抓到了，那HTTPS的呢\nHTTPSrequest也是一样，创建一个HTTPS的请求\ntry &#123;    final String host = &quot;www.httpbin.org&quot;;    final int port = 443;    final String path = &quot;/get&quot;;    SSLSocketFactory sslSocketFactory = (SSLSocketFactory) SSLSocketFactory.getDefault();    SSLSocket socket = (SSLSocket) sslSocketFactory.createSocket(host, port);    StringBuilder sb = new StringBuilder();    sb.append(&quot;GET &quot; + path + &quot; HTTP/1.1\\r\\n&quot;);    sb.append(&quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36\\r\\n&quot;);    sb.append(&quot;Host: &quot;+ host+&quot;\\r\\n&quot;);    sb.append(&quot;\\r\\n&quot;);    Log.d(&quot;request body ===&gt;&quot;, sb.toString());    OutputStream outputStream = socket.getOutputStream();    outputStream.write(sb.toString().getBytes());    InputStream inputStream = socket.getInputStream();    byte[] buffer = new byte[1024];    int len;    while ((len = inputStream.read(buffer, 0, buffer.length)) != -1)&#123;        Log.d(&quot;response ==&gt;&quot;, new String(Arrays.copyOf(buffer, len)));    &#125;&#125; catch (IOException e) &#123;    e.printStackTrace();&#125;\n运行之后\n分析这里使用调试，可以快速定位到对象类的位置，在源码中搜一下ConscryptFileDescriptorSocket网址：http://aospxref.com/android-8.1.0_r81/然后在源码文件搜索内部类SSLOutputStream，是继承OutputStream，然后对原来的write方法进行重写跟踪一下write方法里的ssl.write()再跟踪NativeCrypto.SSL_write()，又到了native层，可以说已经在java层跟到底了\nfrida抓包用frida hook下org.conscrypt.NativeCrypto类下的SSL_write()方法\nfunction main()&#123;    Java.perform(function()&#123;        //Https request        Java.use(&quot;org.conscrypt.NativeCrypto&quot;).SSL_write.implementation = function(ssl,fd,shc,bytes,off,len,timeout)&#123;            hexdump(bytes,off,len)            showStacks()            this.SSL_write(ssl,fd,shc,bytes,off,len,timeout)        &#125;        \t\t// 打印字节数组        function hexdump(bytearry,offset,length)&#123;            var HexDump = Java.use(&quot;com.android.internal.util.HexDump&quot;)            console.log(HexDump.dumpHexString(bytearry,offset,length))        &#125;        function showStacks() &#123;            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()));        &#125;    &#125;)&#125;setImmediate(main)\n运行会看到报错了，说找不到NativeCrypto这个类使用objection看一下，内存中是否存在NativeCrypto，多加了com.android前缀，再用frida试一下com.android.org.conscrypt.NativeCrypto这次成功抓到包\nresponseresponse同理\nfrida抓包//Https responseJava.use(&quot;com.android.org.conscrypt.NativeCrypto&quot;).SSL_read.implementation = function(ssl,fd,shc,bytes,off,len,timeout)&#123;    hexdump(bytes,off,len)    showStacks()    return this.SSL_read(ssl,fd,shc,bytes,off,len,timeout)&#125;\n\n完整代码function main()&#123;    Java.perform(function()&#123;        //Http request        Java.use(&quot;java.net.SocketOutputStream&quot;).socketWrite0.implementation = function(fd,bytes,off,len)&#123;            printAddress(this.socket, true)            hexdump(bytes,off,len)            showStacks()            this.socketWrite0(fd,bytes,off,len)        &#125;        //Http response        Java.use(&quot;java.net.SocketInputStream&quot;).socketRead0.implementation = function(fd,bytes,off,len,timeout)&#123;            printAddress(this.socket, false)            hexdump(bytes,off,len)            showStacks()            return this.socketRead0(fd,bytes,off,len,timeout)        &#125;        //Https request        Java.use(&quot;com.android.org.conscrypt.NativeCrypto&quot;).SSL_write.implementation = function(sslNativePointer,fd,shc,bytes,off,len,timeout)&#123;            printHttpsAddress(fd)            hexdump(bytes,off,len)            showStacks()            return this.SSL_write(sslNativePointer,fd,shc,bytes,off,len,timeout)        &#125;        //Https response        Java.use(&quot;com.android.org.conscrypt.NativeCrypto&quot;).SSL_read.implementation = function(sslNativePointer,fd,shc,bytes,off,len,timeout)&#123;            printHttpsAddress(fd)            hexdump(bytes,off,len)            showStacks()            return this.SSL_read(sslNativePointer,fd,shc,bytes,off,len,timeout)        &#125;        function printHttpsAddress(fd, isSend)&#123;            var local = Socket.localAddress(fd.getInt$())            var peer = Socket.peerAddress(fd.getInt$())            if(isSend)&#123;                console.log(local.ip+&quot;:&quot;+local.port +&quot;====&gt;&quot;+ peer.ip+&quot;:&quot;+peer.port)            &#125;else&#123;                console.log(peer.ip+&quot;:&quot;+peer.port +&quot;====&gt;&quot;+ local.ip+&quot;:&quot;+local.port)            &#125;        &#125;        function printAddress(socket, isSend)&#123;            var localAddress = socket.value.getLocalAddress().toString()            var remoteAddress = socket.value.getRemoteSocketAddress().toString()            if(isSend)&#123;                console.log(localAddress +&quot;====&gt;&quot;+ remoteAddress)            &#125;else&#123;                console.log(remoteAddress +&quot;====&gt;&quot;+ localAddress)            &#125;        &#125;        function hexdump(bytearry,offset,length)&#123;            var HexDump = Java.use(&quot;com.android.internal.util.HexDump&quot;)            console.log(HexDump.dumpHexString(bytearry,offset,length))        &#125;                function showStacks() &#123;            console.log(Java.use(&quot;android.util.Log&quot;).getStackTraceString(Java.use(&quot;java.lang.Exception&quot;).$new()));        &#125;    &#125;)&#125;setImmediate(main)","tags":["抓包"]},{"title":"Frida&反调试&反反调试","url":"/posts/14651/","content":"操作Frida的两种模式：命令，rpcFrida两种操作APP模式：spawn，attachattach：应用运行中hook，有壳也是没问题的spawn：创建进程时就hook，有壳的话就不行\n反调试Frida1.查看&#x2F;data&#x2F;local&#x2F;usr是否firda文件2.端口20742是否开启3.进程中是否有frida4.检测内存trate是否开启，因为frida调试会显示true，解决方法：使用spawn模式hook检测trate的方法，返回false\n三板斧：\n先hook、看参数和返回值：定位：命令行\n再构造参数、主动调用：利用：命令行\n最后配RPC导出结果：规模化利用：PYTHON\n\n作弊检测1.检测是否存在危险APP包名主要检测hook框架，模拟点击工具，xposed，magisk，supersu等root工具\n2.一些设备常规信息，比如电量状态，usb状态，屏幕亮度，地理位置，wifi或者sim卡信息，ip，mac等。一般批量操作或者抹机操作的时候这些值更改难度和成本比较大，所以这些指标能伪造会大大降低被风控\n3.APP加壳4.手机系统usr&#x2F;local&#x2F;tmp下是否有frida，端口27042是否开着，TracerPid值是否在调试状态（京东9.22）5.参数签名、参数加密，把加密参数放在native层，native层ollvm编译6.异常上报sdk异常上报sdk一般记录运行时所有的异常情况，并且会记录设备指纹，通过这些也能检测到作弊的一些设备。\n7.私有网络协议、protobuf等协议、私有网络证书、反代理抓包目前比较流行protobuf协议替代json，还有一些私有TCP&#x2F;Socket协议，这些协议不可直接读，需要一个解析工具或者分析还原。私有网络证书需要证书密钥配合代理抓包工具才能抓包分析，这种其实难度在于找到证书密钥和判断是否用了私有证书，一般聊天APP的IM协议常用。还有反代理抓包，比如集成OkHttp框架等的时候用Proxy.NO_Proxy来防止抓包。\n反反作弊方法及思路1.搜集设备指纹如数美易盾或者一些大的app都会内嵌搜集设备指纹的模块，通过设备指纹来确定设备的唯一性，如imei、android_id、mac、其他设备信息结合起来就能变成一个唯一的标志。\n2.搜集IP、MAC地址、蓝牙MAC、WIFI等网络指纹大量的搜集后跟其他搜集的信息结合并且不断地完善代理ip和黑ip、mac库，就能不断地能识别作弊源头。\n3.地理位置、下载渠道、授权登录地理位置和ip是否对应、基站信息是否对应、或者设备型号跟下载渠道对应、一般小米手机的软件大部分应该小米商城下载的，比如微信授权登录，QQ授权登录等、如果模拟授权登录需要破解其他给权的APP的一些协议。\n反反作弊工具和策略1.逆向工具\njava：dex2jar,jadx,jeb,android-killer等等很多\nso文件：IDA,jeb,Gidra\njs：其实nodejs加谷歌或者火狐就能搞定\n其他：unicorn,unidibug等基于qemu虚拟机的工具\n\n2.抓包工具\nCharles、Fillder：这两个其实差不多，用于http、websocket等应用层抓包\nWireShark：各种协议都能支持，需要更深入的网络协议技术基础\nBurpSuite：可以开发一些插件，会开发就各种神操作把。\n\n3.hook框架\nxposed：用户比较多，尤其云控、群控、那些化妆品，教育类、保险等销售类的都在用，市场规模大。\nfrida：一般开发者使用的多，快，无需重启，会js就会玩吧。\ncydia：hook Native层的时候多一点，老开发者用的多。\ninlinehook，xhook：这两个类似，inlinehook多用于hook b跳转的，xhook多用于系统函数。\nmagisk:安卓8以上xposed或者其他一些证书安装等工具都基于这个，这个其实未来深入研究的东西。4.模拟点击\nuiautomator ：很多模拟点击软件基于这个，跟xposed结合开发比较合适，理解安卓开发的入门比较简单。\n\n5.行业难度\nollvm混淆：逆向行业目前应该最头疼的就这个吧，主要原理时if-else改成while(true){switch() case:}了，但是逆向成本变高了，并且各种延申的东西越来越多，需要经验和技术积累才能100%还原或破解。\n\n机器学习风控策略：这个没有多年经验或者没有相当长的时间去摸索或者没跟班一个APP的成长的话很难对应，并且大部分都是通过养号，养设备等方式去对应，还有的是破解协议，并且伪造大量的设备信息，通过IP代理池，卡商和打码平台等第三方服务来维持。不过随着法律的完善和APP自身的风控体系健全对应成本越来越高，现在很难实现大批量账号登录注册。检测是否roothttps://github.com/sensepost/objection/blob/e7eb1d9b769edf6a98870c75a6d2a6123b7346fd/agent/src/android/root.ts通过命令行输入su看是否有返回\n","tags":["frida"]},{"title":"刷机","url":"/posts/56024/","content":"工具https://source.android.com/setup/start/build-numbershttps://developers.google.cn/android/images#anglerhttps://github.com/shadowsocks/shadowsocks-android/tagshttps://github.com/topjohnwu/Magisk/tags magisk，下载zip包https://eu.dl.twrp.me/angler/twrp-3.3.0-0-angler.img.html   nexus 6phttps://dl.twrp.me/sailfish/twrp-3.3.0-0-sailfish.img.htmlhttps://dl.twrp.me/bullhead/twrp-3.3.1-0-bullhead.img.html   nexus 5xhttps://www.kali.org/get-kali/#kali-mobile  kali nethuntSR5-SuperSU-v2.82-SR5-20171001224502.zip  超级授权\nnexus 6p刷安卓8下载刷机包\nwget https://dl.google.com/dl/android/aosp/angler-opm1.171019.011-factory-39448337.zip\n解压\n7z x angler-opm1.171019.011-factory-39448337.zip\n手机关机，先按住音量键下+电源键，进入reboot进入解压后的刷机包，运行\n./flash-all.sh\n等待过程，显示下图则成功\n\n刷入SuperSU（Android 8）连上数据线，开启开发者模式运行命令\nadb push SR5-SuperSU-v2.82-SR5-20171001224502.zip /sdcard/Download\nadb reboot bootloader \nfastboot flash recovery twrp-3.3.0-0-angler.img\n音量键向下按两次，进入recovery mode向右划选择install进入Download 选择SuperSU向右划点击reboot system向右划手机就会重启\n安装xpoder安装ssr\n“已连接，但无法访问互联网”开机后wifi有感叹号, 时间无法同步解决办法 在手机的shell里以root用户执行：# settings put global captive_portal_http_url https://www.google.cn/generate_204 # settings put global captive_portal_https_url https://www.google.cn/generate_204 # settings put global ntp_server 1.hk.pool.ntp.org # reboot\n打开xposed，向下拉刷新下载version 90\n刷magisk（Android 10有效）同样的方式刷入magisk，把magisk.zip放到sdcard根目录下\nadb push Magisk-v21.2.zip /sdcard/\n手机关机先按住音量键下+电源键进入reboot按两下音量键下，选择recovery mode点击install选择magisk.zip后，向右划重新启动\n刷nethunt下载，或者window直接下载\nproxychains wget https://images.kali.org/nethunter/nethunter-2021.2-angler-oreo-kalifs-full.zip \n把下载好后的nethunter放到sdcard下\nadb reboot bootloader\nfastboot flash recovery twrp-3.3.1-0-bullhead.img\n 按两下音量键下 选择nethunter就开始自动刷机\n\napt update\napt install neofetch jnettop htop nethogs\nneofetch\n\n点击NetHunter菜单选择KeX Manager点击SETUP LOCAL SERVER设置密码 点击START SERVER开启服务器\n连接手机\nssh root@xxx.xxx.xx.xx\n\n\n\n\n\n另一种 android8+magisk+LSPosedhttps://developers.google.cn/android/imageshttps://topjohnwu.github.io/Magisk/install.htmlandroid8+magisk+LSPosed下载刷机系统包后，解压，进入，输入 .&#x2F;flash-all.sh安装magisk修补镜像才能root刷完后从刷机包里的镜像压缩包找到boot.img ，推送到 &#x2F;sdcard&#x2F; 下打开magisk，点击安装，选择并修补一个文件，选择刚才推送的文件，点开始，然后就开始patch了显示All done后，adb shell进入到 &#x2F;sdcard&#x2F;Download&#x2F; 下，看到修补后的img，adb pull到电脑上进入到解压的系统包，输入adb root bootloader 到刷机界面输入 fastboot flash boot &#x2F;path&#x2F;to&#x2F;magisk_patched.img （这里用自己修补后的）刷完之后在输入 fastboot flash recovery &#x2F;path&#x2F;to&#x2F;magisk_patched.img 重启之后就root成功了\nhttps://github.com/LSPosed/LSPosed下载 Riru 压缩包，push到手机&#x2F;sdcard&#x2F;，打开magisk点击模块，选择Riru，安装后下载LSPosed，推送到 &#x2F;sdcard&#x2F;，，打开magisk点击模块，选择LSPosed，安装后重启\n","tags":["刷机"]},{"title":"App带壳重打包去强制升级","url":"/posts/44618/","content":"1.查壳打开app，弹出强制升级无法取消用jadx打开apk\n搜索包名，可以看到是加壳了\n\n2.使用dexdump进行脱壳先打开frida-server，打开objextion并加载dexdump插件，输入plugin  dexdump dump命令进行脱壳，就把dex文件脱出来了\n进入到dex文件的位置，使用grep -ril “MainActivity” *  命令搜索MainActivity再哪个dex，用jadx打开\n3.定位到弹窗代码位置https://www.jianshu.com/p/18e1f518c625根据弹出框的实现方法进行搜索对应的类打印出所有的类，然后输入cat .objection/objection.log |grep -i window 进行搜索\n由于app启动的时候就把弹窗加载出来了，所以要在没加载前hook类使用–startup-command可以重启app并进行hook\nobjection -g com.hello.qqc explore --startup-command &quot;android hooking watch class android.view.Window&quot;\n出现很多的window，无法保证加载的类就是弹窗的\n换一种方式 Dialog搜索dialog有哪些类，出来两个比较可疑的\n先对android.app.Dialog进行hook，看有没有反应查看文档发现setCancelable是不让返回，所以点后退一直没反应)hook这个类android.app.Dialog.setCancelable 查看调用\nandroid hooking watch class_method android.app.Dialog.setCancelable --dump-args --dump-backtrace --dump-return\n\n用jadx搜索观察cn.net.tokyo.ccg.ui.fragment.dialog.UpdateDialogFragment.onCreateDialog\n\n加载wallbreaker搜索该类实例\nplugin wallbreaker objectsearch cn.net.tokyo.ccg.ui.fragment.dialog.UpdateDialogFragment\n查看该对象的属性\nplugin wallbreaker objectdump --fullname 0x74e\n\n4.查找哪句代码控制弹窗查看cn.net.tokyo.ccg.ui.fr agment.dialog.UpdateDialogFragment.b 的调用栈\nandroid hooking watch class_method cn.net.tokyo.ccg.ui.fragment.dialog.UpdateDialogFragment.b --dump-args --dump-backtrace --dump-return\n查看对应smail代码，把eqz改为nez\n5.把壳脱掉重打包看能不能用解包，保留dex文件apktool -s d qqc.apk删除class.dex，把脱下来的dex替换进去\n修改dex执行的入口vim AndroidManifest.xml 修改为cn.net.tokyo.ccg.base.App打包，签名生成签名，keytool -genkey -keystore my-release-key.keystore -alias my_alias -keyalg RSA -keysize 4096 -validity 10000进行签名，jarsigner -sigalg MD5withRSA -digestalg SHA1 -keystore my-release-key.keystore -signedjar qqc.apk qqc.apk my_alias安装，看有没有报错，能不能正常使用\n6.修改smail文件重打包找到对应的smail文件tree -NCfhl |grep -i MainActivity把 if -eqz改为if-nez重打包\n","tags":["脱壳"]},{"title":"Objection命令","url":"/posts/3900/","content":"安装frida 12.8.0全家桶pip install frida==12.8.0pip install frida-tools==5.3.0pip install objection==1.8.4\n\nfrida切换端口\n./frida-server-12.8.10-android-arm64 -v -l 0.0.0.0:9999\n根据端口连接\nfrida -H 192.168.137.148:9999 -F\n查看进程端口\nnetstat -tuulp |grep fs\nobjection通过端口连接\nobjection -N -h 192.168.137.148 -p 9999 -g com.android.settings explore\n\n列出所有的类\nandroid hooking list classes\n在手机上启动frida-server，并且点击启动“设置”图标，手机进入设置的界面，首先查看一下“设置”应用的包名\n# frida-ps -U|grep -i setting 7107  com.android.settings13370  com.google.android.settings.intelligence\n再使用objection注入“设置”应用。\n# objection -g com.android.settings explore\n\n\n查看内存中加载的库\n\n运行命令memory list modules，\n\n查看库的导出函数\n\n运行命令memory list exports libssl.so\n\n将结果保存到json文件中\n\n当结果太多，终端无法全部显示的时候，可以将结果导出到文件中，然后使用其他软件查看内容\n# memory list exports libart.so --json /root/libart.json  Writing exports as json to /root/libart.json...Wrote exports to: /root/libart.json\n\n\n批量Hookobjection -g 包名 explore -c &quot;path&quot;\n搜索文件下含有关键字\ngrep -ril &quot;okhttp3&quot; *\n\n第二种  使用无线WiFi连接首先先了解一点底层的知识：    Android系统底层运行着一个服务（adbd），用于响应和管理大家在电脑端的adb命令连接，这个服务在启动时会根据手机的配置监听USB连接或网络其中之一。配置的属性为：service.adb.tcp.port，也就是监听的网络端口•以上属性的值 &gt; 0：adbd将监听网络对应的端口（一般为5555）•以上属性的值 &lt;&#x3D;-1：adbd将监听USB接下来是连接步骤：命令行输入：adb connect (ip):5555提示：unable to connect to (ip):5555解决办法：   1）手机与PC相连，执行以下命令：adb tcpip 5555     成功提示：restarting in TCP mode port 5555  　  然后断开USB     错误提示：error:device not found     查看手机USB调试是否打开；PC端是否安装手机驱动。   2）接着执行adb connect (ip):5555，这时候应该就能连接成功了     成功提示：connected to (ip):5555调试完成之后，输入如下的命令断开连接：adb disconnect (ip):5555\n列出所有activity\nandroid hooking list activities\n跳到某一个activuty界面\nandroid intent launch_activity ***Activity\n列出所有services\nandroid hooking list services\n从内存中搜索实例类\nandroid heap search instances ***\n搜索到类的方法是否存在\nandroid heap execute 类的地址值 方法名\n查看实例类的地址\nplugin wallbreaker objectsearch ****\n根据地址查看该类属性\nplugin wallbreaker objectdump ****\n\n启动app并执行objection -g 包名 explore --startup-command &quot;android hooking watch ... --dump-args --dump-backtrace --dump-return&quot; \n\nobjection -g 包名 explore -s &quot;android hooking watch ... --dump-args --dump-backtrace --dump-return&quot; \n\n如何使用objection去批量hook和trace？比如一次性hook几千个类？\n把~&#x2F;.objection&#x2F;objection.log删掉；\n到objection界面中运行android hooking list classes，列出所有的类；\n对新生成的~&#x2F;.objection&#x2F;objection.log文件进行过滤，比如只关心http相关的。cat objection.log|grep -i http\n将输出结果保存到一个excel列中，前面补全android hooking watch class xxxxx，另存为文本文件。如附件所示\n加载这个文件：objection -g com.android.settings explore -c “2.txt” ，这样一下子就hook上了几千个相关类的所有方法及其所有重载。\n如果trace感兴趣的方法也是同理，android hooking search methods * ，会打印出所有的方法。\n\n安装objection插件安装FRIDA_DEXDump\ngit clone https://github.com/hluwa/FRIDA-DEXDump ~/Downloads/FRIDA-DEXDump;\n把frida_dexdumpp移到&#x2F;root&#x2F;.objection&#x2F;plugins&#x2F;下\nmv /root/Downloads/FRIDA-DEXDump/frida_dexdump /root/.objection/plugins/\n\n使用方法\nobjection -g com.app.name explore -P ~/.objection/plugins\nhttps://github.com/hluwa/FRIDA-DEXDump\n\n\n安装Wallbreaker\ngit clone https://github.com/hluwa/Wallbreaker ~/.objection/plugins/Wallbreaker\nhttps://github.com/hluwa/Wallbreaker\n\n\nwallbreaker导入(win下)\nplugin load .objection/plugins/Wallbreaker\n查看类的结构\nplugin wallbreaker classdump ***\n根据名字找类\nplugin wallbreaker classsearch ***\n查看类的实例的内容\nplugin wallbreaker objectdump --fullname ***\n找出类的实例\nplugin wallbreaker objectsearch ***\n","tags":["frida"]},{"title":"python调用js的几种方式","url":"/posts/53763/","content":"1.PyExecJS安装依赖pip3 install PyExecJS新建add.js文件\nfunction add(a,b)&#123;    return a+b;&#125;\n\npy文件去调用\nimport execjswith open(&#x27;add.js&#x27;, &#x27;r&#x27;, encoding=&#x27;UTF-8&#x27;) as f:    js_code = f.read()context = execjs.compile(js_code)result = context.call(&quot;add&quot;, 2, 3) // 参数一为函数名，参数二和三为函数的参数print(result)\n运行结果：\n5\n\n\n2.js2py#安装依赖库pip3 install js2py还是上面的add.js文件python调用\nimport js2pywith open(&#x27;add.js&#x27;, &#x27;r&#x27;, encoding=&#x27;UTF-8&#x27;) as f:    js_code = f.read()context = js2py.EvalJs()context.execute(js_code)result = context.add(&quot;1&quot;, &quot;2&quot;)print(result)\n\n\n3.Node.js实际上是使用 Python 的os.popen执行 node 命令，执行 JS 脚本首先，确保本地已经安装了 Node.js 环境对js代码添加打印\nfunction add(a,b)&#123;    return Number(a)+Number(b);&#125;console.log(add(process.argv[2], process.argv[3]));  // 运行脚本传进来的参数\n\n用python调用控制台方式去使用\nimport osnodejs = os.popen(&#x27;node add.js &#x27;+&#x27;2&#x27;+&#x27; &#x27;+&#x27;3&#x27;)m = nodejs.read()nodejs.close()print(m)\n\n或者使用另一种方式\nfunction add(a,b)&#123;    return Number(a)+Number(b);&#125;// console.log(add(process.argv[2], process.argv[3]));//新增一个导出函数（node方式）module.exports.init = function (arg1, arg2) &#123;    //调用函数，并返回    console.log(add(arg1, arg2));&#125;;\n\nimport oscmd = &#x27;node -e &quot;require(\\\\&quot;%s\\\\&quot;).init(%s,%s)&quot;&#x27; % (&#x27;./add.js&#x27;, 2, 3)pipeline = os.popen(cmd)result = pipeline.read()print(result)\n\n\n4.node服务用node做一个服务，提供api还是add.js文件\nfunction add(a,b)&#123;    return Number(a)+Number(b);&#125;module.exports =  &#123;    add: function (arg1, arg2) &#123;        return add(arg1, arg2);    &#125;&#125;;\n\n新建add_api.js下载 express 和 body-parser 两个包\nvar express = require(&#x27;express&#x27;)var app = express()var func = require(&#x27;./add.js&#x27;)  // 导入js模块，并命名为funcvar bodyParser = require(&#x27;body-parser&#x27;);  // 导入请求体解析器// 调整参数大小限制，否则会提示参数过大。app.use(bodyParser.urlencoded(&#123;limit: &#x27;50mb&#x27;, extended: true&#125;));// 设置路由app.post(&#x27;/add&#x27;, function(req, res) &#123;    // 获取请求的真实IP\tvar ip = req.headers[&#x27;x-real-ip&#x27;] ? req.headers[&#x27;x-real-ip&#x27;] : req.ip.replace(/::ffff:/, &#x27;&#x27;);\t// 获取请求时间\tvar time = new Date().toString().replace(/\\+0800.*/, &#x27;&#x27;);\t// 打印请求时间、IP、方法、路由\tconsole.log(&#x27;INFO:&#x27;, time, ip, req.method, req.originalUrl, &#x27;200 OK!&#x27;);\t// 获取POST请求的formdata\tlet result = req.body;\t// let code = result.code;    // let seed = result.seed;    // let ts = result.ts;    console.log(&quot;result: &quot;, result);\tconsole.log(&quot;num1: &quot;, result.num1);\tconsole.log(&quot;num2: &quot;, result.num2);\t// 调用cook模块中的get_cookie方法，该方法需要提前module.exports导出\tvar response = func.add(result.num1, result.num2);\t// 设置响应头，如果不设置，通过asyncio_requests请求的res.json()会报错，因为它是根据响应头解析json数据\t// 而requests可以直接使用res.json()解析，因为它是根据响应信息解析\tres.set(&#x27;Content-Type&#x27;, &#x27;application/json&#x27;)\t// 将JSON后的数据返回客户端\tres.send(JSON.stringify(&#123;&quot;result&quot;: response&#125;));&#125;);app.listen(8919, () =&gt; &#123;\tconsole.log(&quot;开启服务，端口8919&quot;, new Date().toString().replace(/\\+0800.*/, &#x27;&#x27;))&#125;)\n\n运行，用python写个post请求\nimport requestsresponse = requests.post(&quot;http://127.0.0.1:8919/add&quot;, data=&#123;&quot;num1&quot;: 2, &quot;num2&quot;: 3&#125;)print(response.text)\n运行结果:\n&#123;&quot;result&quot;: 5&#125;\n\n","tags":["js"]},{"title":"某东实时弹幕抓取","url":"/posts/57543/","content":"1.抓包，查找sign对于已经拿到sign只想看弹幕的部分直接跳到4。\n用的抓包工具是HttpCanary，随便进入一间直播间，可以看到弹幕走的是websocket，携带的url参数token来自于下面post返回的结果，经过分析只有st,sign,sv三个参数会变，其余都不变。既然分析完了，那就从sign开始入手。当时我找这个sign找了一会没找出来，由于sign会跟其它参数拼接成url，所以我就搜其它参数wifiBssid，搜出来很明显就在第一个。这里hook这个getReportString方法，把它的调用堆栈打印出来，然后去查看。这里我就直接贴出来了，省得大家浪费时间去找，眼尖的可以看到里面有signature，不就跟我们要的sign很像吗，这里把b方法三个参数hook打印一下，进到signature这个方法，可以看到这只是接口，那就搜索这个类，看它在哪里被实现。被getSignFromJni方法实现了，再深入看一下，可以看到加密过程在so里面。这里就直接hook这个函数打印参数，多调用几次，然后跟抓到的数据做对比，看哪些参数不变。经过我的测试，这些参数不用修改，可以直接拿过来用，而且都是string类型的，也不用做什么类型转换。返回值的st，sign，sv都是组成url需要的参数，而且这里的参数v3是post的body的值。\n2.使用rpc进行调用这里就直接使用rpc进行调用就可以了，根据它的参数照搬就可以了。\nimport fridaimport jsonrpc_sign = &quot;&quot;&quot;rpc.exports = &#123;    getsign: function(function_id, body_string, uuid)&#123;      var sig = &quot;&quot;;      Java.perform(        function()&#123;            //拿到context上下文            var currentApplication = Java.use(&#x27;android.app.ActivityThread&#x27;).currentApplication();            var context = currentApplication.getApplicationContext();            var BitmapkitUtils = Java.use(&#x27;com.jingdong.common.utils.BitmapkitUtils&#x27;);            sig = BitmapkitUtils.getSignFromJni(context, function_id, body_string, uuid, &#x27;android&#x27;, &#x27;9.2.0&#x27;);        &#125;       )       return sig;    &#125;&#125;;&quot;&quot;&quot;def get_sign(function_id, body_string, u):    process = frida.get_remote_device().attach(&#x27;com.jingdong.app.mall&#x27;)    script = process.create_script(rpc_sign)    script.load()    sign = script.exports.getsign(function_id, body_string, u)    return signbody_data = &#123;&quot;appId&quot;:&quot;jd.mall&quot;,&quot;content&quot;:&quot;tbV8seY199tCdw6GllmkWyCNNENuGsgwLByA7svt5HbPXvlI9wQhHMk3dT7f0ldfpq6M0MCiUD+A\\nVrY390Yct0FSub03INUml9n1bS9rZSF3XT0q1kQdehKPO4CccMiEA6NQXYiqYn9wLsDDYEIjmkVA\\nEbXI88CwO0K7uhwemdhQMZrcIFj6jMmyiDNDxSA1OjFw88hR0oSCF0m8ll9o9iU2MVSHDipF5ZDn\\nFR4E+82mwfRYIxamafB+nWG8GuHcKhiQOWGbChTcG3TxcGT053wfcc6uuMD7+L4PcsNRQjM9syFc\\nXR6FBu/sCV/kH/3rT8w/m3zV1c9JpW9lq/7WVzCVvAIj7RNt2zzYFisymCE=&quot;&#125;body_string = json.dumps(body_data, ensure_ascii=False).replace(&quot; &quot;, &quot;&quot;)function_id = &#x27;liveauth&#x27;u = &#x27;-a08d16f38776&#x27;sign = get_sign(function_id, body_string, u)print(sign)\n结果：\nst=1608288325570&amp;sign=bf449b04f88afea4c08e18006127cace&amp;sv=121\n\n3.构造请求拿到认证上面只是拿到了sign，还得拼接url进行请求，这里就不展示了，要的参数基本都有了，其它不变的参数照搬就行，我就直接post请求拿结果了。\n&#123;&#x27;code&#x27;: 0, &#x27;msg&#x27;: &#x27;鉴权成功&#x27;, &#x27;data&#x27;: &#123;&#x27;liveUrl&#x27;: &#x27;wss://live-ws4.jd.com&#x27;, &#x27;token&#x27;: &#x27;amQubWFsbF_muLjlrqJfOTMxMTE0MzY4NDNfMTYwODI3OTE4NzA5NGxTNkViVw==&#x27;&#125;&#125;\n\n4.建立WebSocket保存刚才请求websocket，打开可以看到它请求的参数。\n&#123;  &quot;app&quot;: &quot;com.jingdong.app.mall&quot;,  &quot;host&quot;: &quot;live-ws4.jd.com&quot;,  &quot;remoteIp&quot;: &quot;106.39.169.212&quot;,  &quot;remotePort&quot;: 443,  &quot;sessionId&quot;: &quot;c77ac6e9-019d-4ac9-8611-92f24eb29851&quot;,  &quot;time&quot;: &quot;2020-12-19 23:48:18&quot;,  &quot;url&quot;: &quot;wss://live-ws4.jd.com/?token\\u003damQubWFsbF_muLjlrqJfMjg5NDU0ODc3NDZfMTYwODI3Mjg5ODE0NFdSb0xibw\\u003d\\u003d&quot;&#125;\n\n怎么建立WebSocket连接呢？这里就需要用到python的aiowebsocket库。详细的说明和使用方法请看：https://zhuanlan.zhihu.com/p/82089648代码如下\nimport asyncioimport loggingfrom datetime import datetimefrom aiowebsocket.converses import AioWebSocketimport LiveBarrageimport jsonasync def startup(uri):    async with AioWebSocket(uri) as aws:        converse = aws.manipulator        # 客户端给服务端发送消息        a = &#123;            &quot;aid&quot;: &quot;dongdong&quot;,            &quot;body&quot;: &#123;&quot;ext&quot;:                        &#123;&quot;appid&quot;:&quot;jd.mall&quot;,                        &quot;entrace&quot;:&quot;6&quot;,                        &quot;ver&quot;:&quot;1.1&quot;&#125;,                    &quot;groupid&quot;:&quot;3092724&quot;, # 这个是房间号                    &quot;nickName&quot;:&quot;神秘观众&quot;,                    &quot;type&quot;:&quot;join_live_broadcast&quot;&#125;,            &quot;from&quot;:&#123;&quot;app&quot;:&quot;jd.live&quot;,                    &quot;clientType&quot;:&quot;android&quot;,                    &quot;dvc&quot;:&quot;-a08d16f38776&quot;,                    &quot;pin&quot;:&quot;&quot;&#125;,            &quot;id&quot;:&quot;df09a645-8e9b-4aad-b699-d44753ca8738&quot;,            &quot;type&quot;:&quot;chat_group_message&quot;,            &quot;ver&quot;:&quot;9.3.2&quot;        &#125;        # 把json转换为字符串        body_string = json.dumps(a, ensure_ascii=False).replace(&quot; &quot;, &quot;&quot;)        # print(body_string)        await converse.send(body_string)        while True:            mes = await converse.receive()            # 设置编码            mes = mes.decode(&#x27;utf8&#x27;)            # nickName是用户名，判断nickName可以过滤非弹幕消息            if &#x27;nickName&#x27; in mes:                print(&#x27;&#123;time&#125;-Client receive: &#123;rec&#125;&#x27;                    .format(time=datetime.now().strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;), rec=mes))if __name__ == &#x27;__main__&#x27;:    token = LiveBarrage.token()  # 这里返回的是post请求后拿到的token    #remote = &#x27;wss://api.bbxapp.vip/v1/ifcontract/realTime&#x27;    print(token)    try:        asyncio.get_event_loop().run_until_complete(startup(token))    except KeyboardInterrupt as exc:        logging.info(&#x27;Quit.&#x27;)\n\n运行结果如下：\n可以看到是实时抓取的，到这里就结束了。\n5.其它接口这个app的接口参数都是一样的，不同的接口由functionId这个参数决定的。\n这里我就把其它的接口名发出来，然后post的参数hook查看一下照搬就可以了。搜索 search商品评价列表 getCommentListWithCard问答 getQuestionList直播带货商品 liveCartDetail弹幕 liveauth\n","tags":["抓包","安卓逆向"]},{"title":"App解固脱壳方式","url":"/posts/10237/","content":"样例app下载链接\n一、常见的壳通常是看lib文件夹下so库特征，以下是市面上常见的不同厂商对APP的加固特征：爱加密：libexec.so,libexecmain.so，ijiami.dat 梆梆： libsecexe.so,libsecmain.so , libDexHelper.so libSecShell.so360：libprotectClass.so,libjiagu.so，libjiagu_art.so，libjiagu_x86.so 百度：libbaiduprotect.so 腾讯：libshellx-2.10.6.0.so，libBugly.so，libtup.so, libexec.so，libshell.so，stub_tengxun 网易易盾：libnesec.so为什么要加固：     一定程度保护源代码加固方式：    .dex加固 .so加固 \n二、加固原理壳dex 读取源dex文件，加密后，写进一个新的dex文件\n新APK运行 先加载壳APP—&gt;壳APP读Dex文件末尾的源APKD大小—-&gt;在内存中壳APP解密出源APP—&gt;运行源APP 壳APK有自己的Application对象 源APK有自己的Application对象 壳APK启动时 在AndroidMenifest.xml里找源APK的Application 执行它的oncreate方法 启动源APK Dex文件格式：  任何类型的文件都有文件格式，对应的软件按照文件格式来就能解析出类型，.xml .json .jpeg\n三、如何查看有没有壳用apktool对apk进行反编译，或者修改apk的后缀为zip，进行解压。查看解压后的文件下的lib目录，可以看到这两个是用了腾讯的乐加固，或者我们不确定的话可以用jadx打开apk，也是可以发现的都是壳的代码。不过即使怎么加壳，它都会去调源apk的Application，打开AndroidManifest.xml文件，可以看到，上面一个是壳的，下面是源apk的Application。逆向&#x2F;脱壳方法 反编译&#x2F;Hook技术和动态调试 Hook：先取得要Hook函数&#x2F;方法的控制权，不用破坏程序 动态调试：反调试，汇编，计算内存地址\n四、Hook技术改变程序执行流程的一种技术 在函数被调用前，通过HOOK技术，先得到该函数的控制权，实现该函数的逻辑改写Hook可以在在Java层、Native层（.so库） 在代码层 寻找要Hook的地方 进行Hook 改下代码逻辑\n五、脱壳工具脱壳原理：在壳APK解密源APK后，源APK被加载前，拦截这个过程中的系统函数 把内存种Dex dump出来。\n手动脱壳：通过动态调试，跟踪计算Dex源文件的内存偏移地址，从内存中Dump出Dex文件 ，难度大，寄存器，汇编，反调试，反读写  IDA。\n工具脱壳：    HOOK技术&#x2F;内存特征寻找  简单易操作  \n基于xposed 脱壳工具：          Fdex2：Hook ClassLoader loadClass方法         通用脱壳  dumpDex：https://github.com/WrBug/dumpDex逆向框架： 筑好底层 提供开发接口xposed（Java 编译，只能在java层）  frida（Python Javascript 代码注入，可以hook住java层、Native层） \n六、开始脱壳（用FDex2脱壳）首先我们打开xposed，把FDex2打开，并选择我们要的app接下来就可以运行app，然后我们去/data/user/0/com.iCitySuzhou.suzhou001该目录下查看，多出来两个dex文件把这两个文件拉到电脑用kadx打开，第一个是壳打开第二个很明显看到这才是源apk的源码，而且可以发现它对源码进行混淆了所以到这里我们的脱壳就成功了。\n七、开始脱壳（用Frida脱壳）Frida脱壳function_address = Module.findExportByName(libname, function);Interceptor.attach(address, func);Interceptor.attach(address, onEnter: function (args) &#123; &#125;, onLeave: function (retval) &#123; &#125;)File 模块 写文件流程 new File(filepath, mode) write(data) flush() close()file = new File(&quot;yuanrenxue.dex&quot;, &quot;wb&quot;)//data 是字符串或者 arrayBuffer // readByteArray() 返回的arrayBufferfile.write(data)file.flush()file.close()//把内存里的值转成字符串Memory.readUtf8String()//把内存里的值转换成整型Memory.readInt()//以begin为起始位置，从内存中读length长度的数据出来 返回ArrayBuffer类型Memory.readByteArray(begin, length)//把地址转换成NativePointer类型 frida里操作内存地址需要NativePointer类型ptr()JS api#把其它进制转换成10进制parseInt(num, radix)\n加壳apk运行流程：app启动后–&gt;壳dex先加载起来–&gt;把源classes.dex读出来–&gt;解密源classes.dex–&gt;把源classes.dex给加载进内存–&gt;源dex运行起来下两篇文章都对dex进行了详解Dex文件格式详解 https://www.jianshu.com/p/f7f0a712ddfeART 加载dex文件 https://www.jianshu.com/p/f81242ad8cb7\ndex文件结构\n\n\n数据名称\n解释\n\n\n\nheader\ndex文件头部，记录整个dex文件的相关属性\n\n\nstring_ids\n字符串数据索引，记录了每个字符串在数据区的偏移量\n\n\ntype_ids\n类似数据索引，记录了每个类型的字符串索引\n\n\nproto_ids\n原型数据索引，记录了方法声明的字符串，返回类型字符串，参数列表\n\n\nfield_ids\n字段数据索引，记录了所属类，类型以及方法名\n\n\nmethod_ids\n类方法索引，记录方法所属类名，方法声明以及方法名等信息\n\n\nclass_defs\n类定义数据索引，记录指定类各类信息，包括接口，超类，类数据偏移量\n\n\ndata\n数据区，保存了各个类的真是数据\n\n\nlink_data\n连接数据区\n\n\nheader简单记录了dex文件的一些基本信息，以及大致的数据分布。长度固定为0x70,其中每一项信息所占用的内存空间也是固定的，好处是虚拟机在处理dex时不用考虑dex文件的多样性\n\n\n\n字段名称\n偏移值\n长度\n说明\n\n\n\nmagic\n0x0\n8\n魔数字段，值为”dex\\\n\n\n035\\0”（固定的）\n\n\n\n\n\nchecksum\n0x8\n4\n校验码\n\n\nsignature\n0xc\n20\nsha-1签名\n\n\nfile_size\n0x20\n4\ndex文件总长度\n\n\n……\n……\n…..\n……\n\n\n字段太多就不都展示出来，可以看到file_size这个就是我们要找的dex文件,因为源dex解密后会加载进内存，所以我们去Hook加载Dex的函数，把Dex从内存中dump出来。下面这个函数就是把解密后的源dex加载进内存：DexFile::OpenMemory(const uint8_t* base,   size_t size,   const std::string&amp; location,    uint32_t location_checksum,    MemMap* mem_map,&#x2F;&#x2F;nullptr const OatDexFile* oat_dex_file,    std::string* error_msg)OpenMemory()是在安卓系统/system/lib/libart.so里面，然后我们先把这个so文件拉到电脑用IDA打开打开IDA选择静态调试，打开libart.so这个文件这些就是so文件里面的函数，点击这个框，按ctrl+f进行搜索，输入OpenMemory这个函数，右键进行编辑，_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_这个字符串就是OpenMemory函数在内存中对外的方法名，我们打开IDA就是为了找这个方法名。\n现在来写脚本：\nimport fridaimport syspackage = &quot;com.iCitySuzhou.suzhou001&quot;open_memory_6 = &quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_&quot;#OpenMemory 在libart.so中  art虚拟机(安卓5)  davlink虚拟机（安卓4）#Hook OpenMemory的导出方法名#用IDA 打开libart.so 查看OpenMemory的导出方法名#OpenMemory的第一个参数是dex文件在内存中的起始位置#根据dex文件格式 从起始位置开始 第32个字节 是该dex文件的大小#知道dex起始位置和整个文件大小，只需要把这段内存dum出来即可#适用于 安卓 6 7 8 9#文件的起始位置 文件的大小 知道了文件的结束位置def on_message(message, data):    if message[&#x27;type&#x27;] == &#x27;send&#x27;:        print(&quot;[*] &#123;0&#125;&quot;.format(message[&#x27;payload&#x27;]))    else:        print(message)src = &quot;&quot;&quot;//找so文件某个方法地址，找openMemory的内存地址var openMemory_address = Module.findExportByName(&quot;libart.so&quot;, &quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_&quot;);send(&#x27;openMemory address:&#x27;+openMemory_address)//hook openMemory地址Interceptor.attach(openMemory_address, &#123;    //一进入openMemory，就会调用onEnter方法    onEnter: function (args) &#123;        //dex文件的起始位置        var dex_begin_address = args[1]        //dex文件的前8个字节是magic字段 看dex的文件格式说明        //打印magic（会显示 &quot;dex 035&quot;） 三个字符 可以验证是否为dex文件         console.log(&quot;magic : &quot; + Memory.readUtf8String(dex_begin_address))        //把地址转换成整型（十进制） 再加32         //因为dex文件的第32个字节处存放的是 dex文件的大小        var address = parseInt(dex_begin_address, 16) + 0x20        //把address地址指向的内存值读出来 该值就是dex的文件大小        //ptr(address)转换的原因是 frida只接受 NativePointer类型指针        var dex_size = Memory.readInt(ptr(address))        console.log(&quot;dex_size :&quot; + dex_size)                //frida写文件 把内存中的数据 写到本地        var timestamp = new Date().getTime();        var file = new File(&quot;/data/data/%s/&quot; + timestamp + &quot;.dex&quot;, &quot;wb&quot;)        //Memory.readByteArray(begin, length)        //把内存里的数据读出来，从begin开始读，取length长度        file.write(Memory.readByteArray(dex_begin_address, dex_size))        file.flush()        file.close()        send(&quot;dex begin address:&quot;+parseInt(dex_begin_address,16))        send(&quot;dex file size:&quot;+dex_size)    &#125;,    onLeave: function (retval) &#123;        if (retval.toInt32() &gt; 0) &#123;        &#125;    &#125;&#125;);&quot;&quot;&quot;%(package)print(&quot;dex 导出目录为: /data/data/%s&quot;%(package))device = frida.get_usb_device()pid = device.spawn(package)session = device.attach(pid)script = session.create_script(src)script.on(&quot;message&quot; , on_message)script.load()device.resume(pid)sys.stdin.read()\n把frida-server运行起来 hook需要app运行，先把app打开，再运行脚本，我们去手机/data/data/com.iCitySuzhou.suzhou001目录下查看，会多了几个dex文件把这些dex文件拉到电脑用jadx打开看下，一个个查看后，找到了源dex到这里用frida脱壳也成功了。。。\n补充壳的种类⾮常多，根据其种类不同，使⽤的技术也不同，这⾥稍微简单分个类：\n\n⼀代整体型壳：采⽤ Dex 整体加密，动态加载运⾏的机制；\n⼆代函数抽取型壳：粒度更细，将⽅法单独抽取出来，加密保存，解密执⾏；\n三代 VMP、Dex2C 壳：独⽴虚拟机解释执⾏、语义等价语法迁移，强度最⾼。\n\n先说最难的 Dex2C ⽬前是没有办法还原的，只能跟踪进⾏分析； VMP 虚拟机解释执⾏保护的是映射表，只要⼼思细、功夫深，是可以将映射表还原的；\n⼆代壳函数抽取⽬前是可以从根本上进⾏还原的， dump 出所有的运⾏时的⽅法体，填充到 dump 下来的 dex 中去的，这也是fart的核⼼原理。\nfrida-Dexdumphttps://github.com/hluwa/FRIDA-DEXDump\n利⽤ frida 的搜索内存，通过匹配 DEX ⽂件的特征，例如 DEX ⽂件的 文件头 中的 magic — dex.035 这个特征。 frida-Dexdump 便是这种脱壳⽅法的代表作。\n\n对于于完整的 dex，采⽤暴⼒搜索 dex035 即可找到。\n⽽对于抹头的 dex，通过匹配⼀些特征来找到，然后⾃动修复⽂件头。\n\n抽取 -&gt; invoke -&gt; 还原 -&gt; 再抽取\n","tags":["脱壳"]}]